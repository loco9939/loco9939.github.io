
<!DOCTYPE html>
<html lang="ko">
    <link rel="canonical" href="https://loco9939.github.io/2022/10/31/react/react(리액트)는 어떻게 작동하는가"/>

<head>
    <meta name="google-site-verification" content="7ur7A9bi79NuylPOO6FjMynEeinWe-v-kmDPZD-bcqY" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="generator" content="Loco&#39;s Dev Blog">
    <title>React(리액트)는 어떻게 작동하는가? - Loco&#39;s Dev Blog</title>
    <meta name="author" content="loco9939">
    
        <meta name="keywords" content="loco9939,javascript,">
    
    
    
        
            <link rel="alternate" type="application/atom+xml" title="RSS" href="/atom.xml">
        
    
    <script type="application/ld+json">{"@context":"http://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"loco9939","sameAs":["https://github.com/","http://stackoverflow.com/users","https://twitter.com/","https://facebook.com/","https://plus.google.com/","https://www.linkedin.com/profile/","mailto"]},"articleBody":"\n  bold {\n    font-weight:700;\n    font-size:1rem;\n  }\n  \n  red {\n    color:red;\n    font-size:1rem\n  }\n\n\n📌 React란?화면에 렌더링되는 UI를 컴포넌트 단위로 쪼개 사용할 수 있는 Javascript 라이브러리리 혹은 프레임워크이다.라이브러리인가? 프레임워크인가?는 크게 중요하지 않다. 우리가 중점적으로 생각해야할 부분은 리액트는 Progressive(점진적)이라는 것이다.\n특징\n리액트는 점진적이므로 애플리케이션을 모두 리액트로 구성할 필요가 없다.\n\n리액트는 Javascript 중점 라이브러리이다. 그러므로 자바스크립트를 잘하면 재밌을 것이다.\n\n리액트는 별도의 설치가 필요없이 컴포넌트를 즉시 사용해볼 수 있다.\n\n선언형 프로그래밍으로 명령형 프로그래밍보다 코드를 이해하기가 쉽다.\n\n리액트를 배우면 웹, 리액트 네이티브를 배우면 모바일 등 한가지를 배워 확장성이 넓다.\n\n\n시작하기 전1. React API 라이브러리를 사용하여 UI를 구상하는 VitualDOM을 생성한다.12// CDN&lt;script src=&quot;//unpkg.com/react@17/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;\n\n\n만약 버전을 변경하고 싶다면 @version을 써준다.\n\n만약 IE를 고려 해야한다면 17 버전을 사용하고 그렇지 않다면 18 버전 사용하자.\n\n\n2. ReactDOM API 라이브러리를 사용하여 VirtualDOM을 RealDOM에 렌더링하여 UI를 구현한다.1&lt;script src=&quot;//unpkg.com/react-dom@17/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;\n\n\nReact API와 버젼을 일치시켜 줘야한다.\n\n💡 React v17의 render()와 v18의 createRoot() 차이\n1234567// version 17const app = React.createElement(&#x27;div&#x27;);ReactDOM.render(app,    document.getElementById(&#x27;root&#x27;),    () =&gt; &#123;console.log(&#x27;rendered!&#x27;)&#125;    );\n\n\n렌더링할 React 요소인 app을 인자로 전달하고 이를 렌더링할 container인 root container를 render()에 전달한다.\n\n리액트 버전 18부터 render() 대신 createRoot()를 사용한다.\n1createRoot(container[, options])\n\n123456// version 18const root = createRoot(document.getElementById(&#x27;root&#x27;));const element = &lt;h1&gt;Hello, world&lt;/h1&gt;; // JSXroot.render(element);\n\n문서의 RealDOM 요소 노드인 container를 React Root로 만들어 반환하고, React Root를 render() 메서드를 사용하여 React 요소를 RealDOM에 렌더링한다.\n실습1. React 요소 노드와 Real DOM 요소 노드 차이1234567891011121314151617// Realconst headlineNode = document.createElement(&#x27;h1&#x27;);headlineNode.classList.add(&#x27;headline&#x27;);headlineNode.setAttribute(&#x27;land&#x27;,&#x27;en&#x27;);headlineNode.insertAdjacentHTML(&#x27;beforeend&#x27;, `Add &lt;strong&gt;React&lt;/strong&gt; to a Website`);// Reactconst headlineVnode = React.createElement(  &#x27;h1&#x27;,  &#123;    className : &#x27;headline&#x27;,    lang: &#x27;en&#x27;  &#125;,   &#x27;Add &#x27;,  React.createElement(&#x27;strong&#x27;, null, &#x27;React&#x27;),  &#x27;to a Website&#x27;)\n\n\n\nRealDOM 요소 노드는 브라우저가 렌더링하면서 생성한 것이고 이와 달리 React 요소 노드는 Object(객체)로 그 형태가 다르게 생겼다.\n\n위 사진을 보면 props라는 객체에 children, className, lang 등이 담겨있는 것을 알 수 있다. props에 대해서는 이후에 알아보자.\n\n\n❗️ StrictMode 오류 해결\nECMAScript에서 ‘use strict’ 사용하여 문법적 오류를 미리 알려주었듯이 React에서도 이러한 오류를 미리 알려준다.\n이에 대한 경고를 해결하기 위해서는 StrictMode 컴포넌트를 사용해야한다.\n12345React.createElement(    React.StrictMode,    null,    React.createElement(App, &#123; children: [headline, reactLogo] &#125;)  )\n\n사용법은 간단하다. 생성하려는 React 요소를 React.StrictMode의 자식 요소로 전달해주면 된다.\n2. React Component vs React Element자바스크립트에서는 재사용을 위해 함수를 사용하고 리액트에서는 재사용을 위해 컴포넌트를 사용한다. 컴포넌트 생성 방법은 함수를 생성하듯이 생성할 수 있다.\n1234567891011function SvgPath(props) &#123;    return React.createElement(&#x27;path&#x27;,&#123;        d: props.d,        fill: &#x27;currentColor&#x27;    &#125;);&#125;const App = props =&gt; React.createElement(&#x27;div&#x27;,    &#123; className: &#x27;App&#x27; &#125;,    ...props.children);\n\n\n리액트 컴포넌트는 매개변수로 props를 받는다.\n\nprops 객체를 통해 다른 컴포넌트에게 본인의 HTML attributes, 자바스크립트 값(객체, 배열, 함수 등)을 전달해줄 수 있다.\n\n함수선언식, 함수표현식 둘 다 가능하다.\n\n\n하지만 createElement()를 사용하여 컴포넌트를 생성하는 것은 매우 번거로운 일이다. 그 대안으로 생겨난 것이 바로 JSX이다.\nJSX란?JSX는 리액트 컴포넌트 사용을 HTML 처럼 사용하기 위해 생겨났다. JSX는 XML 처럼 생긴 문법 표현식이다.\n12345678910const name = &#x27;loco&#x27;;const element = (    &lt;h1&gt;        안녕하세요~! &#123;name&#125;    &lt;/h1&gt;);// rendered&lt;h1&gt;안녕하세요~! loco&lt;/h1&gt;\n\n자동 세미콜론 삽입이 되는 것을 방지하기 위해 괄호로 감싸는 것을 추천한다.\n특징\n선언형, HTML과 비슷한 구조, {}를 사용한 데이터 바인딩이 편리하다.\n\n브라우저엔진에 의해 해석되지 못하므로 babel이 컴파일을 해줘야만 한다.\n\nHTML 보단 JS에 가까우므로 camelCase 명명규칙을 따른다.\n\nJSX는 렌더링하기 전에 이스케이프하므로 애플리케이션에서 명시적으로 작성되지 않는 내용은 script에 주입되지 않아 XSS 공격으로부터 안전하다.\n\n\n❗️ React에서 babel 추가 설정\n\n\n이전에 React를 사용하기 전에 설정해두었던 babel 사양에서는 React를 컴파일 해줄 수 없다.\n\n컴포넌트를 모듈 파일로 구분할 때에 babel은 input으로 지정된 파일만 컴파일 해주고 input 파일에서 import한 파일까지 컴파일해주지 않는다.\n\n\n위 2가지 문제 해결을 위해서는 플러그인을 설치 해줘야한다.\n1npm i -D @babel/preset-react\n\n123456789101112131415// babel.config.jsmodule.exports = &#123;  comments: false,  presets: [    [      &#x27;@babel/preset-env&#x27;,      &#123;        modules: false,        loose: true,      &#125;,    ],    &#x27;@babel/preset-react&#x27;,  ],&#125;;\n\n\n설치가 끝났다면 babel.config.js 파일에 해당 플러그인을 사용할 것이라고 등록을 해줘야 정상 동작한다.\n\n옵션값이 있을 경우 []로 감싸서 넣어주고 그렇지 않은 경우 문자열로만 추가한다.\n\n\nJSX로 컴포넌트 생성하기이제 JSX를 사용할 준비가 끝났으니 JSX를 사용하여 컴포넌트를 생성해보자.\n1234567891011121314151617181920const HeadLine = () =&gt; (    &lt;h1 className=&quot;headline&quot; lang=&quot;en&quot;&gt;        Add &lt;strong&gt;React&lt;/strong&gt; to a Website    &lt;/h1&gt;);const App = () =&gt; &#123;    &lt;div className=&quot;App&quot;&gt;        &lt;HeadLine&gt;&lt;/HeadLine&gt;    &lt;/div&gt;&#125;const container = document.getElementById(&#x27;react-root&#x27;);const ReactDOMRoot = ReactDOM.createRoot(container);ReactDOMRoot.render(    &lt;React.StrictMode&gt;        &lt;App /&gt;    &lt;/React.StrictMode&gt;);\n\n\nReact.createElement()를 사용하여 React Element를 생성하여 컴포넌트를 생성하는 방법보다 훨씬 편리하다는 것을 알 수 있다.\n\n🏓 소감리액트 수업을 듣고 배운것을 차근차근 익혀가면서 정리해보았다. props에 대한 개념도 확실히 잡히고, JSX를 왜 쓰게 되었는지, 안쓰면 무엇인 문제점이고 불편한지를 깨달을 수 있는 시간이여서 좋았다.\n공식문서를 읽어볼 때도 영어로 된 것을 자동번역하여 읽지 않고 원문을 보면서 읽으니 시간이 조금 더디지만 그렇기 때문에 기억에 더 오래 남을 것이라고 생각하여 영어로 읽는 연습을 하고있다.\n","dateCreated":"2022-10-31T19:13:18+09:00","dateModified":"2023-01-30T13:57:38+09:00","datePublished":"2022-10-31T19:13:18+09:00","description":"","headline":"React(리액트)는 어떻게 작동하는가?","image":[],"mainEntityOfPage":{"@type":"WebPage","@id":"https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"},"publisher":{"@type":"Organization","name":"loco9939","sameAs":["https://github.com/","http://stackoverflow.com/users","https://twitter.com/","https://facebook.com/","https://plus.google.com/","https://www.linkedin.com/profile/","mailto"]},"url":"https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/","keywords":"JSX, React.createElement, React.createRoot"}</script>
    <meta name="description" content="bold {     font-weight:700;     font-size:1rem;   }      red {     color:red;     font-size:1rem   }   📌 React란?화면에 렌더링되는 UI를 컴포넌트 단위로 쪼개 사용할 수 있는 Javascript 라이브러리리 혹은 프레임워크이다.라이브러리인가? 프레임워크인가?는 크">
<meta property="og:type" content="blog">
<meta property="og:title" content="React(리액트)는 어떻게 작동하는가?">
<meta property="og:url" content="https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80">
<meta property="og:site_name" content="Loco&#39;s Dev Blog">
<meta property="og:description" content="bold {     font-weight:700;     font-size:1rem;   }      red {     color:red;     font-size:1rem   }   📌 React란?화면에 렌더링되는 UI를 컴포넌트 단위로 쪼개 사용할 수 있는 Javascript 라이브러리리 혹은 프레임워크이다.라이브러리인가? 프레임워크인가?는 크">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://loco9939.github.io/images/React.createElement/React.createElement.png">
<meta property="og:image" content="https://loco9939.github.io/images/React.babel/React.babel.png">
<meta property="article:published_time" content="2022-10-31T10:13:18.000Z">
<meta property="article:modified_time" content="2023-01-30T04:57:38.997Z">
<meta property="article:author" content="loco9939">
<meta property="article:tag" content="JSX">
<meta property="article:tag" content="React.createElement">
<meta property="article:tag" content="React.createRoot">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://loco9939.github.io/images/React.createElement/React.createElement.png">
    
    
        
    
    
    
    
    
    <!--STYLES-->
    
<link rel="stylesheet" href="/assets/css/style-alaac2o0p8lb5n7mx8aazw1dzhwcsltexgjtf9twurzytkujqiefoq1soijy.min.css">

    <!--STYLES END-->
    

    

    
        
    
</head>

    <body>
        <div id="blog">
            <!-- Define author's picture -->


    

<header id="header" data-behavior="4">
    <i id="btn-open-sidebar" class="fa fa-lg fa-bars"></i>
    <div class="header-title">
        <a
            class="header-title-link"
            href="/"
            aria-label=""
        >
            Loco&#39;s Dev Blog
        </a>
    </div>
    
        
            <a
                class="header-right-picture "
                href="#about"
                aria-label="링크 열기: /#about"
            >
        
        
        </a>
    
</header>

            <!-- Define author's picture -->


<nav id="sidebar" data-behavior="4">
    <div class="sidebar-container">
        
        
            <ul class="sidebar-buttons">
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="/"
                            
                            rel="noopener"
                            title="Home"
                        >
                        <i class="sidebar-button-icon fa fa-home" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">Home</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="/all-categories"
                            
                            rel="noopener"
                            title="카테고리"
                        >
                        <i class="sidebar-button-icon fa fa-bookmark" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">카테고리</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="/all-tags"
                            
                            rel="noopener"
                            title="태그"
                        >
                        <i class="sidebar-button-icon fa fa-tags" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">태그</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="/all-archives"
                            
                            rel="noopener"
                            title="아카이브"
                        >
                        <i class="sidebar-button-icon fa fa-archive" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">아카이브</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link open-algolia-search"
                            href="#search"
                            
                            rel="noopener"
                            title="검색"
                        >
                        <i class="sidebar-button-icon fa fa-search" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">검색</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="#about"
                            
                            rel="noopener"
                            title="About"
                        >
                        <i class="sidebar-button-icon fa fa-question" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">About</span>
                    </a>
            </li>
            
        </ul>
        
            <ul class="sidebar-buttons">
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="https://github.com/"
                            
                                target="_blank"
                            
                            rel="noopener"
                            title="GitHub"
                        >
                        <i class="sidebar-button-icon fab fa-github" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">GitHub</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="http://stackoverflow.com/users"
                            
                                target="_blank"
                            
                            rel="noopener"
                            title="Stack Overflow"
                        >
                        <i class="sidebar-button-icon fab fa-stack-overflow" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">Stack Overflow</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="https://twitter.com/"
                            
                                target="_blank"
                            
                            rel="noopener"
                            title="Twitter"
                        >
                        <i class="sidebar-button-icon fab fa-twitter" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">Twitter</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="https://facebook.com/"
                            
                                target="_blank"
                            
                            rel="noopener"
                            title="Facebook"
                        >
                        <i class="sidebar-button-icon fab fa-facebook" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">Facebook</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="https://plus.google.com/"
                            
                                target="_blank"
                            
                            rel="noopener"
                            title="Google +"
                        >
                        <i class="sidebar-button-icon fab fa-google-plus" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">Google +</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="https://www.linkedin.com/profile/"
                            
                                target="_blank"
                            
                            rel="noopener"
                            title="LinkedIn"
                        >
                        <i class="sidebar-button-icon fab fa-linkedin" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">LinkedIn</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="/mailto"
                            
                            rel="noopener"
                            title="Mail"
                        >
                        <i class="sidebar-button-icon fa fa-envelope" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">Mail</span>
                    </a>
            </li>
            
        </ul>
        
            <ul class="sidebar-buttons">
            
                <li class="sidebar-button">
                    
                        <a
                            class="sidebar-button-link "
                            href="/atom.xml"
                            
                            rel="noopener"
                            title="RSS"
                        >
                        <i class="sidebar-button-icon fa fa-rss" aria-hidden="true"></i>
                        <span class="sidebar-button-desc">RSS</span>
                    </a>
            </li>
            
        </ul>
        
    </div>
</nav>

            
            <div id="main" data-behavior="4"
                 class="
                        hasCoverMetaIn
                        ">
                
<article class="post">
    
    
        <div class="post-header main-content-wrap text-left">
    
        <h1 class="post-title">
            React(리액트)는 어떻게 작동하는가?
        </h1>
    
    
        <div class="post-meta">
    <time datetime="2022-10-31T19:13:18+09:00">
	
		    2022/10/31
    	
    </time>
    
        <span>카테고리 </span>
        
    <a class="category-link" href="/categories/React/">React</a>


    
</div>

    
</div>

    
    <div class="post-content markdown">
        <div class="main-content-wrap">
            <style>
  bold {
    font-weight:700;
    font-size:1rem;
  }
  
  red {
    color:red;
    font-size:1rem
  }
</style>

<h1 id="📌-React란"><a href="#📌-React란" class="headerlink" title="📌 React란?"></a>📌 React란?</h1><p>화면에 렌더링되는 UI를 컴포넌트 단위로 쪼개 사용할 수 있는 Javascript 라이브러리리 혹은 프레임워크이다.<br>라이브러리인가? 프레임워크인가?는 크게 중요하지 않다. 우리가 중점적으로 생각해야할 부분은 리액트는 <red>Progressive(점진적)</red>이라는 것이다.</p>
<h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ol>
<li><p>리액트는 점진적이므로 애플리케이션을 모두 리액트로 구성할 필요가 없다.</p>
</li>
<li><p>리액트는 Javascript 중점 라이브러리이다. 그러므로 자바스크립트를 잘하면 재밌을 것이다.</p>
</li>
<li><p>리액트는 별도의 설치가 필요없이 컴포넌트를 즉시 사용해볼 수 있다.</p>
</li>
<li><p>선언형 프로그래밍으로 명령형 프로그래밍보다 코드를 이해하기가 쉽다.</p>
</li>
<li><p>리액트를 배우면 웹, 리액트 네이티브를 배우면 모바일 등 한가지를 배워 확장성이 넓다.</p>
</li>
</ol>
<h2 id="시작하기-전"><a href="#시작하기-전" class="headerlink" title="시작하기 전"></a>시작하기 전</h2><h3 id="1-React-API-라이브러리를-사용하여-UI를-구상하는-VitualDOM을-생성한다"><a href="#1-React-API-라이브러리를-사용하여-UI를-구상하는-VitualDOM을-생성한다" class="headerlink" title="1. React API 라이브러리를 사용하여 UI를 구상하는 VitualDOM을 생성한다."></a>1. React API 라이브러리를 사용하여 UI를 구상하는 VitualDOM을 생성한다.</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CDN</span></span><br><span class="line">&lt;script src=<span class="string">&quot;//unpkg.com/react@17/umd/react.development.js&quot;</span> crossorigin&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>만약 버전을 변경하고 싶다면 @version을 써준다.</p>
</li>
<li><p>만약 IE를 고려 해야한다면 17 버전을 사용하고 그렇지 않다면 18 버전 사용하자.</p>
</li>
</ul>
<h3 id="2-ReactDOM-API-라이브러리를-사용하여-VirtualDOM을-RealDOM에-렌더링하여-UI를-구현한다"><a href="#2-ReactDOM-API-라이브러리를-사용하여-VirtualDOM을-RealDOM에-렌더링하여-UI를-구현한다" class="headerlink" title="2. ReactDOM API 라이브러리를 사용하여 VirtualDOM을 RealDOM에 렌더링하여 UI를 구현한다."></a>2. ReactDOM API 라이브러리를 사용하여 VirtualDOM을 RealDOM에 렌더링하여 UI를 구현한다.</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span> crossorigin&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>React API와 버젼을 일치시켜 줘야한다.</li>
</ul>
<p><strong>💡 React v17의 render()와 v18의 createRoot() 차이</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version 17</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(app,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>),</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rendered!&#x27;</span>)&#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<ul>
<li>렌더링할 React 요소인 app을 인자로 전달하고 이를 렌더링할 container인 root container를 render()에 전달한다.</li>
</ul>
<p>리액트 버전 18부터 render() 대신 createRoot()를 사용한다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createRoot</span>(container[, options])</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version 18</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>; <span class="comment">// JSX</span></span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(element);</span><br></pre></td></tr></table></figure>

<p>문서의 RealDOM 요소 노드인 container를 React Root로 만들어 반환하고, React Root를 render() 메서드를 사용하여 React 요소를 RealDOM에 렌더링한다.</p>
<h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><h3 id="1-React-요소-노드와-Real-DOM-요소-노드-차이"><a href="#1-React-요소-노드와-Real-DOM-요소-노드-차이" class="headerlink" title="1. React 요소 노드와 Real DOM 요소 노드 차이"></a>1. React 요소 노드와 Real DOM 요소 노드 차이</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Real</span></span><br><span class="line"><span class="keyword">const</span> headlineNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">headlineNode.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;headline&#x27;</span>);</span><br><span class="line">headlineNode.<span class="title function_">setAttribute</span>(<span class="string">&#x27;land&#x27;</span>,<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">headlineNode.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">`Add &lt;strong&gt;React&lt;/strong&gt; to a Website`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React</span></span><br><span class="line"><span class="keyword">const</span> headlineVnode = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    className : <span class="string">&#x27;headline&#x27;</span>,</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&#x27;Add &#x27;</span>,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;strong&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;React&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;to a Website&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/React.createElement/React.createElement.png" alt="React.createElement"></p>
<ul>
<li><p>RealDOM 요소 노드는 브라우저가 렌더링하면서 생성한 것이고 이와 달리 React 요소 노드는 Object(객체)로 그 형태가 다르게 생겼다.</p>
</li>
<li><p>위 사진을 보면 props라는 객체에 children, className, lang 등이 담겨있는 것을 알 수 있다. props에 대해서는 이후에 알아보자.</p>
</li>
</ul>
<p><strong>❗️ StrictMode 오류 해결</strong></p>
<p>ECMAScript에서 ‘use strict’ 사용하여 문법적 오류를 미리 알려주었듯이 React에서도 이러한 오류를 미리 알려준다.</p>
<p>이에 대한 경고를 해결하기 위해서는 StrictMode 컴포넌트를 사용해야한다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="title class_">React</span>.<span class="property">StrictMode</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">App</span>, &#123; <span class="attr">children</span>: [headline, reactLogo] &#125;)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>사용법은 간단하다. 생성하려는 React 요소를 React.StrictMode의 자식 요소로 전달해주면 된다.</p>
<h3 id="2-React-Component-vs-React-Element"><a href="#2-React-Component-vs-React-Element" class="headerlink" title="2. React Component vs React Element"></a>2. React Component vs React Element</h3><p>자바스크립트에서는 재사용을 위해 함수를 사용하고 리액트에서는 재사용을 위해 컴포넌트를 사용한다. 컴포넌트 생성 방법은 함수를 생성하듯이 생성할 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SvgPath</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;path&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">d</span>: props.<span class="property">d</span>,</span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&#x27;currentColor&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = props =&gt; <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">className</span>: <span class="string">&#x27;App&#x27;</span> &#125;,</span><br><span class="line">    ...props.<span class="property">children</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>리액트 컴포넌트는 매개변수로 props를 받는다.</p>
</li>
<li><p>props 객체를 통해 다른 컴포넌트에게 본인의 HTML attributes, 자바스크립트 값(객체, 배열, 함수 등)을 전달해줄 수 있다.</p>
</li>
<li><p>함수선언식, 함수표현식 둘 다 가능하다.</p>
</li>
</ul>
<p>하지만 createElement()를 사용하여 컴포넌트를 생성하는 것은 매우 번거로운 일이다. 그 대안으로 생겨난 것이 바로 JSX이다.</p>
<h2 id="JSX란"><a href="#JSX란" class="headerlink" title="JSX란?"></a>JSX란?</h2><p>JSX는 리액트 컴포넌트 사용을 HTML 처럼 사용하기 위해 생겨났다. JSX는 XML 처럼 생긴 문법 표현식이다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;loco&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        안녕하세요~! &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rendered</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕하세요~! loco<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>자동 세미콜론 삽입이 되는 것을 방지하기 위해 <strong>괄호로 감싸는 것을 추천한다.</strong></p>
<h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><ol>
<li><p>선언형, HTML과 비슷한 구조, {}를 사용한 데이터 바인딩이 편리하다.</p>
</li>
<li><p>브라우저엔진에 의해 해석되지 못하므로 babel이 컴파일을 해줘야만 한다.</p>
</li>
<li><p>HTML 보단 JS에 가까우므로 camelCase 명명규칙을 따른다.</p>
</li>
<li><p>JSX는 렌더링하기 전에 이스케이프하므로 애플리케이션에서 명시적으로 작성되지 않는 내용은 script에 주입되지 않아 XSS 공격으로부터 안전하다.</p>
</li>
</ol>
<p><strong>❗️ React에서 babel 추가 설정</strong></p>
<p><img src="/../../images/React.babel/React.babel.png" alt="React바벨추가설정"></p>
<ol>
<li><p>이전에 React를 사용하기 전에 설정해두었던 babel 사양에서는 React를 컴파일 해줄 수 없다.</p>
</li>
<li><p>컴포넌트를 모듈 파일로 구분할 때에 babel은 input으로 지정된 파일만 컴파일 해주고 input 파일에서 import한 파일까지 컴파일해주지 않는다.</p>
</li>
</ol>
<p>위 2가지 문제 해결을 위해서는 <strong>플러그인을 설치 해줘야한다.</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/preset-react</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">comments</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">loose</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>설치가 끝났다면 babel.config.js 파일에 해당 플러그인을 사용할 것이라고 등록을 해줘야 정상 동작한다.</p>
</li>
<li><p>옵션값이 있을 경우 []로 감싸서 넣어주고 그렇지 않은 경우 문자열로만 추가한다.</p>
</li>
</ul>
<h2 id="JSX로-컴포넌트-생성하기"><a href="#JSX로-컴포넌트-생성하기" class="headerlink" title="JSX로 컴포넌트 생성하기"></a>JSX로 컴포넌트 생성하기</h2><p>이제 JSX를 사용할 준비가 끝났으니 JSX를 사용하여 컴포넌트를 생성해보자.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HeadLine</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;headline&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Add <span class="tag">&lt;<span class="name">strong</span>&gt;</span>React<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> to a Website</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">HeadLine</span>&gt;</span><span class="tag">&lt;/<span class="name">HeadLine</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;react-root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReactDOMRoot</span> = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOMRoot</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>React.createElement()를 사용하여 React Element를 생성하여 컴포넌트를 생성하는 방법보다 훨씬 편리하다는 것을 알 수 있다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>리액트 수업을 듣고 배운것을 차근차근 익혀가면서 정리해보았다. props에 대한 개념도 확실히 잡히고, JSX를 왜 쓰게 되었는지, 안쓰면 무엇인 문제점이고 불편한지를 깨달을 수 있는 시간이여서 좋았다.</p>
<p>공식문서를 읽어볼 때도 영어로 된 것을 자동번역하여 읽지 않고 원문을 보면서 읽으니 시간이 조금 더디지만 그렇기 때문에 기억에 더 오래 남을 것이라고 생각하여 영어로 읽는 연습을 하고있다.</p>

            


        </div>
    </div>
    <div id="post-footer" class="post-footer main-content-wrap">
        
            <div class="post-footer-tags">
                <span class="text-color-light text-small">태그</span><br/>
                
    <a class="tag tag--primary tag--small t-none-link" href="/tags/JSX/" rel="tag">JSX</a> <a class="tag tag--primary tag--small t-none-link" href="/tags/React-createElement/" rel="tag">React.createElement</a> <a class="tag tag--primary tag--small t-none-link" href="/tags/React-createRoot/" rel="tag">React.createRoot</a>

            </div>
        
        
            <div class="post-actions-wrap">
    <nav>
        <ul class="post-actions post-action-nav">
            <li class="post-action">
                
                    
                <a
                    class="post-action-btn btn btn--default tooltip--top"
                    href="/2022/11/01/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%90%B6-%EC%A4%91%EB%B3%B5-%EB%AC%B8%EC%9E%90-%EC%A0%9C%EA%B1%B0.md/"
                    data-tooltip="우테코 프리코스 - 🐶 중복 문자 제거"
                    aria-label="이전: 우테코 프리코스 - 🐶 중복 문자 제거"
                >
                    
                        <i class="fa fa-angle-left" aria-hidden="true"></i>
                        <span class="hide-xs hide-sm text-small icon-ml">이전</span>
                    </a>
            </li>
            <li class="post-action">
                
                    
                <a
                    class="post-action-btn btn btn--default tooltip--top"
                    href="/2022/10/31/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94%20%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%A6%96%20%ED%8F%AC%EB%B9%84%EC%99%80%20%ED%81%AC%EB%A1%B1/"
                    data-tooltip="우테코 프리코스-🦖 포비와 크롱"
                    aria-label="다음: 우테코 프리코스-🦖 포비와 크롱"
                >
                    
                        <span class="hide-xs hide-sm text-small icon-mr">다음</span>
                        <i class="fa fa-angle-right" aria-hidden="true"></i>
                    </a>
            </li>
        </ul>
    </nav>
    <ul class="post-actions post-action-share">
        <li class="post-action hide-lg hide-md hide-sm">
            <a
                class="post-action-btn btn btn--default btn-open-shareoptions"
                href="#btn-open-shareoptions"
                aria-label="이 포스트 공유하기"
            >
                <i class="fa fa-share-alt" aria-hidden="true"></i>
            </a>
        </li>
        
            
            
            <li class="post-action hide-xs">
                <a
                    class="post-action-btn btn btn--default"
                    target="new" href="https://www.facebook.com/sharer/sharer.php?u=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                    title="Facebook에 공유하기"
                    aria-label="Facebook에 공유하기"
                >
                    <i class="fab fa-facebook" aria-hidden="true"></i>
                </a>
            </li>
        
            
            
            <li class="post-action hide-xs">
                <a
                    class="post-action-btn btn btn--default"
                    target="new" href="https://twitter.com/intent/tweet?text=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                    title="Twitter에 공유하기"
                    aria-label="Twitter에 공유하기"
                >
                    <i class="fab fa-twitter" aria-hidden="true"></i>
                </a>
            </li>
        
            
            
            <li class="post-action hide-xs">
                <a
                    class="post-action-btn btn btn--default"
                    target="new" href="https://plus.google.com/share?url=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                    title="Google+에 공유하기"
                    aria-label="Google+에 공유하기"
                >
                    <i class="fab fa-google-plus" aria-hidden="true"></i>
                </a>
            </li>
        
        
            
        
        <li class="post-action">
            
                <a class="post-action-btn btn btn--default" href="#" aria-label="맨 위로">
            
                <i class="fa fa-list" aria-hidden="true"></i>
            </a>
        </li>
    </ul>
</div>


        
        
            
        
    </div>
</article>



                <footer id="footer" class="main-content-wrap">
    <span class="copyrights">
        Copyrights &copy; 2023 loco9939. All Rights Reserved.
    </span>
</footer>

            </div>
            
                <div id="bottom-bar" class="post-bottom-bar" data-behavior="4">
                    <div class="post-actions-wrap">
    <nav>
        <ul class="post-actions post-action-nav">
            <li class="post-action">
                
                    
                <a
                    class="post-action-btn btn btn--default tooltip--top"
                    href="/2022/11/01/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%90%B6-%EC%A4%91%EB%B3%B5-%EB%AC%B8%EC%9E%90-%EC%A0%9C%EA%B1%B0.md/"
                    data-tooltip="우테코 프리코스 - 🐶 중복 문자 제거"
                    aria-label="이전: 우테코 프리코스 - 🐶 중복 문자 제거"
                >
                    
                        <i class="fa fa-angle-left" aria-hidden="true"></i>
                        <span class="hide-xs hide-sm text-small icon-ml">이전</span>
                    </a>
            </li>
            <li class="post-action">
                
                    
                <a
                    class="post-action-btn btn btn--default tooltip--top"
                    href="/2022/10/31/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94%20%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%A6%96%20%ED%8F%AC%EB%B9%84%EC%99%80%20%ED%81%AC%EB%A1%B1/"
                    data-tooltip="우테코 프리코스-🦖 포비와 크롱"
                    aria-label="다음: 우테코 프리코스-🦖 포비와 크롱"
                >
                    
                        <span class="hide-xs hide-sm text-small icon-mr">다음</span>
                        <i class="fa fa-angle-right" aria-hidden="true"></i>
                    </a>
            </li>
        </ul>
    </nav>
    <ul class="post-actions post-action-share">
        <li class="post-action hide-lg hide-md hide-sm">
            <a
                class="post-action-btn btn btn--default btn-open-shareoptions"
                href="#btn-open-shareoptions"
                aria-label="이 포스트 공유하기"
            >
                <i class="fa fa-share-alt" aria-hidden="true"></i>
            </a>
        </li>
        
            
            
            <li class="post-action hide-xs">
                <a
                    class="post-action-btn btn btn--default"
                    target="new" href="https://www.facebook.com/sharer/sharer.php?u=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                    title="Facebook에 공유하기"
                    aria-label="Facebook에 공유하기"
                >
                    <i class="fab fa-facebook" aria-hidden="true"></i>
                </a>
            </li>
        
            
            
            <li class="post-action hide-xs">
                <a
                    class="post-action-btn btn btn--default"
                    target="new" href="https://twitter.com/intent/tweet?text=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                    title="Twitter에 공유하기"
                    aria-label="Twitter에 공유하기"
                >
                    <i class="fab fa-twitter" aria-hidden="true"></i>
                </a>
            </li>
        
            
            
            <li class="post-action hide-xs">
                <a
                    class="post-action-btn btn btn--default"
                    target="new" href="https://plus.google.com/share?url=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                    title="Google+에 공유하기"
                    aria-label="Google+에 공유하기"
                >
                    <i class="fab fa-google-plus" aria-hidden="true"></i>
                </a>
            </li>
        
        
            
        
        <li class="post-action">
            
                <a class="post-action-btn btn btn--default" href="#" aria-label="맨 위로">
            
                <i class="fa fa-list" aria-hidden="true"></i>
            </a>
        </li>
    </ul>
</div>


                </div>
                
    <div id="share-options-bar" class="share-options-bar" data-behavior="4">
        <i id="btn-close-shareoptions" class="fa fa-times"></i>
        <ul class="share-options">
            
                
                
                <li class="share-option">
                    <a
                        class="share-option-btn"
                        target="new"
                        href="https://www.facebook.com/sharer/sharer.php?u=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                        aria-label="Facebook에 공유하기"
                    >
                        <i class="fab fa-facebook" aria-hidden="true"></i><span>Facebook에 공유하기</span>
                    </a>
                </li>
            
                
                
                <li class="share-option">
                    <a
                        class="share-option-btn"
                        target="new"
                        href="https://twitter.com/intent/tweet?text=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                        aria-label="Twitter에 공유하기"
                    >
                        <i class="fab fa-twitter" aria-hidden="true"></i><span>Twitter에 공유하기</span>
                    </a>
                </li>
            
                
                
                <li class="share-option">
                    <a
                        class="share-option-btn"
                        target="new"
                        href="https://plus.google.com/share?url=https://loco9939.github.io/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/"
                        aria-label="Google+에 공유하기"
                    >
                        <i class="fab fa-google-plus" aria-hidden="true"></i><span>Google+에 공유하기</span>
                    </a>
                </li>
            
        </ul>
    </div>


            
        </div>
        


<div id="about">
    <div id="about-card">
        <div id="about-btn-close">
            <i class="fa fa-times"></i>
        </div>
        
            <h4 id="about-card-name">loco9939</h4>
        
            <div id="about-card-bio"><p>author.bio</p>
</div>
        
        
            <div id="about-card-job">
                <i class="fa fa-briefcase"></i>
                <br/>
                <p>author.job</p>

            </div>
        
        
    </div>
</div>

        
        
<div id="cover" style="background-image:url('/assets/images/cover.jpg');"></div>
        <!--SCRIPTS-->

<script src="/assets/js/script-wcqoifde3xwnijjx9xd2irfrrksglozwqpgaqfvxoft22e4znrk7db1xxnsx.min.js"></script>

<!--SCRIPTS END-->


    




    </body>
</html>
