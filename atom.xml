<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loco&#39;s Dev Blog</title>
  
  <subtitle>Frontend Developer</subtitle>
  <link href="https://loco9939.github.io/atom.xml" rel="self"/>
  
  <link href="https://loco9939.github.io/"/>
  <updated>2023-01-09T08:51:54.880Z</updated>
  <id>https://loco9939.github.io/</id>
  
  <author>
    <name>loco9939</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT 토큰 방식은 무엇인가요?</title>
    <link href="https://loco9939.github.io/2023/01/09/CS/JWT-%ED%86%A0%ED%81%B0-%EB%B0%A9%EC%8B%9D%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/"/>
    <id>https://loco9939.github.io/2023/01/09/CS/JWT-%ED%86%A0%ED%81%B0-%EB%B0%A9%EC%8B%9D%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</id>
    <published>2023-01-09T02:31:32.000Z</published>
    <updated>2023-01-09T08:51:54.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🛠-JWT-토큰-방식이란"><a href="#🛠-JWT-토큰-방식이란" class="headerlink" title="🛠 JWT 토큰 방식이란?"></a>🛠 JWT 토큰 방식이란?</h1><p>JWT는 JSON Web Token의 약자로, 인증에 필요한 데이터를 암호화한 JSON으로 이루어진 토큰을 말한다.</p><p>기존의 세션 인증방식은 인증관련 정보를 세션 저장소라는 DB에 저장하여 서버가 과부하 되거나 서버를 확장하기가 어려웠다.</p><p>이러한 문제 때문에 서버자원을 절약하기 위해 사용자 인증에 필요한 정보를 토큰 자체에 담아두는 JWT를 사용하게 되었다.</p><blockquote><p>토큰은 로그인 이후 서버가 만들어주는 문자열이고, 토큰 안에는 사용자의 로그인 정보와 서버의 서명이 들어있다.</p></blockquote><h1 id="JWT-토큰-방식-순서"><a href="#JWT-토큰-방식-순서" class="headerlink" title="JWT 토큰 방식 순서"></a>JWT 토큰 방식 순서</h1><ol><li>사용자가 로그인을 하면 서버는 사용자에게 사용자 로그인 정보 및 서버의 서명이 들어간 토큰을 발급한다.</li><li>사용자는 토큰을 가지고 권한이 필요한 API 작업을 요청한다.</li><li>서버는 토큰의 유효성 검사를 통해 요청에 응답한다.</li></ol><h1 id="JWT-토큰-특징"><a href="#JWT-토큰-특징" class="headerlink" title="JWT 토큰 특징"></a>JWT 토큰 특징</h1><h2 id="👍-장점"><a href="#👍-장점" class="headerlink" title="👍 장점"></a>👍 장점</h2><ul><li>서버에서 사용자 정보를 저장해둘 필요가 없어 서버 스케일링시 큰 문제가 없다.</li><li>별도의 I&#x2F;O 작업 없는 빠른 인증 처리 가능</li></ul><h2 id="👎-단점"><a href="#👎-단점" class="headerlink" title="👎 단점"></a>👎 단점</h2><ul><li>한번 발급된 토큰은 수정 및 폐기가 불가능하다.(클라이언트에게 있으니깐!)<ul><li>그렇기 때문에 유효기간을 짧게 설정해주는것이 중요하다.</li></ul></li><li>토큰의 길이가 늘어날 수록 네트워크 부하가 심해진다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;🛠-JWT-토큰-방식이란&quot;&gt;&lt;a href=&quot;#🛠-JWT-토큰-방식이란&quot; class=&quot;headerlink&quot; title=&quot;🛠 JWT 토큰 방식이란?&quot;&gt;&lt;/a&gt;🛠 JWT 토큰 방식이란?&lt;/h1&gt;&lt;p&gt;JWT는 JSON Web Token의</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>SPA는 무엇인가요?</title>
    <link href="https://loco9939.github.io/2023/01/06/CS/SPA%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/"/>
    <id>https://loco9939.github.io/2023/01/06/CS/SPA%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</id>
    <published>2023-01-06T03:36:24.000Z</published>
    <updated>2023-01-06T06:29:24.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="✏️-SPA란"><a href="#✏️-SPA란" class="headerlink" title="✏️ SPA란?"></a>✏️ SPA란?</h1><p><strong>Single Page Application의 약자로, 단일 페이지로 구성된 애플리케이션을 말한다.</strong></p><p>전통적으로 브라우저는 서버에서 HTML을 받아 렌더링 해주는 역할을 한다. 즉, 사용자가 다른 URL로 이동하거나 사용자 액션에 의해 화면의 UI가 변경될 때마다 서버에 HTML을 요청하고 응답받는 서버측 렌더링(SSR)을 사용한다.</p><p>하지만 오늘날 최신 SPA에서는 대화형 요소와 동적인 요소가 많아 클라이언트가 작업을 수행하고 작업에 대한 응답을 받을 수 있는 <strong>클라이언트 사이드 렌더링(CSR)을 사용한다.</strong></p><h1 id="🤓-SPA-동작-원리"><a href="#🤓-SPA-동작-원리" class="headerlink" title="🤓 SPA 동작 원리"></a>🤓 SPA 동작 원리</h1><ol><li>브라우저는 웹에 필요한 소스코드 및 스타일 시트를 서버로부터 응답받아 초기 페이지를 렌더링한다.</li><li>대화형 요소, 동적인 요소에 의해 새 페이지가 필요해지면, 새 페이지에 필요한 새 데이터는 서버에게 AJAX 요청을 보낸다. 이후 SPA는 초기 페이지 로드시 다운로드한 JavaScript를 통해 응답받은 데이터를 페이지에 동적으로 업데이트한다.</li></ol><blockquote><p>사용자가 다른 페이지로 이동할 때 새로고침이 발생하지 않는다. 페이지의 URL은 <strong>HTML5 History API</strong>를 통해 업데이트된다.</p></blockquote><h1 id="📚-SPA-특징"><a href="#📚-SPA-특징" class="headerlink" title="📚 SPA 특징"></a>📚 SPA 특징</h1><h3 id="👍-장점"><a href="#👍-장점" class="headerlink" title="👍 장점"></a>👍 장점</h3><ul><li>앱의 반응속도가 빨라지고 새로고침으로 인한 깜빡임 현상이 사라진다.</li><li>페이지 렌더링 시 중복된 데이터를 다시 다운받을 필요가 없어 서버에 대한 HTTP 요청이 줄어든다.</li><li>클라이언트와 서버간의 문제를 명확히 구분할 수 있다. 서버 코드를 수정하지 않고도 다양한 플랫폼을 위한 새로운 클라이언트를 쉽게 구축할 수 있다.</li></ul><h3 id="👎-단점"><a href="#👎-단점" class="headerlink" title="👎 단점"></a>👎 단점</h3><ul><li>초기에 웹에 필요한 모든 데이터를 서버로 부터 로드 받기 때문에 초기 페이지 로드 시간이 길다.</li><li>모든 요청을 단일 진입점으로 라우트하고 클라이언트 측 라우팅이 단일 진입점에서 응답받을 수 있도록 서버를 구성하는 추가 단계가 필요하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 브라우저 새로고침 시 서버는 index.html 파일을 응답하고 클라이언트는 window.location.pathname을 참조해 라우팅</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>SPA는 JavaScript에 의존하는데 검색 엔진이 크롤링 중에 JavaScript를 실행하지 않기 때문에 해당 웹이 빈 컨텐츠로 표시될 수 있어 SEO 최적화에 부적합하다.<blockquote><p>이를 해결하기 위해 서버측에서 앱을 렌더링하거나 Prerender 같은 서비스를 사용하여 브라우저에서 JavaScript를 렌더링하고 정적 HTML을 저장한 다음 크롤러에게 반환할 수 있다.</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;✏️-SPA란&quot;&gt;&lt;a href=&quot;#✏️-SPA란&quot; class=&quot;headerlink&quot; title=&quot;✏️ SPA란?&quot;&gt;&lt;/a&gt;✏️ SPA란?&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Single Page Application의 약자로, 단일 페이지로 구성</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>브라우저 렌더링 과정에 대해 설명하라</title>
    <link href="https://loco9939.github.io/2023/01/05/CS/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/"/>
    <id>https://loco9939.github.io/2023/01/05/CS/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</id>
    <published>2023-01-05T06:10:40.000Z</published>
    <updated>2023-01-05T06:31:13.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="브라우저란"><a href="#브라우저란" class="headerlink" title="브라우저란?"></a>브라우저란?</h1><p>브라우저는 HTML, CSS, Javascript로 작성된 텍스트 문서를 서버에게 요청하여 응답을 받아 의미있는 단위인 토큰으로 파싱하여 시각적으로 렌더링 해주는 역할을 담당한다.</p><h1 id="브라우저-렌더링-과정"><a href="#브라우저-렌더링-과정" class="headerlink" title="브라우저 렌더링 과정"></a>브라우저 렌더링 과정</h1><h2 id="1-요청과-응답"><a href="#1-요청과-응답" class="headerlink" title="1. 요청과 응답"></a>1. 요청과 응답</h2><p>서버에 요청하기 위해 브라우저는 주소창을 제공한다. 주소창에 URL을 입력하면 URL의 호스트 이름이 DNS를 통해 IP주소로 변환되고 IP 주소를 갖는 서버에게 요청을 전송한다.</p><p>이렇게 요청을 보내면 서버는 서버의 루트 폴더에 존재하는 정적파일로 응답을 보낸다. 기본적으로 index.html이다.</p><h2 id="2-HTML-파싱과-DOM-생성"><a href="#2-HTML-파싱과-DOM-생성" class="headerlink" title="2. HTML 파싱과 DOM 생성"></a>2. HTML 파싱과 DOM 생성</h2><p>브라우저 요청에 의해 서버가 응답한 HTML 문서는 문자열로 이루어진 순수한 텍스트이다.</p><p><strong>그래서 HTML 문서를 파싱하여 <span style="color:red">브라우저가 이해할 수 있는 자료구조인 DOM을 생성</span>한다.</strong></p><ol><li>문자열로 변환된 HTML문서를 토큰화한다.</li><li>각 토큰을 객체로 변환하여 노드를 생성한다. 노드는 DOM을 구성하는 기본 요소이다. ex) 문서 노드, 요소 노드 등</li><li>HTML 문서는 중첩관계를 통해 부자관계가 형성된다. 이러한 부자관계를 반영하여 <strong>모든 노드들을 트리 자료구조로 구성한다. 이러한 노드들로 구성된 트리 자료구조를 DOM이라 부른다.</strong></li></ol><h2 id="3-CSS-파싱과-CSSOM-생성"><a href="#3-CSS-파싱과-CSSOM-생성" class="headerlink" title="3. CSS 파싱과 CSSOM 생성"></a>3. CSS 파싱과 CSSOM 생성</h2><p>렌더링 엔진은 HTML을 한줄씩 읽어나가며 순차적으로 파싱하여 DOM을 생성해 나간다. <strong>DOM을 생성하다가 CSS를 로드하는 link 태그나 style 태그를 만나면 <span style="color:red">DOM 생성을 일시중단</span>한다.</strong></p><p>그 결과 CSS 파일을 서버에 요청하여 응답받은 CSS 파일이나 style 태그 내의 CSS를 HTML과 동일한 과정으로 토큰화 생성 → CSSOM 생성 과정을 거친다. 이후 파싱이 완료되면 HTML 파싱이 중단된 지점부터 다시 HTML을 파싱하기 시작한다.</p><h2 id="4-렌더-트리-생성"><a href="#4-렌더-트리-생성" class="headerlink" title="4. 렌더 트리 생성"></a>4. 렌더 트리 생성</h2><p>앞선 과정에서 생성된 DOM과 CSSOM은 렌더링을 위해 렌더 트리로 결합된다. 이 때 <strong>브라우저 화면에 렌더링되지 않는 노드<span style="color:red">(meta태그, script 태그 등)</span>와 CSS에 의해 표시되지 않는<span style="color:red">(display:none)</span> 노드들은 포함하지 않는다.</strong></p><p>지금까지의 렌더링 과정은 여러번 반복되서 실행될 수 있다. <strong>렌더링이 반복 실행되는 원인은 다음과 같다.</strong></p><ul><li>자바스크립트에 의한 노드 추가 또는 삭제</li><li>브라우저 창의 리사이징에 의한 viewport 크기 변경</li><li>HTML 요소의 레이아웃(위치와 크기)을 변경시키는 width, height, margin, padding, border, display, position 등의 스타일 변경</li></ul><p><strong>이러한 리렌더링은 비용이 많이 들고 성능에 악영향을 주므로 <span style="color:red">리렌더링이 적게 발생하도록 하여야한다.</span></strong></p><h2 id="5-자바스크립트-파싱과-실행"><a href="#5-자바스크립트-파싱과-실행" class="headerlink" title="5. 자바스크립트 파싱과 실행"></a>5. 자바스크립트 파싱과 실행</h2><p>HTML 파싱의 결과물 DOM은 HTML 문서의 구조와 정보뿐 아니라 HTML 요소와 스타일을 변경할 수 있는 프로그래밍 인터페이스로서 DOM API를 제공한다.</p><p>즉, DOM API를 사용하여 이미 생성된 DOM을 동적으로 조작할 수 있다.</p><p>CSS 파싱과정과 마찬가지로 script 태그 만나면 DOM 생성을 일시 중단한다.</p><p>이후 자바스크립트 파일을 서버에 요청하여 응답받은 파일이나 script 태그내의 코드를 파싱하기 위해 <strong>자바스크립트 엔진에 제어권을 넘긴다. <span style="color:red">(렌더링 엔진 → 자바스크립트 엔진으로 제어권 이동)</span></strong></p><p>이후 자바스크립트 파싱과 실행이 종료되면 렌더링 엔진으로 다시 제어권 넘겨 HTML 파싱 중단된 시점부터 DOM 생성을 재개한다.</p><h2 id="6-리플로우와-리페인트"><a href="#6-리플로우와-리페인트" class="headerlink" title="6. 리플로우와 리페인트"></a>6. 리플로우와 리페인트</h2><p>만약 자바스크립트 코드에 DOM, CSSOM을 변경하는 DOM API가 사용된 경우 DOM, CSSOM이 변경되고 변경된 DOM, CSSOM으로 다시 렌더트리로 결합되고 레이아웃과 페인트 과정을 거쳐 브라우저 화면에 다시 렌더링한다. 이를 리플로우, 리페인트라고 한다.</p><blockquote><p>리플로우가 발생하면 성능을 저하시키므로 리플로우가 발생하는 메서드 사용을 최소화 하여야 한다. 일단 가독성 위주로 코딩을 하되 성능 측정하여 렌더링에 2초 이상 걸린다면 리팩터링을 하여 성능을 개선해야한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;브라우저란&quot;&gt;&lt;a href=&quot;#브라우저란&quot; class=&quot;headerlink&quot; title=&quot;브라우저란?&quot;&gt;&lt;/a&gt;브라우저란?&lt;/h1&gt;&lt;p&gt;브라우저는 HTML, CSS, Javascript로 작성된 텍스트 문서를 서버에게 요청하여 응답을 받</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>호이스팅에 대해 설명하라</title>
    <link href="https://loco9939.github.io/2023/01/05/CS/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/"/>
    <id>https://loco9939.github.io/2023/01/05/CS/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</id>
    <published>2023-01-05T05:24:56.000Z</published>
    <updated>2023-01-05T05:47:52.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-호이스팅이란"><a href="#📌-호이스팅이란" class="headerlink" title="📌 호이스팅이란?"></a>📌 호이스팅이란?</h1><p>호이스팅이란 코드에서 선언이 마치 코드 최상단으로 옮겨진 것처럼 동작하는 것을 말한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 선언은 에러를 발생하지 않는다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let/const 선언은 에러를 발생 시킨다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// ReferenceError: bar is not defined</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>마치 위 예제를 보았을 때, let, const 키워드로 선언할 경우 호이스팅이 발생하지 않는 것처럼 느낄 수 있는데, let, const 키워드로 선언했을 경우에도 호이스팅이 발생한다.</p><p>위 예제에서 오류를 발생시키는 것은 var 키워드의 경우 변수 선언 단계와 초기화 단계가 동시에 진행되므로 이 때, 변수가 선언됨과 동시에 undefined로 초기화되어 오류를 발생시키지 않는다.</p><p>반면, let, const 키워드는 선언단계와 초기화 단계가 분리되어 진행되어 <strong>초기화 단계 이전에 해당 변수를 참조하게 되면 참조에러를 발생시킨다.</strong></p><blockquote><p>선언단계 ~ 초기화 단계 시작 전까지 구간을 Temporal Dead Zone(일시적 사각 지대)라고 한다.</p></blockquote><h1 id="📚-함수-호이스팅"><a href="#📚-함수-호이스팅" class="headerlink" title="📚 함수 호이스팅"></a>📚 함수 호이스팅</h1><p>호이스팅은 선언 단계가 마치 최상단으로 올라간 것처럼 동작하는 것을 말하므로 이는 변수 선언과 함수 선언 모두 해당될 수 있다.</p><p>변수 선언은 앞의 예제에서 다루었으니 함수 호이스팅 예제를 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = <span class="title function_">doubleNum</span>(numbers);</span><br><span class="line"><span class="keyword">const</span> trippled = <span class="title function_">trippleNum</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doubleNum</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">trippleNum</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: doubleNum is not defined</span></span><br></pre></td></tr></table></figure><ul><li>위 예제에서는 화살표 함수가 표현식으로 선언되었으므로 변수 호이스팅이 발생하여 오류를 발생하는 것을 볼 수 있다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = <span class="title function_">doubleNum</span>(numbers);</span><br><span class="line"><span class="keyword">const</span> trippled = <span class="title function_">trippleNum</span>(numbers);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trippled); <span class="comment">// [3, 6, 9, 12, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doubleNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trippleNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 예제에서는 함수 선언식으로 함수를 정의하여서 함수 호이스팅이 발생하여 오류를 발생시키지 않았다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;📌-호이스팅이란&quot;&gt;&lt;a href=&quot;#📌-호이스팅이란&quot; class=&quot;headerlink&quot; title=&quot;📌 호이스팅이란?&quot;&gt;&lt;/a&gt;📌 호이스팅이란?&lt;/h1&gt;&lt;p&gt;호이스팅이란 코드에서 선언이 마치 코드 최상단으로 옮겨진 것처럼 동작하는</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>클로저는 무엇이고 언제, 어떻게 사용하나요?</title>
    <link href="https://loco9939.github.io/2023/01/05/CS/%ED%81%B4%EB%A1%9C%EC%A0%80%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94/"/>
    <id>https://loco9939.github.io/2023/01/05/CS/%ED%81%B4%EB%A1%9C%EC%A0%80%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94/</id>
    <published>2023-01-05T04:25:25.000Z</published>
    <updated>2023-01-05T05:23:28.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📚-클로저란-무엇인가요"><a href="#📚-클로저란-무엇인가요" class="headerlink" title="📚 클로저란 무엇인가요?"></a>📚 클로저란 무엇인가요?</h1><p>클로저란, ECMAScript에선 공식 사양으로 등장하진 않지만, 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다.</p><h1 id="❓-클로저는-왜-사용-하나요"><a href="#❓-클로저는-왜-사용-하나요" class="headerlink" title="❓ 클로저는 왜 사용 하나요?"></a>❓ 클로저는 왜 사용 하나요?</h1><p>클로저는 함수형 프로그래밍 방식에서 정보 은닉과 캡슐화를 통해 정보를 보다 안전하게 관리하기 위해 사용한다.</p><p>C++과 같은 객체지향 프로그래밍 언어와 달리 <strong>자바스크립트는 private 같은 접근 제한자를 제공하지 않는다.</strong></p><p>때문에 자바스크립트에서 객체 프로퍼티를 안전하게 참조 및 변경하기 위해 클로저를 사용한다.</p><h1 id="❓-클로저는-언제-어떻게-사용하나요"><a href="#❓-클로저는-언제-어떻게-사용하나요" class="headerlink" title="❓ 클로저는 언제, 어떻게 사용하나요?"></a>❓ 클로저는 언제, 어떻게 사용하나요?</h1><p>클로저를 구현하는 방법은 아래 두가지 조건을 만족시켜 구현할 수 있다.</p><ol><li>함수 안에 내부함수를 정의하고 내부함수는 외부함수의 식별자를 참조한다.</li><li>외부 함수의 반환값으로 내부함수를 반환하여 변수에 할당한다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 카운트 상태 변수</span></span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 클로저인 메서드를 갖는 객체를 반환한다.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ++num;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> num &gt; <span class="number">0</span> ? --num : <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increase</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increase</span>()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">decrease</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">decrease</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h1 id="📌-정리"><a href="#📌-정리" class="headerlink" title="📌 정리"></a>📌 정리</h1><p>클로저는 보다 안전하게 객체를 다루기 위해 사용한다.</p><p>하지만 ES6에서 클래스가 도입되어 다른 객체지향 프로그래밍 언어처럼 private 접근 제한자가 생겨나 객체를 안전하게 관리할 수 있게 되었다.</p><p>예전에 페어프로그래밍을 하면서 DOM 요소를 참조하고 변경하는 클로저함수만 외부로 빼내어 해당 함수로만 DOM 요소를 조작할 수 있도록 코드를 구현해본 경험이 있습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;📚-클로저란-무엇인가요&quot;&gt;&lt;a href=&quot;#📚-클로저란-무엇인가요&quot; class=&quot;headerlink&quot; title=&quot;📚 클로저란 무엇인가요?&quot;&gt;&lt;/a&gt;📚 클로저란 무엇인가요?&lt;/h1&gt;&lt;p&gt;클로저란, ECMAScript에선 공식 사양</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>프로토타입이란 무엇인가요?</title>
    <link href="https://loco9939.github.io/2023/01/04/CS/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/"/>
    <id>https://loco9939.github.io/2023/01/04/CS/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</id>
    <published>2023-01-04T05:05:09.000Z</published>
    <updated>2023-01-04T05:57:17.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로토타입이란"><a href="#프로토타입이란" class="headerlink" title="프로토타입이란?"></a>프로토타입이란?</h1><p>자바스크립트는 프로토타입을 기반으로 상속을 구현하는 언어이다. 프로토타입은 엄밀히 말하면 프로토타입 객체이다.</p><p>프로토타입 객체는 어떤 객체의 상위(부모) 객체의 역할을 한다.</p><h2 id="프로토타입을-왜-사용하나요"><a href="#프로토타입을-왜-사용하나요" class="headerlink" title="프로토타입을 왜 사용하나요?"></a>프로토타입을 왜 사용하나요?</h2><p>객체 간 상속을 구현하기 위해 사용한다. 즉, 프로토타입을 상속 받은 하위(자식) 객체는 상위(부모) 객체의 프로퍼티를 자신의 프로퍼티처럼 자유롭게 사용할 수 있다.</p><h2 id="프로토타입이-어떻게-동작하나요"><a href="#프로토타입이-어떻게-동작하나요" class="headerlink" title="프로토타입이 어떻게 동작하나요?"></a>프로토타입이 어떻게 동작하나요?</h2><p>프로토타입은 객체 생성 방식에 따라 객체가 생성될 때 결정되고 해당 객체의 [[Prototype]] 내부 슬롯에 저장된다.</p><p>__proto__접근자 프로퍼티를 통해서 프로토타입에 간접적으로 접근이 가능하다.</p><p><img src="/../../images/prototype/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-01-04%2014.31.52.png" alt="prototype">\</p><ul><li>생성자 함수가 생성한 객체 : __proto__접근자 프로퍼티로 자신의 프로토타입에 간접적 접근 가능</li><li>프로토타입 : 자신의 constructor 프로퍼티로 생성자 함수에 접근 가능</li><li>생성자 함수 : 자신의 prototype 프로퍼티로 프로토타입에 접근 가능</li></ul><blockquote><p>사실 모든 객체는 __proto__접근자 프로퍼티를 가지고 있다. 그러므로 모든 객체는 __proto__접근자 프로퍼티로 자신의 프로토타입 객체에 간접적으로 접근할 수 있다.</p></blockquote><h2 id="프로토타입-체인이란"><a href="#프로토타입-체인이란" class="headerlink" title="프로토타입 체인이란?"></a>프로토타입 체인이란?</h2><p>자바스크립트의 모든 객체는 프로토타입 기반 상속을 받고 있다. 자바스크립트는 객체의 프로퍼티에 접근할 때 해당 객체에 접근하려는 프로퍼티가 없다면, [[Prototype]] 내부슬롯의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다.</p><p>이를 프로토타입 체인이라고 한다.</p><p><img src="/../../images/prototype/prototypeChain.png" alt="프로토타입 체인"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;프로토타입이란&quot;&gt;&lt;a href=&quot;#프로토타입이란&quot; class=&quot;headerlink&quot; title=&quot;프로토타입이란?&quot;&gt;&lt;/a&gt;프로토타입이란?&lt;/h1&gt;&lt;p&gt;자바스크립트는 프로토타입을 기반으로 상속을 구현하는 언어이다. 프로토타입은 엄밀히 말하</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>this가 어떻게 작동하나요?</title>
    <link href="https://loco9939.github.io/2023/01/03/CS/this%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%82%98%EC%9A%94/"/>
    <id>https://loco9939.github.io/2023/01/03/CS/this%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%82%98%EC%9A%94/</id>
    <published>2023-01-03T05:06:06.000Z</published>
    <updated>2023-01-03T08:31:11.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this는-무엇인가"><a href="#this는-무엇인가" class="headerlink" title="this는 무엇인가?"></a>this는 무엇인가?</h1><p>this는 자바스크립트 언어에서 매우 추상적인 부분 중에 하나이다. 그래도 한마디로 단정짓는다면, <strong>this는 자기 자신을 나타내기 위한 키워드이다.</strong></p><p>좀 더 자세히 말하면 <strong>자신이 속한 객체나 자신이 생성할 객체를 가리키는 자기 참조 변수이다.</strong></p><ul><li>this는 자바스크립트 엔진에 의해 암묵적으로 생성된다.</li></ul><p>함수를 호출하면 arguments 객체와 this가 암묵적으로 함수 내부에 전달된다. arguments 객체를 함수 내부에서 지역변수처럼 사용할 수 있듯이 this도 마찬가지이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this로 자신이 속한 객체 참조</span></span><br><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="title function_">getValue</span>()); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 자신이 생성할 객체 참조</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Circle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getDiameter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle.<span class="title function_">getDiameter</span>()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p style="color:red;">this에 바인딩될 값은 함수 호출 방식에 의해 동적으로 결정되는 특징이 있다.</p> 그러므로 this를 어떻게 호출하느냐에 따라 this 값이 달라지게 된다.<h1 id="this의-작동원리-in-JavaScript"><a href="#this의-작동원리-in-JavaScript" class="headerlink" title="this의 작동원리 in JavaScript"></a>this의 작동원리 in JavaScript</h1><h2 id="1-일반-함수로-호출"><a href="#1-일반-함수로-호출" class="headerlink" title="1. 일반 함수로 호출"></a>1. 일반 함수로 호출</h2><p>일반 함수로 호출할 경우 해당 함수 내부의 this는 전역 객체에 바인딩된다.</p><p>이 때, 중첩함수, 콜백함수가 일반함수로 호출되는 경우에도 마찬가지이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// &#123;value: 100, foo: ƒ&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 내에서 정의한 중첩 함수</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다.</span></span><br><span class="line">    <span class="title function_">bar</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 콜백함수가 일반함수로 호출되는 경우</span></span><br><span class="line">  <span class="title function_">boo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// &#123;value: 100, foo: ƒ&#125;</span></span><br><span class="line">    <span class="comment">// 콜백 함수 내부의 this에는 전역 객체가 바인딩된다.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-new-키워드-사용하여-생성자-함수로-호출"><a href="#2-new-키워드-사용하여-생성자-함수로-호출" class="headerlink" title="2. new 키워드 사용하여 생성자 함수로 호출"></a>2. new 키워드 사용하여 생성자 함수로 호출</h2><p>new 키워드로 함수를 호출할 경우 자바스크립트는 해당 함수를 생성자 함수로 판단하고 암시적으로 다음 행동을 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩된다.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. this에 바인딩되어 있는 인스턴스를 초기화</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getDiameter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.</span></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol><li>새로운 객체를 생성하고 this를 바인딩한다.</li><li>this에 바인딩 되어 있는 객체를 초기화한다.</li><li>해당 함수는 return 하는 값이 없다면 this가 암묵적으로 반환된다.</li></ol><p>생성자 함수는 this가 바인딩된 객체를 암묵적으로 반환하기 때문에, 생성자 함수로 호출 시 생성자 함수 내부의 this는 생성자 함수가 미래에 생성할 객체에 바인딩된다.</p><blockquote><p>new 키워드를 사용한 함수 내부에서 return을 명시적으로 해준다는 것은 this를 암묵적으로 반환하는 생성자 함수 행동을 훼손하므로 이는 안티 패턴이다.</p></blockquote><h2 id="3-메서드로-호출"><a href="#3-메서드로-호출" class="headerlink" title="3. 메서드로 호출"></a>3. 메서드로 호출</h2><p>메서드란, 객체의 프로퍼티 값이 함수인 경우를 해당 함수를 메서드라고 부른다.</p><p>메서드로 호출될 경우 메서드 내부의 this는 <span style="color:red;">해당 메서드가 속한 객체가 아닌 메서드를 호출한 객체에 바인딩된다.</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// Lee</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">getName</span>()); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure><p><code>getName()</code>이라는 메서드가 person 객체 내부에 있으니 메서드로 호출 시 this 바인딩이 메서드를 포함하는 객체인 person에 될 것이라 생각하는 것은 잘못된 생각이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherPerson = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// getName 메서드를 anotherPerson 객체의 메서드로 할당</span></span><br><span class="line">anotherPerson.<span class="property">getName</span> = person.<span class="property">getName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getName 메서드를 호출한 객체는 anotherPerson이다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="title function_">getName</span>()); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure><ul><li>위와 같이 getName 메서드를 <code>anotherPerson</code> 객체의 메서드로 할당한 경우, getName 메서드 내부의 this는 자신을 호출한 객체에 바인딩 되기 때문에 <code>anotherPerson.name</code>을 참조하게 된다.</li></ul><h2 id="4-apply-call-bind-함수에-의한-간접-호출"><a href="#4-apply-call-bind-함수에-의한-간접-호출" class="headerlink" title="4. apply,call,bind 함수에 의한 간접 호출"></a>4. apply,call,bind 함수에 의한 간접 호출</h2><p>이 경우 함수 내부의 this는 인수로 전달된 객체에 바인딩된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getThisBinding</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 사용할 객체</span></span><br><span class="line"><span class="keyword">const</span> thisArg = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getThisBinding</span>()); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">apply</span>(thisArg)); <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">call</span>(thisArg)); <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 메서드는 첫 번째 인수로 전달한 thisArg로 this 바인딩이 교체된</span></span><br><span class="line"><span class="comment">// getThisBinding 함수를 새롭게 생성해 반환한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">bind</span>(thisArg)); <span class="comment">// getThisBinding</span></span><br><span class="line"><span class="comment">// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">bind</span>(thisArg)()); <span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure><ul><li>call, apply의 반환값은 호출한 함수의 반환값이다.</li><li>bind는 함수를 호출하지 않고 인수로 전달받은 객체로 this 바인딩이 교체된 함수를 새롭게 생성하여 반환한다.</li></ul><p>과거에는 this를 불일치 문제를 bind 함수를 사용하여 해결하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">foo</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>); <span class="comment">// ② Hi! my name is .</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>일반 함수로 호출된 콜백 함수 내부의 this.name은 브라우저 환경에서 window.name과 같다.</li><li>브라우저 환경에서 window.name은 브라우저 창의 이름을 나타내는 빌트인 프로퍼티이며 기본값은 ‘’이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">foo</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>); <span class="comment">// ② Hi! my name is Lee.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-화살표-함수로-호출"><a href="#5-화살표-함수로-호출" class="headerlink" title="5. 화살표 함수로 호출"></a>5. 화살표 함수로 호출</h2><p>화살표 함수로 호출할 경우 위의 규칙을 모두 무시하고 화살표 함수가 생성된 시점에서 상위 스코프의 this에 바인딩된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// Window</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">far</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arrow</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherObj = &#123;</span><br><span class="line">  <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function">() =&gt;</span> <span class="variable language_">this</span>)();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">far</span>(); <span class="comment">// Window</span></span><br><span class="line">anotherObj.<span class="title function_">baz</span>(); <span class="comment">// anotherObj</span></span><br></pre></td></tr></table></figure><p><img src="/../../images/this/thisExample.png" alt="this 화살표함수 예시"></p><ul><li>arrow 함수는 생성된 시점에서 상위 스코프의 this는 전역객체(Window)이다.</li><li>anotherObj 객체의 baz 메서드 내부의 this는 자신을 호출한 객체에 바인딩된다. 그러므로 화살표 함수 내부의 this는 자신이 생성된 시점에서 상위 스코프인 baz의 this와 일치한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;this는-무엇인가&quot;&gt;&lt;a href=&quot;#this는-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;this는 무엇인가?&quot;&gt;&lt;/a&gt;this는 무엇인가?&lt;/h1&gt;&lt;p&gt;this는 자바스크립트 언어에서 매우 추상적인 부분 중에 하나이다</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
    <category term="this" scheme="https://loco9939.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>AllWAIS [TRST] emotion 스타일링, 타입 덮어씌기</title>
    <link href="https://loco9939.github.io/2023/01/02/React/AllWAIS/AllWAIS-TRST-emotion-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%83%80%EC%9E%85-%EB%8D%AE%EC%96%B4%EC%94%8C%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/01/02/React/AllWAIS/AllWAIS-TRST-emotion-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%83%80%EC%9E%85-%EB%8D%AE%EC%96%B4%EC%94%8C%EA%B8%B0/</id>
    <published>2023-01-02T14:02:32.000Z</published>
    <updated>2023-01-02T14:25:20.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emotion-Styled-Component-Cascading-문제"><a href="#Emotion-Styled-Component-Cascading-문제" class="headerlink" title="Emotion Styled Component Cascading 문제"></a>Emotion Styled Component Cascading 문제</h1><p>Emotion에서 Styled Component 를 사용하면 해당 컴포넌트의 클래스 이름이 재정의된다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StyledTabPanel</span> = styled.<span class="property">div</span>&lt;<span class="title class_">TabPanelProps</span>&lt;<span class="string">&quot;div&quot;</span>&gt;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 5px;</span></span><br><span class="line"><span class="string">  border: 2px solid hsl(219deg 1% 72%);</span></span><br><span class="line"><span class="string">  border-radius: 0 5px 5px;</span></span><br><span class="line"><span class="string">  background: hsl(220deg 43% 99%);</span></span><br><span class="line"><span class="string">  min-height: 10em;</span></span><br><span class="line"><span class="string">  min-width: 550px;</span></span><br><span class="line"><span class="string">  overflow: auto;</span></span><br><span class="line"><span class="string">  display: <span class="subst">$&#123;(props) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    props.dataIndex === +(props.id?.slice(-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">number</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">      ? <span class="string">&quot;block&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      : <span class="string">&quot;none&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TabPanel</span>(<span class="params">&#123; children, className, ...restProps &#125;: TabPanelProps&lt;<span class="string">&quot;div&quot;</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; selected, setSelected &#125; = <span class="title function_">useTabsContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledTabPanel</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">tabIndex</span>=<span class="string">&#123;0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dataIndex</span>=<span class="string">&#123;selected&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...restProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledTabPanel</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>styled component를 사용하여 TabPanel 컴포넌트를 생성하였다. 브라우저에서 해당 요소를 확인해보면 다음과 같이 알 수 없는 클래스로 나오는 것을 알 수 있다.</p><p><img src="/../../../images/TRST/emotionStyled/emotionStyled.png" alt="emotion styled component"></p><h1 id="TypeScript-오류-사용량-덮어씜"><a href="#TypeScript-오류-사용량-덮어씜" class="headerlink" title="TypeScript 오류 - 사용량 덮어씜"></a>TypeScript 오류 - 사용량 덮어씜</h1><p><img src="/../../../images/TRST/emotionStyled/tsduplicated.png" alt="ts덮어씜"></p><p>props를 생성하고 해당 props를 통해 styled Component에서 조건부 스타일을 주려고 한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Component</span>&lt;T <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">ElementType</span>&gt; = &#123;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">React</span>.<span class="property">ComponentPropsWithRef</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TabPanelProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">ElementType</span>&gt; = &#123;</span><br><span class="line">  dataIndex?: <span class="title class_">TabsContextValue</span>[<span class="string">&quot;selected&quot;</span>];</span><br><span class="line">&#125; &amp; <span class="title class_">Component</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledTabPanel</span> = styled.<span class="property">div</span>&lt;<span class="title class_">TabPanelProps</span>&lt;<span class="string">&quot;div&quot;</span>&gt;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 5px;</span></span><br><span class="line"><span class="string">  border: 2px solid hsl(219deg 1% 72%);</span></span><br><span class="line"><span class="string">  border-radius: 0 5px 5px;</span></span><br><span class="line"><span class="string">  background: hsl(220deg 43% 99%);</span></span><br><span class="line"><span class="string">  min-height: 10em;</span></span><br><span class="line"><span class="string">  min-width: 550px;</span></span><br><span class="line"><span class="string">  overflow: auto;</span></span><br><span class="line"><span class="string">  display: <span class="subst">$&#123;(props) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    props.dataIndex === +(props.id?.slice(-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">number</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">      ? <span class="string">&quot;block&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      : <span class="string">&quot;none&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TabPanel</span>(<span class="params">&#123; children, className, ...restProps &#125;: TabPanelProps&lt;<span class="string">&quot;div&quot;</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; selected, setSelected &#125; = <span class="title function_">useTabsContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledTabPanel</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">tabIndex</span>=<span class="string">&#123;0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dataIndex</span>=<span class="string">&#123;selected&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...restProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledTabPanel</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>해당 타입을 정의할 때, 필수가 아닌 선택 사항으로 정의해주어서 해결하였다.</li><li>styled component 타입 지정 시 해당 컴포넌트의 props라고 지정을 해줘야지만 props에서 찾을 수 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Emotion-Styled-Component-Cascading-문제&quot;&gt;&lt;a href=&quot;#Emotion-Styled-Component-Cascading-문제&quot; class=&quot;headerlink&quot; title=&quot;Emotion Styled Com</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    <category term="AllWAIS" scheme="https://loco9939.github.io/categories/React/AllWAIS/"/>
    
    
  </entry>
  
  <entry>
    <title>이벤트 위임이란 무엇이고 왜 사용하는가?</title>
    <link href="https://loco9939.github.io/2023/01/02/CS/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/"/>
    <id>https://loco9939.github.io/2023/01/02/CS/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/</id>
    <published>2023-01-02T13:18:30.000Z</published>
    <updated>2023-01-02T14:14:00.221Z</updated>
    
    <content type="html"><![CDATA[<p>이벤트 위임에 대해 알기 전 우선 이벤트와 이벤트 핸들러에 대해 알고 가자.</p><h1 id="이벤트와-이벤트-핸들러"><a href="#이벤트와-이벤트-핸들러" class="headerlink" title="이벤트와 이벤트 핸들러"></a>이벤트와 이벤트 핸들러</h1><p>브라우저는 사용자가 어떤 행동을 하였을 때, 이를 감지하여 이벤트를 발생시킨다.</p><p>ex) 참된 개발자: 브라우저야 사용자가 제출하기 버튼을 클릭 했을 때, 정보를 제출하는 함수를 호출(실행)해줘~</p><p>이 때 사용자가 언제 행동을 할지 모르기 때문에 개발자는 브라우저에게 대신 함수를 호출해달라고 한다.</p><p><strong>이벤트 발생 시 호출할 함수를 이벤트 핸들러</strong>라고 한다.</p><ul><li>이벤트 발생 시 호출될 함수: 이벤트 핸들러</li><li>이벤트 발생 시 브라우저에게 이벤트 핸들러 호출을 위임: 이벤트 핸들러 등록</li><li>이벤트 핸들러를 등록하는 방법은 여러가지가 있는데 설명을 위해 이번 장에서는 <strong>이벤트 리스너 방식을 사용하겠습니다.</strong></li></ul><h1 id="이벤트-위임"><a href="#이벤트-위임" class="headerlink" title="이벤트 위임"></a>이벤트 위임</h1><p>이벤트 위임은 이벤트 리스너를 하위 요소에 추가하는 대신 상위 요소에 추가하여 이벤트를 위임하는 것을 말한다.</p><p>이벤트 리스너는 이벤트 버블링(Event Bubbling)으로 인해 하위 요소에서 이벤트가 발생할 때 마다 이벤트 리스너가 실행된다.</p><p>아래 그림은 이벤트 전파가 일어나는 흐름을 설명한 그림이다. 이벤트 전파에 대한 설명은 그림으로 대체한다.</p><p><img src="/../../images/event/eventFlow.png" alt="이벤트 Flow"></p><h1 id="이벤트-위임을-사용하는-이유"><a href="#이벤트-위임을-사용하는-이유" class="headerlink" title="이벤트 위임을 사용하는 이유"></a>이벤트 위임을 사용하는 이유</h1><p>이벤트 위임을 사용하면 하위 요소에 같은 동작을 하는 이벤트를 중복해서 등록해주지 않고 상위 요소에 이벤트 위임을 통해 등록하여 중복을 피하고 불필요한 메모리 낭비를 줄일 수 있다.</p><p>또한, 제거된 요소에 이벤트를 해제하고 새 요소에 이벤트를 다시 등록하는 번거로운 작업을 할 필요가 없어지므로 적절한 상황에 맞게 유용하게 사용할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;이벤트 위임에 대해 알기 전 우선 이벤트와 이벤트 핸들러에 대해 알고 가자.&lt;/p&gt;
&lt;h1 id=&quot;이벤트와-이벤트-핸들러&quot;&gt;&lt;a href=&quot;#이벤트와-이벤트-핸들러&quot; class=&quot;headerlink&quot; title=&quot;이벤트와 이벤트 핸들러&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>모의 면접 회고</title>
    <link href="https://loco9939.github.io/2023/01/02/CS/%EB%AA%A8%EC%9D%98-%EB%A9%B4%EC%A0%91-%ED%9A%8C%EA%B3%A0/"/>
    <id>https://loco9939.github.io/2023/01/02/CS/%EB%AA%A8%EC%9D%98-%EB%A9%B4%EC%A0%91-%ED%9A%8C%EA%B3%A0/</id>
    <published>2023-01-02T12:32:10.000Z</published>
    <updated>2023-01-04T05:07:13.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-모의-면접-회고"><a href="#📌-모의-면접-회고" class="headerlink" title="📌 모의 면접 회고"></a>📌 모의 면접 회고</h1><p>HTML 수업 때 데레사 강사님께 기술면접을 1:1로 본 이후로 오래간만에 모의 면접을 보게되었다.</p><p>박신영 강사님께서 인성면접을, 다른 수강생은 기술면접을 면접관 입장이 되어 나에게 질문해주었다.</p><h2 id="1-😃-인성-면접"><a href="#1-😃-인성-면접" class="headerlink" title="1. 😃 인성 면접"></a>1. 😃 인성 면접</h2><p>어떤 개발자가 되길 원하는가?, 프로젝트 및 협업 과정에서 어떤 갈등을 겪었고 어떻게 해결하였는지 등 개발자로서 어떤 마인드를 가지고 있고 어떤 사람인지 판단할 수 있을 만한 질문들이었다.</p><p>모든 질문에 어떻게 답변했는지는 기억나지 않지만 피드백을 받은 것을 이야기해보자면,</p><h3 id="👍-좋았던-점"><a href="#👍-좋았던-점" class="headerlink" title="👍 좋았던 점"></a>👍 좋았던 점</h3><ol><li>시작할 때 웃는 모습이 좋은 사람이라는 인상을 주고 마음을 편안하게 해주어 좋았다.</li><li>커뮤니케이션과 협업을 일관되게 강조하고 중요시하고 있다는 점이 좋았다.</li><li>말의 끝맺음을 제대로 하여 듣는 사람 입장에서 좋았다.<ul><li><strong>추가로 대화에서, 개발에서 정리를 잘하는 사람인데 이 부분으로 어필할 수 있으면 더욱 좋을듯!</strong></li></ul></li><li>Why? 에 대해 생각하는 사람으로 느껴져서 좋았다.</li><li>약점에 대해서 스스로 대안이 있어서 인상적이었다.</li></ol><h3 id="💦-아쉬운-점"><a href="#💦-아쉬운-점" class="headerlink" title="💦 아쉬운 점"></a>💦 아쉬운 점</h3><ol><li>의견, 주장이 강해보여 의견 충돌 시 강한 타입처럼 느껴질 수 있을 것 같아보인다.</li><li>어떤 개발자가 되고 싶냐는 질문에 좀 더 <strong>직무, 역량 관점에서 답변할 수 있으면 좋을 것</strong> 같다.</li><li>면접볼 때는 흔들의자에 앉지 말고 고정된 의자에 앉도록 하자.</li><li>개발자로서 역량 설명할 때 커뮤니케이션 부분에서 누구와 협업을 하는지에 대해서도 간략하게 짚고 넘어갔으면 좋았을 것 같다.</li><li>협업 경험에 대해 설명할 때, 부정적인 얘기를 했던게 기억에 남을 것 같다. 이 부분을 나의 약점을 잘 살려냈던 것처럼 풀어나가보면 좋을 것 같다.</li><li><strong>신입,주니어 라는 용어 사용 금지</strong></li></ol><h2 id="2-🛠-기술-면접"><a href="#2-🛠-기술-면접" class="headerlink" title="2. 🛠 기술 면접"></a>2. 🛠 기술 면접</h2><p>기술면접은 프로젝트 경험에 대해 질문해주셨고 기술적으로 깊은 고민을 해본 적이 있는지, 면접자가 기술에 사용 이유와 원리를 알고 사용하는 것인지 확인하는 질문들이었다.</p><h3 id="👍-좋았던-점-1"><a href="#👍-좋았던-점-1" class="headerlink" title="👍 좋았던 점"></a>👍 좋았던 점</h3><ol><li>페어프로그래밍을 통해 기술적인 단계를 깊이있게 공부하고 블로그에 정리해두었다는 점이 인상깊었다.</li><li><strong>기술 블로그에 대해 피드백을 받고 개선한다는 부분을 차별점으로 어필하는 모습 좋았다.</strong></li></ol><h3 id="💦-아쉬운-점-1"><a href="#💦-아쉬운-점-1" class="headerlink" title="💦 아쉬운 점"></a>💦 아쉬운 점</h3><ol><li>전반적으로 기술적인 답변이 제대로 나오지 않아 아쉬웠다.</li><li>CBD 라이브러리를 만들었다고 할 때 정확히 어떤 부분까지 만들어보았는지 자세한 설명이 부족했다.</li><li>회피와 타협이라는 부정적인 단어 사용이 잦아서 아쉬웠다.<ul><li><strong>부정적인 단어 대신 “라이브러리를 고치는 것은 비용이 많이 드는 작업이어서 프로젝트 기간에는 해당 부분을 이런 식으로 구현하여 해결하였다”로 사용해보자.</strong></li></ul></li><li>트러블 슈팅 질문에 대한 답변이 기술적인 이슈 해결이 아닌 다른 답변이 나와서 아쉬웠다.<ul><li><strong>트러블 슈팅 질문에 대한 소스들을 미리 준비해두면 도움이 될 것 같다.</strong></li></ul></li><li>리팩터링 질문이 나왔을 때, 너무 협업에만 집중해서 이야기한 것이 아쉽다. 그렇다면 성능 개선, 최적화 등에 대한 고민을 하지 않는 것처럼 보여서 아쉬웠다.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;📌-모의-면접-회고&quot;&gt;&lt;a href=&quot;#📌-모의-면접-회고&quot; class=&quot;headerlink&quot; title=&quot;📌 모의 면접 회고&quot;&gt;&lt;/a&gt;📌 모의 면접 회고&lt;/h1&gt;&lt;p&gt;HTML 수업 때 데레사 강사님께 기술면접을 1:1로 본 이후</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>merge sort</title>
    <link href="https://loco9939.github.io/2022/12/29/Algorithm/merge%20sort/"/>
    <id>https://loco9939.github.io/2022/12/29/Algorithm/merge%20sort/</id>
    <published>2022-12-29T04:07:29.000Z</published>
    <updated>2022-12-29T05:21:55.233Z</updated>
    
    <content type="html"><![CDATA[<!-- 글쓰기 목적: merge sort를 처음 듣는 사람에게 이해시키도록 작성하자--><h1 id="merge-sort"><a href="#merge-sort" class="headerlink" title="merge sort"></a>merge sort</h1><p><img src="/../../images/mergeSort/mergeSort.jpeg" alt="mergeSort"></p><p>정렬되지 않는 배열을 각각 하나의 원소만 포함하는 n개의 부분 배열로 분할한다. n개의 부분 배열이 1개가 될 때까지 반복해서 병합할 때 정렬한다. 최종적으로 남은 부분 배열이 정렬된 배열이 된다.</p><p>두가지 역할을 하는 함수로 나누어 설명할 수 있다.</p><ol><li><strong>mergeSort(arr)</strong>: 배열을 절반으로 나누는 함수</li><li><strong>merge(left, right)</strong>: 반으로 나뉜 두 배열을 정렬하여 새로운 배열로 병합하는 함수</li></ol><h2 id="merge-함수-구현"><a href="#merge-함수-구현" class="headerlink" title="merge 함수 구현"></a>merge 함수 구현</h2><p>left[0]과 right[0]를 비교하여 더 작은 수를 새로운 배열에 순서대로 담는다.</p><p>만약 left[0]이 right[0]보다 작다면 새로운 배열에 left[0]을 담고 이후에 left[1]과 right[0]을 비교한다.</p><p>이렇게 비교하면서 새로운 배열을 생성하기를 left, right 배열의 요소가 하나도 남지 않을 때 까지 반복한다.</p><p>이게 가능하기 위해서는 left와 right는 정렬된 상태의 배열이여야만 합니다. left, right를 정렬된 배열로 만들어 주기 위해서 mergeSort 함수를 이용합니다.</p><h2 id="mergeSort-함수-구현"><a href="#mergeSort-함수-구현" class="headerlink" title="mergeSort 함수 구현"></a>mergeSort 함수 구현</h2><p>mergeSort 함수는 인수로 주어진 배열을 요소가 1개일 때까지 절반으로 나누고 정렬하며 merge 해주는 함수이다.</p><p>즉, 요소가 1개인 서로 다른 두 배열을 정렬하면서 하나의 배열로 만들어간다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">33</span>,<span class="number">2</span>,<span class="number">51</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1단계 - 나누기</span></span><br><span class="line">[<span class="number">33</span>,<span class="number">2</span>,<span class="number">51</span>], [<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2단계 - 나누기</span></span><br><span class="line">[<span class="number">33</span>,<span class="number">2</span>],[<span class="number">51</span>],[<span class="number">1</span>,<span class="number">10</span>],[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3단계 - 나누기</span></span><br><span class="line">[<span class="number">33</span>],[<span class="number">2</span>],[<span class="number">51</span>],[<span class="number">1</span>],[<span class="number">10</span>],[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4단계 - 병합</span></span><br><span class="line">[<span class="number">2</span>,<span class="number">33</span>], [<span class="number">1</span>,<span class="number">51</span>], [<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5단계 - 병합</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">51</span>], [<span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6단계 - 최종 병합</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">33</span>,<span class="number">51</span>]</span><br></pre></td></tr></table></figure><h2 id="코드-구현"><a href="#코드-구현" class="headerlink" title="코드 구현"></a>코드 구현</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">left, right</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sorted = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// left, right 비교하여 정렬된 배열에 담는다.</span></span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span> &amp;&amp; right.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">      sorted.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sorted.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// left 또는 right 배열 중 하나는 아직 남아있으므로 남은 배열은 정렬되어 있으므로 복사하여 뒤에 붙혀준다.</span></span><br><span class="line">  <span class="keyword">return</span> [...sorted, ...left, ...right];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mergeSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);</span><br><span class="line">  <span class="keyword">const</span> right = arr.<span class="title function_">slice</span>(mid);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">33</span>,<span class="number">2</span>,<span class="number">51</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> sorted = <span class="title function_">mergeSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [33,2,51,1,10,3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorted); <span class="comment">// [1,2,3,10,33,51]</span></span><br></pre></td></tr></table></figure><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><ul><li>mergeSort는 O(n log n) 시간 복잡도를 가진다. 왜냐하면 절반씩 나눠서 비교하기 때문이다.</li><li>안정 정렬에 속한다.</li></ul><p>참고자료</p><ul><li><a href="https://velog.io/@proshy/JSmerge-sort%ED%95%A9%EB%B3%91-%EC%A0%95%EB%A0%AC">proshy 병합정렬</a></li><li><a href="https://maramarathon.tistory.com/55">maramarathon 병합정렬</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- 글쓰기 목적: merge sort를 처음 듣는 사람에게 이해시키도록 작성하자--&gt;

&lt;h1 id=&quot;merge-sort&quot;&gt;&lt;a href=&quot;#merge-sort&quot; class=&quot;headerlink&quot; title=&quot;merge sort&quot;&gt;&lt;/a&gt;merg</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://loco9939.github.io/categories/Algorithm/"/>
    
    
    <category term="정렬" scheme="https://loco9939.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
    <category term="merge sort" scheme="https://loco9939.github.io/tags/merge-sort/"/>
    
  </entry>
  
  <entry>
    <title>HTMLElement 조작과 타입 좁히기</title>
    <link href="https://loco9939.github.io/2022/11/22/TypeScript/HTMLElement-%EC%A1%B0%EC%9E%91%EA%B3%BC-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2022/11/22/TypeScript/HTMLElement-%EC%A1%B0%EC%9E%91%EA%B3%BC-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0/</id>
    <published>2022-11-22T12:21:38.000Z</published>
    <updated>2022-11-23T11:09:51.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-TypeScript로-HTML-요소-조작하기"><a href="#📌-TypeScript로-HTML-요소-조작하기" class="headerlink" title="📌 TypeScript로 HTML 요소 조작하기"></a>📌 TypeScript로 HTML 요소 조작하기</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (title <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span><br><span class="line">  title.<span class="property">innerHTML</span> = <span class="string">&quot;제목입니다.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>❗️ <code>title 요소가 null 타입일 수 도 있다.</code>라는 오류!</p><p>자바스크립트에서 HTML 요소를 타입 좁히기 없이 조작할 수 있었지만, <strong>TypeScript에서는 타입을 확실하게 지정해줘야지만 오류를 발생시키지 않는다.</strong></p><p>위와 같이 <red>타입을 좁히는 과정을 <strong>Narrowing</strong></red>이라고 한다.</p><h2 id="✈️-narrowing-방법"><a href="#✈️-narrowing-방법" class="headerlink" title="✈️ narrowing 방법"></a>✈️ narrowing 방법</h2><h3 id="1-HTML-구분-명확히"><a href="#1-HTML-구분-명확히" class="headerlink" title="1. HTML 구분 명확히"></a>1. HTML 구분 명확히</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;image&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (img <span class="keyword">instanceof</span> <span class="title class_">HTMLImageElement</span>) &#123;</span><br><span class="line">  img.<span class="property">src</span> = <span class="string">&quot;new.jpg&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HTMLImageElement 말고 그냥 HTMLElement로 검사를 하게될 경우 광범위한 타입에 대한 문제와 <strong>HTMLElement 에는 src 속성이 없으므로 명확한 타입으로 narrowing 해줘야한다.</strong></li></ul><h3 id="2-instance-of-연산자"><a href="#2-instance-of-연산자" class="headerlink" title="2. instance of 연산자"></a>2. instance of 연산자</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (title <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span><br><span class="line">  title.<span class="property">innerHTML</span> = <span class="string">&quot;제목입니다.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-optional-chaining-연산자"><a href="#3-optional-chaining-연산자" class="headerlink" title="3. optional chaining 연산자"></a>3. optional chaining 연산자</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">button?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>button 요소가 null이거나 undefined 이면 undefined를 반환하고 그렇지 않으면 이벤트 리스너를 등록한다.</li></ul><h3 id="4-명시적-태그-사용-tagged-union"><a href="#4-명시적-태그-사용-tagged-union" class="headerlink" title="4. 명시적 태그 사용(tagged union)"></a>4. 명시적 태그 사용(tagged union)</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UploadEvent</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">  <span class="attr">fileName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DownloadEvent</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;download&quot;</span>;</span><br><span class="line">  <span class="attr">fileName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-let-대신-const-키워드로-선언"><a href="#5-let-대신-const-키워드로-선언" class="headerlink" title="5. let 대신 const 키워드로 선언"></a>5. let 대신 const 키워드로 선언</h3><ul><li>만능은 아니다. 너무 많은 후보들이 있으면 곤란하다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mixed = [<span class="string">&quot;x&quot;</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// (&#x27;x&#x27;|1)[]</span></span><br><span class="line"><span class="comment">// [&#x27;x&#x27;, 1]</span></span><br><span class="line"><span class="comment">// [string, number]</span></span><br><span class="line"><span class="comment">// readonly [string, number]</span></span><br><span class="line"><span class="comment">// (string|number)[]</span></span><br><span class="line"><span class="comment">// readonly (string|number)[]</span></span><br></pre></td></tr></table></figure><h3 id="6-if-구문-사용"><a href="#6-if-구문-사용" class="headerlink" title="6. if 구문 사용"></a>6. if 구문 사용</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;foo&quot;</span>); <span class="comment">// type is HTMLElement | null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (el) &#123;</span><br><span class="line">  el; <span class="comment">// type is HTMLElement</span></span><br><span class="line">  el.<span class="property">innerHTML</span> = <span class="string">&quot;party time&quot;</span>.<span class="title function_">blink</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el; <span class="comment">// type is null</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;No element #foo&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-in-연산자-사용"><a href="#7-in-연산자-사용" class="headerlink" title="7. in 연산자 사용"></a>7. in 연산자 사용</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickAB</span>(<span class="params">ab: A | B</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> ab) &#123;</span><br><span class="line">    ab; <span class="comment">// type is A</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ab; <span class="comment">// type is B</span></span><br><span class="line">  &#125;</span><br><span class="line">  ab; <span class="comment">// type is A | B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;📌-TypeScript로-HTML-요소-조작하기&quot;&gt;&lt;a href=&quot;#📌-TypeScript로-HTML-요소-조작하기&quot; class=&quot;headerlink&quot; title=&quot;📌 TypeScript로 HTML 요소 조작하기&quot;&gt;&lt;/a&gt;📌 TypeScript로 HTML 요소 조작하기&lt;/h1&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; title = &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (title &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;HTMLElement&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title.&lt;span class=&quot;property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;제목입니다.&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="https://loco9939.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>🏰 useCallback과 useMemo</title>
    <link href="https://loco9939.github.io/2022/11/22/React/Hooks/%F0%9F%8F%B0-useCallback%EA%B3%BC-useMemo/"/>
    <id>https://loco9939.github.io/2022/11/22/React/Hooks/%F0%9F%8F%B0-useCallback%EA%B3%BC-useMemo/</id>
    <published>2022-11-22T10:46:22.000Z</published>
    <updated>2022-11-23T11:20:51.075Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="📌-useCallback과-useMemo-사용-이유"><a href="#📌-useCallback과-useMemo-사용-이유" class="headerlink" title="📌 useCallback과 useMemo 사용 이유"></a>📌 useCallback과 useMemo 사용 이유</h1><p>함수 컴포넌트는 렌더링 될 때 마다 몸체가 다시 실행되므로 컨텍스트를 기억하기 위해 Hook을 사용한다. 그리고 상위 컴포넌트는 기억된 상태 또는 업데이트 함수를 <strong>하위 컴포넌트에게 전달한다.</strong></p><p>이 때 상위 컴포넌트가 다시 실행되면 <red>이벤트 핸들러 함수들도 새로 그려지므로 동일참조를 벗어난다.</red></p><!-- more --><h2 id="🐸-useCallback"><a href="#🐸-useCallback" class="headerlink" title="🐸 useCallback"></a>🐸 useCallback</h2><p><code>useCallback()</code>은 하위 컴포넌트에 전달되는 함수를 기억해두고 이를 이용하여 컴포넌트 업데이트 시 리렌더링이 발생할 때, <strong>기억된 함수를 사용해 불필요한 리렌더링을 줄여 성능을 높이기 위해 사용한다.</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123; count: initialCount, step &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> handleIncrement = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + step);</span><br><span class="line">&#125;, [step]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> handleDecrement = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">setCount</span>(count - step);</span><br><span class="line">&#125;, [count, step]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Display</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">Counter.Display</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li>기억해야할 데이터 타입이 함수인 경우 사용한다.</li><li>useEffect()처럼 종속성 배열을 통해 조건에 따라 기억 여부를 재설정할 수 있다.</li><li>1번처럼 콜백함수로 전달해주는 경우는 reduce처럼 함수를 기억하고 있는다. <red>기억되어있는 정보를 가지고 값을 변경하는 것이다.</red></li><li>2번처럼 값을 전달해주면 newState로 받아들여져서 종속성 배열이 바뀌면 렌더링이 발생하게된다. <red>기억하지 않고 새로운 값을 전달해주고 그 값으로 렌더링해준다.</red></li></ul><h2 id="🐍-useMemo"><a href="#🐍-useMemo" class="headerlink" title="🐍 useMemo"></a>🐍 useMemo</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useCallback</span>(fn, deps) === <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> fn, deps);</span><br></pre></td></tr></table></figure><p>useMemo()는 JavaScript 데이터 타입을 기억해야 할 때 사용합니다. 만약 기억해야할 타입이 함수라면 useCallback을 사용한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123; count: initialCount, step &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useMemo(() =&gt; fn, deps)</span></span><br><span class="line">  <span class="keyword">const</span> handleIncrement = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + step),</span><br><span class="line">    [step]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useCallback(fn, deps)</span></span><br><span class="line">  <span class="keyword">const</span> handleDecrement = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount - step);</span><br><span class="line">  &#125;, [step]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// memoized Components</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">DecButton</span> = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span>,</span><br><span class="line">    [handleDecrement]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">IncButton</span> = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span>,</span><br><span class="line">    [handleIncrement]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;DecButton&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter.Display</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">Counter.Display</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;IncButton&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useMemo()는 해당 컴포넌트를 기억한다.</li><li>종속성 배열 <code>[count, onDecrement, onIncrement, restProps]</code>이 변경되면 useMemo가 반환하는 값을 기억하고 실행한다.</li><li><code>setCount()</code>를 기억하고 있어 동일참조를 하므로 count 값을 기억하고 있다.</li></ul><h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>값을 기억하는 목적으로 좋지만… 굳이 이것을 사용하려고 복잡하게 또 많은 시간을 할애할 필요가 있을까 ?</p><aside><p>📌 회고할 때, profiler의 성능을 조금이나마 개선해보려고 노력해봤다라는 것을 해본 것을 인터뷰때 어필해보자.</p></aside>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;📌-useCallback과-useMemo-사용-이유&quot;&gt;&lt;a href=&quot;#📌-useCallback과-useMemo-사용-이유&quot; class=&quot;headerlink&quot; title=&quot;📌 useCal</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    <category term="Hooks" scheme="https://loco9939.github.io/categories/React/Hooks/"/>
    
    
  </entry>
  
  <entry>
    <title>⛱ useRef</title>
    <link href="https://loco9939.github.io/2022/11/22/React/Hooks/%E2%9B%B1-useRef/"/>
    <id>https://loco9939.github.io/2022/11/22/React/Hooks/%E2%9B%B1-useRef/</id>
    <published>2022-11-22T10:27:24.000Z</published>
    <updated>2022-11-23T11:18:08.490Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="🐶-useRef"><a href="#🐶-useRef" class="headerlink" title="🐶 useRef()"></a>🐶 useRef()</h1><p>리액트에서 ref는 주로 DOM 노드 참조 목적으로 사용된다. 컴포넌트 렌더링에 영향을 주지 않는 값 참조 목적으로 사용된다.</p><p><code>useRef()</code>는 함수 컴포넌트 내부에서 특정 값을 지속적으로 참조할 때 사용한다. <code>useState()</code>와 달리 <code>useRef()</code>는 <strong>현재 값이 변경되어도 컴포넌트가 다시 렌더링되지 않아 애플리케이션 성능을 최적화 할 수 있다.</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useRef() 훅을 사용해 카운트 참조 생성</span></span><br><span class="line"><span class="keyword">const</span> countRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 카운트 참조의 현재 값이 변경되어도 컴포넌트는 다시 렌더링 되지 않음</span></span><br><span class="line">countRef.<span class="property">current</span> = countRef.<span class="property">current</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>클래스는 자신의 인스턴스 멤버를 사용해 렌더링 상관없이 특정 값을 기억할 수 있는데 반해, 함수는 다시 렌더링 되면 매번 함수 몸체가 초기화 되므로 특정 값을 기억할 때 useRef()를 사용하면 유용하다.</p></blockquote><h2 id="🐥-useRef-사용목적"><a href="#🐥-useRef-사용목적" class="headerlink" title="🐥 useRef() 사용목적"></a>🐥 useRef() 사용목적</h2><h3 id="1-DOM-요소-접근-및-조작"><a href="#1-DOM-요소-접근-및-조작" class="headerlink" title="1. DOM 요소 접근 및 조작"></a>1. DOM 요소 접근 및 조작</h3><p>리액트 render() 단계에서는 DOM이 그려지기 전 단계이므로 <red>DOM에 직접 접근할 수 없다.</red></p><p>하지만 useRef()를 사용하여 컴포넌트가 <strong>mount된 시점 이후 DOM 요소에 접근하여 조작</strong>할 수 있도록 도와준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TextInputWithFocusButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// `current` points to the mounted text input element</span></span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>아직 DOM이 그려지기 전이라 DOM 요소에 접근하여 focus()를 활성화 시킬 수 없지만, useRef()를 사용하여 클래스 컴포넌트 생명주기를 고려하여 DOM 요소에 접근할 수 있도록 도와준다.</li></ul><h3 id="2-함수-컴포넌트-내부에서-특정-값을-기억"><a href="#2-함수-컴포넌트-내부에서-특정-값을-기억" class="headerlink" title="2. 함수 컴포넌트 내부에서 특정 값을 기억"></a>2. 함수 컴포넌트 내부에서 특정 값을 기억</h3><p>함수 컴포넌트 내부에서 특정 값을 기억하면서 값을 변경해도 컴포넌트 렌더링에 영향을 주지 않아야한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> randomcolor <span class="keyword">from</span> <span class="string">&quot;randomcolor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DoNotReRender</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> colorRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [stateValue, setStateValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [stateHex, setStateHex] = <span class="title function_">useState</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line">  <span class="keyword">const</span> [refHex, setRefHex] = <span class="title function_">useState</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setStateHex</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line">  &#125;, [stateValue]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setRefHex</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line">  &#125;, [colorRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GridItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">background:</span> $&#123;<span class="attr">stateHex</span>&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>State<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChangeColorButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">aria-label</span>=<span class="string">&quot;state 컬러 변경&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setStateValue(stateValue + 1)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>컬러 변경 버튼을 누르면 컴포넌트가 다시 렌더링 됩니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GridItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GridItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">background:</span> $&#123;<span class="attr">refHex</span>&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          colorRef.current += 10;</span></span><br><span class="line"><span class="language-xml">          console.log(`colorRef.current = $&#123;colorRef.current&#125;`);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ref<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChangeColorButton</span> <span class="attr">aria-label</span>=<span class="string">&quot;ref 컬러 변경&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>컬러 변경 버튼을 누르면 컴포넌트가 다시 렌더링 될까요?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GridItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>useState()</code>의 <code>setStateValue()</code>메서드를 사용하여 값을 변경한 경우 재렌더링이 발생하지만, <code>useRef()</code>의 current 값을 갱신하면 재렌더링이 발생하지 않는다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;🐶-useRef&quot;&gt;&lt;a href=&quot;#🐶-useRef&quot; class=&quot;headerlink&quot; title=&quot;🐶 useRef()&quot;&gt;&lt;/a&gt;🐶 useRef()&lt;/h1&gt;&lt;p&gt;리액트에서 ref는 주로</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    <category term="Hooks" scheme="https://loco9939.github.io/categories/React/Hooks/"/>
    
    
  </entry>
  
  <entry>
    <title>🚧 Literal type과 as const</title>
    <link href="https://loco9939.github.io/2022/11/22/TypeScript/%F0%9F%9A%A7-Literal-type%EA%B3%BC-as-const/"/>
    <id>https://loco9939.github.io/2022/11/22/TypeScript/%F0%9F%9A%A7-Literal-type%EA%B3%BC-as-const/</id>
    <published>2022-11-22T00:46:27.000Z</published>
    <updated>2022-11-23T11:16:22.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-Literal-Type"><a href="#📌-Literal-Type" class="headerlink" title="📌 Literal Type"></a>📌 Literal Type</h1><p>타입 지정시 string, number 같은 원시타입만 할당할 수 있는 것이 아니다.</p><p>개발자가 지정한 글자나 숫자 들을 타입으로 지정할 수 있다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">john</span>: <span class="string">&quot;Texas&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">kim</span>: <span class="number">33</span>;</span><br></pre></td></tr></table></figure><ul><li>이제 john에는 ‘Texas’라는 글자만 할당될 수 있고 kim에는 33이라는 숫자만 할당될 수 있다.</li></ul><span id="more"></span><h2 id="🔨-타입스크립트-const"><a href="#🔨-타입스크립트-const" class="headerlink" title="🔨 타입스크립트 const"></a>🔨 타입스크립트 const</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;kim&quot;</span> | <span class="string">&quot;loco&quot;</span>;</span><br></pre></td></tr></table></figure><p>타입스크립트는 변할 수 있는 중요한 정보를 위와 같이 표현할 수 있다. 물론 자바스크립트에서는 불가능하다.</p><h2 id="❗️-Literal-Type-주의사항"><a href="#❗️-Literal-Type-주의사항" class="headerlink" title="❗️ Literal Type 주의사항"></a>❗️ Literal Type 주의사항</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a: <span class="string">&quot;kim&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(user.<span class="property">name</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><ul><li>위 예시에서 오류가 발생하는 이유는 user 객체의 name 프로퍼티의 타입은 string인데 foo함수 매개변수 a의 타입은 Literal Type인 ‘kim’이기 때문에 오류가 난다.</li></ul><p>이러한 문제를 해결하기 위해선 <strong>object 만들 때 타입을 미리 제한하여</strong>만들거나 <red>as const</red>를 object 자료형에 붙혀서 사용한다.</p><h2 id="🦖-as-const"><a href="#🦖-as-const" class="headerlink" title="🦖 as const"></a>🦖 as const</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Lang</span> = <span class="string">&quot;JavaScript&quot;</span> | <span class="string">&quot;TypeScript&quot;</span> | <span class="string">&quot;Python&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setLang</span>(<span class="params">lang: Lang</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setLang</span>(<span class="string">&quot;JavaScript&quot;</span>); <span class="comment">// 정상</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> language = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="title function_">setLang</span>(language); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><ul><li>변수에 할당하는 순간 language 식별자가 타입 추론을 <code>string</code>으로 하였다.</li></ul><p>이러한 문제를 해결하는 방법은</p><h3 id="1-타입-선언시-language의-가능한-값-제한"><a href="#1-타입-선언시-language의-가능한-값-제한" class="headerlink" title="1. 타입 선언시 language의 가능한 값 제한"></a>1. 타입 선언시 language의 가능한 값 제한</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">lang</span>: <span class="title class_">Lang</span> = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="title function_">setLang</span>(lang); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure><h3 id="2-const-키워드를-사용하여-상수로-표현"><a href="#2-const-키워드를-사용하여-상수로-표현" class="headerlink" title="2. const 키워드를 사용하여 상수로 표현"></a>2. const 키워드를 사용하여 상수로 표현</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lang = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="title function_">setLang</span>(lang); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure><ul><li>const 키워드를 사용하여 타입 체커에게 lang은 변경할 수 없다고 알려준다.</li><li>타입스크립트는 lang에 대해 더 정확한 타입인 ‘JavaScript’로 추론할 수 있다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">panTo</span>(<span class="params">where: [number, number]</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> loc = [<span class="number">10</span>, <span class="number">20</span>]; <span class="comment">// type is number[]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">panTo</span>(loc); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><ul><li>튜플 사용 시 주의사항은 const로 선언하여도 타입스크립트가 길이를 알 수 없는 숫자의 배열로 추론한다.</li><li><code>const loc: [number, number] = [10, 20]</code> 로 의도를 정확히 파악할 수 있도록 타입 선언을 제공한다.</li></ul><h3 id="const-와-as-const-차이"><a href="#const-와-as-const-차이" class="headerlink" title="const 와 as const 차이"></a>const 와 as const 차이</h3><ul><li>const 는 단지 값이 가리키는 참조가 변하지 않는 얕은 상수이다.</li><li>as const(상수 문맥 제공)은 그 값이 내부까지 깊은 상수라는 사실을 타입스크립트에게 알려준다.<ul><li><code>const loc = [10, 20] as const</code> 타입이 <code>readonly [number ,number]</code><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">panTo</span>(<span class="params">where: readonly [number, number]</span>) &#123;<span class="comment">/* ... */</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> loc = [<span class="number">10</span>,<span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="title function_">panTo</span>(loc); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure></li><li>한가지 단점으로는 만약 튜플에 세번째 요소 추가시 오류가 타입 정의가 아닌 호출되는 곳에서 발생한다.</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;📌-Literal-Type&quot;&gt;&lt;a href=&quot;#📌-Literal-Type&quot; class=&quot;headerlink&quot; title=&quot;📌 Literal Type&quot;&gt;&lt;/a&gt;📌 Literal Type&lt;/h1&gt;&lt;p&gt;타입 지정시 string, number 같은 원시타입만 할당할 수 있는 것이 아니다.&lt;/p&gt;
&lt;p&gt;개발자가 지정한 글자나 숫자 들을 타입으로 지정할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;john&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;Texas&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;kim&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;이제 john에는 ‘Texas’라는 글자만 할당될 수 있고 kim에는 33이라는 숫자만 할당될 수 있다.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="https://loco9939.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>type alias(타입별칭)와 타입 합치기</title>
    <link href="https://loco9939.github.io/2022/11/22/TypeScript/type-alias-%ED%83%80%EC%9E%85%EB%B3%84%EC%B9%AD-%EC%99%80-%ED%83%80%EC%9E%85-%ED%95%A9%EC%B9%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2022/11/22/TypeScript/type-alias-%ED%83%80%EC%9E%85%EB%B3%84%EC%B9%AD-%EC%99%80-%ED%83%80%EC%9E%85-%ED%95%A9%EC%B9%98%EA%B8%B0/</id>
    <published>2022-11-22T00:06:56.000Z</published>
    <updated>2022-11-23T11:15:42.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-type-alias-타입별칭"><a href="#📌-type-alias-타입별칭" class="headerlink" title="📌 type alias(타입별칭)"></a>📌 type alias(타입별칭)</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><ul><li>type 타입변수명 &#x3D; 타입종류</li><li>이런 식으로 타입 별칭으로 변수처럼 담아서 재사용할 수 있다.</li><li>관습적으로 대문자 사용</li></ul><h2 id="🏓-function-type-지정하기"><a href="#🏓-function-type-지정하기" class="headerlink" title="🏓 function type 지정하기"></a>🏓 function type 지정하기</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NumOut</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ABC</span>: <span class="title class_">NumOut</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeDash</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = x.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseFloat</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>위와 같이 함수 타입도 type alias를 저장하여 사용할 수 있다.</li><li>함수타입을 사용하려면 함수를 <red>표현식으로 정의</red>해줘야한다.</li></ul><h3 id="callback-함수-type-지정하기"><a href="#callback-함수-type-지정하기" class="headerlink" title="callback 함수 type 지정하기"></a>callback 함수 type 지정하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">CutType</span> = <span class="function">(<span class="params">x: string</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">cutZero</span>: <span class="title class_">CutType</span> = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = x.<span class="title function_">replace</span>(<span class="regexp">/^0+/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeDash</span>(<span class="params">x: string</span>): number &#123;</span><br><span class="line">  <span class="keyword">let</span> result = x.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseFloat</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">newFunc</span> = (<span class="params">str: string, funA: CutType, funB: (x: string) =&gt; number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">removeDash</span>(<span class="title function_">cutZero</span>(str));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>만약 콜백 함수의 타입을 지정해주고 싶다면 위와 같이 지정해줄 수 있다.</li></ul><h2 id="✏️-readonly로-객체-잠그기"><a href="#✏️-readonly로-객체-잠그기" class="headerlink" title="✏️ readonly로 객체 잠그기"></a>✏️ readonly로 객체 잠그기</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;loco&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>위와 같이 자바스크립트에서 const 키워드로 재할당을 막아도 객체 내부까지는 막을 수 없다. 이럴 때 <strong>readonly 타입을 지정해주면 막을 수 있다.</strong></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;loco&quot;</span>; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><ul><li><p>컴파일 시 에러가 발생한다.(변환된 js 파일은 바뀌어 있다.)</p></li><li><p>readonly number[ ]는 배열 요소를 읽을 수만 있다.</p></li><li><p>배열을 변경하는 pop 메서드를 비롯한 다른 메서드를 호출할 수 없다.</p></li></ul><h3 id="❗️-readonly-주의사항"><a href="#❗️-readonly-주의사항" class="headerlink" title="❗️ readonly 주의사항"></a>❗️ readonly 주의사항</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="keyword">readonly</span> <span class="built_in">number</span>[] = a;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="built_in">number</span>[] = b; <span class="comment">// Error: &#x27;readonly number[]는 변경가능한 number[] 타입에 할당할 수 없다.</span></span><br></pre></td></tr></table></figure><ul><li>number[ ]는 readonly number[ ]보다 기능이 많기 때문에 <strong>readonly number[ ]의 서브타입</strong>이다.</li><li>number[ ]는 readonly number[ ]에 <strong>할당 가능하다</strong>.</li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arraySum</span>(<span class="params">arr: <span class="keyword">readonly</span> <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    sum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>함수가 매개변수를 변경하지 않는다면 readonly로 선언해야한다.</li></ul><h2 id="⛳️-type-키워드-여러개-합치기"><a href="#⛳️-type-키워드-여러개-합치기" class="headerlink" title="⛳️ type 키워드 여러개 합치기"></a>⛳️ type 키워드 여러개 합치기</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> person = <span class="title class_">Name</span> | <span class="title class_">Age</span>;</span><br></pre></td></tr></table></figure><ul><li>OR 연산자를 사용하여 유니온 타입으로 만들 수 있다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PositionX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PositionY</span> = &#123; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">XandY</span> = <span class="title class_">PositionX</span> &amp; <span class="title class_">PositionY</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">XandZ</span> = <span class="title class_">PositionX</span> &amp; &#123; <span class="attr">z</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pos</span>: <span class="title class_">XandY</span> = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pos</span>: <span class="title class_">XandZ</span> = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li>객체 타입은 &amp; 연산자를 사용하여 **합치기(extends)**가 가능하다.</li><li>XandY type is <code>&#123; x: number, y: number &#125;</code></li><li>Type alias &amp; Type alias 뿐만 아니라 Type alias &amp; { key: type }도 가능하다.</li></ul><blockquote><p>type 키워드는 <red>재정의가 불가능하다.</red></p></blockquote><h3 id="❗️-amp-연산자-주의사항"><a href="#❗️-amp-연산자-주의사항" class="headerlink" title="❗️ &amp; 연산자 주의사항"></a>❗️ &amp; 연산자 주의사항</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Combined</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span> &#125; &amp; &#123; <span class="attr">b</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Conflicting</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span> &#125; &amp; &#123; <span class="attr">a</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ta</span>: <span class="title class_">Combined</span> = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&quot;st&quot;</span> &#125;; <span class="comment">// 정상</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tt</span>: <span class="title class_">Conflicting</span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><ul><li>Combined 타입은 { a: number, b: string }</li><li>Conflicting 타입은 { a: <code>number와 string의 교집합 === never</code> }</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;📌-type-alias-타입별칭&quot;&gt;&lt;a href=&quot;#📌-type-alias-타입별칭&quot; class=&quot;headerlink&quot; title=&quot;📌 type alias(타입별칭)&quot;&gt;&lt;/a&gt;📌 type alias(타입별칭)&lt;/h1&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Animal&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;type 타입변수명 &amp;#x3D; 타입종류&lt;/li&gt;
&lt;li&gt;이런 식으로 타입 별칭으로 변수처럼 담아서 재사용할 수 있다.&lt;/li&gt;
&lt;li&gt;관습적으로 대문자 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🏓-function-type-지정하기&quot;&gt;&lt;a href=&quot;#🏓-function-type-지정하기&quot; class=&quot;headerlink&quot; title=&quot;🏓 function type 지정하기&quot;&gt;&lt;/a&gt;🏓 function type 지정하기&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;NumOut&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ABC&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;NumOut&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;removeDash&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = x.&lt;span class=&quot;title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/-/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="https://loco9939.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>🐒 useEffect</title>
    <link href="https://loco9939.github.io/2022/11/21/React/Hooks/%F0%9F%90%92-useEffect/"/>
    <id>https://loco9939.github.io/2022/11/21/React/Hooks/%F0%9F%90%92-useEffect/</id>
    <published>2022-11-21T10:40:39.000Z</published>
    <updated>2022-11-23T11:18:42.999Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="📌-useEffect"><a href="#📌-useEffect" class="headerlink" title="📌 useEffect"></a>📌 useEffect</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(effectCallback);</span><br></pre></td></tr></table></figure><p>함수 컴포넌트에서 발생 가능한 side-effect(부수효과)를 관리하기 위해 사용한다.</p><ul><li>비동기 통신 요청 및 응답</li><li>DOM 조작</li><li>구독&#x2F;취소 등</li></ul><p>리액트가 할 수 없는 작업을 할 때, <code>useEffect()</code>를 사용한다.</p><h2 id="🌈-React-Hook-실행-흐름"><a href="#🌈-React-Hook-실행-흐름" class="headerlink" title="🌈 React Hook 실행 흐름"></a>🌈 React Hook 실행 흐름</h2><p><img src="/../../images/useEffect/useFetch.png" alt="Hook 실행 흐름"></p><p>리액트 Hook의 실행흐름은 위 사진과 같다.</p><p>함수 컴포넌트에서 클래스 컴포넌트의 생명주기를 구현하기 위해 <code>useEffect()</code>가 <code>componentDidMount()</code>, <code>componentDidUpdate()</code>, <code>componentWillUnmount()</code> 메서드가 발생되는 주기를 대체할 수 있어야한다.</p><blockquote><p>useEffect()가 이들을 100% 대체할 순 없지만 문제없을 정도로 흉내내어 사용하고 있다.</p></blockquote><h2 id="🐥-이펙트-조건-처리"><a href="#🐥-이펙트-조건-처리" class="headerlink" title="🐥 이펙트 조건 처리"></a>🐥 이펙트 조건 처리</h2><h3 id="1-componentDidMount-대체-방법"><a href="#1-componentDidMount-대체-방법" class="headerlink" title="1. componentDidMount() 대체 방법"></a>1. <code>componentDidMount()</code> 대체 방법</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// componentDidMount</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ul><li>useEffect 2번째 인자로 빈 배열을 주게되면 컴포넌트가 처음 mount 되는 때에 한번만 호출된다.</li></ul><h3 id="2-componentDidUpdate-대체-방법"><a href="#2-componentDidUpdate-대체-방법" class="headerlink" title="2. componentDidUpdate() 대체 방법"></a>2. <code>componentDidUpdate()</code> 대체 방법</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(</span><br><span class="line"><span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// componentDidMount</span></span><br><span class="line"><span class="comment">// componentDidUpdate</span></span><br><span class="line">&#125;.</span><br><span class="line">[...dependencies]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>useEffect 2번째 인자로 빈 배열 대신 관리할 상태가 추가되면 해당 상태가 변경될 때에만 이펙트 함수가 실행된다. 즉, mount될 때는 1번 실행되고, update 될 때 마다 실행된다.</li></ul><h3 id="3-componentWillUnmount-대체-방법"><a href="#3-componentWillUnmount-대체-방법" class="headerlink" title="3. componentWillUnmount() 대체 방법"></a>3. <code>componentWillUnmount()</code> 대체 방법</h3><p>이벤트 구독&#x2F;취소처럼 컴포넌트가 제거될 때 실행되어야 하는 함수의 경우 다음과 같이 사용한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Tester</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> clearId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">count</span>(), <span class="number">500</span>);</span><br><span class="line">    <span class="comment">// 정리 함수(cleanup)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(clearId);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>cleanUp</code> 함수는 메모리 누수 방지를 위해 UI에서 컴포넌트를 제거하기 직전에 수행된다.</li><li><strong>Effect 함수가 실행될 때마다 cleanUp 함수가 먼저 실행되어 정리한다.</strong></li></ul><p>이는 <code>componentWillUnmount()</code>처럼 동작하는 것 같지만, 리액트 팀은 클래스 컴포넌트 생명주기대로 로직을 구현했을 때, 대규모 프로젝트에서 버그를 많이 발견하였다.</p><p>그리하여 리액트 팀에서는 구독취소 후 다시 구독하는 과정을 통해 이를 구현하였다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [props.<span class="property">friend</span>.<span class="property">id</span>]); <span class="comment">// props.friend.id가 바뀔 때만 재구독합니다.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;📌-useEffect&quot;&gt;&lt;a href=&quot;#📌-useEffect&quot; class=&quot;headerlink&quot; title=&quot;📌 useEffect&quot;&gt;&lt;/a&gt;📌 useEffect&lt;/h1&gt;&lt;figure </summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    <category term="Hooks" scheme="https://loco9939.github.io/categories/React/Hooks/"/>
    
    
  </entry>
  
  <entry>
    <title>💭 useState</title>
    <link href="https://loco9939.github.io/2022/11/21/React/Hooks/%F0%9F%92%AD-useState/"/>
    <id>https://loco9939.github.io/2022/11/21/React/Hooks/%F0%9F%92%AD-useState/</id>
    <published>2022-11-21T10:40:24.000Z</published>
    <updated>2022-11-23T11:18:45.795Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="📌-useState"><a href="#📌-useState" class="headerlink" title="📌 useState"></a>📌 useState</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [stateValue, stateUpdater] = <span class="title function_">useState</span>(initState);</span><br></pre></td></tr></table></figure><p>함수 컴포넌트에서 상태를 관리할 때 사용하는 API이다.</p><ul><li><code>stateUpdater</code>는 보통 <code>setStateValue</code> 이런식으로 set을 붙혀서 사용한다.</li></ul><h2 id="🐸-지연된-초기화"><a href="#🐸-지연된-초기화" class="headerlink" title="🐸 지연된 초기화"></a>🐸 지연된 초기화</h2><p><code>initState</code>값은 초기 렌더링 시에만 사용되는 값으로, 이후 렌더링 시에는 무시된다. 만약 초깃값을 계산하는데 많은 시간이 필요한 경우 콜백함수를 통해 지연된 초기화 처리가 가능하다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [stateValue, stateUpdater] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 계산에 적지 않은 시간이 소요될 경우</span></span><br><span class="line">  <span class="comment">// 약 790.62890625 ms</span></span><br><span class="line">  <span class="keyword">const</span> initialState = <span class="title function_">fibonacci</span>(<span class="number">39</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 계산 이후: 지연된 초기화의 처리 값을 반환</span></span><br><span class="line">  <span class="keyword">return</span> initialState;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 또는 localStorage에서 값을 읽어오는 경우</span></span><br><span class="line"><span class="keyword">const</span> [stateValue, setUpdater] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> persnalization = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;persnalization&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(persnalization);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="⛳️-객체-타입-상태-관리"><a href="#⛳️-객체-타입-상태-관리" class="headerlink" title="⛳️ 객체 타입 상태 관리"></a>⛳️ 객체 타입 상태 관리</h2><p><code>updateState</code> 함수는 <code>setState</code> 함수처럼 객체 상태를 관리하기 합성된 객체를 반환해야 한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, updateState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">  <span class="attr">key1</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">key2</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateState</span>(&#123;</span><br><span class="line">  ...state,</span><br><span class="line">  <span class="attr">key2</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>updateState</code> 함수는 상태 병합이 아닌 대체를 하므로 변경되지 않는 객체 값을 유지하기 위해서 위와 같이 해야한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;📌-useState&quot;&gt;&lt;a href=&quot;#📌-useState&quot; class=&quot;headerlink&quot; title=&quot;📌 useState&quot;&gt;&lt;/a&gt;📌 useState&lt;/h1&gt;&lt;figure clas</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    <category term="Hooks" scheme="https://loco9939.github.io/categories/React/Hooks/"/>
    
    
  </entry>
  
  <entry>
    <title>✈️ 리액트 Hooks</title>
    <link href="https://loco9939.github.io/2022/11/21/React/Hooks/%E2%9C%88%EF%B8%8F-%EB%A6%AC%EC%95%A1%ED%8A%B8-Hooks/"/>
    <id>https://loco9939.github.io/2022/11/21/React/Hooks/%E2%9C%88%EF%B8%8F-%EB%A6%AC%EC%95%A1%ED%8A%B8-Hooks/</id>
    <published>2022-11-21T10:26:59.000Z</published>
    <updated>2022-11-23T11:19:23.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-Hooks"><a href="#📌-Hooks" class="headerlink" title="📌 Hooks"></a>📌 Hooks</h1><p>리액트 Hook은 클래스로 컴포넌트를 만들 때 발생하는 문제점을 해결하기 위해 등장하였다.</p><ul><li>리액트 Hook을 사용하면 <strong>함수 컴포넌트 중심으로 개발</strong>이 가능하다.</li><li>함수 컴포넌트에서도 상태, 로직을 추출하여 다른 컴포넌트에서 <red>재사용</red> 할 수 있다.</li></ul><span id="more"></span><p><strong>1. 래퍼지옥</strong></p><p>클래스 컴포넌트 만들 시 문제는 고차 컴포넌트를 사용하게 될 경우 래퍼 지옥(Hell)이 발생한다.</p><p><strong>2. 비대해진 컴포넌트</strong></p><p>래퍼 지옥을 만들지 않기 위해서는 하나의 컴포넌트에 담아서 사용해야하는데 이럴 경우 컴포넌트가 비대해지는 문제가 있다.</p><p>그래서 리액트 팀은 기존 개발 방식을 유지하면서 새로운 API를 추가하는 방식으로 리액트 Hook을 개발하였다.</p><p>함수 컴포넌트의 문제점이 내부에서 상태를 관리할 수 없다는 것이였는데 이를 Hook을 통해 해결하였고 API를 제공하여 훨씬 간결하게 클래스 컴포넌트처럼 사용할 수 있게 되었다.</p><h2 id="🥁-Hook-사용-규칙"><a href="#🥁-Hook-사용-규칙" class="headerlink" title="🥁 Hook 사용 규칙"></a>🥁 Hook 사용 규칙</h2><ol><li>리액트 함수 컴포넌트, 커스텀 Hook 함수 안에서만 사용할 수 있다.</li></ol><p><strong>일반 함수, 클래스 컴포넌트에서 Hook을 호출하면 안된다.</strong></p><ol start="2"><li>Hook은 문(statement) 또는 중첩된 함수 안에서 사용할 수 없다.</li></ol><p>컴포넌트, 커스텀 Hook 함수 최상위에서만 사용 가능하다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;📌-Hooks&quot;&gt;&lt;a href=&quot;#📌-Hooks&quot; class=&quot;headerlink&quot; title=&quot;📌 Hooks&quot;&gt;&lt;/a&gt;📌 Hooks&lt;/h1&gt;&lt;p&gt;리액트 Hook은 클래스로 컴포넌트를 만들 때 발생하는 문제점을 해결하기 위해 등장하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리액트 Hook을 사용하면 &lt;strong&gt;함수 컴포넌트 중심으로 개발&lt;/strong&gt;이 가능하다.&lt;/li&gt;
&lt;li&gt;함수 컴포넌트에서도 상태, 로직을 추출하여 다른 컴포넌트에서 &lt;red&gt;재사용&lt;/red&gt; 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    <category term="Hooks" scheme="https://loco9939.github.io/categories/React/Hooks/"/>
    
    
  </entry>
  
  <entry>
    <title>🐥 타마스 러버덕 1일차</title>
    <link href="https://loco9939.github.io/2022/11/18/TypeScript/%F0%9F%90%A5%20%ED%83%80%EB%A7%88%EC%8A%A4%20%EB%9F%AC%EB%B2%84%EB%8D%95%201%EC%9D%BC%EC%B0%A8/"/>
    <id>https://loco9939.github.io/2022/11/18/TypeScript/%F0%9F%90%A5%20%ED%83%80%EB%A7%88%EC%8A%A4%20%EB%9F%AC%EB%B2%84%EB%8D%95%201%EC%9D%BC%EC%B0%A8/</id>
    <published>2022-11-18T02:02:51.000Z</published>
    <updated>2022-11-23T11:16:44.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📌-TypeScript와-JavaScript-관계"><a href="#📌-TypeScript와-JavaScript-관계" class="headerlink" title="📌 TypeScript와 JavaScript 관계"></a>📌 TypeScript와 JavaScript 관계</h1><p>모든 JavaScript는 TypeScript이지만, <red>모든 TypeScript가 JavaScript는 아니다.</red></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">capital</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">states</span>: <span class="title class_">State</span>[] = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">capital</span>: <span class="string">&quot;경기도&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>, <span class="attr">capitol</span>: <span class="string">&quot;서울&quot;</span> &#125;,</span><br><span class="line">]; <span class="comment">// Error</span></span><br><span class="line"><span class="comment">// Type &#x27;&#123; name: string; capitol: string; &#125;&#x27; is not assignable to type &#x27;State&#x27;.</span></span><br><span class="line"><span class="comment">//   Object literal may only specify known properties, but &#x27;capitol&#x27; does not exist in type &#x27;State&#x27;. Did you mean to write &#x27;capital&#x27;?</span></span><br></pre></td></tr></table></figure><p>위 예시를 설명하면, 앞서 말한 <code>모든 타입스크립트가 자바스크립트다</code> <red>라고 하는 말은 틀렸다.</red></p><span id="more"></span><p>우리는 타입에 맞도록 작성하기 위해 타입스크립트를 사용하려는 것이므로 타입에 맞게 코드를 작성할 때만 진정 타입스크립트 코드를 작성했다고 말할 수 있다.</p><p><strong><red>타입스크립트 프로그램 $\supset$ ( 자바스크립트 프로그램 $\cap$ 타입체커를 통과한 타입스크립트 )</red></strong></p><h1 id="📌-코드-생성과-타입은-관련이-없다"><a href="#📌-코드-생성과-타입은-관련이-없다" class="headerlink" title="📌 코드 생성과 타입은 관련이 없다."></a>📌 코드 생성과 타입은 관련이 없다.</h1><p>TypeScript로 작성한 코드가 컴파일 과정을 통해 JavaScript로 변환된다.</p><p>이 때, 타입 코드들은 사라지게된다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">capital</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">states</span>: <span class="title class_">State</span>[] = [&#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">capital</span>: <span class="string">&quot;경기도&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><p>위 코드를 JavaScript로 컴파일하면 다음과 같은 결과만 남는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> states = [&#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">capital</span>: <span class="string">&quot;경기도&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><p>컴파일 이후 런타임 시점에 JavaScript 코드가 실행된다.</p><p>즉, 컴파일이 코드 생성을 말하는 것이고 <strong>런타임 시점에는 타입을 체크할 수 없을 뿐더러 당연히 타입스크립트 타입은 런타임 성능에 영향을 주지 않습니다.</strong></p><h1 id="📌-any-타입-지양하기"><a href="#📌-any-타입-지양하기" class="headerlink" title="📌 any 타입 지양하기"></a>📌 any 타입 지양하기</h1><ul><li>any 타입은 안전성이 없다.</li><li>함수 시그니처(contract: 계약)을 무시한다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcAge</span>(<span class="params">birthDate: <span class="built_in">Date</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">birthDate</span>: <span class="built_in">any</span> = <span class="string">&quot;1995-12-04&quot;</span>;</span><br><span class="line"><span class="title function_">calcAge</span>(birthDate); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure><ul><li>언어 서비스가 적용되지 않는다.(자동완성 및 도움말)</li><li>코드 설계를 예측할 수 없게 만들고 신뢰도를 떨어뜨린다.</li></ul><h1 id="⭐️⭐️⭐️⭐️⭐️-타입은-값들의-집합이다"><a href="#⭐️⭐️⭐️⭐️⭐️-타입은-값들의-집합이다" class="headerlink" title="⭐️⭐️⭐️⭐️⭐️ 타입은 값들의 집합이다."></a>⭐️⭐️⭐️⭐️⭐️ 타입은 값들의 집합이다.</h1><p>타입은 값들의 집합이다. 또한 이 집합은 타입의 범위라고 말한다. 이 개념을 알아둬야 타입에 대해 이해하기 용이하다.</p><p>TypeScript는 타입을 검사할 때, 선언된 타입에 <red>할당 가능한 지(assignable)</red>를 판단한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">AB</span> = <span class="string">&quot;A&quot;</span> | <span class="string">&quot;B&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="variable constant_">AB</span> = <span class="string">&quot;C&quot;</span>; <span class="comment">// Error: Type &#x27;&quot;C&quot;&#x27; is not &quot;assignable&quot; to type &#x27;AB&#x27;.</span></span><br></pre></td></tr></table></figure><ul><li>“C” 형식은 AB 형식에 할당할 수 없습니다.</li><li>“C” 형식은 AB 형식의 부분집합이 아니다.</li><li>“C” 형식은 AB 형식의 원소가 아니다.</li><li>“C” 형식은 AB 형식의 서브타입이 아니다.</li><li>“C” 형식은 AB 형식의 상속 받지 않는다.</li></ul><p>모두 같은 말이므로 염두하자.</p><h2 id="🕹-amp-연산자-교집합-intersection"><a href="#🕹-amp-연산자-교집합-intersection" class="headerlink" title="🕹 &amp; 연산자 (교집합, intersection)"></a>🕹 &amp; 연산자 (교집합, intersection)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Lifespan</span> &#123;</span><br><span class="line">  <span class="attr">birth</span>: <span class="title class_">Date</span>;</span><br><span class="line">  death?: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonSpan</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Lifespan</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ps</span>: <span class="title class_">PersonSpan</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">  <span class="attr">birth</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;1995/12/04&quot;</span>),</span><br><span class="line">  <span class="attr">death</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2100/10/10&quot;</span>),</span><br><span class="line">&#125;; <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure><ul><li>&amp; 연산자는 두 타입의 인터섹션(교집합)을 계산한다.</li></ul><p>언뜻 보면 교집합이라하면 공통으로 가지고 있는 요소만 확인한다고 생각이 들어 위 예시가 잘못되었다고 생각이 든다.</p><p>하지만, <red>타입 연산자는 인터페이스 속성이 아닌 타입의 범위(값의 집합)에 적용된다.</red> 해당 타입과 더불어 추가적인 값을 가지는 값도 PersonSpan 타입에 속한다.</p><p>즉, PersonSpan은 Person 이라는 속성을 포함하는 집합과 Lifespan 이라는 속성을 포함하는 집합의 교집합이 되기 위해서는 Person의 name 프로퍼티도 가져야 하고 Lifespan의 birth 속성을 가진 집합을 의미한다. (deate 속성은 optional하므로…)</p><p>헷갈린다면… <strong>extends 구문으로 선언할 수 있다.</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonSpan</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">birth</span>: <span class="title class_">Date</span>;</span><br><span class="line">  death?: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="유니온에서-amp-연산자"><a href="#유니온에서-amp-연산자" class="headerlink" title="유니온에서 &amp; 연산자"></a>유니온에서 &amp; 연산자</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> K = keyof (<span class="title class_">Person</span> | <span class="title class_">Lifespan</span>); <span class="comment">// type is &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure><p>keyof 연산자는 객체의 키 값들을 숫자나 문자열 리터럴 유니언을 생성한다.</p><p>즉, Person의 key값 name, Lifespan의 key값 birth,death의 유니온인 name | birth 에 속하는 값은 어떠한 키도 없기 때문에 <code>never</code>가 된다.</p><p>명확히 사용하면 아래와 같다</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keyof (A&amp;B) = (keyof A) | (keyof B); <span class="comment">// A의 key 값이거나 B의 key 값인 것</span></span><br><span class="line">keyof (A|B) = (keyof A) &amp; (keyof B); <span class="comment">// A의 key 값이면서 B의 key 값인 것</span></span><br></pre></td></tr></table></figure><h2 id="✈️-제네릭-상속"><a href="#✈️-제네릭-상속" class="headerlink" title="✈️ 제네릭 상속"></a>✈️ 제네릭 상속</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PointKeys</span> = keyof <span class="title class_">Point</span>; <span class="comment">// type is &quot;x&quot; | &quot;y&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sortBy&lt;K <span class="keyword">extends</span> keyof T, T&gt;(<span class="attr">vals</span>: T[], <span class="attr">key</span>: K): T[] &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">pts</span>: <span class="title class_">Point</span>[] = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="title function_">sortBy</span>(pts, <span class="string">&quot;x&quot;</span>); <span class="comment">// 정상 &#x27;x&#x27;는 &#x27;x&#x27;|&#x27;y&#x27;를 상속받는다.</span></span><br><span class="line"><span class="title function_">sortBy</span>(pts, <span class="string">&quot;y&quot;</span>); <span class="comment">// 정상 &#x27;y&#x27;는 &#x27;x&#x27;|&#x27;y&#x27;를 상속받는다.</span></span><br><span class="line"><span class="title function_">sortBy</span>(pts, <span class="string">&quot;z&quot;</span>); <span class="comment">// Error: Argument of type &#x27;&quot;z&quot;&#x27; is not assignable to parameter of type &#x27;keyof Point&#x27;.</span></span><br></pre></td></tr></table></figure><ul><li>type K는 type T의 상속을 받는다.</li><li>위 함수에서 T가 곧 Point 이다.</li><li>그러므로 K는 keyof T이므로 ‘x’|’y’ 이다.</li><li><code>K extends keyof T</code>를 사용하여 제한된 타입을 구현하였다.</li></ul><h2 id="🦖-타입-공간과-값-공간-구분하기"><a href="#🦖-타입-공간과-값-공간-구분하기" class="headerlink" title="🦖 타입 공간과 값 공간 구분하기"></a>🦖 타입 공간과 값 공간 구분하기</h2><p>JavaScript의 symbol은 타입 공간이나 값 공간 중 한 곳에 존재한다. symbol은 이름이 같더라도 <strong>속하는 공간에 따라 나타내는 것이 다르다.</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="string">&quot;string literal&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="string">&quot;string literal&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>type 뒤의 심볼인 T1, T2는 타입 공간에 있으므로 타입을 나타낸다. 컴파일 과정에서 사라진다.</li></ul><h3 id="class와-enum은-상황에-따라-값-타입-두가지-모두-가능"><a href="#class와-enum은-상황에-따라-값-타입-두가지-모두-가능" class="headerlink" title="class와 enum은 상황에 따라 값, 타입 두가지 모두 가능"></a>class와 enum은 상황에 따라 값, 타입 두가지 모두 가능</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span> &#123;</span><br><span class="line">  radius = <span class="number">1</span>;</span><br><span class="line">  height = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcVolume</span>(<span class="params">shape: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> <span class="title class_">Cylinder</span>) &#123;</span><br><span class="line">    shape; <span class="comment">// 정상, 타입은 Cylinder</span></span><br><span class="line">    shape.<span class="property">radius</span>; <span class="comment">// 정상, 타입은 number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = <span class="keyword">typeof</span> <span class="title class_">Cylinder</span>; <span class="comment">// 값이 &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="keyword">typeof</span> <span class="title class_">Cylinder</span>; <span class="comment">// 타입이 typeof Cylinder</span></span><br></pre></td></tr></table></figure><ul><li>클래스가 값으로 쓰일 때는 생성자가 사용되지만 타입으로 사용될 때는 속성과 메서드가 사용된다.</li><li>여기서 중요한 것은 <red>Cylinder가 인스턴스의 타입이 아니라는 것이다.</red></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;📌-TypeScript와-JavaScript-관계&quot;&gt;&lt;a href=&quot;#📌-TypeScript와-JavaScript-관계&quot; class=&quot;headerlink&quot; title=&quot;📌 TypeScript와 JavaScript 관계&quot;&gt;&lt;/a&gt;📌 TypeScript와 JavaScript 관계&lt;/h1&gt;&lt;p&gt;모든 JavaScript는 TypeScript이지만, &lt;red&gt;모든 TypeScript가 JavaScript는 아니다.&lt;/red&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;State&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;capital&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;states&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;State&lt;/span&gt;[] = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;yiju&amp;quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;capital&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;경기도&amp;quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;kim&amp;quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;capitol&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;서울&amp;quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Type &amp;#x27;&amp;#123; name: string; capitol: string; &amp;#125;&amp;#x27; is not assignable to type &amp;#x27;State&amp;#x27;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   Object literal may only specify known properties, but &amp;#x27;capitol&amp;#x27; does not exist in type &amp;#x27;State&amp;#x27;. Did you mean to write &amp;#x27;capital&amp;#x27;?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;위 예시를 설명하면, 앞서 말한 &lt;code&gt;모든 타입스크립트가 자바스크립트다&lt;/code&gt; &lt;red&gt;라고 하는 말은 틀렸다.&lt;/red&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="https://loco9939.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
</feed>
