<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loco&#39;s Dev Blog</title>
  
  <subtitle>Frontend Developer</subtitle>
  <link href="https://loco9939.github.io/atom.xml" rel="self"/>
  
  <link href="https://loco9939.github.io/"/>
  <updated>2023-08-13T12:43:48.072Z</updated>
  <id>https://loco9939.github.io/</id>
  
  <author>
    <name>loco9939</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 커밋 되돌리기</title>
    <link href="https://loco9939.github.io/2023/08/13/git/git-%EC%BB%A4%EB%B0%8B-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/13/git/git-%EC%BB%A4%EB%B0%8B-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/</id>
    <published>2023-08-13T12:36:48.000Z</published>
    <updated>2023-08-13T12:43:48.072Z</updated>
    
    <content type="html"><![CDATA[<p>git을 사용하다 보면 이전 커밋으로 되돌아가고 싶은 경우가 있다.</p><p>이 때 사용할 수 있는 명령어와 방법에 대해 알아보자.</p><h1 id="되돌리기-undoing"><a href="#되돌리기-undoing" class="headerlink" title="되돌리기(undoing)"></a>되돌리기(undoing)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> restore unread.md</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> restore . // 현재위치 기준 모든 파일의 변경사항 취소</span><br></pre></td></tr></table></figure><ul><li>커밋 몇 줄을 수정하기에는 너무 많아서 최신 커밋으로 되돌아 가는 방법이다.</li></ul><h1 id="unstaging"><a href="#unstaging" class="headerlink" title="unstaging"></a>unstaging</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> reset HEAD unread.md</span><br></pre></td></tr></table></figure><p>add한 변경사항을 working directory로 내리는 방법이다.</p><ul><li>작업한 단위 별로 add하고 커밋을 해줘야하는데, 전체파일을 다 add 해버렸으면 위 명령어로 add한 것을 취소할 수 있다.</li></ul><h1 id="직전에-작성한-커밋-수정"><a href="#직전에-작성한-커밋-수정" class="headerlink" title="직전에 작성한 커밋 수정"></a>직전에 작성한 커밋 수정</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> commit --amend</span><br></pre></td></tr></table></figure><ul><li>바로 직전의 커밋만을 수정하는 방법이다.</li><li>커밋창이 열리고 메세지를 수정해주면 된다.</li></ul><h1 id="직전에-작성한-커밋-삭제"><a href="#직전에-작성한-커밋-삭제" class="headerlink" title="직전에 작성한 커밋 삭제"></a>직전에 작성한 커밋 삭제</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> revert --no-commit HEAD~3..</span><br></pre></td></tr></table></figure><ul><li>–no-commit을 같이 입력해줘야 한번에 삭제가 가능하다. 안그러면 1개씩 커밋을 삭제해나가야한다.</li><li>git commit으로 왜 삭제하였는지에 대해서도 적어줘야한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git을 사용하다 보면 이전 커밋으로 되돌아가고 싶은 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 때 사용할 수 있는 명령어와 방법에 대해 알아보자.&lt;/p&gt;
&lt;h1 id=&quot;되돌리기-undoing&quot;&gt;&lt;a href=&quot;#되돌리기-undoing&quot; class=&quot;head</summary>
      
    
    
    
    <category term="git" scheme="https://loco9939.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://loco9939.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CSS import 피하기</title>
    <link href="https://loco9939.github.io/2023/08/10/Daily/CSS-import-%ED%94%BC%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/10/Daily/CSS-import-%ED%94%BC%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-10T11:32:06.000Z</published>
    <updated>2023-08-10T11:38:54.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS는-어떻게-동작하는가"><a href="#CSS는-어떻게-동작하는가" class="headerlink" title="CSS는 어떻게 동작하는가?"></a>CSS는 어떻게 동작하는가?</h1><ol><li>CSS는 존재만으로 CSS가 파싱되기 전까지 브라우저 렌더링을 막는다.</li><li>CSS는 HTML 파싱도 막는다. 스크립트가 페이지 스타일에 영향을 줄 수 있기 때문에, 브라우저가 CSS 관련 작업 중에는 작업이 완료된 후 script를 실행한다.</li></ol><blockquote><p>그러므로 이러한 상황을 피하기 위해서는 CSS를 최대한 빠르게 불러와야 하며 리소스를 최적의 순서로 불러와야 한다.</p></blockquote><h1 id="CSS-import-피하기"><a href="#CSS-import-피하기" class="headerlink" title="CSS import 피하기"></a>CSS import 피하기</h1><p>@import는 CSS 파일의 렌더링 속도를 느리게 한다.</p><h2 id="브라우저-렌더링-순서"><a href="#브라우저-렌더링-순서" class="headerlink" title="브라우저 렌더링 순서"></a>브라우저 렌더링 순서</h2><ol><li>HTML 다운로드</li><li>HTML이 CSS 요청</li><li>CSS가 또 다른 @import에 있는 CSS 요청</li><li>위 단계가 끝나면 Render Tree 생성</li></ol><h2 id="import-사용-시-네트워크-흐름"><a href="#import-사용-시-네트워크-흐름" class="headerlink" title="@import 사용 시 네트워크 흐름"></a>@import 사용 시 네트워크 흐름</h2><p><img src="/../../images/css_avoid.png" alt="import css"></p><h2 id="파일-별개로-분리-시-네트워크-흐름"><a href="#파일-별개로-분리-시-네트워크-흐름" class="headerlink" title="파일 별개로 분리 시 네트워크 흐름"></a>파일 별개로 분리 시 네트워크 흐름</h2><p><img src="/../../images/css_avoid2.png" alt="css split"></p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><ul><li>@import 사용 피하기</li><li>파일 별개로 분리하여 관리</li><li>CSS 작성 시 속성을 알파벳 순서대로 작성</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS는-어떻게-동작하는가&quot;&gt;&lt;a href=&quot;#CSS는-어떻게-동작하는가&quot; class=&quot;headerlink&quot; title=&quot;CSS는 어떻게 동작하는가?&quot;&gt;&lt;/a&gt;CSS는 어떻게 동작하는가?&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CSS는 존재만으로 CSS</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>Grid Layout 알아보기</title>
    <link href="https://loco9939.github.io/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/</id>
    <published>2023-08-09T13:30:30.000Z</published>
    <updated>2023-08-09T13:37:44.812Z</updated>
    
    <content type="html"><![CDATA[<p>푸터를 만들 때, Grid를 사용하여 설계를 해보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">2</span>/<span class="number">2</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/grid.png" alt="Grid 레이아웃"></p><ul><li>전체적인 레이아웃은 grid를 사용하고 내부의 세부적인 레이아웃은 flex를 사용한다.</li><li>grid 내부의 크기를 grid-area로 지정할 수 있다.</li><li>grid-area: 열,행</li><li>grid는 <code>margin-collapse</code> 일어나지 않는다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;푸터를 만들 때, Grid를 사용하여 설계를 해보자.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Grid" scheme="https://loco9939.github.io/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>컨테이닝 블록 구분하기</title>
    <link href="https://loco9939.github.io/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-08T11:31:40.000Z</published>
    <updated>2023-08-08T11:49:54.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="컨테이닝-블록"><a href="#컨테이닝-블록" class="headerlink" title="컨테이닝 블록"></a>컨테이닝 블록</h1><ul><li>요쇼의 크기, 위치를 결정하는 요인이다.</li><li><code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code> 속성값과 절대적 위치(<code>absolute</code>, <code>fixed</code>)로 설정된 요소의 offset 속성값은 자신의 컨테이닝 블록으로부터 계산된다.</li><li>대부분의 경우 요소의 컨테이닝 블록이 가장 가까운 블록 레벨 조상의 컨텐츠 영역이지만 <span style="color:red">예외가 있다.</span></li></ul><h2 id="컨테이닝-블록-식별"><a href="#컨테이닝-블록-식별" class="headerlink" title="컨테이닝 블록 식별"></a>컨테이닝 블록 식별</h2><p>position의 속성에 따라 완전히 달라진다.</p><h3 id="1-position-속성이-static-relative-sticky-인-경우"><a href="#1-position-속성이-static-relative-sticky-인-경우" class="headerlink" title="1. position 속성이 static, relative, sticky 인 경우"></a>1. position 속성이 static, relative, sticky 인 경우</h3><ul><li>컨테이닝 블록은 가장 가까운 조상 블록 컨테이너 또는 서식 맥락을 형성하는 조상 요소(<code>flex</code>,<code>table</code>,<code>grid</code>)의 컨텐츠 영역 경계를 따라 형성된다.</li></ul><h3 id="2-position-속성이-absolute-인-경우"><a href="#2-position-속성이-absolute-인-경우" class="headerlink" title="2. position 속성이 absolute 인 경우"></a>2. position 속성이 absolute 인 경우</h3><ul><li>컨테이닝 블록은 속성값이 <code>static</code>이 아닌 가장 가까운 조상의 내부 여백 영역</li><li>그래서 주로 조상 영역에 <code>relative</code>를 추가하여 조상을 기준으로 position을 조절한다.</li></ul><h3 id="3-position-속성이-fixed-인-경우"><a href="#3-position-속성이-fixed-인-경우" class="headerlink" title="3. position 속성이 fixed 인 경우"></a>3. position 속성이 fixed 인 경우</h3><ul><li>컨테이닝 블록은 <code>viewport</code>, 페이지 영역이다.</li></ul><h3 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h3><p>position 속성이 absolute, fixed 인 경우, 다음 조건을 만족하는 가장 가까운 조상 내부 영역이 컨테이닝 블록이 될 수 있다.</p><ol><li><p>transform이나 perspective 속성이 none이 아닐 때, transform 속성을 none으로 바꾸면 viewport 기준으로 바뀐다.</p></li><li><p>will-change 속성이 transform이나 perspective 일 때, will-change는 요소의 예상되는 변화의 힌트를 브라우저에게 제공한다.</p></li><li><p>filter 속성이 none이 아닐 때</p></li><li><p>contain 속성이 paint 일 때</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-absolute&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../images/containingBlock1.png" alt="컨테이닝 블록 예시"></p><ul><li>container 클래스에 아무런 값을 주지 않고 있어 p-absolute 값이 static이 아닌 조상 영역을 기준으로 위치하는데, static이 아닌 조상 요소가 없어서 최상위 브라우저를 기준으로 위치해있다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective:0; */</span></span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective: 10px; */</span></span><br><span class="line">  <span class="comment">/*   will-change: perspective; */</span></span><br><span class="line">  <span class="comment">/*   will-change: transform; */</span></span><br><span class="line">  <span class="comment">/*   filter:opacity(); */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p-absolute</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/containingBlcok2.png" alt="컨테이닝 블록 예시2"></p><ul><li>앞서 설명한 예외를 추가하면 position:relative를 추가한 것과 똑같이 동작하게 된다.</li><li>해당 속성을 가진 요소를 기준으로 위치를 조절한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;컨테이닝-블록&quot;&gt;&lt;a href=&quot;#컨테이닝-블록&quot; class=&quot;headerlink&quot; title=&quot;컨테이닝 블록&quot;&gt;&lt;/a&gt;컨테이닝 블록&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;요쇼의 크기, 위치를 결정하는 요인이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="컨테이닝블록" scheme="https://loco9939.github.io/tags/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D%EB%B8%94%EB%A1%9D/"/>
    
  </entry>
  
  <entry>
    <title>flex vs inline-flex</title>
    <link href="https://loco9939.github.io/2023/08/07/Daily/flex-vs-inline-flex/"/>
    <id>https://loco9939.github.io/2023/08/07/Daily/flex-vs-inline-flex/</id>
    <published>2023-08-07T11:15:13.000Z</published>
    <updated>2023-08-07T11:17:52.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-vs-inline-flex"><a href="#flex-vs-inline-flex" class="headerlink" title="flex vs inline-flex"></a>flex vs inline-flex</h1><ul><li>flex로 지정된 flex container는 block 요소 성향</li><li>inline-flex로 지정된 inline-flex container는 inline 요소 성향</li></ul><p><img src="/../../images/inline_flex.png" alt="inline-flex"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex-vs-inline-flex&quot;&gt;&lt;a href=&quot;#flex-vs-inline-flex&quot; class=&quot;headerlink&quot; title=&quot;flex vs inline-flex&quot;&gt;&lt;/a&gt;flex vs inline-flex&lt;/h1&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="inline-flex" scheme="https://loco9939.github.io/tags/inline-flex/"/>
    
  </entry>
  
  <entry>
    <title>hr 태그 사용하지 않고 가로선 스타일링 하기</title>
    <link href="https://loco9939.github.io/2023/08/06/Daily/hr-%ED%83%9C%EA%B7%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EA%B0%80%EB%A1%9C%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/06/Daily/hr-%ED%83%9C%EA%B7%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EA%B0%80%EB%A1%9C%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-06T14:16:50.000Z</published>
    <updated>2023-08-06T14:21:24.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h1><p>hr 태그는 콘텐츠 내용에서 주제가 바뀔 때, 사용하는 수평 가로선이다.</p><p>HTML 문서에서 주로 내용을 구분하거나 주제의 변화를 정의한다.</p><h2 id="HTML5에서-변경된-사항"><a href="#HTML5에서-변경된-사항" class="headerlink" title="HTML5에서 변경된 사항"></a>HTML5에서 변경된 사항</h2><ul><li>HTML5 이전에서는 단순히 가로선을 나타냈지만, HTML5에서는 주제의 흐름 변경을 나타내도록 변경되었다.</li><li>시각적인 의미보다는 의미적 용어(semantic term)로 사용된다.</li></ul><blockquote><p>또한, HTML5에서는 hr 요소의 layout을 더 이상 지원하지 않으며 CSS를 대신 사용하도록 변경되었다.</p></blockquote><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.news</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span> <span class="built_in">linear-gradient</span>(to right, <span class="number">#aaa</span>, <span class="number">#fff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>news라는 클래스의 가상 선택자로 css 스타일링 해줄 수 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h1&gt;&lt;p&gt;hr 태그는 콘텐츠 내용에서 주제가 바뀔 때, 사용하는 수평 가로선이다.&lt;/p&gt;
&lt;p&gt;HTML 문서에서 주로 내용을 구분하거나</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>텍스트 말줄임표 처리</title>
    <link href="https://loco9939.github.io/2023/08/05/Daily/%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%90%EC%A4%84%EC%9E%84%ED%91%9C-%EC%B2%98%EB%A6%AC/"/>
    <id>https://loco9939.github.io/2023/08/05/Daily/%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%90%EC%A4%84%EC%9E%84%ED%91%9C-%EC%B2%98%EB%A6%AC/</id>
    <published>2023-08-04T15:21:32.000Z</published>
    <updated>2023-08-04T15:24:49.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우"><a href="#한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우" class="headerlink" title="한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우"></a>한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h2 id="멀티라인인-경우"><a href="#멀티라인인-경우" class="headerlink" title="멀티라인인 경우"></a>멀티라인인 경우</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Webkit 기반 브라우저 (Chrome, Safari 등)에서 적용 가능하다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우&quot;&gt;&lt;a href=&quot;#한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우&quot; class=&quot;headerlink&quot; title=&quot;한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우&quot;&gt;&lt;/a&gt;한줄이</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>웹 폰트 적용하기</title>
    <link href="https://loco9939.github.io/2023/08/04/Daily/%EC%9B%B9-%ED%8F%B0%ED%8A%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/04/Daily/%EC%9B%B9-%ED%8F%B0%ED%8A%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-04T14:37:54.000Z</published>
    <updated>2023-08-04T14:40:48.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-import-방식으-CSS-최상단에-복붙"><a href="#1-import-방식으-CSS-최상단에-복붙" class="headerlink" title="1. @import 방식으 CSS 최상단에 복붙"></a>1. @import 방식으 CSS 최상단에 복붙</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.4/dist/web/static/pretendard.css&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="2-font-family-설정"><a href="#2-font-family-설정" class="headerlink" title="2. font-family 설정"></a>2. font-family 설정</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto,</span><br><span class="line">    <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Apple SD Gothic Neo&quot;</span>, <span class="string">&quot;Noto Sans KR&quot;</span>, <span class="string">&quot;Malgun Gothic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>font-family는 하나로 정해두고 굵기는 원하는 부분에서 font-weight로 조절한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-import-방식으-CSS-최상단에-복붙&quot;&gt;&lt;a href=&quot;#1-import-방식으-CSS-최상단에-복붙&quot; class=&quot;headerlink&quot; title=&quot;1. @import 방식으 CSS 최상단에 복붙&quot;&gt;&lt;/a&gt;1. @import 방</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="font" scheme="https://loco9939.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>HTML이란?</title>
    <link href="https://loco9939.github.io/2023/08/03/Daily/HTML%EC%9D%B4%EB%9E%80/"/>
    <id>https://loco9939.github.io/2023/08/03/Daily/HTML%EC%9D%B4%EB%9E%80/</id>
    <published>2023-08-03T12:23:10.000Z</published>
    <updated>2023-08-03T12:26:29.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-역사"><a href="#HTML5-역사" class="headerlink" title="HTML5 역사"></a>HTML5 역사</h1><ul><li><p>W3C가 XHTML 2.0을 만들고 있었는데 하위 호환상 문제가 있어서 개발을 접었다</p></li><li><p>이후 2004년 브라우저 3대장(애플,모질라,오페라 sw)이 공동으로 설립한 WHATWG(Web Hypertext Application Technology Working Group)가 W3C와 별개로 Web Application 1.0과 Web Forms 2.0 만들어 냈다.</p></li><li><p>그리하여 WHATWG의 표준안을 대부분 수용하여 HTML5가 탄생하게 되었다.</p></li><li><p>초기의 웹은 단순히 하이퍼텍스트 문서(HTML)를 웹 브라우저에 나타내는 수준으로, 웹표준 기술이 지원하지 못하는 부분을 비표준적인 태그들과 Active X, Flash, Flex, SilverLight 등의 써드파티(Third Party) 플러그인이 대신하였다.</p></li><li><p>이로 인해 여러 웹브라우저별로 화면이 다르게 보이거나 특정 웹브라우저에서만 동작하는 웹 애플리케이션이 만들어지는 등 각종 호환성 문제가 발생하였습니다. 그 결과 개발자에게는 개발의 어려움을, 사용자에게는 웹 브라우저 선택 제한과 각종 플러그인의 설치라는 불편함을 안겨주었다.</p></li><li><p>이러한 문제점과 기능적인 한계를 안고 있던 기존 HTML은 HTML5에서 새롭게 추가된 요소와 다양한 API들을 통해 한 단계 발전된 웹 구현과 접근성 및 호환성 극대화를 목표로 삼게 되었다.</p></li></ul><h2 id="XHTML과-HTML-차이점"><a href="#XHTML과-HTML-차이점" class="headerlink" title="XHTML과 HTML 차이점"></a>XHTML과 HTML 차이점</h2><p>둘다 표준이지만 문법이 다르다. XHTML이 조금 더 엄격한 특징을 가진다.</p><p>XHTML은 XML로 재구성된 문법이다.</p><table><thead><tr><th>HTML</th><th>XHTML</th></tr></thead><tbody><tr><td></td><td>DOCTYPE 반드시 명시</td></tr><tr><td></td><td><code>&lt;html&gt;</code> 태그의 xmlns 속성 반드시 명시</td></tr><tr><td><code>&lt;img&gt;</code></td><td><code>&lt;img /&gt;</code></td></tr><tr><td>대소문자 구분 x</td><td>태그는 반드시 소문자 사용</td></tr><tr><td></td><td>반드시 하나의 root 요소를 포함해야 한다.</td></tr><tr><td></td><td>속성 이름도 반드시 소문자 사용</td></tr><tr><td></td><td>속성값 반드시 따옴표로 감싼다</td></tr><tr><td>속성값 생략 가능 <code>&lt;input checked&gt;</code></td><td>속성값 생략 불가 <code>&lt;input checked = “check” /&gt;</code></td></tr><tr><td></td><td><code>&lt;img&gt;</code> 태그에 alt 반드시 명시</td></tr><tr><td></td><td>텍스트는 반드시 태그로 감싸야한다.</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML5-역사&quot;&gt;&lt;a href=&quot;#HTML5-역사&quot; class=&quot;headerlink&quot; title=&quot;HTML5 역사&quot;&gt;&lt;/a&gt;HTML5 역사&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;W3C가 XHTML 2.0을 만들고 있었는데 하위 호환상 문제가 있</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>원하는 요소를 제외한 영역 클릭 시 함수 실행하기</title>
    <link href="https://loco9939.github.io/2023/08/02/Daily/%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%A0%9C%EC%99%B8%ED%95%9C-%EC%98%81%EC%97%AD-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/02/Daily/%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%A0%9C%EC%99%B8%ED%95%9C-%EC%98%81%EC%97%AD-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-02T13:42:39.000Z</published>
    <updated>2023-08-02T14:12:58.016Z</updated>
    
    <content type="html"><![CDATA[<p>흔히 웹을 사용하면서 select 태그를 클릭해서 options 들이 나타났을 때, select 태그 내부의 option을 클릭하면 해당 option이 선택되고, option 외부를 클릭했을 때, 나타났던 option들이 사라지도록 구현된 웹을 많이 경험했을 것이다.</p><p>나도 그래프를 CustomLegend의 요소를 클릭했을 때, 클릭한 Legend의 Line 그래프를 highlight 시켜주고, CustomLegend 내부의 요소 이외의 영역을 클릭했을 때, 클릭한 요소를 해제하도록 구현해보았다.</p><h3 id="1-선택된-그래프의-x축-값을-상태로-관리한다"><a href="#1-선택된-그래프의-x축-값을-상태로-관리한다" class="headerlink" title="1. 선택된 그래프의 x축 값을 상태로 관리한다."></a>1. 선택된 그래프의 x축 값을 상태로 관리한다.</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [clickedGraph, setClickedGraph] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-CustomLegend에-이벤트-위임을-해준다"><a href="#2-CustomLegend에-이벤트-위임을-해준다" class="headerlink" title="2. CustomLegend에 이벤트 위임을 해준다."></a>2. CustomLegend에 이벤트 위임을 해준다.</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;CUSTOM_LEGEND&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((elem) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elem.name&#125;</span>&gt;</span>&#123;elem.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>CustomLegend의 ul 태그에 id를 부여한다.</li><li>li 요소를 클릭 이벤트를 이벤트 위임을 통해 이벤트 발생을 캐치할 수 있다.</li></ul><h3 id="3-이벤트-핸들러-생성"><a href="#3-이벤트-핸들러-생성" class="headerlink" title="3. 이벤트 핸들러 생성"></a>3. 이벤트 핸들러 생성</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickGraph</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = e.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line">  <span class="title function_">setClickedGraph</span>(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickOutside</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> parentElem = e.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!targetElem.<span class="title function_">closest</span>(<span class="string">&quot;#CUSTOM_LEGEND&quot;</span>)) &#123;</span><br><span class="line">    <span class="title function_">setClickedGraph</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>클릭이벤트가 발생한 요소의 가장 가까운 요소 중 id가 <code>CUSTOM_LEGEND</code>인 요소가 없으면 clickedGraph의 값을 빈 값으로 초기화 시킨다.</li></ul><h3 id="4-브라우저에-이벤트-등록"><a href="#4-브라우저에-이벤트-등록" class="headerlink" title="4. 브라우저에 이벤트 등록"></a>4. 브라우저에 이벤트 등록</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClickOutside);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClickOutside);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>내가 지정한 영역은 ul 태그 안이고 내가 지정하지 않은 외부의 영역을 모두 다루기 위해서는 브라우저에 이벤트를 등록해줘야한다.</li><li>useEffect는 함수형 컴포넌트에서 리액트 컴포넌트의 라이프사이클에 원하는 함수를 실행할 수 있도록 도와주는 훅이다.<ul><li>return으로 함수를 반환하면 해당 함수는 컴포넌트가 소멸할 때, 실행된다.</li></ul></li></ul><blockquote><p>렌더링 되기 이전에 브라우저에 이벤트를 등록해주고 해당 컴포넌트가 소멸할 때, 이벤트를 제거해줘야 컴포넌트가 렌더링 될 때마다 이벤트가 중복으로 등록되지 않아 성능상 문제를 해결할 수 있다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;흔히 웹을 사용하면서 select 태그를 클릭해서 options 들이 나타났을 때, select 태그 내부의 option을 클릭하면 해당 option이 선택되고, option 외부를 클릭했을 때, 나타났던 option들이 사라지도록 구현된 웹을 </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="이벤트 위임" scheme="https://loco9939.github.io/tags/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 날짜 쉽게 다루기</title>
    <link href="https://loco9939.github.io/2023/08/01/Daily/JavaScript-%EB%82%A0%EC%A7%9C-%EC%89%BD%EA%B2%8C-%EB%8B%A4%EB%A3%A8%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/01/Daily/JavaScript-%EB%82%A0%EC%A7%9C-%EC%89%BD%EA%B2%8C-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</id>
    <published>2023-08-01T13:29:01.000Z</published>
    <updated>2023-08-01T13:53:32.496Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트에서 날짜는 Date 객체로 다루곤 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Tue Aug 01 2023 22:32:45 GMT+0900 (Korean Standard Time)</span></span><br></pre></td></tr></table></figure><ul><li>1970년 1월 1일 UTC(국제표준시) 자정으로부터 지난 시간을 밀리초로 나타낸다.</li></ul><p>Date 객체도 다양한 메서드를 제공하는데, 개발자가 이를 다루기에 직관적이지 못하여 다루기가 까다롭다.</p><p>매번 chatGPT한테 물어볼 수도 없고 ..ㅎㅎ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = today.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">const</span> day = today.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="keyword">const</span> month = today.<span class="title function_">getMonth</span>();</span><br><span class="line"><span class="keyword">const</span> hours = today.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = today.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> ms = today.<span class="title function_">getMilliseconds</span>();</span><br><span class="line"><span class="keyword">const</span> sec = today.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(today); <span class="comment">// Tue Aug 01 2023 22:32:45 GMT+0900 (Korean Standard Time)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(day); <span class="comment">// 2 (0~6) 일 ~ 토</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(month); <span class="comment">// 7 (0~11)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hours); <span class="comment">// 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minutes); <span class="comment">// 32</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ms); <span class="comment">// 122</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sec); <span class="comment">// 45</span></span><br></pre></td></tr></table></figure><ul><li>day를 숫자로 표현해주고 있으니 직관적이지 못하다. 우리나라는 월요일부터 시작으로 세는 사람이 많은데 일요일부터 시작하니…</li><li>month도 왜 0부터 시작하는 것인지.. ㅋㅋ</li></ul><p>그래서 날짜를 좀 더 쉽게 다루기 위해 다양한 날짜 라이브러리가 나왔다.</p><p>오늘은 그 중 <code>date-fns</code> 라이브러리를 알아볼 것이다.</p><h1 id="date-fns"><a href="#date-fns" class="headerlink" title="date-fns"></a>date-fns</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install date-fns --save</span><br></pre></td></tr></table></figure><p>설치는 다음 명령어로 설치하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format, compareAsc &#125; <span class="keyword">from</span> <span class="string">&quot;date-fns&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">format</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">11</span>), <span class="string">&quot;MM/dd/yyyy&quot;</span>);</span><br><span class="line"><span class="comment">//=&gt; &#x27;02/11/2014&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dates = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1995</span>, <span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1987</span>, <span class="number">1</span>, <span class="number">11</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1989</span>, <span class="number">6</span>, <span class="number">10</span>),</span><br><span class="line">];</span><br><span class="line">dates.<span class="title function_">sort</span>(compareAsc);</span><br><span class="line"><span class="comment">//=&gt; [</span></span><br><span class="line"><span class="comment">//   Wed Feb 11 1987 00:00:00,</span></span><br><span class="line"><span class="comment">//   Mon Jul 10 1989 00:00:00,</span></span><br><span class="line"><span class="comment">//   Sun Jul 02 1995 00:00:00</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><ul><li>format 메서드를 사용하여 날짜를 원하는 형식으로 바꿀 수 있다.</li></ul><p>그 외에도 날짜를 서로 비교하여 우선순위를 매기거나 날짜를 더하고 뺄 수 있는 등 다양한 메서드를 사용하여 자유자재로 날짜를 다룰 수 있다.</p><p>예시로 날짜를 빼주는 메서드인 sub메서드만 알아보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subtract the following duration from 15 June 2017 15:29:20</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sub</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">29</span>, <span class="number">20</span>), &#123;</span><br><span class="line">  <span class="attr">years</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">months</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">weeks</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">days</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">hours</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">minutes</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">seconds</span>: <span class="number">30</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//=&gt; Mon Sep 1 2014 10:19:50</span></span><br></pre></td></tr></table></figure><ul><li>2017년에서 2년을 뺀다.</li><li>6월에서 9개월을 뺀다.</li><li>15일에서 1주일(7일)을 뺀다</li><li>나머지 8일에서 7일을 뺀다.</li><li>15시간에서 5시간을 뺀다.</li><li>29분에서 9분을 뺀다.</li><li>20초에서 30초를 뺀다.</li></ul><p>결과값은 2014년 9월 1일 월요일 10시 19분 50초가 나온다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자바스크립트에서 날짜는 Date 객체로 다루곤 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="date-fns" scheme="https://loco9939.github.io/tags/date-fns/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript의 var, let, const 키워드에 대해 설명하라</title>
    <link href="https://loco9939.github.io/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/"/>
    <id>https://loco9939.github.io/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</id>
    <published>2023-07-31T13:39:28.000Z</published>
    <updated>2023-07-31T13:58:56.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var-키워드"><a href="#var-키워드" class="headerlink" title="var 키워드"></a>var 키워드</h1><ul><li>함수레벨 스코프</li><li>생략 가능</li><li>변수 재선언, 재할당 가능</li><li>변수 호이스팅: 선언 이전에 참조할 수 있다.</li><li>전역 변수로 선언 시 전역 객체의 프로퍼티로 등록</li></ul><h1 id="let-키워드"><a href="#let-키워드" class="headerlink" title="let 키워드"></a>let 키워드</h1><ul><li>블록레벨 스코프</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let foo = 123; // 전역 변수</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let foo = 456; // 지역 변수</span><br><span class="line">  let bar = 456; // 지역 변수</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(foo); // 123</span><br><span class="line">console.log(bar); // ReferenceError: bar is not defined</span><br></pre></td></tr></table></figure><ul><li>재선언 불가</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">456</span>; <span class="comment">// 중복 선언 허용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">456</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;bar&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="let-키워드의-호이스팅"><a href="#let-키워드의-호이스팅" class="headerlink" title="let 키워드의 호이스팅"></a>let 키워드의 호이스팅</h2><p><img src="/../../images/var%20hoisting.png"></p><p><code>var</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 동시에 일어난다.</p><p><img src="/../../images/let%20hoisting.png"></p><p>하지만 <code>let</code>, <code>const</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 분리되어 진행된다.</p><h1 id="const-키워드"><a href="#const-키워드" class="headerlink" title="const 키워드"></a>const 키워드</h1><ul><li>재할당, 재선언 불가</li><li>상수를 주로 사용</li><li>변수 자체를 재할당할 순 없지만 객체의 프로퍼티는 변경 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 변수는 재할당이 금지된다.</span></span><br><span class="line"><span class="comment">// user = &#123;&#125;; // TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 내용은 변경할 수 있다.</span></span><br><span class="line">user.<span class="property">name</span> = <span class="string">&quot;Kim&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user); <span class="comment">// &#123; name: &#x27;Kim&#x27; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;var-키워드&quot;&gt;&lt;a href=&quot;#var-키워드&quot; class=&quot;headerlink&quot; title=&quot;var 키워드&quot;&gt;&lt;/a&gt;var 키워드&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;함수레벨 스코프&lt;/li&gt;
&lt;li&gt;생략 가능&lt;/li&gt;
&lt;li&gt;변수 재선언, 재할당</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript의 변수란?</title>
    <link href="https://loco9939.github.io/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/"/>
    <id>https://loco9939.github.io/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/</id>
    <published>2023-07-30T14:45:25.000Z</published>
    <updated>2023-07-30T14:58:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.</p><p>연산결과를 재사용하기 위해서는 메모리에 저장하고 <strong>메모리 주소</strong>를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</p><blockquote><p>메모리 주소에 직접 접근하는 것은 위험하다. 가령 운영체제가 사용하고 있는 값을 변경하면 시스템을 멈추게 하는 치명적인 오류가 발생할 수 있기 때문에 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.</p></blockquote><p><span style="font-size:18px">변수란, 하나의 값을 저장하기 위해 확보한 메모리 공간 또는 메모리 공간을 식별하기 위해 붙힌 이름이다.</span></p><ul><li>변수는 인터프리터나 컴파일러를 통해 값이 저장된 메모리 주소로 치환되어 실행된다.</li><li>자바스크립트 엔진은 변수 이름과 매핑된 메모리 주소를 통해 메모리 공간에 접근하여 저장된 값을 반환한다.</li></ul><h2 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h2><p>변수는 선언단계에서 변수 이름을 등록하여 자바스크립트 엔진에게 변수의 존재를 알린다.</p><p>또한 초기화 단계에서 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(score); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> score;</span><br></pre></td></tr></table></figure><p><span style="font-size:18px">모든 선언문은 런타임 이전에 먼저 실행된다.</span></p><h2 id="변수-할당"><a href="#변수-할당" class="headerlink" title="변수 할당"></a>변수 할당</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>변수 할당단계는 변수에 값을 저장하는 것을 말한다.</p><ul><li>선언과 할당이 한줄에 있어도 선언과 할당이 실행되는 시점이 다르다.</li><li><strong>값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임때 실행된다.</strong></li></ul><blockquote><p>변수에 값을 할당할 때, undefined가 있던 메모리 공간을 지우고 값을 저장하는 것이 아닌, 새로운 메모리 공간을 확보한 뒤 그곳에 새로운 값을 저장하고 해당 변수의 메모리 주소를 연결한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.&lt;/p&gt;
&lt;p&gt;연산결과를 재사용하기 위해서는 메모리에 저장하고 &lt;strong&gt;메모리 주소&lt;/strong&gt;를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
    <category term="변수" scheme="https://loco9939.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Recharts - Legend 커스터마이징</title>
    <link href="https://loco9939.github.io/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/"/>
    <id>https://loco9939.github.io/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/</id>
    <published>2023-07-29T03:47:43.000Z</published>
    <updated>2023-07-29T04:10:21.036Z</updated>
    
    <content type="html"><![CDATA[<p>저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.</p><p>이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.</p><h3 id="1-CustomLegend-컴포넌트"><a href="#1-CustomLegend-컴포넌트" class="headerlink" title="1. CustomLegend 컴포넌트"></a>1. CustomLegend 컴포넌트</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>예시를 위해 타입은 any로 설정하였다.</li><li>Legend의 각 li에 mouse 이벤트를 할당하였다.</li><li>마우스 이벤트는 호버된 데이터를 제외한 데이터들의 opacity를 줄여서 해당 데이터만 highlight 되도록 한다.</li></ul><h3 id="2-CustomLegend의-props"><a href="#2-CustomLegend의-props" class="headerlink" title="2. CustomLegend의 props"></a>2. CustomLegend의 props</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">    key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">    prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그런데, 해당 데이터에 호버를 해도 모든 데이터의 opacity가 줄어드는 문제가 발생했다.</p><p>그 이유는 Legend에서의 props와 customLegend의 props가 달라서 mouse 이벤트가 잘못 동작했기 때문이다.</p><ul><li>이전 mouse 이벤트에서는 props안에 dataKey 속성으로 호버된 데이터 값을 가져올 수 있었다.</li><li>하지만 customLegend에서는 props에 너무나도 많은 속성이 있었고 이 중 나는 target속성의 innerHTML 속성으로 호버된 데이터의 dataKey를 확인하는 로직을 구성하였다.</li></ul><h3 id="3-전체-코드"><a href="#3-전체-코드" class="headerlink" title="3. 전체 코드"></a>3. 전체 코드</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&quot;styles/colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NewPortChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = useState&lt;<span class="built_in">any</span>&gt;(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mappedOpacity = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data[<span class="number">0</span>]).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      prev = &#123; ...prev, [curr]: <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedOpacity);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LineChart</span> <span class="attr">width</span>=<span class="string">&#123;857&#125;</span> <span class="attr">height</span>=<span class="string">&#123;440&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">align</span>=<span class="string">&quot;right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">verticalAlign</span>=<span class="string">&quot;middle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">content</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;<span class="attr">CustomLegend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;Object.keys(data[0]).map((key, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;linear&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity[key]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeLinecap</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&#123;colors.GRAPH[</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NewPortChart</span>;</span><br></pre></td></tr></table></figure><h4 id="기본-CustomLegend"><a href="#기본-CustomLegend" class="headerlink" title="기본 CustomLegend"></a>기본 CustomLegend</h4><p><img src="/../../images/customLegend1.png" alt="기본 customlegend"></p><h4 id="Hover된-데이터만-highlight"><a href="#Hover된-데이터만-highlight" class="headerlink" title="Hover된 데이터만 highlight"></a>Hover된 데이터만 highlight</h4><p><img src="/../../images/customLegend2.png" alt="hover1"><br><img src="/../../images/customLegend3.png" alt="hover2"><br><img src="/../../images/customLegend4.png" alt="hover3"></p><h3 id="추가로…"><a href="#추가로…" class="headerlink" title="추가로…"></a>추가로…</h3><p>색상만 바꿀 것이였다면 왜 CustomLegend까지 쓰면서 복잡하게 시도를 했을까 궁금증이 들 수도 있다.</p><p>디자이너 요구사항이 Legend와 해당 Line 데이터 끝 부분을 선으로 연결해달라는 요청이 있었기 때문에 CustomLegend를 사용해보았다.</p><p>아직 해당 부분은 좀 더 고민이 필요하기 때문에 추후에 포스팅하도록 하겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.&lt;/p&gt;
&lt;p&gt;이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.&lt;/p&gt;
&lt;h3 id=&quot;1-CustomLegend-컴포넌트&quot;</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Recharts" scheme="https://loco9939.github.io/tags/Recharts/"/>
    
  </entry>
  
  <entry>
    <title>Recharts 커스터마이징 도전기 1</title>
    <link href="https://loco9939.github.io/2023/07/27/Daily/Recharts-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%8F%84%EC%A0%84%EA%B8%B0-1/"/>
    <id>https://loco9939.github.io/2023/07/27/Daily/Recharts-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%8F%84%EC%A0%84%EA%B8%B0-1/</id>
    <published>2023-07-27T14:03:13.000Z</published>
    <updated>2023-07-27T14:13:23.784Z</updated>
    
    <content type="html"><![CDATA[<p>서비스가 주식 관련 서비스이다 보니 차트를 사용할 일이 잦다.</p><p>차트를 직접 구현하자니 너무 공수가 많이 들 것 같아 Recharts 라이브러리를 자주 사용하고 있다.</p><p>하지만 공식문서에서 모든게 나와있지 않아서 ChatGPT의 도움도 많이 받고 있다. 그래도 꽤 쓸만한 라이브러리이다.</p><p>오늘은 Recharts 라이브러리로 legend에 hover했을 때, hover된 데이터만 highlight 되도록 구현해볼 것이다.</p><p><img src="/../../images/chart1.png" alt="chart"></p><p>우선 기본적인 Line 차트를 렌더링한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">XAxis</span>,</span><br><span class="line">  <span class="title class_">YAxis</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page A&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">4000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">2400</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2400</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page B&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">1398</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2210</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page C&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">9800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2290</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page D&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2780</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">3908</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page E&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">1890</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">4800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2181</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page F&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2390</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">3800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2500</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page G&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">3490</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">4300</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MultiLineCharts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = <span class="title function_">useState</span>(&#123; <span class="attr">uv</span>: <span class="number">1</span>, <span class="attr">pv</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dataKey &#125; = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mappedObj = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params">o</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dataKey &#125; = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mappedObj = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&#123;300&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LineChart</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;300&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">data</span>=<span class="string">&#123;data&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">margin</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">top:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">right:</span> <span class="attr">30</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">bottom:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">XAxis</span> <span class="attr">dataKey</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">YAxis</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;monotone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&quot;pv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity.pv&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&quot;#8884d8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;&#123;</span> <span class="attr">r:</span> <span class="attr">8</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;monotone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&quot;uv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity.uv&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&quot;#82ca9d&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MultiLineCharts</span>;</span><br></pre></td></tr></table></figure><ul><li><code>Line</code> 그래프의 <code>opacity</code>를 <code>useState로</code> 관리한다.</li><li><code>Legend에</code> <code>onMouseEnter</code>, <code>onMouseLeave</code> 이벤트를 할당한다.</li><li>여기서 유저가 이벤트를 발생시킨 요소만 <code>opacity</code>를 두고 나머지 데이터들의 <code>opacity</code>를 줄여주기 위해 <code>opacity</code> 객체를 재구성했다.</li><li><code>Object.entries()</code>와 <code>reduce()</code>를 사용하여 편리하게 객체를 재구성할 수 있다.</li></ul><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/../../images/chart_hover1.png" alt="hover chart"></p><ul><li>보라색 Legend Hover 시</li></ul><p><img src="/../../images/chart_hover2.png" alt="hover_chart2"></p><ul><li>연두색 Legend Hover 시</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;서비스가 주식 관련 서비스이다 보니 차트를 사용할 일이 잦다.&lt;/p&gt;
&lt;p&gt;차트를 직접 구현하자니 너무 공수가 많이 들 것 같아 Recharts 라이브러리를 자주 사용하고 있다.&lt;/p&gt;
&lt;p&gt;하지만 공식문서에서 모든게 나와있지 않아서 ChatGP</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Recharts" scheme="https://loco9939.github.io/tags/Recharts/"/>
    
  </entry>
  
  <entry>
    <title>CSS - input 포커스 시 placeholder 사라지게 하기</title>
    <link href="https://loco9939.github.io/2023/07/26/CSS/CSS-input-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EC%8B%9C-placeholder-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/26/CSS/CSS-input-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EC%8B%9C-placeholder-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-26T12:34:19.000Z</published>
    <updated>2023-07-26T12:39:11.509Z</updated>
    
    <content type="html"><![CDATA[<p>input에 입력값을 입력하기 전까지 placeholder는 사라지지 않는다.</p><p>이는 input 창이 포커싱되어있는지 헷갈리게 할 수 있어 UX를 떨어뜨릴 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-webkit-input-placeholder,</span><br><span class="line">textarea:focus::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="comment">/* WebKit browsers */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>:-moz-placeholder,</span><br><span class="line">textarea:focus:-moz-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-moz-placeholder,</span><br><span class="line">textarea:focus::-moz-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>:-ms-input-placeholder,</span><br><span class="line">textarea:focus:-ms-input-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>크로스 브라우징을 고려하여 CSS를 추가해주었다.</li><li>포커스가 되었을 때, placeholder 색상을 투명하게 설정하도록 해준다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;input에 입력값을 입력하기 전까지 placeholder는 사라지지 않는다.&lt;/p&gt;
&lt;p&gt;이는 input 창이 포커싱되어있는지 헷갈리게 할 수 있어 UX를 떨어뜨릴 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="CSS" scheme="https://loco9939.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://loco9939.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript - 객체의 key 값에 유니온 타입 선언하기</title>
    <link href="https://loco9939.github.io/2023/07/25/TypeScript/TypeScript-%EA%B0%9D%EC%B2%B4%EC%9D%98-key-%EA%B0%92%EC%97%90-%EC%9C%A0%EB%8B%88%EC%98%A8-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/25/TypeScript/TypeScript-%EA%B0%9D%EC%B2%B4%EC%9D%98-key-%EA%B0%92%EC%97%90-%EC%9C%A0%EB%8B%88%EC%98%A8-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-25T14:37:36.000Z</published>
    <updated>2023-07-25T14:44:43.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="객체의-key-값에-유니온-타입-선언하기"><a href="#객체의-key-값에-유니온-타입-선언하기" class="headerlink" title="객체의 key 값에 유니온 타입 선언하기"></a>객체의 key 값에 유니온 타입 선언하기</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfoType = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: userInfoType]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/key_union.png" alt="유니온 타입 에러"></p><ul><li>“인덱스 시그니처 매개변수는 리터럴 타입이나 제네릭 타입이 될 수 없다.”는 에러가 발생했다.</li><li>매핑된 객체를 대신 사용하라고 알려준다.</li></ul><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfoType = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userType = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> userInfoType]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: userType = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;홍길동&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&quot;서울&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;객체의-key-값에-유니온-타입-선언하기&quot;&gt;&lt;a href=&quot;#객체의-key-값에-유니온-타입-선언하기&quot; class=&quot;headerlink&quot; title=&quot;객체의 key 값에 유니온 타입 선언하기&quot;&gt;&lt;/a&gt;객체의 key 값에 유니온 타입 선언</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://loco9939.github.io/categories/TypeScript/"/>
    
    
    <category term="타입스크립트" scheme="https://loco9939.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>큐 - 클래스로 구현하기</title>
    <link href="https://loco9939.github.io/2023/07/24/Python/DataStructure/Queue/%ED%81%90-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/24/Python/DataStructure/Queue/%ED%81%90-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-24T12:18:36.000Z</published>
    <updated>2023-07-24T14:08:29.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue-클래스로-구현하기"><a href="#Queue-클래스로-구현하기" class="headerlink" title="Queue 클래스로 구현하기"></a>Queue 클래스로 구현하기</h1><p><img src="/../../../../images/en,dequeue.png" alt="enqueue와 dequeue"></p><ul><li>Queue는 입구가 <code>rear</code>이고 출구가 <code>front</code>이다.</li><li>입구쪽에서 데이터를 추가하는 것을 <code>enqueue</code>라고 한다.</li><li>출구쪽에서 데이터를 제거하는 것을 <code>dequeue</code>라고 한다.</li></ul><h3 id="노드-삽입할-때"><a href="#노드-삽입할-때" class="headerlink" title="노드 삽입할 때,"></a>노드 삽입할 때,</h3><ul><li>빈 Queue이면 front, rear가 모두 첫 노드를 가리킨다.</li><li>빈 Queue가 아니면, rear의 next가 새 노드를 가리키고 rear를 새 노드로 옮긴다.</li></ul><h3 id="노드-꺼낼-때"><a href="#노드-꺼낼-때" class="headerlink" title="노드 꺼낼 때,"></a>노드 꺼낼 때,</h3><ul><li>빈 Queue가 되면, front, rear는 모두 None을 가리킨다.</li><li>Queue에 노드가 남아있으면 front를 front의 next로 옮긴다.</li></ul><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.front = <span class="literal">None</span></span><br><span class="line">        self.rear = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.front == <span class="literal">None</span>:</span><br><span class="line">            self.front = node</span><br><span class="line">            self.rear = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.rear.<span class="built_in">next</span> = node</span><br><span class="line">            self.rear = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self,data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.front == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.front</span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            self.front = <span class="literal">None</span></span><br><span class="line">            self.rear = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.front = self.front.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.front == <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Queue-클래스로-구현하기&quot;&gt;&lt;a href=&quot;#Queue-클래스로-구현하기&quot; class=&quot;headerlink&quot; title=&quot;Queue 클래스로 구현하기&quot;&gt;&lt;/a&gt;Queue 클래스로 구현하기&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../.</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>큐 - 개념 및 설명</title>
    <link href="https://loco9939.github.io/2023/07/23/Python/DataStructure/Queue/%ED%81%90-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/"/>
    <id>https://loco9939.github.io/2023/07/23/Python/DataStructure/Queue/%ED%81%90-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/</id>
    <published>2023-07-23T03:08:00.000Z</published>
    <updated>2023-07-23T03:13:00.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue-큐-란"><a href="#Queue-큐-란" class="headerlink" title="Queue(큐)란?"></a>Queue(큐)란?</h1><p>큐는 대기행렬(줄)이다.</p><p>우리가 무언가를 사거나 장소에 들어갈 때 줄을 선 순서를 생각하면 된다.</p><p>많은 양의 자료를 프린터로 출력한다 했을 때, 프린터 상태창을 보면 출력할 자료가 순서대로 들어가있고 <strong>들어간 순서대로 출력되는 것을 알 수 있다.</strong></p><p><img src="/../../../../images/queue.png" alt="queue"></p><p>스택이 한쪽입구가 막힌 상자에 자료를 차곡차곡 쌓는 것이라면, 큐는 입구와 출구가 따로 있는 통로로서 한쪽에서 밀어 넣으면 반대쪽에서 나오는 것이다.</p><ul><li>큐에서는 <code>head</code> 대신 <code>front</code>, <code>tail</code> 대신 <code>rear(or back)</code> 이라 한다.</li><li><code>enqueue</code>: 가장 마지막에 자료를 넣는 것으로 위 그림에서 연결리스트의 <code>append()</code>와 같다.</li><li><code>dequeue</code>: 가장 먼저 들어간 자료를 꺼내는 것으로 연결리스트의 <code>popLeft()</code>와 같다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Queue-큐-란&quot;&gt;&lt;a href=&quot;#Queue-큐-란&quot; class=&quot;headerlink&quot; title=&quot;Queue(큐)란?&quot;&gt;&lt;/a&gt;Queue(큐)란?&lt;/h1&gt;&lt;p&gt;큐는 대기행렬(줄)이다.&lt;/p&gt;
&lt;p&gt;우리가 무언가를 사거나 장소에 들어</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>CSS 내부 경계(border) 적용하기</title>
    <link href="https://loco9939.github.io/2023/07/22/CSS/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/22/CSS/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-22T00:18:37.000Z</published>
    <updated>2023-07-22T00:34:25.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="내부-경계-border-효과-주기"><a href="#내부-경계-border-효과-주기" class="headerlink" title="내부 경계(border) 효과 주기"></a>내부 경계(border) 효과 주기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><img src="/../../../images/inner_border.png" alt="문제사진"></p><p>CSS로 작업을 하다가 경계가 검정색 바탕 부분과 border에 약간의 단차가 생기는 문제가 있었다.</p><p>마크업 구조는 다음과 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>나의 자산 목표 금액 계산기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>목표 금액 계산기란?<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>h2 태그에 배경색이 검정색이다.</li><li>h2 태그와 형제태그인 div 태그에 보더를 주었더니 단차가 생겼다.</li></ul><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> gray inset;</span><br></pre></td></tr></table></figure><ul><li>box-shadow 효과를 inset으로 주어서 보더 처럼 보이도록 구현했다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;내부-경계-border-효과-주기&quot;&gt;&lt;a href=&quot;#내부-경계-border-효과-주기&quot; class=&quot;headerlink&quot; title=&quot;내부 경계(border) 효과 주기&quot;&gt;&lt;/a&gt;내부 경계(border) 효과 주기&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    <category term="CSS" scheme="https://loco9939.github.io/categories/CSS/"/>
    
    
  </entry>
  
</feed>
