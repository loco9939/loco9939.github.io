<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loco&#39;s Dev Blog</title>
  
  <subtitle>Frontend Developer</subtitle>
  <link href="https://loco9939.github.io/atom.xml" rel="self"/>
  
  <link href="https://loco9939.github.io/"/>
  <updated>2023-07-19T14:35:04.176Z</updated>
  <id>https://loco9939.github.io/</id>
  
  <author>
    <name>loco9939</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>스택 - 후위 표기법</title>
    <link href="https://loco9939.github.io/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/"/>
    <id>https://loco9939.github.io/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/</id>
    <published>2023-07-19T13:41:59.000Z</published>
    <updated>2023-07-19T14:35:04.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="후위표기법-1"><a href="#후위표기법-1" class="headerlink" title="후위표기법 1"></a>후위표기법 1</h1><p>연산자를 피연산자 뒤에 쓰는 연산기법</p><p>예를 들어, <code>3+5x2</code> 를 중위 표기법이라 하고,</p><p><code>352x+</code>를 후위 표기법이라고 한다.</p><h2 id="계산-방법"><a href="#계산-방법" class="headerlink" title="계산 방법"></a>계산 방법</h2><p><code>3+5x2</code>를 후위 표기법으로 적으면, <code>352x+</code>이다.</p><p><code>352x+</code>를 계산하기 위해서 다음과정을 따른다.</p><ol><li>피연산자(숫자)는 스택에 담는다. <code>[3,5,2]</code></li><li>연산자를 만나면, 스택에서 피연산자 2개를 꺼내 계산한다.</li><li>결과값을 다시 스택에 넣는다. <code>[3,10]</code></li><li>다음 연산자는 <code>+</code>이므로 <code>3+10</code>을 계산한다.</li></ol><ul><li>컴퓨터 입장에서는 후위 표기법이 연산의 우선순위가 명확하다는 장점이 있다.</li></ul><h2 id="중위-표기법을-후위-표기법으로-변환"><a href="#중위-표기법을-후위-표기법으로-변환" class="headerlink" title="중위 표기법을 후위 표기법으로 변환"></a>중위 표기법을 후위 표기법으로 변환</h2><p><code>3+5x2</code>를 후위 표기법으로 바꾸는 과정을 알아보자.</p><ol><li>피연산자 3을 결과값에 추가</li><li><ul><li>연산자 스택에 push</li></ul></li><li>피연산자 5 결과값에 추가</li><li>x 연산자와 스택의 마지막 값인 + 우선순위 비교</li><li>x 연산자가 우선순위 높으므로 스택에 push</li><li>피연산자 2 결과값에 추가</li><li>스택이 빌 때까지 pop하여 결과값에 추가</li></ol><p><code>3x5+2</code>를 후위 표기법으로 바꿔보자.</p><ol><li>피연산자 3을 결과값에 추가</li><li>x 연산자 스택에 push</li><li>피연산자 5 결과값에 추가</li><li><ul><li>연산자와 스택의 마지막 값인 x 우선순위 비교</li></ul></li><li>스택의 마지막 값인 x 연산자가 높으니 pop하여 결과값에 추가</li><li><ul><li>연산자는 스택에 push</li></ul></li><li>피연산자 2을 결과값에 추가</li><li>스택이 빌 때까지 pop하여 결과값에 추가</li></ol><h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><h3 id="Stack-클래스를-이용한-풀이"><a href="#Stack-클래스를-이용한-풀이" class="headerlink" title="Stack 클래스를 이용한 풀이"></a>Stack 클래스를 이용한 풀이</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    s = Stack()</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> priority.keys():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.top == <span class="literal">None</span>:</span><br><span class="line">                s.push(x)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> priority[s.top.data] &lt; priority[x]:</span><br><span class="line">                    s_pop = s.pop()</span><br><span class="line">                    result += s_pop</span><br><span class="line">                s.push(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty():</span><br><span class="line">        s_pop = s.pop()</span><br><span class="line">        result += s_pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>아래는 if 문으 조금 줄여보았다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    s = Stack()</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> priority.keys():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s.is_empty() <span class="keyword">and</span> priority[s.top.data] &lt; priority[x]:</span><br><span class="line">                s_pop = s.pop()</span><br><span class="line">                result += s_pop</span><br><span class="line">            s.push(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty():</span><br><span class="line">        s_pop = s.pop()</span><br><span class="line">        result += s_pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;후위표기법-1&quot;&gt;&lt;a href=&quot;#후위표기법-1&quot; class=&quot;headerlink&quot; title=&quot;후위표기법 1&quot;&gt;&lt;/a&gt;후위표기법 1&lt;/h1&gt;&lt;p&gt;연산자를 피연산자 뒤에 쓰는 연산기법&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;3+5x2&lt;/co</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>스택 - 연습문제</title>
    <link href="https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/"/>
    <id>https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/</id>
    <published>2023-07-18T14:48:21.000Z</published>
    <updated>2023-07-18T15:26:53.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="문제-1-괄호-짝-검사"><a href="#문제-1-괄호-짝-검사" class="headerlink" title="문제 1. 괄호 짝 검사"></a>문제 1. 괄호 짝 검사</h1><p>괄호의 짝이 바르면 True, 바르지 않으면 False를 반환하는 함수를 작성하라.</p><p>예를 들어 <code>((a*(b+c))-d) / e</code>는 괄호의 짝이 올바르지만, <code>(((a*(b+c))-d) / e</code> 는 괄호의 짝이 맞지 않는다.</p><p>괄호는 소괄호(())만 사용한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(x)</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack.pop():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br></pre></td></tr></table></figure><ul><li>여는 괄호가 나오면 stack에 <code>Push</code></li><li>닫는 괄호가 나오면 stack을 <code>pop</code><ul><li>이 때, stack에서 아무것도 <code>pop</code>되지 않는다면, 제대로 된 괄호가 구성되지 않은 것이다.</li></ul></li></ul><h1 id="문제-2-소-중-대괄호-짝-검사"><a href="#문제-2-소-중-대괄호-짝-검사" class="headerlink" title="문제 2. 소,중,대괄호 짝 검사"></a>문제 2. 소,중,대괄호 짝 검사</h1><p>소괄호, 중괄호, 대괄호 짝이 맞는지 검사</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[&#123;a * (b + c)&#125; - d] / e&quot;</span> <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;[&#123;a * (b + c)] - d] / e&quot;</span> <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="풀이-1"><a href="#풀이-1" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    brackets = &#123;<span class="string">&quot;)&quot;</span>:<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&#125;&quot;</span>:<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;]&quot;</span>:<span class="string">&quot;[&quot;</span>&#125;</span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> brackets.values():</span><br><span class="line">            stack.push(x)</span><br><span class="line">        <span class="keyword">elif</span> x <span class="keyword">in</span> brackets:</span><br><span class="line">            popped = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> popped <span class="keyword">or</span> brackets[x] != popped:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br></pre></td></tr></table></figure><ul><li>brackets을 관리하는 딕셔너리를 만든다.</li><li>여는 괄호면 stack에 push한다.</li><li>닫는 괄호면, 해당 닫는 괄호와 짝을 이루는 여는 괄호가 stack.pop()한 요소와 같은지 비교<ul><li>만약 다르거나 pop한 요소가 None이라면 False</li></ul></li></ul><h1 id="문제-3-짝지어-제거하기"><a href="#문제-3-짝지어-제거하기" class="headerlink" title="문제 3. 짝지어 제거하기"></a>문제 3. 짝지어 제거하기</h1><p>같은 알파벳 2개가 붙어 있는 짝을 찾습니다.</p><p>그 다음 그 둘을 제거한 뒤 앞뒤로 문자열을 이어 붙입니다.</p><p>이 과정을 반복하여 문자열이 모두 제거된다면 1을 반환하고 그렇지 않으면 0을 반환합니다.</p><h2 id="풀이-2"><a href="#풀이-2" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">and</span> ch == stack[-<span class="number">1</span>]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(ch)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>stack 클래스 대신 배열을 사용했다.</li><li>stack의 <code>push()</code>: <code>append()</code></li><li>stack의 <code>pop()</code>: <code>pop()</code></li><li>stack의 <code>peek()</code>: [-1]로 인덱싱</li><li><code>is_empty()</code>: 빈 리스트 논리값은 False 임을 이용</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;문제-1-괄호-짝-검사&quot;&gt;&lt;a href=&quot;#문제-1-괄호-짝-검사&quot; class=&quot;headerlink&quot; title=&quot;문제 1. 괄호 짝 검사&quot;&gt;&lt;/a&gt;문제 1. 괄호 짝 검사&lt;/h1&gt;&lt;p&gt;괄호의 짝이 바르면 True, 바르지 않으면 Fal</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>스택 - 파이썬으로 스택(stack) 구현하기</title>
    <link href="https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-18T12:40:59.000Z</published>
    <updated>2023-07-18T14:39:49.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파이썬으로-Stack-스택-구현하기"><a href="#파이썬으로-Stack-스택-구현하기" class="headerlink" title="파이썬으로 Stack(스택) 구현하기"></a>파이썬으로 Stack(스택) 구현하기</h1><p><img src="/../../../../../images/stack.png" alt="stack"></p><ul><li>스택은 서류나 책 위에 다른 서류나 책을 쌓아 올리는 형태이다.</li><li>자료를 꺼낼 때에는 맨 위부터 꺼내야한다. 후입선출(Last In First Out, LIFO)</li></ul><p><img src="/../../../../../images/stack2.png" alt="stack2"></p><ul><li>90도 눕혀서 보게 되면 연결리스트와 비슷한 구조를 지닌다.</li><li>연결리스트의 <code>head</code>를 스택에서는 <code>top</code>이라고 부른다.</li></ul><h2 id="Stack-메서드"><a href="#Stack-메서드" class="headerlink" title="Stack 메서드"></a>Stack 메서드</h2><ul><li><code>push(data)</code>: data를 넣는 작업, 연결리스트의 <code>appendLeft와</code> 같다.</li><li><code>pop()</code>: 자료를 꺼내는 작업, 연결리스트의 <code>popLeft와</code> 같다.</li><li><code>peek()</code>: 마지막에 넣은 자료 확인, pop과 비슷하지만 값을 제거하지는 않는다.</li><li><code>is_empty()</code>: 빈 스택인지 확인</li></ul><h2 id="Stack-클래스-만들기"><a href="#Stack-클래스-만들기" class="headerlink" title="Stack 클래스 만들기"></a>Stack 클래스 만들기</h2><ul><li>단일 연결리스트를 활용하여 Stack 클래스에서는 top 속성을 넣고 length 속성은 뺀다.</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">    self.data = data</span><br><span class="line">    self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.top = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,data</span>):</span><br><span class="line">    node = Node(data)</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      self.top = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node.<span class="built_in">next</span> = self.top</span><br><span class="line">      self.top = node</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    node = self.top</span><br><span class="line">    self.top = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> self.top.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.top == <span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;파이썬으로-Stack-스택-구현하기&quot;&gt;&lt;a href=&quot;#파이썬으로-Stack-스택-구현하기&quot; class=&quot;headerlink&quot; title=&quot;파이썬으로 Stack(스택) 구현하기&quot;&gt;&lt;/a&gt;파이썬으로 Stack(스택) 구현하기&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>==, is는 같지 않다. (Python)</title>
    <link href="https://loco9939.github.io/2023/07/17/Python/is%EB%8A%94-%EA%B0%99%EC%A7%80-%EC%95%8A%EB%8B%A4-Python/"/>
    <id>https://loco9939.github.io/2023/07/17/Python/is%EB%8A%94-%EA%B0%99%EC%A7%80-%EC%95%8A%EB%8B%A4-Python/</id>
    <published>2023-07-17T13:27:06.000Z</published>
    <updated>2023-07-17T13:32:07.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x3D-x3D-is는-같지-않다"><a href="#x3D-x3D-is는-같지-않다" class="headerlink" title="&#x3D;&#x3D;, is는 같지 않다."></a>&#x3D;&#x3D;, is는 같지 않다.</h1><ul><li><code>==</code> 는 값을 비교한다.</li><li><code>is</code> 는 메모리 주소를 비교한다.</li></ul><p>파이썬에서 변수는 객체에 붙은 이름표라고 생각하자.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="예외-케이스"><a href="#예외-케이스" class="headerlink" title="예외 케이스"></a>예외 케이스</h1><h2 id="1-정수형값"><a href="#1-정수형값" class="headerlink" title="1. 정수형값"></a>1. 정수형값</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># True</span></span><br></pre></td></tr></table></figure><ul><li>Python은 메모리 최적화를 위해 -5 ~ 256 까지는 캐싱하는 싱글턴 오브젝트이다.</li></ul><h3 id="각-자료형-is-x3D-x3D-비교"><a href="#각-자료형-is-x3D-x3D-비교" class="headerlink" title="각 자료형 is, &#x3D;&#x3D; 비교"></a>각 자료형 is, &#x3D;&#x3D; 비교</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#정수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==integer==&#x27;</span>)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#부동소수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==float==&#x27;</span>)</span><br><span class="line">a = <span class="number">3.15982489254324342</span></span><br><span class="line">b = <span class="number">3.15982489254324342</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#복소수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==complex==&#x27;</span>)</span><br><span class="line">a = <span class="number">1</span>+<span class="number">4j</span></span><br><span class="line">b = <span class="number">1</span>+<span class="number">4j</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#문자열</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==string==&#x27;</span>)</span><br><span class="line">a = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#부울</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==bool==&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#리스트</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==list==&#x27;</span>)</span><br><span class="line">a = []</span><br><span class="line">b = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#튜플</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==tuple==&#x27;</span>)</span><br><span class="line">a = ()</span><br><span class="line">b = ()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#딕셔너리</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==dictionary==&#x27;</span>)</span><br><span class="line">a = &#123;&#125;</span><br><span class="line">b = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>주로 <code>==</code>을 사용하지 메모리를 직접 비교하는 <code>is</code>는 자주 사용되지 않고 헷갈리므로 <code>==</code>를 사용하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;x3D-x3D-is는-같지-않다&quot;&gt;&lt;a href=&quot;#x3D-x3D-is는-같지-않다&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x3D;&amp;#x3D;, is는 같지 않다.&quot;&gt;&lt;/a&gt;&amp;#x3D;&amp;#x3D;, is는 같지 않다.&lt;/h1</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>연결리스트 - 주어진 리스트가 순환이 있는지 확인하는 문제</title>
    <link href="https://loco9939.github.io/2023/07/17/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%88%9C%ED%99%98%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/"/>
    <id>https://loco9939.github.io/2023/07/17/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%88%9C%ED%99%98%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/</id>
    <published>2023-07-16T15:25:38.000Z</published>
    <updated>2023-07-16T15:26:31.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-연결리스트-길이로-풀기"><a href="#1-연결리스트-길이로-풀기" class="headerlink" title="1. 연결리스트 길이로 풀기"></a>1. 연결리스트 길이로 풀기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">    node = Linked_list.head</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Linked_list)):</span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> node <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>연결리스트의 길이를 구하여 연결리스트의 마지막 노드의 next 를 확인한다.<ul><li>만약 마지막 노드의 next가 있다면, 순환연결리스트</li><li>그렇지 않으면 연결리스트이다.</li></ul></li></ul><h3 id="2-집합을-사용하여-풀기"><a href="#2-집합을-사용하여-풀기" class="headerlink" title="2. 집합을 사용하여 풀기"></a>2. 집합을 사용하여 풀기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">node = Linked_list.head</span><br><span class="line"><span class="keyword">while</span> node:</span><br><span class="line"><span class="keyword">if</span> node <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">s.add(node)</span><br><span class="line">node = node.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li><strong>노드의 값이 중복되지 않는다면</strong>, 지나간 노드를 집합(set)에 저장한다.</li><li>노드가 이동할 때 마다 집합에 있는 노드인지 확인한다.<ul><li>집합에 지나간 노드가 있으면 True</li><li>그렇지 않으면 False</li></ul></li></ul><h3 id="3-중복된-값이-있을-경우-두개의-포인트를-사용하여-풀기"><a href="#3-중복된-값이-있을-경우-두개의-포인트를-사용하여-풀기" class="headerlink" title="3. 중복된 값이 있을 경우, 두개의 포인트를 사용하여 풀기"></a>3. 중복된 값이 있을 경우, 두개의 포인트를 사용하여 풀기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">    node1 = node2 = Linked_list.head</span><br><span class="line">    <span class="keyword">while</span> node1 <span class="keyword">and</span> node1.<span class="built_in">next</span>:</span><br><span class="line">        node1 = node1.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        node2 = node2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node1 == node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>node1은 두칸씩 이동한다.</li><li>node2는 한칸씩 이동한다.</li><li>만약 순환이 있다면 언젠가는 두 노드가 만난다.</li><li>순환이 없다면 node1 또는 node1.next가 None에 도달한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-연결리스트-길이로-풀기&quot;&gt;&lt;a href=&quot;#1-연결리스트-길이로-풀기&quot; class=&quot;headerlink&quot; title=&quot;1. 연결리스트 길이로 풀기&quot;&gt;&lt;/a&gt;1. 연결리스트 길이로 풀기&lt;/h3&gt;&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="LinkedList" scheme="https://loco9939.github.io/categories/Python/DataStructure/LinkedList/"/>
    
    
    <category term="연결리스트" scheme="https://loco9939.github.io/tags/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>연결리스트 - 클래스 구현</title>
    <link href="https://loco9939.github.io/2023/07/16/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84/"/>
    <id>https://loco9939.github.io/2023/07/16/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84/</id>
    <published>2023-07-16T14:23:56.000Z</published>
    <updated>2023-07-18T12:37:49.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="연결리스트-클래스"><a href="#연결리스트-클래스" class="headerlink" title="연결리스트 클래스"></a>연결리스트 클래스</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#파일 이름: sllist.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linked_list</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty List&quot;</span></span><br><span class="line">        node = self.head</span><br><span class="line">        string = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">            string += <span class="built_in">str</span>(node.data) + <span class="string">&quot; → &quot;</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> string + <span class="built_in">str</span>(node.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.data == data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">appendleft</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = self.head</span><br><span class="line">            self.head = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.head</span><br><span class="line">            <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">                prev = prev.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">popleft</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.head</span><br><span class="line">        self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">if</span> self.head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                prev = node</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, i, data</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= <span class="number">0</span>:</span><br><span class="line">            self.appendleft(data)</span><br><span class="line">        <span class="keyword">elif</span> i &gt;= self.length:</span><br><span class="line">            self.append(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>):</span><br><span class="line">                prev = prev.<span class="built_in">next</span></span><br><span class="line">            node = Node(data)</span><br><span class="line">            node.<span class="built_in">next</span> = prev.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = node</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head.data == data:</span><br><span class="line">            self.popleft()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        prev = self.head</span><br><span class="line">        <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> prev.<span class="built_in">next</span>.data == data:</span><br><span class="line">                prev.<span class="built_in">next</span> = prev.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">                self.length -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            prev = prev.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.length &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        ahead = self.head.<span class="built_in">next</span></span><br><span class="line">        prev = self.head</span><br><span class="line">        prev.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> ahead:</span><br><span class="line">            self.head = ahead</span><br><span class="line">            ahead = ahead.<span class="built_in">next</span></span><br><span class="line">            self.head.<span class="built_in">next</span> = prev</span><br><span class="line">            prev = self.head</span><br></pre></td></tr></table></figure><h2 id="연결리스트-테스트"><a href="#연결리스트-테스트" class="headerlink" title="연결리스트 테스트"></a>연결리스트 테스트</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(msg, end = <span class="string">&quot;&gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    data = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(data) <span class="keyword">if</span> data.isdigit() <span class="keyword">else</span> data</span><br><span class="line"></span><br><span class="line">my_list = LinkedList()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="string">실행할 명령어를 선택하세요.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[0] 연결 리스트의 상태 출력</span></span><br><span class="line"><span class="string">[1] 처음에 노드 추가   [2] 끝에 노드 추가      [3] 노드 검색</span></span><br><span class="line"><span class="string">[4] 첫 노드 꺼내기     [5] 마지막 노드 꺼내기  [6] 특정 위치에 노드 삽입</span></span><br><span class="line"><span class="string">[7] 노드 삭제         [8] 연결 리스트 뒤집기</span></span><br><span class="line"><span class="string">[9] 끝내기</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(menu, end=<span class="string">&quot; &gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    command = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> command == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">1</span>:</span><br><span class="line">        my_list.appendLeft(get_data(<span class="string">&quot;추가할 값(정수, 문자)을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">2</span>:</span><br><span class="line">        my_list.append(get_data(<span class="string">&quot;추가할 값(정수, 문자)을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">3</span>:</span><br><span class="line">        data = get_data(<span class="string">&quot;검색할 값을 입력하세요.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">in</span> my_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 있습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 없습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list.popLeft())</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list.pop())</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">6</span>:</span><br><span class="line">        index = get_data(<span class="string">&quot;값을 추가할 인덱스를 입력하세요.&quot;</span>)</span><br><span class="line">        my_list.insert(index, get_data(<span class="string">&quot;추가할 값을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">7</span>:</span><br><span class="line">        data = get_data(<span class="string">&quot;삭제할 값을 입력하세요.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> my_list.remove(data):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(을)를 정상적으로 삭제했습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 없습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">8</span>:</span><br><span class="line">        my_list.reverse()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;리스트를 뒤집었습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;연결리스트-클래스&quot;&gt;&lt;a href=&quot;#연결리스트-클래스&quot; class=&quot;headerlink&quot; title=&quot;연결리스트 클래스&quot;&gt;&lt;/a&gt;연결리스트 클래스&lt;/h1&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="LinkedList" scheme="https://loco9939.github.io/categories/Python/DataStructure/LinkedList/"/>
    
    
    <category term="연결리스트" scheme="https://loco9939.github.io/tags/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>연결리스트 - 개념 및 설명</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/</id>
    <published>2023-07-15T14:51:57.000Z</published>
    <updated>2023-07-15T15:00:47.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="연결리스트"><a href="#연결리스트" class="headerlink" title="연결리스트"></a>연결리스트</h1><p>노드로 감싸진 요소를 인접한 메모리 위치가 아닌 독립적으로 저장한다.</p><p>각 노드는 next 또는 next,prev 라는 포인터로 서로 연결된 선형적인 자료구조</p><ul><li>참조: O(n)</li><li>탐색: O(n)</li><li>삽입 &#x2F; 삭제: O(1)</li></ul><p>연결리스트에 접근하기 위해서는 첫 노드를 가리키는 <strong>head</strong>가 반드시 있어야 한다.</p><blockquote><p>노드란, data와 next로 이루어진 구조체이다. 값을 담고 있는 data, 노드와 노드를 잇는 next라는 포인터로 이루어져 있다.</p></blockquote><h2 id="싱글연결리스트"><a href="#싱글연결리스트" class="headerlink" title="싱글연결리스트"></a>싱글연결리스트</h2><p><img src="/../../../../images/LinkedList/theory/single.png" alt="스크린샷 2023-07-15 오후 12.17.18.png"></p><p>next 포인터만 존재하여 한 방향으로만 데이터가 연결된다.</p><h2 id="원형연결리스트"><a href="#원형연결리스트" class="headerlink" title="원형연결리스트"></a>원형연결리스트</h2><p>마지막 노드와 첫번째 노드가 연결되어 원을 형성한다.</p><p>싱글연결리스트 또는 이중연결리스트로 이루어진 2가지 타입의 원형 리스트가 있다.</p><h3 id="싱글연결리스트로-구성된-원형연결리스트"><a href="#싱글연결리스트로-구성된-원형연결리스트" class="headerlink" title="싱글연결리스트로 구성된 원형연결리스트"></a>싱글연결리스트로 구성된 원형연결리스트</h3><p><img src="/../../../../images/LinkedList/theory/circleSingle.png" alt="스크린샷 2023-07-15 오후 12.18.41.png"></p><h3 id="이중연결리스트로-구성된-원형연결리스트"><a href="#이중연결리스트로-구성된-원형연결리스트" class="headerlink" title="이중연결리스트로 구성된 원형연결리스트"></a>이중연결리스트로 구성된 원형연결리스트</h3><p><img src="/../../../../images/LinkedList/theory/circleDouble.png" alt="스크린샷 2023-07-15 오후 12.18.50.png"></p><h2 id="랜덤접근과-순차적-접근"><a href="#랜덤접근과-순차적-접근" class="headerlink" title="랜덤접근과 순차적 접근"></a>랜덤접근과 순차적 접근</h2><p><img src="/../../../../images/LinkedList/theory/access.png" alt="스크린샷 2023-07-15 오후 12.21.39.png"></p><h3 id="랜덤접근-random-access-직접접근"><a href="#랜덤접근-random-access-직접접근" class="headerlink" title="랜덤접근(random access, 직접접근)"></a>랜덤접근(random access, 직접접근)</h3><ul><li>동일한 시간에 배열과 같은 순차적인 데이터가 있을 때, 임의의 인덱스에 해당하는 데이터에 접근할 수 있는 기능</li><li>vector, array는 랜덤 접근 가능하여 n번째 요소에 접근 시 O(1)</li></ul><h3 id="순차적-접근-squential-access"><a href="#순차적-접근-squential-access" class="headerlink" title="순차적 접근(squential access)"></a>순차적 접근(squential access)</h3><ul><li>데이터를 저장된 순서대로 검색하며 순차적으로 접근</li><li>연결리스트, 스택, 큐는 순차적 접근만 가능하여 n번째 요소 접근 시 O(n)</li></ul><h2 id="📌-배열과-연결리스트-비교"><a href="#📌-배열과-연결리스트-비교" class="headerlink" title="📌 배열과 연결리스트 비교"></a>📌 배열과 연결리스트 비교</h2><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><ul><li>배열은 indexing으로 원소에 접근은 쉽다. O(1)</li><li>하지만 맨 끝을 제외한 위치에서 원소를 추가 &#x2F; 삭제 하는 것은 연속한 메모리 공간을 확보하고 원소를 이동시켜야하므로 시간이 오래 걸린다. O(n)</li></ul><h3 id="연결리스트-1"><a href="#연결리스트-1" class="headerlink" title="연결리스트"></a>연결리스트</h3><ul><li>연결리스트는 이전 노드들을 순차적으로 접근해야 하므로 접근은 오래 걸린다. O(n)</li><li>하지만 삽입 &#x2F; 삭제는 노드를 생성하고 next, prev 포인터로 이전, 다음 노드만 연결해주면 되므로 시간 복잡도가 적다. O(1)</li><li>자료의 양이 정해져 있지 않아서 추가 및 삭제하는 일이 많은 경우 연결리스트가 적합하다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;연결리스트&quot;&gt;&lt;a href=&quot;#연결리스트&quot; class=&quot;headerlink&quot; title=&quot;연결리스트&quot;&gt;&lt;/a&gt;연결리스트&lt;/h1&gt;&lt;p&gt;노드로 감싸진 요소를 인접한 메모리 위치가 아닌 독립적으로 저장한다.&lt;/p&gt;
&lt;p&gt;각 노드는 next 또</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="LinkedList" scheme="https://loco9939.github.io/categories/Python/DataStructure/LinkedList/"/>
    
    
    <category term="연결리스트" scheme="https://loco9939.github.io/tags/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>메모리와 포인터</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%ED%8F%AC%EC%9D%B8%ED%84%B0/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%ED%8F%AC%EC%9D%B8%ED%84%B0/</id>
    <published>2023-07-15T14:46:26.000Z</published>
    <updated>2023-07-15T14:50:14.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-메모리와-주소"><a href="#1-메모리와-주소" class="headerlink" title="1. 메모리와 주소"></a>1. 메모리와 주소</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정수는 4byte</span></span><br><span class="line"><span class="type">int</span> i;</span><br></pre></td></tr></table></figure><p>C++에서 변수를 만들면 변수에 메모리 주소를 할당(예약)한다.</p><p>이 때, 변수 i의 메모리 주소는 변수가 사용하는 메모리 주소 첫번째를 가리킨다.</p><ul><li>&amp;(ampersand,앰퍼샌드) 연산자로 메모리 주소를 얻을 수 있다.</li></ul><h1 id="2-포인터"><a href="#2-포인터" class="headerlink" title="2. 포인터"></a>2. 포인터</h1><ul><li>자바, 파이썬, 자바스크립트는 개발자가 직접 변수에 메모리를 할당하거나 해제할 수 없고 GC를 통해 이를 수행한다.</li><li>C, C++ 하위레벨 언어는 GC가 없는 대신, 개발자가 직접 필요한 메모리를 예약 및 해제할 수 있다.</li></ul><p>포인터란, 변수의 메모리 주소를 담는 타입이다.</p><ul><li>메모리 동적할당</li><li>데이터 복사하지 않고 매개변수로 사용</li><li>클래스 및 구조체 연결</li></ul><p>ex) 연결리스트의 노드</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">string s = <span class="string">&quot;kundol&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> * a = &amp; i;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">string * b = &amp;s;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&amp; i : 변수의 메모리 주소</li><li>“타입 * 형태” 로 포인터를 정의한다.</li></ul><h3 id="포인터의-크기"><a href="#포인터의-크기" class="headerlink" title="포인터의 크기"></a>포인터의 크기</h3><ul><li>OS가 32bit라면 4byte, 64bit라면 8byte로 고정</li><li>어떤 타입(string,int, char 등) 상관없이 무조건 위 수치대로 고정</li><li>포인터는 메모리 주소를 담는 것이지 변수 자체를 담는 것이 아니다.<ul><li>집 주소(포인터)의 크기와 집(메모리)의 크기는 상관이 없다!</li></ul></li></ul><p><strong>ex) 1byte 짜리 char 타입의 변수의 포인터 크기는 1byte가 아니다.</strong></p><h1 id="3-역참조연산자"><a href="#3-역참조연산자" class="headerlink" title="3. 역참조연산자"></a>3. 역참조연산자</h1><ul><li>(에스터리스크) 기호를 포인터와 사용하여 역참조로 해당 메모리 주소의 할당된 값을 참조할 수 있다.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  string a = <span class="string">&quot;abcda&quot;</span>;</span><br><span class="line">  string * b = &amp;a;</span><br><span class="line">  cout &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; *b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x6ffdf0</span></span><br><span class="line"><span class="comment">abcda</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>a 라는 변수(메모리)에 ‘abcda’ 라는 string 값이 할당</li><li>string * b 로 포인터를 정의하여 a 변수의 메모리를 할당</li><li>*b 로 포인터를 역참조하여 포인터의 메모리 주소에 할당된 값을 출력</li></ol><h1 id="4-array-to-pointer-decay"><a href="#4-array-to-pointer-decay" class="headerlink" title="4. array to pointer decay"></a>4. array to pointer decay</h1><p>배열을 변수에 할당하여 해당 변수(주소값)을 T * 라는 포인터에 할당하게 되면, T[N] 이라는 배열의 크기 정보 N이 없어지고 첫번째 요소의 주소가 바인딩되는 현상</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> * c = a;</span><br><span class="line">  cout &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; &amp;a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; c + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; &amp;a[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>vector(동적배열)은 안되고 array(정적배열)만 가능</li><li>int * c 포인터에 a array를 할당<ol><li>array to pointer decay 현상 발생</li></ol></li><li>c 를 출력하면 array의 첫번째 요소의 메모리 주소가 출력 <code>(c == &amp;a[0])</code></li><li>포인터 c에 1을 더하면 array의 두번째 요소를 의미한다.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-메모리와-주소&quot;&gt;&lt;a href=&quot;#1-메모리와-주소&quot; class=&quot;headerlink&quot; title=&quot;1. 메모리와 주소&quot;&gt;&lt;/a&gt;1. 메모리와 주소&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    
  </entry>
  
  <entry>
    <title>배열 - 정적배열과 동적배열</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%95%EC%A0%81%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%95%EC%A0%81%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4/</id>
    <published>2023-07-15T14:43:29.000Z</published>
    <updated>2023-07-15T14:46:50.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정적배열-Array"><a href="#정적배열-Array" class="headerlink" title="정적배열 - Array"></a>정적배열 - Array</h1><ul><li>연속된 메모리 공간에 위치한 같은 타입의 요소들의 모음</li><li>한번 정해진 크기는 변경불가<ul><li>가득찬 공간에 원소 추가하려면 더 큰 배열 생성 후 기존 배열의 원소를 복사한 후 새 원소 추가</li></ul></li><li>숫자 인덱스를 기반으로 랜덤 접근이 가능하고 중복을 허용한다.</li><li>vector와 달리 메서드가 없다.</li></ul><h2 id="C-선언타입"><a href="#C-선언타입" class="headerlink" title="C++ 선언타입"></a>C++ 선언타입</h2><h3 id="C스타일"><a href="#C스타일" class="headerlink" title="C스타일"></a>C스타일</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 할당</span></span><br><span class="line"><span class="type">int</span> b[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>배열의 크기를 정하여 선언 가능</li><li>크기를 정하지 않고 선언하면서 중괄호 요소들을 할당할 수 있다.</li></ul><h3 id="std스타일"><a href="#std스타일" class="headerlink" title="std스타일"></a>std스타일</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 10&gt; a;</span><br></pre></td></tr></table></figure><h1 id="동적배열"><a href="#동적배열" class="headerlink" title="동적배열"></a>동적배열</h1><ul><li>정적 배열의 특징을 가지면서 가변적인 특징이 더해짐</li><li>참조: O(1)</li><li>탐색: O(n)</li><li>맨끝에서 삽입 &#x2F; 삭제: O(1)</li><li>맨 끝 제외 삽입 &#x2F; 삭제: O(n)</li></ul><p>ex) 파이썬의 리스트</p><h2 id="C-선언방식"><a href="#C-선언방식" class="headerlink" title="C++ 선언방식"></a>C++ 선언방식</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;타입&gt; 변수명;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 크기 미리 정하거나 해당 크기의 어떤 값으로 초기화 가능</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a : v) cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">100 100 100 100 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;정적배열-Array&quot;&gt;&lt;a href=&quot;#정적배열-Array&quot; class=&quot;headerlink&quot; title=&quot;정적배열 - Array&quot;&gt;&lt;/a&gt;정적배열 - Array&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;연속된 메모리 공간에 위치한 같은 타입의 요소들의 </summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Array" scheme="https://loco9939.github.io/categories/Python/DataStructure/Array/"/>
    
    
    <category term="배열" scheme="https://loco9939.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>배열 - 제시된 합을 가진 부분 배열 찾기</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%9C%EC%8B%9C%EB%90%9C-%ED%95%A9%EC%9D%84-%EA%B0%80%EC%A7%84-%EB%B6%80%EB%B6%84-%EB%B0%B0%EC%97%B4-%EC%B0%BE%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%9C%EC%8B%9C%EB%90%9C-%ED%95%A9%EC%9D%84-%EA%B0%80%EC%A7%84-%EB%B6%80%EB%B6%84-%EB%B0%B0%EC%97%B4-%EC%B0%BE%EA%B8%B0/</id>
    <published>2023-07-14T15:13:34.000Z</published>
    <updated>2023-07-15T14:46:56.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="제시된-합을-가진-부분-배열-찾기"><a href="#제시된-합을-가진-부분-배열-찾기" class="headerlink" title="제시된 합을 가진 부분 배열 찾기"></a>제시된 합을 가진 부분 배열 찾기</h1><p>정렬되지 않은 양의 정수로 이루어진 배열 A가 있다. 연속된 원소를 더한 값이 제시된 값 S와 같은 부분 배열을 찾아라. (인덱스 기준은 1이다.)</p><ul><li>입력: arr &#x3D; [1, 2, 3, 7, 5], s &#x3D; 12, 출력: [2, 4]<ul><li>인덱스 2부터 4까지의 합: 2 + 3 + 7 &#x3D; 12</li></ul></li><li>입력: arr &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s &#x3D; 15, 출력: [1, 5]</li></ul><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-이중-반복문-사용"><a href="#1-이중-반복문-사용" class="headerlink" title="1. 이중 반복문 사용"></a>1. 이중 반복문 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">arr,s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="built_in">sum</span> = s</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="built_in">sum</span> -= arr[j]</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sum</span> == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> [i+<span class="number">1</span>,j+<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="2-1-O-n-시간복잡도로-풀기"><a href="#2-1-O-n-시간복잡도로-풀기" class="headerlink" title="2-1. O(n) 시간복잡도로 풀기"></a>2-1. O(n) 시간복잡도로 풀기</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">arr,s</span>):</span><br><span class="line">    <span class="built_in">sum</span> = s</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    position = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">sum</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> position == <span class="built_in">len</span>(arr) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">sum</span> -= arr[position]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> &lt; <span class="number">0</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            position = index</span><br><span class="line">            <span class="built_in">sum</span> = s</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        position += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> [index+<span class="number">1</span>,position]</span><br></pre></td></tr></table></figure><ul><li>sum에 s를 할당하여 position 위치의 요소를 하나씩 빼면서 sum 값이 0 보다 작은지 체크</li><li>0 보다 작다면 연속되는 부분합이 아니므로 리셋시켜주고 시작 index도 우측으로 이동시킨다.</li><li>만약 시작 index가 배열의 끝까지 도달했는데도 sum이 0이 되지 않으면 연속되는 부분합을 만들 수 없다.</li></ul><h3 id="2-2-O-n-시간복잡도로-풀기"><a href="#2-2-O-n-시간복잡도로-풀기" class="headerlink" title="2-2. O(n) 시간복잡도로 풀기"></a>2-2. O(n) 시간복잡도로 풀기</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">arr,s</span>):</span><br><span class="line">    left,<span class="built_in">sum</span> = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="built_in">sum</span> += arr[right]</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right <span class="keyword">and</span> <span class="built_in">sum</span> &gt; s):</span><br><span class="line">            <span class="built_in">sum</span> -= arr[left]</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> == s:</span><br><span class="line">            <span class="keyword">return</span> [left+<span class="number">1</span>,right+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>배열의 첫번째 요소부터 하나씩 sum에 더해준다.</li><li>sum이 s보다 작거나 같으면 계속 배열의 요소를 더해준다.</li><li><code>sum &gt; s</code>를 만족하면, sum에 left 위치의 요소를 빼주면서 sum이 s보다 작거나 같으면 중단</li><li>이 때, <code>sum == s</code>를 만족하면 <code>[left+1, right+1]</code>을 반환한다.</li><li><code>left == right</code> 일 때, <code>sum == s</code>를 만족하지 않으면 연속되는 부분합이 없다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;제시된-합을-가진-부분-배열-찾기&quot;&gt;&lt;a href=&quot;#제시된-합을-가진-부분-배열-찾기&quot; class=&quot;headerlink&quot; title=&quot;제시된 합을 가진 부분 배열 찾기&quot;&gt;&lt;/a&gt;제시된 합을 가진 부분 배열 찾기&lt;/h1&gt;&lt;p&gt;정렬되지 않</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Array" scheme="https://loco9939.github.io/categories/Python/DataStructure/Array/"/>
    
    
    <category term="배열" scheme="https://loco9939.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>배열 - 0과 1로 구성된 배열 정렬</title>
    <link href="https://loco9939.github.io/2023/07/14/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-0%EA%B3%BC-1%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%EB%B0%B0%EC%97%B4-%EC%A0%95%EB%A0%AC/"/>
    <id>https://loco9939.github.io/2023/07/14/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-0%EA%B3%BC-1%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%EB%B0%B0%EC%97%B4-%EC%A0%95%EB%A0%AC/</id>
    <published>2023-07-14T12:35:18.000Z</published>
    <updated>2023-07-15T14:46:38.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0과-1로-구성된-배열-정렬"><a href="#0과-1로-구성된-배열-정렬" class="headerlink" title="0과 1로 구성된 배열 정렬"></a>0과 1로 구성된 배열 정렬</h1><p>0과 1로 이루어진 배열이 있다. 배열 자체를 오름차순으로 정렬하라.</p><ul><li>입력: [1, 0, 1, 1, 1, 1, 1, 0, 0, 0], 출력: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]</li><li>입력: [1, 1], 출력: [1, 1]</li></ul><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-sort-사용"><a href="#1-sort-사용" class="headerlink" title="1. sort() 사용"></a>1. sort() 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    arr.sort()</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><ul><li>sort() 메서드는 원본 배열을 오름차순으로 변경한다.</li></ul><h3 id="2-sorted-사용"><a href="#2-sorted-사용" class="headerlink" title="2. sorted() 사용"></a>2. sorted() 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    answer = <span class="built_in">sorted</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h3 id="3-count-사용"><a href="#3-count-사용" class="headerlink" title="3. count() 사용"></a>3. count() 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    arr[:] = [<span class="number">0</span>] * arr.count(<span class="number">0</span>) + [<span class="number">1</span>] * arr.count(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><ul><li><code>arr[:]</code>을 사용하여 원본에 영향을 미치지 않고 복사할 수 있다.</li></ul><h3 id="4-포인터-2개-사용"><a href="#4-포인터-2개-사용" class="headerlink" title="4. 포인터 2개 사용"></a>4. 포인터 2개 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> arr[left] == <span class="number">0</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> arr[right] == <span class="number">1</span> <span class="keyword">and</span> right &gt;= <span class="number">0</span>:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; right:</span><br><span class="line">            arr[left], arr[right] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">            left, right = left + <span class="number">1</span>, right + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0과-1로-구성된-배열-정렬&quot;&gt;&lt;a href=&quot;#0과-1로-구성된-배열-정렬&quot; class=&quot;headerlink&quot; title=&quot;0과 1로 구성된 배열 정렬&quot;&gt;&lt;/a&gt;0과 1로 구성된 배열 정렬&lt;/h1&gt;&lt;p&gt;0과 1로 이루어진 배열이 있다.</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Array" scheme="https://loco9939.github.io/categories/Python/DataStructure/Array/"/>
    
    
    <category term="배열" scheme="https://loco9939.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>배열 - 회문(Pelindromes) 찾기</title>
    <link href="https://loco9939.github.io/2023/07/14/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%ED%9A%8C%EB%AC%B8-Pelindromes-%EC%B0%BE%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/14/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%ED%9A%8C%EB%AC%B8-Pelindromes-%EC%B0%BE%EA%B8%B0/</id>
    <published>2023-07-14T12:13:39.000Z</published>
    <updated>2023-07-15T14:47:01.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="회문-Palindrome-찾기"><a href="#회문-Palindrome-찾기" class="headerlink" title="회문(Palindrome) 찾기"></a>회문(Palindrome) 찾기</h1><p>주어진 문자열이 회문이면 True, 아니면 False를 반환하라.</p><ul><li>입력: madam, 출력: True</li><li>입력: tomato, 출력: False</li></ul><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-reversed-join-리스트-컴프리헨션-사용"><a href="#1-reversed-join-리스트-컴프리헨션-사용" class="headerlink" title="1. reversed(), join(), 리스트 컴프리헨션 사용"></a>1. reversed(), join(), 리스트 컴프리헨션 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPelindrome</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    reverse_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">reversed</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>])))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span> == reverse_str</span><br></pre></td></tr></table></figure><h3 id="2-슬라이싱-사용"><a href="#2-슬라이싱-사용" class="headerlink" title="2. 슬라이싱 사용"></a>2. 슬라이싱 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&#x27;racecar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> word == word[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>슬라이싱은 <code>[startIndex:endIndex:interval]</code>로 사용하는데, <code>startIndex</code>, <code>endIndex</code> 없이 <code>interval만</code> 사용하여 역순을 표현했다.</li></ul><h3 id="3-포인터-2개-사용"><a href="#3-포인터-2개-사용" class="headerlink" title="3. 포인터 2개 사용"></a>3. 포인터 2개 사용</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">word</span>):</span><br><span class="line">    left,right = <span class="number">0</span>, <span class="built_in">len</span>(word) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">if</span> (word[left] != word[right]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        left, right = left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;회문-Palindrome-찾기&quot;&gt;&lt;a href=&quot;#회문-Palindrome-찾기&quot; class=&quot;headerlink&quot; title=&quot;회문(Palindrome) 찾기&quot;&gt;&lt;/a&gt;회문(Palindrome) 찾기&lt;/h1&gt;&lt;p&gt;주어진 문자열이 회문이</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Array" scheme="https://loco9939.github.io/categories/Python/DataStructure/Array/"/>
    
    
    <category term="배열" scheme="https://loco9939.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>간단하게 Reset CSS 적용하기</title>
    <link href="https://loco9939.github.io/2023/06/01/Daily/%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-Reset-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/06/01/Daily/%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-Reset-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2023-06-01T12:58:21.000Z</published>
    <updated>2023-06-01T13:01:36.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="간단하게-Reset-CSS-적용하기"><a href="#간단하게-Reset-CSS-적용하기" class="headerlink" title="간단하게 Reset CSS 적용하기"></a>간단하게 Reset CSS 적용하기</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">::before</span>,</span><br><span class="line">*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>-scheme: dark light;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line">picture,</span><br><span class="line">svg,</span><br><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;간단하게-Reset-CSS-적용하기&quot;&gt;&lt;a href=&quot;#간단하게-Reset-CSS-적용하기&quot; class=&quot;headerlink&quot; title=&quot;간단하게 Reset CSS 적용하기&quot;&gt;&lt;/a&gt;간단하게 Reset CSS 적용하기&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>그리드로 푸터 레이아웃 문제 해결</title>
    <link href="https://loco9939.github.io/2023/05/30/Daily/%EA%B7%B8%EB%A6%AC%EB%93%9C%EB%A1%9C-%ED%91%B8%ED%84%B0-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/"/>
    <id>https://loco9939.github.io/2023/05/30/Daily/%EA%B7%B8%EB%A6%AC%EB%93%9C%EB%A1%9C-%ED%91%B8%ED%84%B0-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/</id>
    <published>2023-05-30T13:39:42.000Z</published>
    <updated>2023-05-30T14:01:10.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="그리드로-footer-만들기"><a href="#그리드로-footer-만들기" class="headerlink" title="그리드로 footer 만들기"></a>그리드로 footer 만들기</h1><p><img src="/../../images/Daily/grid/grid-footer.png" alt="grid 푸터 예시"></p><p>우리는 푸터를 만들 때, 위와 같이 푸터를 하단에 고정하기 위해 고민한다.</p><p>나도 에이블 프로젝트를 할 때, 고민을 많이 했었고, position을 썼었던 걸로 기억하는데 깔끔하게 처리하지 못했었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    SIMPLIFY YOUR CSS WITH THESE 3 GRID LAYOUT SOLUTIONS Lorem ipsum dolor, sit</span><br><span class="line">    amet consectetur adipisicing elit. Enim fugiat fuga illum doloribus</span><br><span class="line">    perferendis asperiores ab voluptatem laudantium, dignissimos nulla. Nemo</span><br><span class="line">    minus aliquid nesciunt quos temporibus ratione dicta quas doloremque.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Contents<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nesciunt soluta</span><br><span class="line">      hic, odit ad quisquam iste? Magnam, animi ut, tempore libero a aliquam</span><br><span class="line">      vitae quos alias possimus fugiat officia, temporibus illo!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 HTML 구조를 가지는 예시를 들어보자.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main-layout</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>header, main, footer 를 감싸는 컨테이너의 <code>min-height</code>를 <code>100vh</code>로 화면에 꽉차게 설정</li><li>grid 속성을 주어 빈 공간이 없게 만든다.</li><li>grid의 rows 속성의 너비를 지정한다.<ul><li>auto로 설정하면 해당 태그가 가지고 있는 높이만큼만 설정하게된다.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;그리드로-footer-만들기&quot;&gt;&lt;a href=&quot;#그리드로-footer-만들기&quot; class=&quot;headerlink&quot; title=&quot;그리드로 footer 만들기&quot;&gt;&lt;/a&gt;그리드로 footer 만들기&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../i</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>아이콘에 가려져서 클릭되지 않는 문제 해결하기</title>
    <link href="https://loco9939.github.io/2023/05/23/Daily/%EC%95%84%EC%9D%B4%EC%BD%98%EC%97%90-%EA%B0%80%EB%A0%A4%EC%A0%B8%EC%84%9C-%ED%81%B4%EB%A6%AD%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/05/23/Daily/%EC%95%84%EC%9D%B4%EC%BD%98%EC%97%90-%EA%B0%80%EB%A0%A4%EC%A0%B8%EC%84%9C-%ED%81%B4%EB%A6%AD%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/</id>
    <published>2023-05-23T13:49:17.000Z</published>
    <updated>2023-05-23T13:54:04.299Z</updated>
    
    <content type="html"><![CDATA[<p>개발을 하다보면 디자이너나 클라이언트의 요구사항을 만족시키기 위해 기본 input 태그나 select 태그 등을 커스텀 해야하는 경우가 많다.</p><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>커스텀 select 태그를 만들어서 아이콘도 img 태그를 사용하여 추가해주었다.</p><p>하지만, select 태그 내부의 icon을 클릭하게 되면 <code>select 태그가 열리지 않는 불편함이 있다.</code></p><h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><p>아이콘에 <code>pointer-events:none;</code> 속성을 추가한다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.custom-select</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  select &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.select-icon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이렇게 하면 아이콘을 클릭해도 select 태그가 클릭된 것처럼 제대로 동작한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;개발을 하다보면 디자이너나 클라이언트의 요구사항을 만족시키기 위해 기본 input 태그나 select 태그 등을 커스텀 해야하는 경우가 많다.&lt;/p&gt;
&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>완전탐색(Brute Forcing)</title>
    <link href="https://loco9939.github.io/2023/05/11/Python/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89-Brute-Forcing/"/>
    <id>https://loco9939.github.io/2023/05/11/Python/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89-Brute-Forcing/</id>
    <published>2023-05-10T15:17:26.000Z</published>
    <updated>2023-05-10T15:23:32.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="완전탐색-Brute-Forcing"><a href="#완전탐색-Brute-Forcing" class="headerlink" title="완전탐색(Brute Forcing)"></a>완전탐색(Brute Forcing)</h1><h3 id="가능한-모든-경우의-수를-검사하는-방법"><a href="#가능한-모든-경우의-수를-검사하는-방법" class="headerlink" title="가능한 모든 경우의 수를 검사하는 방법"></a>가능한 모든 경우의 수를 검사하는 방법</h3><h2 id="문제-1"><a href="#문제-1" class="headerlink" title="문제 1"></a>문제 1</h2><h3 id="시간에서-‘3’이-포함된-횟수-구하는-문제"><a href="#시간에서-‘3’이-포함된-횟수-구하는-문제" class="headerlink" title="시간에서 ‘3’이 포함된 횟수 구하는 문제"></a>시간에서 ‘3’이 포함된 횟수 구하는 문제</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;3&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(i)+<span class="built_in">str</span>(j)+<span class="built_in">str</span>(k):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="문제-2"><a href="#문제-2" class="headerlink" title="문제 2"></a>문제 2</h2><h3 id="체스-말이-움직일-수-있는-경우의-수-구하라"><a href="#체스-말이-움직일-수-있는-경우의-수-구하라" class="headerlink" title="체스 말이 움직일 수 있는 경우의 수 구하라"></a>체스 말이 움직일 수 있는 경우의 수 구하라</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">col,row = <span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">n = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ASCII 코드 구하는 코드 ord(str), ord(&#x27;a&#x27;) = 97</span></span><br><span class="line">array = [[i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">steps = [(-<span class="number">2</span>,-<span class="number">1</span>),(-<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">2</span>,-<span class="number">1</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">2</span>,<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> steps:</span><br><span class="line">    y = <span class="built_in">int</span>(row) + step[<span class="number">0</span>]</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">ord</span>(col)) - <span class="built_in">int</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) + <span class="number">1</span> + step[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">1</span> <span class="keyword">or</span> y &lt; <span class="number">1</span> <span class="keyword">or</span> x &gt; <span class="number">8</span> <span class="keyword">or</span> y &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 말이 움직이는 벡터 방향</span></span><br><span class="line">dx = [<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">dy = [<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># x,y로 방향이 2개로 정해져있으니 튜플 사용 가능</span></span><br><span class="line">steps = [(-<span class="number">2</span>,-<span class="number">1</span>),(-<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">2</span>,-<span class="number">1</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">2</span>,<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><ul><li>ASCII 코드를 사용하여 ‘a’ 문자열을 숫자로 변환</li></ul><h2 id="문제-3"><a href="#문제-3" class="headerlink" title="문제 3"></a>문제 3</h2><h3 id="문자는-정렬하고-숫자는-더하여-반환하라"><a href="#문자는-정렬하고-숫자는-더하여-반환하라" class="headerlink" title="문자는 정렬하고 숫자는 더하여 반환하라"></a>문자는 정렬하고 숫자는 더하여 반환하라</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>()</span><br><span class="line">result = []</span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha():</span><br><span class="line">        result.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value += <span class="built_in">int</span>(i)</span><br><span class="line"></span><br><span class="line">result.sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value != <span class="number">0</span>:</span><br><span class="line">    result.append(<span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(result))</span><br></pre></td></tr></table></figure><ul><li><code>isalpha()</code> 내장함수를 사용하여 <code>i</code>가 문자열인지 확인</li><li><code>join()</code> 내장함수를 사용하여 list를 문자열로 합침</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;완전탐색-Brute-Forcing&quot;&gt;&lt;a href=&quot;#완전탐색-Brute-Forcing&quot; class=&quot;headerlink&quot; title=&quot;완전탐색(Brute Forcing)&quot;&gt;&lt;/a&gt;완전탐색(Brute Forcing)&lt;/h1&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>그리디 알고리즘 with Python</title>
    <link href="https://loco9939.github.io/2023/05/09/Python/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-with-Python/"/>
    <id>https://loco9939.github.io/2023/05/09/Python/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-with-Python/</id>
    <published>2023-05-08T15:34:56.000Z</published>
    <updated>2023-05-08T15:37:41.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="greedy-알고리즘"><a href="#greedy-알고리즘" class="headerlink" title="greedy 알고리즘"></a>greedy 알고리즘</h1><p>탐욕적으로 현재 상황에서 가장 최적의 문제풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토한다.</p><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>1이 될 때 까지, N을 K로 나누거나 N에 1을 빼거나 행동의 최소 횟수 구하기</p><h3 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h3><p>N(1 &lt;&#x3D; N &lt;&#x3D; 100,000) K(2 &lt;&#x3D; K &lt;&#x3D; 100,000)</p><h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><p>K가 2이상이므로 1을 빼는 것보다 <strong>최대한 많이 나누는 것이 연산횟수를 최소화할 수 있다.</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">N,K = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 시간복잡도 O(N)</span></span><br><span class="line"><span class="keyword">while</span> N != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> (N % K == <span class="number">0</span>):</span><br><span class="line">        N /= K</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    N -= <span class="number">1</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 시간복잡도 O(log N)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    target = (N // K) \* K</span><br><span class="line">    count += (N - target)</span><br><span class="line">    N = target</span><br><span class="line">    <span class="keyword">if</span> N &lt; K:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    N //= K</span><br><span class="line"></span><br><span class="line">count += (N - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;greedy-알고리즘&quot;&gt;&lt;a href=&quot;#greedy-알고리즘&quot; class=&quot;headerlink&quot; title=&quot;greedy 알고리즘&quot;&gt;&lt;/a&gt;greedy 알고리즘&lt;/h1&gt;&lt;p&gt;탐욕적으로 현재 상황에서 가장 최적의 문제풀이를 위한 최소한의</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>코딩테스트를 위한 파이썬 기본문법</title>
    <link href="https://loco9939.github.io/2023/05/06/Python/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/"/>
    <id>https://loco9939.github.io/2023/05/06/Python/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/</id>
    <published>2023-05-06T14:36:41.000Z</published>
    <updated>2023-05-06T14:43:34.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="리스트-컴프리핸션"><a href="#리스트-컴프리핸션" class="headerlink" title="리스트 컴프리핸션"></a>리스트 컴프리핸션</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">4</span></span><br><span class="line">m = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">array = [[<span class="number">0</span>] \* m <span class="keyword">for</span> \_ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">array[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><h2 id="2차원-배열-참조값-복사-오류"><a href="#2차원-배열-참조값-복사-오류" class="headerlink" title="2차원 배열 참조값 복사 오류"></a>2차원 배열 참조값 복사 오류</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">4</span></span><br><span class="line">m1 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 참조값이 복사되어 원하는 부분 이외의 요소도 변경됨</span></span><br><span class="line"></span><br><span class="line">array1 = [[<span class="number">0</span>]*m]*n</span><br><span class="line">array1[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(array1)</span><br></pre></td></tr></table></figure><h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">dict</span>()</span><br><span class="line">data[<span class="string">&#x27;apple&#x27;</span>] = <span class="string">&#x27;사과&#x27;</span></span><br><span class="line">data[<span class="string">&#x27;banana&#x27;</span>] = <span class="string">&#x27;바나나&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;apple&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;apple&#x27;</span>]+<span class="string">&#x27;가 존재합니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key_list = <span class="built_in">list</span>(data.keys())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key_list)</span><br></pre></td></tr></table></figure><h1 id="set-자료형"><a href="#set-자료형" class="headerlink" title="set 자료형"></a>set 자료형</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">3.11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(c))</span><br><span class="line"></span><br><span class="line">sett = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(sett)</span><br><span class="line"><span class="built_in">print</span>(sett)</span><br></pre></td></tr></table></figure><h1 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">x,y,z = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.stdin.readline() 빠른 입력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">data1 = sys.stdin.readline().rstrip();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br></pre></td></tr></table></figure><h1 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">1</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f,g)</span><br><span class="line"><span class="built_in">print</span>(f, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(g, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">answer = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;정답은 <span class="subst">&#123;answer&#125;</span>입니다.&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">10</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X는 10이상입니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X는 0 이상입니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x &lt;= <span class="number">100</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X는 0보다 크거나 같고 100보다 작거나 같습니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;cool&#x27;</span> <span class="keyword">if</span> x&gt;<span class="number">10</span> <span class="keyword">else</span> <span class="string">&#x27;fail&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">12</span>: rest = <span class="string">&#x27;cooler&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rest)</span><br></pre></td></tr></table></figure><h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">result += i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">rss = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">rss += k</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rss)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;u&#125;</span> X <span class="subst">&#123;o&#125;</span> = <span class="subst">&#123;u\*o&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gf = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">global</span> gf</span><br><span class="line">gf += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> \_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gf)</span><br></pre></td></tr></table></figure><h1 id="람다표현식"><a href="#람다표현식" class="headerlink" title="람다표현식"></a>람다표현식</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> a,b: a+b)(<span class="number">33</span>,<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">people = [(<span class="string">&#x27;홍길동&#x27;</span>,<span class="number">10</span>),(<span class="string">&#x27;이순신&#x27;</span>, <span class="number">5</span>),(<span class="string">&#x27;아무개&#x27;</span>,<span class="number">70</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(people,key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">list_result = <span class="built_in">map</span>(<span class="keyword">lambda</span> a,b:a+b, list1, list2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(list_result))</span><br></pre></td></tr></table></figure><h1 id="내장함수"><a href="#내장함수" class="headerlink" title="내장함수"></a>내장함수</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">minvalue = <span class="built_in">min</span>(<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(minvalue)</span><br><span class="line"></span><br><span class="line">evalvalue = <span class="built_in">eval</span>(<span class="string">&#x27;3\*5-2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(evalvalue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations_with_replacement</span><br><span class="line"></span><br><span class="line">dataaa = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(permutations(dataaa,<span class="number">3</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combinations(dataaa,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2개를 뽑는 모든 순열 (중복포함)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(product(dataaa,repeat=<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2개를 뽑는 모든 조합 (중복포함)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combinations_with_replacement(dataaa,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 객체의 갯수 구하기</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">counter = Counter([<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter[<span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(counter[<span class="string">&#x27;green&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(counter))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 최대 공약수, 최소 공배수</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="keyword">return</span> a\*b // math.gcd(a,b);</span><br><span class="line"></span><br><span class="line">v = <span class="number">21</span></span><br><span class="line">j = <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.gcd(v,j))</span><br><span class="line"><span class="built_in">print</span>(lcm(v,j))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;리스트-컴프리핸션&quot;&gt;&lt;a href=&quot;#리스트-컴프리핸션&quot; class=&quot;headerlink&quot; title=&quot;리스트 컴프리핸션&quot;&gt;&lt;/a&gt;리스트 컴프리핸션&lt;/h1&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>React 코드 컨벤션 지키고 사수한테 칭찬받기</title>
    <link href="https://loco9939.github.io/2023/04/20/React/React-%EC%BD%94%EB%93%9C-%EC%BB%A8%EB%B2%A4%EC%85%98-%EC%A7%80%ED%82%A4%EA%B3%A0-%EC%82%AC%EC%88%98%ED%95%9C%ED%85%8C-%EC%B9%AD%EC%B0%AC%EB%B0%9B%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/04/20/React/React-%EC%BD%94%EB%93%9C-%EC%BB%A8%EB%B2%A4%EC%85%98-%EC%A7%80%ED%82%A4%EA%B3%A0-%EC%82%AC%EC%88%98%ED%95%9C%ED%85%8C-%EC%B9%AD%EC%B0%AC%EB%B0%9B%EA%B8%B0/</id>
    <published>2023-04-20T13:52:33.000Z</published>
    <updated>2023-04-25T14:23:06.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ESLint와-Prettier-사용하기"><a href="#1-ESLint와-Prettier-사용하기" class="headerlink" title="1. ESLint와 Prettier 사용하기"></a>1. ESLint와 Prettier 사용하기</h1><ul><li><a href="https://eslint.org/">ESLint</a></li><li><a href="https://prettier.io/docs/en/install.html">Prettier</a></li></ul><p>import&#x2F;order 까지 설정해두면 복잡한 import 구문의 가독성을 조금이나마 개선할 수 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;import/order&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;newlines-between&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;builtin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;internal&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;parent&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;sibling&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;type&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alphabetize&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;caseInsensitive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pathGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react*&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="string">&quot;before&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-네이밍-컨벤션"><a href="#2-네이밍-컨벤션" class="headerlink" title="2. 네이밍 컨벤션"></a>2. 네이밍 컨벤션</h1><h3 id="컴포넌트-interface-type에는-PascalCase를-써라"><a href="#컴포넌트-interface-type에는-PascalCase를-써라" class="headerlink" title="컴포넌트, interface, type에는 PascalCase를 써라"></a>컴포넌트, interface, type에는 PascalCase를 써라</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BannersEditForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Typescript interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TodoItem</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Typescript type alias</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoList</span> = <span class="title class_">TodoItem</span>[];</span><br></pre></td></tr></table></figure><h3 id="JavaScript-데이터-변수-배열-객체-함수-등-은-camelCase를-써라"><a href="#JavaScript-데이터-변수-배열-객체-함수-등-은-camelCase를-써라" class="headerlink" title="JavaScript 데이터(변수, 배열, 객체, 함수 등)은 camelCase를 써라"></a>JavaScript 데이터(변수, 배열, 객체, 함수 등)은 camelCase를 써라</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getLastDigit</span> = (<span class="params"></span>) =&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userTypes = [ ... ]</span><br></pre></td></tr></table></figure><p>또한, 폴더와 컴포넌트가 아닌 파일 이름은 <code>camelCase</code>를 사용하고 컴포넌트 파일에는 <code>PascalCase</code>를 써라</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/utils/form.ts</span><br><span class="line">src/hooks/useForm.ts</span><br><span class="line">src/components/banners/edit/Form.tsx</span><br></pre></td></tr></table></figure><h1 id="3-TypeScript-통-barrels-을-사용해라"><a href="#3-TypeScript-통-barrels-을-사용해라" class="headerlink" title="3. TypeScript 통(barrels)을 사용해라"></a>3. TypeScript 통(barrels)을 사용해라</h1><p>barrels는 여러 export를 하나의 파일에서 다루는 방법이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// barrel file example</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./DropDown&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./TextBox&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./CheckBox&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./DateTimePicker&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./Slider&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">DropDown</span>,</span><br><span class="line">  <span class="title class_">TextBox</span>,</span><br><span class="line">  <span class="title class_">CheckBox</span>,</span><br><span class="line">  <span class="title class_">DateTimePicker</span>,</span><br><span class="line">  <span class="title class_">Slider</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./src/controls&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>이렇게 하면 import를 여러 파일에서 하지 않고 하나의 파일에서 할 수 있어 간편하다.</li><li>이렇듯 타입스크립트도 barrels를 사용하여 관리하면 클린 코드에 좋을 것이다.</li></ul><h1 id="4-기본-내보내기-default-export-를-피하라"><a href="#4-기본-내보내기-default-export-를-피하라" class="headerlink" title="4. 기본 내보내기 (default export)를 피하라"></a>4. 기본 내보내기 (default export)를 피하라</h1><p>기본 내보내기는 내보낼 항목과 어떤 이름도 연결하지 않는다.</p><p>즉, 개발자가 내보내려는 이름대로 가져오는 것이 클린 코드에 보다 적합하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MyComponent</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MyComponent</span> = ...;</span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">MyComponentType</span> = ...;</span><br></pre></td></tr></table></figure><h1 id="5-컴포넌트-구조-통일하기"><a href="#5-컴포넌트-구조-통일하기" class="headerlink" title="5. 컴포넌트 구조 통일하기"></a>5. 컴포넌트 구조 통일하기</h1><p>모든 컴포넌트의 구조를 다음과 같이 통일해라</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Imports - Prefer destructuring imports to minimize writen code</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PropsWithChildren</span>, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ComponentProps</span> = &#123;</span><br><span class="line">  <span class="attr">someProperty</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Styles - with @mui use styled API or sx prop of the component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Wrapper</span> = <span class="title function_">styled</span>(<span class="string">&quot;div&quot;</span>)(<span class="function">(<span class="params">&#123; theme &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">color</span>: theme.<span class="property">palette</span>.<span class="property">white</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Additional variables</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SOME_CONSTANT</span> = <span class="string">&quot;something&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Component</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">&#123; someProperty &#125;: PropsWithChildren&lt;ComponentProps&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// 5.1 Definitions</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; something &#125; = <span class="title function_">useSomething</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.2 Functions</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleToggleState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setState</span>(!state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.3 Effects</span></span><br><span class="line">  <span class="comment">// ❌</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ✅</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.5 Additional destructures</span></span><br><span class="line">  <span class="keyword">const</span> &#123; property &#125; = something;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Separate elements if not closed on the same line to make the code clearer */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* ❌ */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque</span></span><br><span class="line"><span class="language-xml">          arcu. Et harum quidem rerum facilis est et expedita distinctio.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque</span></span><br><span class="line"><span class="language-xml">          arcu. Et harum quidem rerum facilis est et expedita distinctio.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* ✅ */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span></span><br><span class="line"><span class="language-xml">            Pellentesque arcu. Et harum quidem rerum facilis est et expedita</span></span><br><span class="line"><span class="language-xml">            distinctio.</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span></span><br><span class="line"><span class="language-xml">            Pellentesque arcu. Et harum quidem rerum facilis est et expedita</span></span><br><span class="line"><span class="language-xml">            distinctio.</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Exports</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Component</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> &#123; <span class="title class_">ComponentProps</span> &#125;;</span><br></pre></td></tr></table></figure><h1 id="6-PropsWithChildren-을-사용해라"><a href="#6-PropsWithChildren-을-사용해라" class="headerlink" title="6. PropsWithChildren 을 사용해라"></a>6. <code>PropsWithChildren</code> 을 사용해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PropsWithChildren</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">ComponentProps</span> = &#123;</span><br><span class="line">  <span class="attr">someProperty</span>: string,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  someProperty,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">&#125;: PropsWithChildren&lt;ComponentProps&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>props로 children을 내려주고 children 타입을 설정해주는 작업이 반복적으로 발생할 때 번거로움을 해소하고자 <code>PropsWithChildren</code>을 사용할 수 있다.</li></ul><blockquote><p>PropsWithChildren의 children 타입은 optional 하다. 그러므로 꼭 children이 들어가야하는 컴포넌트에서 보다 엄격하게 타입을 지정해주기 위해서는 <code>children:ReactNode</code>로 타입을 지정해주는 방법이 있다.</p></blockquote><h1 id="7-JSX에서-함수가-한줄-이상이라면-분리하라"><a href="#7-JSX에서-함수가-한줄-이상이라면-분리하라" class="headerlink" title="7. JSX에서 함수가 한줄 이상이라면 분리하라"></a>7. JSX에서 함수가 한줄 이상이라면 분리하라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line">&lt;button</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setState</span>(!state);</span><br><span class="line">    <span class="title function_">resetForm</span>();</span><br><span class="line">    <span class="title function_">reloadData</span>();</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setState(!state)&#125; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setState</span>(!state);</span><br><span class="line">  <span class="title function_">resetForm</span>();</span><br><span class="line">  <span class="title function_">reloadData</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;handleButtonClick&#125; /&gt;</span><br></pre></td></tr></table></figure><h1 id="8-Key-props로-index를-사용을-피해라"><a href="#8-Key-props로-index를-사용을-피해라" class="headerlink" title="8. Key props로 index를 사용을 피해라"></a>8. Key props로 index를 사용을 피해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = [<span class="string">&quot;item1&quot;</span>, <span class="string">&quot;item2&quot;</span>, <span class="string">&quot;item3&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((value, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;111&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;item1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;222&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;item2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;333&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;item3&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>공시군서에 따르면 배열 내에서만 고유한 값을 전달해주면 된다고 나와있으니 map 고차함수를 사용하여 index를 key prop로 전달해도 될 것 같다.</p><p>하지만 이렇게 할 경우, React에서는 props가 변경되면 컴포넌트를 재렌더링하는데, 배열에서 리스트를 추가, 삭제하면 index가 변경되므로 변경되지 않은 다른 리스트들도 불필요한 재렌더링이 발생하게 된다.</p><p>그러므로 <strong>key prop에는 item의 id, react uid 라이브러리로 고유한 key를 지정해줘야한다.</strong></p><h1 id="9-fragments를-써라"><a href="#9-fragments를-써라" class="headerlink" title="9. fragments를 써라"></a>9. fragments를 써라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ActionButtons</span> = (<span class="params">&#123; text1, text2 &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text1&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text2&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; text1, text2 &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text1&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text2&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>불필요한 div 태그 대신 Fragment를 사용하자</p><h1 id="10-구조분해할당-사용하라"><a href="#10-구조분해할당-사용하라" class="headerlink" title="10. 구조분해할당 사용하라"></a>10. 구조분해할당 사용하라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; text &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; text &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="11-관심사를-분리해라"><a href="#11-관심사를-분리해라" class="headerlink" title="11. 관심사를 분리해라"></a>11. 관심사를 분리해라</h1><p>presentation 컴포넌트에서 business 로직을 분리하는 것은 컴포넌트 코드의 가독성을 높힐 수 있다.</p><p>대부분의 page, screen, container 컴포넌트에 다수의 hook과 useEffect를 사용하려고 할 때 business 로직을 분리하는 것을 시도할 수 있다.</p><h3 id="custom-hook"><a href="#custom-hook" class="headerlink" title="custom hook"></a>custom hook</h3><p>관심사(책임)을 분리하기 위해서 useEffect나 다수의 useState를 컴포넌트에 직접 넣는 대신 Custom hook을 사용해라</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ScreenDimensions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setWindowSize</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">    <span class="title function_">handleResize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen width: &#123;windowSize.width&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen height: &#123;windowSize.height&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useWindowSize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setWindowSize</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">    <span class="title function_">handleResize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> windowSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ScreenDimensions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> windowSize = <span class="title function_">useWindowSize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen width: &#123;windowSize.width&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen height: &#123;windowSize.height&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="12-거대-컴포넌트를-피해라"><a href="#12-거대-컴포넌트를-피해라" class="headerlink" title="12. 거대 컴포넌트를 피해라"></a>12. 거대 컴포넌트를 피해라</h1><p>거대 컴포넌트가 가능하더라도, 컴포넌트를 작은 단위로 분리해라.</p><p>주로 조건부 렌더링을 할 때 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeSection</span> = (<span class="params">&#123; isEditable, value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isEditable) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Edit this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Clear content<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Read this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">EditableSection</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Edit this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Clear content<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DetailSection</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Read this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeSection</span> = (<span class="params">&#123; isEditable, value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> isEditable ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">EditableSection</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">DetailSection</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="13-가능하다면-state를-그룹화해라"><a href="#13-가능하다면-state를-그룹화해라" class="headerlink" title="13. 가능하다면 state를 그룹화해라"></a>13. 가능하다면 state를 그룹화해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> [username, setUsername] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [password, setPassword] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure><h1 id="14-boolean-shorthand를-사용해라"><a href="#14-boolean-shorthand를-사용해라" class="headerlink" title="14. boolean shorthand를 사용해라"></a>14. boolean shorthand를 사용해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line">&lt;<span class="title class_">Form</span> hasPadding=&#123;<span class="literal">true</span>&#125; withError=&#123;<span class="literal">true</span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">hasPadding</span> <span class="attr">withError</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="15-curly-braces를-피해라"><a href="#15-curly-braces를-피해라" class="headerlink" title="15. curly braces를 피해라"></a>15. curly braces를 피해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line">&lt;<span class="title class_">Title</span> variant=&#123;<span class="string">&quot;h1&quot;</span>&#125; value=&#123;<span class="string">&quot;Home page&quot;</span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Title</span> <span class="attr">variant</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Home page&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="16-inline-스타일을-피해라"><a href="#16-inline-스타일을-피해라" class="headerlink" title="16. inline 스타일을 피해라"></a>16. inline 스타일을 피해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Title</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontWeight:</span> <span class="attr">600</span>, <span class="attr">fontSize:</span> &quot;<span class="attr">24px</span>&quot; &#125;&#125; &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useStyles</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">header</span>: &#123; <span class="attr">fontWeight</span>: props.<span class="property">isBold</span> ? <span class="number">700</span> : <span class="number">400</span>, <span class="attr">fontSize</span>: <span class="string">&quot;24px&quot;</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    [props]</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Title</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> styles = <span class="title function_">useStyles</span>(props);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;styles.header&#125;</span> &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="17-조건부-렌더링은-삼항-연산자-사용해라"><a href="#17-조건부-렌더링은-삼항-연산자-사용해라" class="headerlink" title="17. 조건부 렌더링은 삼항 연산자 사용해라"></a>17. 조건부 렌더링은 삼항 연산자 사용해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; role &#125; = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">if</span> (role === <span class="variable constant_">ADMIN</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">return</span> role === <span class="variable constant_">ADMIN</span> ? <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h1 id="18-타입-별칭을-사용해라"><a href="#18-타입-별칭을-사용해라" class="headerlink" title="18. 타입 별칭을 사용해라"></a>18. 타입 별칭을 사용해라</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TodoId</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">UserId</span> = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">TodoId</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">userId</span>: <span class="title class_">UserId</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TodoList</span> = <span class="title class_">Todo</span>[];</span><br></pre></td></tr></table></figure><h1 id="19-써드-파티-라이브러리를-직접-사용하는-것을-피해라"><a href="#19-써드-파티-라이브러리를-직접-사용하는-것을-피해라" class="headerlink" title="19. 써드 파티 라이브러리를 직접 사용하는 것을 피해라"></a>19. 써드 파티 라이브러리를 직접 사용하는 것을 피해라</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/lib/store.ts</span></span><br><span class="line"><span class="keyword">export</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/lib/query.ts</span></span><br><span class="line"><span class="keyword">export</span> &#123; useQuery, useMutation, useQueryClient &#125; <span class="keyword">from</span> <span class="string">&quot;react-query&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="20-직접-구현-대신-추상화에-의존해라"><a href="#20-직접-구현-대신-추상화에-의존해라" class="headerlink" title="20. 직접 구현 대신 추상화에 의존해라"></a>20. 직접 구현 대신 추상화에 의존해라</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ directly using momemt</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateProduct</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> payload = &#123;</span><br><span class="line">    ...product,</span><br><span class="line">    <span class="comment">// ❌ we are bound to the moment interface implementation</span></span><br><span class="line">    <span class="attr">updatedAt</span>: <span class="title function_">moment</span>().<span class="title function_">toDate</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/product/<span class="subst">$&#123;product.id&#125;</span>`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ creating the abstraction, a.k.a. helper function which wraps the functionality</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// utils/createDate.ts</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDate = (): <span class="function"><span class="params">Date</span> =&gt;</span> <span class="title function_">moment</span>().<span class="title function_">toDate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// updateProduct.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createDate &#125; <span class="keyword">from</span> <span class="string">&quot;./utils/createDate&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateProduct</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> payload = &#123;</span><br><span class="line">    ...product,</span><br><span class="line">    <span class="comment">// ✅ using the abstracted helper function</span></span><br><span class="line">    <span class="attr">updatedAt</span>: <span class="title function_">createDate</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/product/<span class="subst">$&#123;product.id&#125;</span>`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>moment를 사용하여 직접 구현하기 보다 createDate 함수사용하여 추상화하면 간결하다.</li></ul><h1 id="21-선언적-프로그래밍을-해라"><a href="#21-선언적-프로그래밍을-해라" class="headerlink" title="21. 선언적 프로그래밍을 해라"></a>21. 선언적 프로그래밍을 해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ imperative: dealing with internals of array iteration</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ declarative: we don&#x27;t deal with internals of iteration</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, v</span>) =&gt;</span> acc + v, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="22-변수-이름을-이쁘게-지어라"><a href="#22-변수-이름을-이쁘게-지어라" class="headerlink" title="22. 변수 이름을 이쁘게 지어라"></a>22. 변수 이름을 이쁘게 지어라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Avoid single letter names</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="string">&quot;Max&quot;</span>;</span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Max&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ Avoid abbreviations</span></span><br><span class="line"><span class="keyword">const</span> sof = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> startOfWeek = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ Avoid meaningless names</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> appInit = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h1 id="23-함수-인자를-3개-이상-넘기지-말아라"><a href="#23-함수-인자를-3개-이상-넘기지-말아라" class="headerlink" title="23. 함수 인자를 3개 이상 넘기지 말아라"></a>23. 함수 인자를 3개 이상 넘기지 말아라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">firstName, lastName, height, weight, gender</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">&#123; firstName, lastName, height, weight, gender &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName, height, weight, gender &#125; = person;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="24-template-literal-사용해라"><a href="#24-template-literal-사용해라" class="headerlink" title="24. template literal 사용해라"></a>24. template literal 사용해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> userName = user.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + user.<span class="property">lastName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> userDetails = <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h1 id="25-간단한-함수에서-암묵적-return-사용해라"><a href="#25-간단한-함수에서-암묵적-return-사용해라" class="headerlink" title="25. 간단한 함수에서 암묵적 return 사용해라"></a>25. 간단한 함수에서 암묵적 return 사용해라</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p><a href="https://levelup.gitconnected.com/react-code-conventions-and-best-practices-433e23ed69aa">React Code Conventions and best practices - Medium</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ESLint와-Prettier-사용하기&quot;&gt;&lt;a href=&quot;#1-ESLint와-Prettier-사용하기&quot; class=&quot;headerlink&quot; title=&quot;1. ESLint와 Prettier 사용하기&quot;&gt;&lt;/a&gt;1. ESLint와 Prett</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;오늘부터 CSS 마스터 20일차&gt; :not</title>
    <link href="https://loco9939.github.io/2023/04/18/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-20%EC%9D%BC%EC%B0%A8-:not/"/>
    <id>https://loco9939.github.io/2023/04/18/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-20%EC%9D%BC%EC%B0%A8-:not/</id>
    <published>2023-04-18T14:09:33.000Z</published>
    <updated>2023-04-18T14:30:51.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="not-셀렉터"><a href="#not-셀렉터" class="headerlink" title=":not 셀렉터"></a>:not 셀렉터</h1><p><img src="/../../images/CSS/not/not.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">15rem</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid__child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이렇게 생긴 그리드 아이템에 마우스 올린 요소만 hover 효과를 주고 나머지 요소는 공통적으로 다른 효과를 주고 싶을 때, :not, :hover 셀렉터가 유용하다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid__child</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/CSS/not/not1.png"></p><ul><li>이렇게 마우스가 올라간 요소만 제외하고 opacity가 변경되는 것을 볼 수 있다.</li></ul><p>하지만 한가지 문제점은 grid의 gap이 있을 경우 item에 마우스가 올라갔을 때 뿐만 아니라 <strong>gap에 마우스가 올라갔을 때에도 해당 css가 적용된다.</strong></p><p>이를 해결하기 위해서 부모 요소에는 <code>pointer-events: none</code>을 주고 자식 요소에는 <code>pointer-events: auto</code>를 줘서 해결할 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">15rem</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid__child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span>/<span class="number">0.5</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid__child</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h2><p><code>pointer-events: none</code> 속성은 hover이벤트 뿐만 아니라 다른 모든 이벤트도 무시한다. 그래서 scroll이 되어야하는 경우에 스크롤이 되지 않는 문제가 발생할 수 있다.</p><p>이를 해결하기 위해서는 해당 부모요소를 감싸는 container 박스를 생성하는 것이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">15rem</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid__child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span>/<span class="number">0.5</span>; // 가로 세로 비율</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid__child</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>grid 요소를 감싸는 container 요소에 scroll을 가능하게 <code>overflow:auto</code> 속성을 주면 스크롤도 작동하고 gap 부분에서 hover 이벤트도 방지할 수 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;not-셀렉터&quot;&gt;&lt;a href=&quot;#not-셀렉터&quot; class=&quot;headerlink&quot; title=&quot;:not 셀렉터&quot;&gt;&lt;/a&gt;:not 셀렉터&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../images/CSS/not/not.png&quot;&gt;&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    <category term="CSS" scheme="https://loco9939.github.io/categories/CSS/"/>
    
    
    <category term="not셀렉터" scheme="https://loco9939.github.io/tags/not%EC%85%80%EB%A0%89%ED%84%B0/"/>
    
  </entry>
  
</feed>
