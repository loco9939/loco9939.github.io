<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loco&#39;s Dev Blog</title>
  
  <subtitle>Frontend Developer</subtitle>
  <link href="https://loco9939.github.io/atom.xml" rel="self"/>
  
  <link href="https://loco9939.github.io/"/>
  <updated>2023-08-28T13:18:58.053Z</updated>
  <id>https://loco9939.github.io/</id>
  
  <author>
    <name>loco9939</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>커스텀 훅 사용 예시</title>
    <link href="https://loco9939.github.io/2023/08/28/Daily/%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C/"/>
    <id>https://loco9939.github.io/2023/08/28/Daily/%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C/</id>
    <published>2023-08-28T13:04:50.000Z</published>
    <updated>2023-08-28T13:18:58.053Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 회사에서 실전투자 API 개편사항을 반영하기 위해 기존 API를 수정하는 작업을 하였다.</p><p>그러던 중, 각 컴포넌트에서 동일한 백엔드 API 로직을 발견하고 이를 커스텀 훅으로 빼내어 관리하면 유지보수성 측면과 가독성 측면에서 개선될 것이라고 판단하여 적용해보았다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 코드</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkUserStatus</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> tradeInstanceAPIWithToken.<span class="title function_">post</span>(<span class="string">&quot;/url&quot;</span>, &#123;</span><br><span class="line">    requestBody</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    ... <span class="comment">// 응답 성공시 코드</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">403</span>) &#123;</span><br><span class="line">    ... <span class="comment">// 403일 때, 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [accountLoading, setAccountLoading] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserAccount</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setAccountLoading</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">await</span> tradeInstanceAPI.<span class="title function_">post</span>(<span class="string">&quot;/url2&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        ... <span class="comment">// 응답 성공 시 코드</span></span><br><span class="line">        <span class="title function_">setAccountLoading</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (subMenu === <span class="string">&quot;accounts&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// subMenu가 accounts 일 때,</span></span><br><span class="line">      <span class="title function_">getUserAccount</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// subMenu가 myport, trading일 때</span></span><br><span class="line">      <span class="title function_">checkUserStatus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [subMenu]);</span><br></pre></td></tr></table></figure><ul><li>checkUserStatus, getUserAccount 함수를 useLayoutEffect 훅에서 호출한다.</li><li>해당 백엔드 요청 API 코드는 다룬 곳에서도 쓰이기에 함수로 빼내면 유지보수성을 높일 수 있다.</li><li>가독성 측면에서도 굳이 요청 로직을 다 볼 필요가 없다.</li></ul><h3 id="개선된-코드"><a href="#개선된-코드" class="headerlink" title="개선된 코드"></a>개선된 코드</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useCheckUserStatus.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tradeInstanceAPIWithToken &#125; <span class="keyword">from</span> <span class="string">&quot;your-api-instance&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCheckUserStatus</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 백엔드 API 응답과 관련된 state들</span></span><br><span class="line">  <span class="keyword">const</span> [errorType, setErrorType] = useState&lt;<span class="built_in">number</span> | <span class="built_in">string</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">checkUserStatus</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> tradeInstanceAPIWithToken.<span class="title function_">post</span>(<span class="string">&quot;/url&quot;</span>, &#123;</span><br><span class="line">    requestBody</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    ... <span class="comment">// 응답 성공시 코드</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">403</span>) &#123;</span><br><span class="line">    ... <span class="comment">// 403일 때, 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    errorType,</span><br><span class="line">    ...,</span><br><span class="line">    checkUserStatus,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCheckUserStatus;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useGetUserAccount.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tradeInstanceAPI &#125; <span class="keyword">from</span> <span class="string">&quot;your-api-instance&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useGetUserAccount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [userAccounts, setUserAccounts] = useState&lt;<span class="built_in">any</span>[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [accountLoading, setAccountLoading] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getUserAccount</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setAccountLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">await</span> tradeInstanceAPI.<span class="title function_">post</span>(<span class="string">&quot;/trade/get_accounts&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; accounts &#125; = res.<span class="property">data</span>;</span><br><span class="line">        <span class="title function_">setUserAccounts</span>(accounts);</span><br><span class="line">        <span class="title function_">setAccountLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    userAccounts,</span><br><span class="line">    accountLoading,</span><br><span class="line">    getUserAccount,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useGetUserAccount;</span><br></pre></td></tr></table></figure><ul><li>백엔드 로직의 로딩 상태까지 캡슐화 할 수 있다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useCheckUserStatus <span class="keyword">from</span> <span class="string">&#x27;./useCheckUserStatus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useGetUserAccount <span class="keyword">from</span> <span class="string">&#x27;./useGetUserAccount&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Main</span> = (<span class="params">&#123; user, license, isExpiredUser, subMenu &#125;: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; errorType, ..., checkUserStatus &#125; = <span class="title function_">useCheckUserStat</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; userAccounts, accountLoading, getUserAccount &#125; = <span class="title function_">useGetUserAccount</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subMenu === <span class="string">&quot;accounts&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">getUserAccount</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">checkUserStatus</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [subMenu]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 여기에 컴포넌트의 JSX를 반환</span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Main</span>;</span><br></pre></td></tr></table></figure><ul><li>훨씬 코드가 간결해지고 가독성도 높아져서 추후에 유지보수할 때 시간을 많이 절약할 수 있을 것 같다.</li><li>앞으로 서비스의 코드를 이런식으로 분리해보는 연습을 해봐야겠다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오늘은 회사에서 실전투자 API 개편사항을 반영하기 위해 기존 API를 수정하는 작업을 하였다.&lt;/p&gt;
&lt;p&gt;그러던 중, 각 컴포넌트에서 동일한 백엔드 API 로직을 발견하고 이를 커스텀 훅으로 빼내어 관리하면 유지보수성 측면과 가독성 측면에서 </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="커스텀 훅" scheme="https://loco9939.github.io/tags/%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85/"/>
    
  </entry>
  
  <entry>
    <title>Queue-숫자의 표현 문제</title>
    <link href="https://loco9939.github.io/2023/08/27/Python/DataStructure/Queue/Queue-%EC%88%AB%EC%9E%90%EC%9D%98-%ED%91%9C%ED%98%84-%EB%AC%B8%EC%A0%9C/"/>
    <id>https://loco9939.github.io/2023/08/27/Python/DataStructure/Queue/Queue-%EC%88%AB%EC%9E%90%EC%9D%98-%ED%91%9C%ED%98%84-%EB%AC%B8%EC%A0%9C/</id>
    <published>2023-08-27T12:57:29.000Z</published>
    <updated>2023-08-27T13:22:13.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 <code>n</code>을 <strong>연속한 자연수</strong>들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다. 예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 + 2 + 3 + 4 + 5 = 15</span><br><span class="line">4 + 5 + 6 = 15</span><br><span class="line">7 + 8 = 15</span><br><span class="line">15 = 15</span><br></pre></td></tr></table></figure><p>자연수 <code>n</code>이 매개변수로 주어질 때, <strong>연속된 자연수</strong>들로 <code>n</code>을 표현하는 방법의 수를 return하는 solution를 완성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>n은 10,000 이하의 자연수 입니다.</li></ul><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">n</span>):</span><br><span class="line">    q = [<span class="number">1</span>]</span><br><span class="line">    answer, i, total = <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    mid = <span class="built_in">int</span>((n+<span class="number">1</span>) / <span class="number">2</span>) <span class="comment"># 절반보다 큰 값부터는 값이 없으니 절반까지 반복문 실행</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; mid:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        total += i</span><br><span class="line">        q.append(i)</span><br><span class="line">        <span class="keyword">while</span> total &gt; n:</span><br><span class="line">            total -= q.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> total == n:</span><br><span class="line">            answer += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><ul><li>원소가 1만 있는 큐(리스트)를 만든다.</li><li>주어진 수의 절반까지 반복한다.</li><li>차례로 수를 더할 때마다 queue에 수를 추가한다.<ul><li>더한 값이 원하는 수보다 큰 동안, 큐에서 수를 하나씩 꺼내어 합에서 뺸다.</li><li>더한 값이 원하는 수이면 정답 개수를 하나 늘린다.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h1&gt;&lt;p&gt;Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 &lt;code&gt;n&lt;/code&gt;을 &lt;strong&gt;연속</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>Queue로 이진수 만들기</title>
    <link href="https://loco9939.github.io/2023/08/26/Python/DataStructure/Queue/Queue%EB%A1%9C-%EC%9D%B4%EC%A7%84%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/26/Python/DataStructure/Queue/Queue%EB%A1%9C-%EC%9D%B4%EC%A7%84%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0/</id>
    <published>2023-08-25T21:56:07.000Z</published>
    <updated>2023-08-25T22:09:11.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>양의 정수 n이 주어질 때 1부터 n까지의 십진수를 이진수로 출력하라.</p><p><a href="https://www.geeksforgeeks.org/interesting-method-generate-binary-numbers-1-n/">Generatre Binary Numbers</a></p><h2 id="1-내장함수-풀기"><a href="#1-내장함수-풀기" class="headerlink" title="1. 내장함수 풀기"></a>1. 내장함수 풀기</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_binary</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bin</span>(i)[<span class="number">2</span>:]) <span class="comment"># 이진수는 0b가 붙으므로 슬라이싱으로 제거한다.</span></span><br></pre></td></tr></table></figure><h2 id="2-큐를-사용하여-풀기"><a href="#2-큐를-사용하여-풀기" class="headerlink" title="2. 큐를 사용하여 풀기"></a>2. 큐를 사용하여 풀기</h2><p>문제를 분석해보면, 2의 이진수는 <code>10</code>이고 3의 이진수는 <code>11</code>이다.</p><p>이는 1에다가 <code>0</code>과 <code>1</code>을 붙인 것이다.</p><p>4의 이진수는 <code>100</code>이고 5의 이진수는 <code>101</code>이다. 이는 2의 이진수 <code>10</code>에다가 <code>0</code>과 <code>1</code>을 추가한 것이다.</p><p>앞서 사용한 숫자에 <code>0</code>과 <code>1</code>을 붙인 이진수가 나중에 사용된다.</p><ol><li><p>큐를 하나 생성하고 <code>1</code>을 삽입한다.</p></li><li><p>n만큼 반복한다.</p><ol><li>큐에서 꺼낸 값을 i에 저장</li><li>i에 <code>0</code>과 <code>1</code>을 붙인 이진수를 큐에 삽입</li><li>i를 출력</li></ol></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_binary_queue</span>(<span class="params">n</span>):</span><br><span class="line">    q = Queue() <span class="comment"># 직접 구현한 Queue 클래스</span></span><br><span class="line">    q.enqueue(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        i = q.dequeue()</span><br><span class="line">        q.enqueue(i+<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        q.enqueue(i+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h1&gt;&lt;p&gt;양의 정수 n이 주어질 때 1부터 n까지의 십진수를 이진수로 출력하라.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ge</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>요세푸스 문제</title>
    <link href="https://loco9939.github.io/2023/08/25/Python/DataStructure/Queue/%EC%9A%94%EC%84%B8%ED%91%B8%EC%8A%A4-%EB%AC%B8%EC%A0%9C-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%92%80%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/25/Python/DataStructure/Queue/%EC%9A%94%EC%84%B8%ED%91%B8%EC%8A%A4-%EB%AC%B8%EC%A0%9C-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%92%80%EA%B8%B0/</id>
    <published>2023-08-24T15:01:21.000Z</published>
    <updated>2023-08-24T14:07:28.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-queue로-풀기"><a href="#2-queue로-풀기" class="headerlink" title="2. queue로 풀기"></a>2. queue로 풀기</h2><p><img src="/../../../../images/josephus.png" alt="josephus"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">josephus</span>(<span class="params">n,k</span>):</span><br><span class="line">    res = []</span><br><span class="line">    q = Queue() <span class="comment"># 직접 구현한 Queue 클래스</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        q.enqueue(i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> q.front.<span class="built_in">next</span>: <span class="comment"># 끝에서 2번째 원소까지 반복</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>):</span><br><span class="line">            q.enqueue(q.dequeue())</span><br><span class="line">        res.append(q.dequeue())</span><br><span class="line">    res.append(q.dequeue()) <span class="comment"># 마지막 원소 출력</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-queue로-풀기&quot;&gt;&lt;a href=&quot;#2-queue로-풀기&quot; class=&quot;headerlink&quot; title=&quot;2. queue로 풀기&quot;&gt;&lt;/a&gt;2. queue로 풀기&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../../../../images/jo</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>요세푸스 문제</title>
    <link href="https://loco9939.github.io/2023/08/24/Python/DataStructure/Queue/%EC%9A%94%EC%84%B8%ED%91%B8%EC%8A%A4-%EB%AC%B8%EC%A0%9C/"/>
    <id>https://loco9939.github.io/2023/08/24/Python/DataStructure/Queue/%EC%9A%94%EC%84%B8%ED%91%B8%EC%8A%A4-%EB%AC%B8%EC%A0%9C/</id>
    <published>2023-08-24T13:17:21.000Z</published>
    <updated>2023-08-24T13:46:38.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>1번부터 N 번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K 번째 사람을 제거한다. 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 &lt;3, 6, 2, 7, 5, 1, 4&gt;이다.</p><p>N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.</p><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><ul><li>입력: 7, 3</li><li>출력: [3, 6, 2, 7, 5, 1, 4]</li></ul><h2 id="1-list로-풀기"><a href="#1-list로-풀기" class="headerlink" title="1. list로 풀기"></a>1. list로 풀기</h2><p>예시대로 3번째 마다 사람을 제거하려면, 처음에는 시작점이니 2번만 인덱스를 이동하고 제거한 후 이 후에는 3번 인덱스를 이동해서 제거한다.</p><p><strong>첫 시작을 0이 아닌 -1로 시작하는 점에 유의하자.</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">josephus</span>(<span class="params">n,k</span>):</span><br><span class="line">    res = []</span><br><span class="line">    line = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment"># 값이 1이면 제거 대상, 0이면 제거 완료</span></span><br><span class="line">    i = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; k:</span><br><span class="line">            i = (i + <span class="number">1</span>) % n <span class="comment"># i는 0~6까지 순회해야하므로 나머지로 계산한다.</span></span><br><span class="line">            <span class="keyword">if</span> line[i]: <span class="comment"># line의 원소가 0이 아니면...</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        line[i] = <span class="number">0</span></span><br><span class="line">        res.append(i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    res.append(line.index(<span class="number">1</span>)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><ol><li>line 배열을 1로 초기화 해준다. 1은 아직 제거안된 요소이고 0은 제거된 요소로 처리</li><li>마지막 1개가 남을 때 까지 반복하므로 n-1회 반복한다.</li><li>count 변수는 제거되지 않은 원소를 지나온 순서를 카운팅하기 위해 사용한다.</li><li>0 ~ 6까지 index가 순회해야하므로, n으로 나눈 나머지 값을 이용한다.</li><li>i를 순회하면서 line의 요소가 0이 아니면, 즉 아직 제거되지 않았으면 순서를 카운팅 해준다.</li><li>순서를 카운팅 해서 k번째 순서에 도달하면, 반복을 멈추고 해당 index 요소를 0으로 바꾼다. (요소 제거)</li><li>해당 index는 0부터 시작했으므로, 결과 배열에 넣어줄 땐 +1을 해준다. 왜냐하면 문제에선 1부터 시작한다 했으니 때문이다.</li><li>이렇게 n-1번 반복하게되면 line의 요소는 1개 남는다. 이 때는 index 메서드를 사용하여 1인 요소의 index를 구한 뒤 결과배열에 추가한다. 이 때도 + 1 을 해줘야한다.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h1&gt;&lt;p&gt;1번부터 N 번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K 번째 사람을 </summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript D-Day 함수 만들기</title>
    <link href="https://loco9939.github.io/2023/08/23/Daily/JavaScript-D-Day-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/23/Daily/JavaScript-D-Day-%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0/</id>
    <published>2023-08-23T12:46:42.000Z</published>
    <updated>2023-08-23T13:15:17.749Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateDDay</span>(<span class="params">targetDateStr</span>) &#123;</span><br><span class="line">  <span class="comment">// 현재 날짜와 시간을 가져옵니다.</span></span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="comment">// 현재 날짜에 시간을 00:00:00으로 설정하여 날짜만 비교하게 합니다.</span></span><br><span class="line">  now.<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 목표 날짜를 Date 객체로 변환합니다.</span></span><br><span class="line">  <span class="keyword">const</span> targetDate = <span class="keyword">new</span> <span class="title class_">Date</span>(targetDateStr);</span><br><span class="line">  targetDate.<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 두 날짜의 차이를 밀리초 단위로 계산한 후 일(day) 단위로 변환합니다.</span></span><br><span class="line">  <span class="keyword">const</span> diffMilliseconds = targetDate.<span class="title function_">getTime</span>() - now.<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">const</span> diffDays = diffMilliseconds / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(diffDays); <span class="comment">// 올림처리하여 D-Day를 계산합니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번에 사용권 만료 기간을 D-Day로 표시하기 위해 JavaScript로 D-Day를 계산해주는 함수를 구현해보았다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode ssh public key denied 오류 해결</title>
    <link href="https://loco9939.github.io/2023/08/22/Daily/vscode-ssh-public-key-denied-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/"/>
    <id>https://loco9939.github.io/2023/08/22/Daily/vscode-ssh-public-key-denied-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/</id>
    <published>2023-08-22T03:46:02.000Z</published>
    <updated>2023-08-22T03:51:21.916Z</updated>
    
    <content type="html"><![CDATA[<p>vscode ssh 익스텐션을 사용하다가 오래간만에 사용해서 방법을 까먹어서 기록한다.</p><ol><li>터미널을 켜고 루트 경로에 가면 <code>.ssh</code>폴더에 붙여넣는다.</li><li>vscode를 켜고 ssh remote extension을 설치하고 config 파일에 다음과 같이 명시한다.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// config</span><br><span class="line">Host HostName</span><br><span class="line">    HostName &quot;HostName 경로&quot;</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile /Users/.ssh/myPen.pem</span><br></pre></td></tr></table></figure><ol start="3"><li>pem 키를 처음 등록하면 권한을 줘야하므로, 터미널로 들어가서 <code>.ssh</code> 폴더에서 다음 명령어를 실행한다.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 &lt;your&gt;.pem</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vscode ssh 익스텐션을 사용하다가 오래간만에 사용해서 방법을 까먹어서 기록한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;터미널을 켜고 루트 경로에 가면 &lt;code&gt;.ssh&lt;/code&gt;폴더에 붙여넣는다.&lt;/li&gt;
&lt;li&gt;vscode를 켜고 ssh remot</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="ssh" scheme="https://loco9939.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>ES6 import 클린 코드</title>
    <link href="https://loco9939.github.io/2023/08/21/Daily/ES6-import-%ED%81%B4%EB%A6%B0-%EC%BD%94%EB%93%9C/"/>
    <id>https://loco9939.github.io/2023/08/21/Daily/ES6-import-%ED%81%B4%EB%A6%B0-%EC%BD%94%EB%93%9C/</id>
    <published>2023-08-21T14:27:18.000Z</published>
    <updated>2023-08-21T14:41:11.250Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">&quot;../../../themes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;../../../components/Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyImage</span> <span class="keyword">from</span> <span class="string">&quot;../../../assets/images/my-image.png&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; globalStyles &#125; <span class="keyword">from</span> <span class="string">&quot;../../../styles/globalStyles&quot;</span>;</span><br></pre></td></tr></table></figure><p>위와 같은 import 코드를 깔끔하게 하기 위한 3가지 방법에 대해 알아보자.</p><h1 id="1-Barrel-패턴"><a href="#1-Barrel-패턴" class="headerlink" title="1. Barrel 패턴"></a>1. Barrel 패턴</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// folder structure</span></span><br><span class="line">components;</span><br><span class="line">--<span class="title class_">Accordions</span>.<span class="property">js</span>;</span><br><span class="line">--<span class="title class_">Button</span>.<span class="property">js</span>;</span><br><span class="line">--index.<span class="property">js</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Accordion</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Accordion&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Button&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// imports</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Accordion</span>, <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;components&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>index.js 파일에 담아서 export를 한곳에서 내보낸다.</li></ul><h1 id="2-Aliases-사용"><a href="#2-Aliases-사용" class="headerlink" title="2. Aliases 사용"></a>2. Aliases 사용</h1><ul><li>가독성을 높이는 짧은 경로</li><li>파일을 옮기더라도, import는 바뀌지 않는다.</li><li>snippets을 사용하면 더 쉽다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="string">&quot;module-resolver&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@internals/assets&quot;</span>: <span class="string">&quot;./src/assets&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@internals/components&quot;</span>: <span class="string">&quot;./src/components&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@internals/hooks&quot;</span>: <span class="string">&quot;./src/hooks&quot;</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>babel을 사용할 때는 위와 같이 alias를 지정할 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&quot;node:url&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;./src&quot;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>vite를 사용하면 위와 같이 사용할 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@internals/assets/*&quot;</span>: [<span class="string">&quot;./src/assets/*&quot;</span>],</span><br><span class="line">    <span class="string">&quot;@internals/components&quot;</span>: [<span class="string">&quot;./src/components/index.ts&quot;</span>],</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>typescript를 사용하면 위와 같이 사용할 수 있다.</li></ul><h1 id="3-import-순서-지정"><a href="#3-import-순서-지정" class="headerlink" title="3. import 순서 지정"></a>3. import 순서 지정</h1><h3 id="prettier-plugin-sort-import"><a href="#prettier-plugin-sort-import" class="headerlink" title="prettier-plugin-sort-import"></a><a href="https://github.com/trivago/prettier-plugin-sort-imports">prettier-plugin-sort-import</a></h3><p>prettier는 왠만한 프로젝트에서 자주 사용되기 때문에 자동적으로 지원해주는 라이브러리를 사용하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="es6" scheme="https://loco9939.github.io/tags/es6/"/>
    
    <category term="clean code" scheme="https://loco9939.github.io/tags/clean-code/"/>
    
  </entry>
  
  <entry>
    <title>컨테이너와 도커</title>
    <link href="https://loco9939.github.io/2023/08/20/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%EB%8F%84%EC%BB%A4/"/>
    <id>https://loco9939.github.io/2023/08/20/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%EB%8F%84%EC%BB%A4/</id>
    <published>2023-08-19T15:28:15.000Z</published>
    <updated>2023-08-19T15:29:06.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="컨테이너"><a href="#컨테이너" class="headerlink" title="컨테이너"></a>컨테이너</h1><p>애플리케이션이 한 컴퓨팅 환경에서 다른 컴퓨팅 환경으로 빠르고 안정적으로 실행하기 위해 코드와 모든 종속성을 패키징하는 소프트웨어의 표준 단위</p><h1 id="도커"><a href="#도커" class="headerlink" title="도커"></a>도커</h1><p>컨테이너에 필요한 거의 모든 기능응 제공하는 플랫폼</p><ol><li>도커 파일에 애플리케이션 구동에 필요한 환경설정 절차 작성 후 빌드</li><li>도커 이미지(컨테이너 실행에 필요한 데이터를 포한한 불변한 상태값) 생성되어 실행<ol><li>하나의 이미지로 여러 컨테이너 생성가능</li></ol></li><li>도커 컨테이너 생성되고 도커 컨테이너에 설정된 프로그램, 데이터 등이 컴퓨팅환경과 연결되어 동작</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;컨테이너&quot;&gt;&lt;a href=&quot;#컨테이너&quot; class=&quot;headerlink&quot; title=&quot;컨테이너&quot;&gt;&lt;/a&gt;컨테이너&lt;/h1&gt;&lt;p&gt;애플리케이션이 한 컴퓨팅 환경에서 다른 컴퓨팅 환경으로 빠르고 안정적으로 실행하기 위해 코드와 모든 종속성을 패</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="컨테이너" scheme="https://loco9939.github.io/tags/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88/"/>
    
    <category term="도커" scheme="https://loco9939.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>디바운스와 스로틀 차이</title>
    <link href="https://loco9939.github.io/2023/08/19/Daily/%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A1%9C%ED%8B%80-%EC%B0%A8%EC%9D%B4/"/>
    <id>https://loco9939.github.io/2023/08/19/Daily/%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A1%9C%ED%8B%80-%EC%B0%A8%EC%9D%B4/</id>
    <published>2023-08-18T15:16:09.000Z</published>
    <updated>2023-08-18T15:28:39.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h1><p>이벤트가 연달아 발생할 때, 제일 처음 또는 마지막 이벤트일 때만 함수를 호출하는 방법</p><p>만약 키보드 이벤트가 발생할 때마다 API를 요청한다고 가정해보자.</p><p>“감”이라는 글자를 입력하는데 “ㄱ”, “가”, “감” 3번의 이벤트가 발생하게됩니다. 이러면 불필요한 이벤트까지 API 요청에 포함시키면 낭비이므로 이를 방지하기 위해 디바운스를 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;여기에 ajax 요청&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>주로 키보드 입력 이벤트에 사용</li></ul><h1 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h1><p>마지막 이벤트가 발생한 후 일정 시간이 지나기 전에 다시 호출되지 않도록 막는 방법</p><p>만약 스크롤이벤트가 발생했을 때, 처음에 스크롤 이벤트가 발생할 때, 함수를 호출하고 몇초동안은 이벤트가 발생해도 함수를 호출시키지 않는 방법이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;여기에 ajax 요청&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>주로 스크롤 이벤트에 사용</li></ul><p>위와 같이 직접 구현하는 방법보다는 예외 사항을 처리하지 못할 경우도 있기때문에, <code>_.debounce</code>, <code>_.throttle</code>을 사용한다.</p><p>요즘은 토스에서도 해당 라이브러리를 지원하니 관심이 있으면 사용해보자.</p><p><a href="https://slash.page/ko/libraries/react/react/src/hooks/useDebounce.i18n">토스 디바운스 라이브러리 바로가기</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Debounce&quot;&gt;&lt;a href=&quot;#Debounce&quot; class=&quot;headerlink&quot; title=&quot;Debounce&quot;&gt;&lt;/a&gt;Debounce&lt;/h1&gt;&lt;p&gt;이벤트가 연달아 발생할 때, 제일 처음 또는 마지막 이벤트일 때만 함수를 호출하는 </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="debounce" scheme="https://loco9939.github.io/tags/debounce/"/>
    
    <category term="throttle" scheme="https://loco9939.github.io/tags/throttle/"/>
    
  </entry>
  
  <entry>
    <title>var setTimeout Quiz</title>
    <link href="https://loco9939.github.io/2023/08/18/Daily/var-setTimeout-Quiz/"/>
    <id>https://loco9939.github.io/2023/08/18/Daily/var-setTimeout-Quiz/</id>
    <published>2023-08-18T12:15:13.000Z</published>
    <updated>2023-08-18T12:22:13.083Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 코드의 결과는??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정답</span></span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="이유"><a href="#이유" class="headerlink" title="이유"></a>이유</h2><p>var 키워드로 선언한 변수는 함수 레벨 스코프를 갖는다. for문 코드 블록에서는 전역 변수로 선언되었기 때문에, 변수 i 값이 갱신된다.</p><p>setTimeout 함수는 비동기 처리 방식으로 실행된다.</p><p>setTimeout 함수는 Web API로 이동하여 타이머가 만료되면 Task Queue로 이동한다.</p><p>Task Queue에서 Call Stack이 비워질 때 까지 대기한다.</p><p>대기하는 동안, 다음 for 문이 돌고 있으므로, setTimeout 함수가 Task Queue에서 실행 컨텍스트가 비워질 때 까지 계속 대기한다.</p><p>이러한 이유로 i가 5가 될 때, Call Stack이 비워지므로 그때서야 이벤트 루프에 의해서 console 창에 출력되는 i 값이 5이므로 5가 5번 찍히게 된다.</p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><h3 id="1-블록-레벨-스코프"><a href="#1-블록-레벨-스코프" class="headerlink" title="1. 블록 레벨 스코프"></a>1. 블록 레벨 스코프</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-즉시실행함수"><a href="#2-즉시실행함수" class="headerlink" title="2. 즉시실행함수"></a>2. 즉시실행함수</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(param), <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setTimeout 함수를 즉시실행함수로 감싸서 함수 레벨 스코프를 갖도록 해준 뒤 즉시실행함수의 인수로 i를 전달해주고 즉시실행함수 내부의 함수에 파라미터로 해당 인수를 어디서 참조할지 설정해주면 된다. 위 예제에서는 콘솔 로그의 인수로 파라미터를 전달해줘야 할 것이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>React Query란?</title>
    <link href="https://loco9939.github.io/2023/08/17/React/React-Query%EB%9E%80/"/>
    <id>https://loco9939.github.io/2023/08/17/React/React-Query%EB%9E%80/</id>
    <published>2023-08-17T13:38:57.000Z</published>
    <updated>2023-08-18T12:09:57.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Query란"><a href="#React-Query란" class="headerlink" title="React Query란?"></a>React Query란?</h1><p>client에서 상태관리 라이브러리를 사용하는 것은 클라이언트에서만 유효하다.</p><p>서버의 데이터를 요청하고 클라이언트의 전역 상태로 갱신하는 로직이 추가되면 클라이언트의 상태관리 라이브러리 코드가 복잡해지는 문제가 생긴다.</p><blockquote><p>즉, 리액트 쿼리는 서버 데이터와 클라이언트 데이터를 구분하기 위해 사용한다.</p></blockquote><h1 id="useQuery"><a href="#useQuery" class="headerlink" title="useQuery"></a>useQuery</h1><p>컴포넌트나 custom hook에서 query를 구독하기 위해서는 useQuery를 호출해야한다.</p><p>이 때, 유니크한 <code>queryKey</code>와 promise를 반환하는 <code>queryFn</code>가 있어야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&quot;@tanstack/react-query&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> info = <span class="title function_">useQuery</span>(&#123; <span class="attr">queryKey</span>: [<span class="string">&quot;todos&quot;</span>], <span class="attr">queryFn</span>: fetchTodoList &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Todos</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLoading, isError, data, error &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&quot;todos&quot;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: fetchTodoList,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isError) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map((todo) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useQuery의 반환값은 데이터를 사용하기 위한 모든 정보를 담고 있다.</li><li>queryKey: query caching을 queryKey를 통해서 관리한다.<ul><li>쿼리키는 최상위 레벨이어야 하고, string으로 구성된 배열이어야 한다.</li></ul></li><li>queryKey에는 쿼리함수에서 사용되는 모든 변수가 포함되어야 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Todos</span>(<span class="params">&#123; todoId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&quot;todos&quot;</span>, todoId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchTodoById</span>(todoId),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>queryFn: 데이터를 resolve(분해)하거나 에러를 던지는 Promise를 반환하는 함수<ul><li>쿼리가 에러를 가지고 있다는 것을 결정하려면, 쿼리함수가 throw Error 또는 rejected Promise를 반환해야한다.</li></ul></li></ul><h1 id="useMutation"><a href="#useMutation" class="headerlink" title="useMutation"></a>useMutation</h1><p>query와 달리 mutation은 데이털를 생성, 갱신, 삭제하거나 서버에서 사이드 이펙트를 수행할 때, 사용된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(<span class="function">(<span class="params">newTodo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">&quot;/todos&quot;</span>, newTodo);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mutation.isLoading ? (</span></span><br><span class="line"><span class="language-xml">        &quot;Adding todo...&quot;</span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;mutation.isError ? (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>An error occurred: &#123;mutation.error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ) : null&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          &#123;mutation.isSuccess ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>Todo added!<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              mutation.mutate(&#123; id: new Date(), title: &quot;Do Laundry&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            Create Todo</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 mutation 중 error가 발생하여 data를 비우고 싶을 땐 reset을 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CreateTodo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(&#123; <span class="attr">mutationFn</span>: createTodo &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onCreateTodo</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    mutation.<span class="title function_">mutate</span>(&#123; title &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onCreateTodo&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mutation.error &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> mutation.reset()&#125;&gt;&#123;mutation.error&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;title&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setTitle(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Create Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="mutation의-사이드이펙트-처리"><a href="#mutation의-사이드이펙트-처리" class="headerlink" title="mutation의 사이드이펙트 처리"></a>mutation의 사이드이펙트 처리</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: addTodo,</span><br><span class="line">  <span class="attr">onMutate</span>: <span class="function">(<span class="params">variables</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// mutation이 발생할 때 호출</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 선택적으로 롤백 시 데이터를 포함하는 context를 반환할 수 있다.</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onError</span>: <span class="function">(<span class="params">error, variables, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 에러시 호출</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`rolling back optimistic update with id <span class="subst">$&#123;context.id&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="function">(<span class="params">data, variables, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 성공시 호출</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSettled</span>: <span class="function">(<span class="params">data, error, variables, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 에러든, 성공이든 호출</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>onMutate가 현재 mutate가 발생했을 때, 실행하는 함수이다. 위 코드에서는 롤백할 때, 사용할 데이터를 반환하고 있다.</li><li>만약 에러가 발생하면, 해당 업데이트를 롤백하는 데이터가 context에 포함되어있다.</li><li>onSettled는 성공하든 실패하든 호출되는 함수다.</li></ol><p>만약, 콜백함수에서 Promise를 반환하면, 다음 콜백이 호출되기 전에 대기한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: addTodo,</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m first!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSettled</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m second!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>onSuccess가 먼저 발생하는 이유는 내부 로직때문이 아니라 단순히 코드상 위에 있기 때문이다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React-Query란&quot;&gt;&lt;a href=&quot;#React-Query란&quot; class=&quot;headerlink&quot; title=&quot;React Query란?&quot;&gt;&lt;/a&gt;React Query란?&lt;/h1&gt;&lt;p&gt;client에서 상태관리 라이브러리를 사용하는 것은</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    
    <category term="React Query" scheme="https://loco9939.github.io/tags/React-Query/"/>
    
  </entry>
  
  <entry>
    <title>flex 박스 반응형 팁</title>
    <link href="https://loco9939.github.io/2023/08/16/Daily/flex-%EB%B0%95%EC%8A%A4-%EB%B0%98%EC%9D%91%ED%98%95-%ED%8C%81/"/>
    <id>https://loco9939.github.io/2023/08/16/Daily/flex-%EB%B0%95%EC%8A%A4-%EB%B0%98%EC%9D%91%ED%98%95-%ED%8C%81/</id>
    <published>2023-08-16T13:22:40.000Z</published>
    <updated>2023-08-16T14:07:41.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-grow와-flex-basis-사용하여-반응형-만들기"><a href="#flex-grow와-flex-basis-사용하여-반응형-만들기" class="headerlink" title="flex-grow와 flex-basis 사용하여 반응형 만들기"></a>flex-grow와 flex-basis 사용하여 반응형 만들기</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span> <span class="attr">for</span>=<span class="string">&quot;name-field&quot;</span>&gt;</span></span><br><span class="line">    Name:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name-field&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;email&quot;</span> <span class="attr">for</span>=<span class="string">&quot;email-field&quot;</span>&gt;</span></span><br><span class="line">    Email:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email-field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">hsl</span>(<span class="number">0deg</span> <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2.5rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name</span> &#123;</span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.email</span> &#123;</span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">170px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>flex-grow</code>는 flex 아이템이 컨테이너 안ㄴ에서 다른 아이템들에 비해 얼마나 많은 여유공간을 차지할 것인지 결정하는 값이다.</li><li>위에서는 <code>flex-grow</code>가 총 5이니, 1&#x2F;5,1&#x2F;5,3&#x2F;5씩 차지하게 된다.</li><li><code>flex-basis</code>는 flex 아이템의 초기 크기를 결정한다.</li><li><code>flex-grow</code>가 계산되기 이전에 아이템이 어느정도 크기를 가져야하는지를 정의한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex-grow와-flex-basis-사용하여-반응형-만들기&quot;&gt;&lt;a href=&quot;#flex-grow와-flex-basis-사용하여-반응형-만들기&quot; class=&quot;headerlink&quot; title=&quot;flex-grow와 flex-basis 사용</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="flex" scheme="https://loco9939.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>useRef 예시</title>
    <link href="https://loco9939.github.io/2023/08/15/React/useRef-%EC%98%88%EC%8B%9C/"/>
    <id>https://loco9939.github.io/2023/08/15/React/useRef-%EC%98%88%EC%8B%9C/</id>
    <published>2023-08-14T15:00:39.000Z</published>
    <updated>2023-08-14T15:14:06.969Z</updated>
    
    <content type="html"><![CDATA[<p><code>useRef</code> hook은 DOM에 접근하기 위해 사용한다.</p><p><code>useRef</code>는 <code>current</code> 프로퍼티를 포함한 객체를 반환한다.</p><p><code>current</code> 프로퍼티를 포함한 객체는 컴포넌트 전체 생명 주기에서 사용될 수 있고 리렌더링을 발생시키지 않으면서 데이터를 유지할 수 있도록 한다.</p><p>즉, <code>useRef</code> 값은 렌더링 중에도 같은 값을 유지할 수 있다.</p><ul><li>리렌더링 없이 참조값을 갱신하는 것</li></ul><h1 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newRefComponent = <span class="title function_">useRef</span>(initialValue);</span><br></pre></td></tr></table></figure><ul><li>주로 변형가능한 데이터를 리렌더링 없이 저장하기 위해 사용된다.</li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [anyInput, setAnyInput] = <span class="title function_">useState</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> showRender = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> randomInput = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setAnyInput</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    showRender.<span class="property">current</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusRandomInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    randomInput.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;TextBox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;randomInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;anyInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;toggleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Amount Of Renders: &#123;showRender.current&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;focusRandomInput&#125;</span>&gt;</span>Click To Focus On Input <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li><code>showRender</code> 데이터는 <code>toggleChange</code> 이벤트가 발생할 때마다 값이 증가하고 해당 값이 화면에 렌더링된다. 이 때, 리렌더링 없이 <code>showRender</code> 값을 변형할 수 있다.</li><li><code>current</code> 프로퍼티로 DOM에 접근하여 focus를 적용할 수 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; hook은 DOM에 접근하기 위해 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt;는 &lt;code&gt;current&lt;/code&gt; 프로퍼티를 포함한 객체를 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;current&lt;/c</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="useRef" scheme="https://loco9939.github.io/tags/useRef/"/>
    
  </entry>
  
  <entry>
    <title>useReducer 예시</title>
    <link href="https://loco9939.github.io/2023/08/14/React/useReducer-%EC%98%88%EC%8B%9C/"/>
    <id>https://loco9939.github.io/2023/08/14/React/useReducer-%EC%98%88%EC%8B%9C/</id>
    <published>2023-08-14T12:48:05.000Z</published>
    <updated>2023-08-14T13:04:59.519Z</updated>
    
    <content type="html"><![CDATA[<p><code>useReducer</code> hook은 상태관리 도구이다.</p><p><code>useState의</code> 대안으로 많이 사용된다.</p><p>2개 이상의 상태를 관리하기 위해서 각각을 <code>useState로</code> 관리하는 것 보단 <code>useReducer를</code> 사용하여 <code>action</code>별로 상태 관리하는 것이 훨씬 단순하다.</p><h1 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br></pre></td></tr></table></figure><ul><li><code>useReducer는</code> 3개의 인자를 받을 수 있다.</li><li><code>reducer</code> 함수, <code>initialState</code>(초기상태), <code>initFunction</code>(초기화함수, optional)</li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;USER_INPUT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">userInput</span>: action.<span class="property">payload</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;TOGGLE_COLOR&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">color</span>: !state.<span class="property">color</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">userInput</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">main</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;App, App-header&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">state.color</span> ? &quot;#<span class="attr">000</span>&quot; <span class="attr">:</span> &quot;#<span class="attr">FF07FF</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;state.userInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: &quot;USER_INPUT&quot;, payload: e.target.value &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;&gt;</span>&#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;DECREMENT&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;INCREMENT&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;TOGGLE_COLOR&quot; &#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Color</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;&gt;</span>&#123;state.userInput&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li><code>reducer</code> 함수에는 초기값 <code>state</code>와 <code>action</code>에 따른 case별로 반환하는 상태값을 정의한다.</li><li><code>useReducer</code> hook을 사용하여 <code>state(상태)</code>, <code>dispatch(상태변경함수)</code>를 선언한다.</li><li><code>dispatch(상태변경함수)</code>의 인자로 객체를 전달해주는데, <code>type</code>, <code>payload</code> 프로퍼티를 갖는 객체를 전달해준다.</li><li><code>action</code> 객체의 type에 따라 <code>reducer</code>에 정의해둔 <code>action</code> case에 따라 반환하는 값이 달라진다.</li><li>위와 같이 사용하면, <code>useState</code>와 <code>useState</code> 변경함수를 여러 개 정의하지 않고도 직관적으로 상태관리 코드를 작성할 수 있다는 장점이 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; hook은 상태관리 도구이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;useState의&lt;/code&gt; 대안으로 많이 사용된다.&lt;/p&gt;
&lt;p&gt;2개 이상의 상태를 관리하기 위해서 각각을 &lt;code&gt;useState로&lt;/code</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    
    <category term="useReducer" scheme="https://loco9939.github.io/tags/useReducer/"/>
    
  </entry>
  
  <entry>
    <title>git 커밋 되돌리기</title>
    <link href="https://loco9939.github.io/2023/08/13/git/git-%EC%BB%A4%EB%B0%8B-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/13/git/git-%EC%BB%A4%EB%B0%8B-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/</id>
    <published>2023-08-13T12:36:48.000Z</published>
    <updated>2023-08-13T12:43:48.072Z</updated>
    
    <content type="html"><![CDATA[<p>git을 사용하다 보면 이전 커밋으로 되돌아가고 싶은 경우가 있다.</p><p>이 때 사용할 수 있는 명령어와 방법에 대해 알아보자.</p><h1 id="되돌리기-undoing"><a href="#되돌리기-undoing" class="headerlink" title="되돌리기(undoing)"></a>되돌리기(undoing)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> restore unread.md</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> restore . // 현재위치 기준 모든 파일의 변경사항 취소</span><br></pre></td></tr></table></figure><ul><li>커밋 몇 줄을 수정하기에는 너무 많아서 최신 커밋으로 되돌아 가는 방법이다.</li></ul><h1 id="unstaging"><a href="#unstaging" class="headerlink" title="unstaging"></a>unstaging</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> reset HEAD unread.md</span><br></pre></td></tr></table></figure><p>add한 변경사항을 working directory로 내리는 방법이다.</p><ul><li>작업한 단위 별로 add하고 커밋을 해줘야하는데, 전체파일을 다 add 해버렸으면 위 명령어로 add한 것을 취소할 수 있다.</li></ul><h1 id="직전에-작성한-커밋-수정"><a href="#직전에-작성한-커밋-수정" class="headerlink" title="직전에 작성한 커밋 수정"></a>직전에 작성한 커밋 수정</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> commit --amend</span><br></pre></td></tr></table></figure><ul><li>바로 직전의 커밋만을 수정하는 방법이다.</li><li>커밋창이 열리고 메세지를 수정해주면 된다.</li></ul><h1 id="직전에-작성한-커밋-삭제"><a href="#직전에-작성한-커밋-삭제" class="headerlink" title="직전에 작성한 커밋 삭제"></a>직전에 작성한 커밋 삭제</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> revert --no-commit HEAD~3..</span><br></pre></td></tr></table></figure><ul><li>–no-commit을 같이 입력해줘야 한번에 삭제가 가능하다. 안그러면 1개씩 커밋을 삭제해나가야한다.</li><li>git commit으로 왜 삭제하였는지에 대해서도 적어줘야한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git을 사용하다 보면 이전 커밋으로 되돌아가고 싶은 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 때 사용할 수 있는 명령어와 방법에 대해 알아보자.&lt;/p&gt;
&lt;h1 id=&quot;되돌리기-undoing&quot;&gt;&lt;a href=&quot;#되돌리기-undoing&quot; class=&quot;head</summary>
      
    
    
    
    <category term="git" scheme="https://loco9939.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://loco9939.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CSS import 피하기</title>
    <link href="https://loco9939.github.io/2023/08/10/Daily/CSS-import-%ED%94%BC%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/10/Daily/CSS-import-%ED%94%BC%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-10T11:32:06.000Z</published>
    <updated>2023-08-10T11:38:54.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS는-어떻게-동작하는가"><a href="#CSS는-어떻게-동작하는가" class="headerlink" title="CSS는 어떻게 동작하는가?"></a>CSS는 어떻게 동작하는가?</h1><ol><li>CSS는 존재만으로 CSS가 파싱되기 전까지 브라우저 렌더링을 막는다.</li><li>CSS는 HTML 파싱도 막는다. 스크립트가 페이지 스타일에 영향을 줄 수 있기 때문에, 브라우저가 CSS 관련 작업 중에는 작업이 완료된 후 script를 실행한다.</li></ol><blockquote><p>그러므로 이러한 상황을 피하기 위해서는 CSS를 최대한 빠르게 불러와야 하며 리소스를 최적의 순서로 불러와야 한다.</p></blockquote><h1 id="CSS-import-피하기"><a href="#CSS-import-피하기" class="headerlink" title="CSS import 피하기"></a>CSS import 피하기</h1><p>@import는 CSS 파일의 렌더링 속도를 느리게 한다.</p><h2 id="브라우저-렌더링-순서"><a href="#브라우저-렌더링-순서" class="headerlink" title="브라우저 렌더링 순서"></a>브라우저 렌더링 순서</h2><ol><li>HTML 다운로드</li><li>HTML이 CSS 요청</li><li>CSS가 또 다른 @import에 있는 CSS 요청</li><li>위 단계가 끝나면 Render Tree 생성</li></ol><h2 id="import-사용-시-네트워크-흐름"><a href="#import-사용-시-네트워크-흐름" class="headerlink" title="@import 사용 시 네트워크 흐름"></a>@import 사용 시 네트워크 흐름</h2><p><img src="/../../images/css_avoid.png" alt="import css"></p><h2 id="파일-별개로-분리-시-네트워크-흐름"><a href="#파일-별개로-분리-시-네트워크-흐름" class="headerlink" title="파일 별개로 분리 시 네트워크 흐름"></a>파일 별개로 분리 시 네트워크 흐름</h2><p><img src="/../../images/css_avoid2.png" alt="css split"></p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><ul><li>@import 사용 피하기</li><li>파일 별개로 분리하여 관리</li><li>CSS 작성 시 속성을 알파벳 순서대로 작성</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS는-어떻게-동작하는가&quot;&gt;&lt;a href=&quot;#CSS는-어떻게-동작하는가&quot; class=&quot;headerlink&quot; title=&quot;CSS는 어떻게 동작하는가?&quot;&gt;&lt;/a&gt;CSS는 어떻게 동작하는가?&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CSS는 존재만으로 CSS</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>Grid Layout 알아보기</title>
    <link href="https://loco9939.github.io/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/</id>
    <published>2023-08-09T13:30:30.000Z</published>
    <updated>2023-08-09T13:37:44.812Z</updated>
    
    <content type="html"><![CDATA[<p>푸터를 만들 때, Grid를 사용하여 설계를 해보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">2</span>/<span class="number">2</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/grid.png" alt="Grid 레이아웃"></p><ul><li>전체적인 레이아웃은 grid를 사용하고 내부의 세부적인 레이아웃은 flex를 사용한다.</li><li>grid 내부의 크기를 grid-area로 지정할 수 있다.</li><li>grid-area: 열,행</li><li>grid는 <code>margin-collapse</code> 일어나지 않는다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;푸터를 만들 때, Grid를 사용하여 설계를 해보자.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Grid" scheme="https://loco9939.github.io/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>컨테이닝 블록 구분하기</title>
    <link href="https://loco9939.github.io/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-08T11:31:40.000Z</published>
    <updated>2023-08-08T11:49:54.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="컨테이닝-블록"><a href="#컨테이닝-블록" class="headerlink" title="컨테이닝 블록"></a>컨테이닝 블록</h1><ul><li>요쇼의 크기, 위치를 결정하는 요인이다.</li><li><code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code> 속성값과 절대적 위치(<code>absolute</code>, <code>fixed</code>)로 설정된 요소의 offset 속성값은 자신의 컨테이닝 블록으로부터 계산된다.</li><li>대부분의 경우 요소의 컨테이닝 블록이 가장 가까운 블록 레벨 조상의 컨텐츠 영역이지만 <span style="color:red">예외가 있다.</span></li></ul><h2 id="컨테이닝-블록-식별"><a href="#컨테이닝-블록-식별" class="headerlink" title="컨테이닝 블록 식별"></a>컨테이닝 블록 식별</h2><p>position의 속성에 따라 완전히 달라진다.</p><h3 id="1-position-속성이-static-relative-sticky-인-경우"><a href="#1-position-속성이-static-relative-sticky-인-경우" class="headerlink" title="1. position 속성이 static, relative, sticky 인 경우"></a>1. position 속성이 static, relative, sticky 인 경우</h3><ul><li>컨테이닝 블록은 가장 가까운 조상 블록 컨테이너 또는 서식 맥락을 형성하는 조상 요소(<code>flex</code>,<code>table</code>,<code>grid</code>)의 컨텐츠 영역 경계를 따라 형성된다.</li></ul><h3 id="2-position-속성이-absolute-인-경우"><a href="#2-position-속성이-absolute-인-경우" class="headerlink" title="2. position 속성이 absolute 인 경우"></a>2. position 속성이 absolute 인 경우</h3><ul><li>컨테이닝 블록은 속성값이 <code>static</code>이 아닌 가장 가까운 조상의 내부 여백 영역</li><li>그래서 주로 조상 영역에 <code>relative</code>를 추가하여 조상을 기준으로 position을 조절한다.</li></ul><h3 id="3-position-속성이-fixed-인-경우"><a href="#3-position-속성이-fixed-인-경우" class="headerlink" title="3. position 속성이 fixed 인 경우"></a>3. position 속성이 fixed 인 경우</h3><ul><li>컨테이닝 블록은 <code>viewport</code>, 페이지 영역이다.</li></ul><h3 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h3><p>position 속성이 absolute, fixed 인 경우, 다음 조건을 만족하는 가장 가까운 조상 내부 영역이 컨테이닝 블록이 될 수 있다.</p><ol><li><p>transform이나 perspective 속성이 none이 아닐 때, transform 속성을 none으로 바꾸면 viewport 기준으로 바뀐다.</p></li><li><p>will-change 속성이 transform이나 perspective 일 때, will-change는 요소의 예상되는 변화의 힌트를 브라우저에게 제공한다.</p></li><li><p>filter 속성이 none이 아닐 때</p></li><li><p>contain 속성이 paint 일 때</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-absolute&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../images/containingBlock1.png" alt="컨테이닝 블록 예시"></p><ul><li>container 클래스에 아무런 값을 주지 않고 있어 p-absolute 값이 static이 아닌 조상 영역을 기준으로 위치하는데, static이 아닌 조상 요소가 없어서 최상위 브라우저를 기준으로 위치해있다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective:0; */</span></span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective: 10px; */</span></span><br><span class="line">  <span class="comment">/*   will-change: perspective; */</span></span><br><span class="line">  <span class="comment">/*   will-change: transform; */</span></span><br><span class="line">  <span class="comment">/*   filter:opacity(); */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p-absolute</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/containingBlcok2.png" alt="컨테이닝 블록 예시2"></p><ul><li>앞서 설명한 예외를 추가하면 position:relative를 추가한 것과 똑같이 동작하게 된다.</li><li>해당 속성을 가진 요소를 기준으로 위치를 조절한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;컨테이닝-블록&quot;&gt;&lt;a href=&quot;#컨테이닝-블록&quot; class=&quot;headerlink&quot; title=&quot;컨테이닝 블록&quot;&gt;&lt;/a&gt;컨테이닝 블록&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;요쇼의 크기, 위치를 결정하는 요인이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="컨테이닝블록" scheme="https://loco9939.github.io/tags/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D%EB%B8%94%EB%A1%9D/"/>
    
  </entry>
  
  <entry>
    <title>flex vs inline-flex</title>
    <link href="https://loco9939.github.io/2023/08/07/Daily/flex-vs-inline-flex/"/>
    <id>https://loco9939.github.io/2023/08/07/Daily/flex-vs-inline-flex/</id>
    <published>2023-08-07T11:15:13.000Z</published>
    <updated>2023-08-07T11:17:52.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-vs-inline-flex"><a href="#flex-vs-inline-flex" class="headerlink" title="flex vs inline-flex"></a>flex vs inline-flex</h1><ul><li>flex로 지정된 flex container는 block 요소 성향</li><li>inline-flex로 지정된 inline-flex container는 inline 요소 성향</li></ul><p><img src="/../../images/inline_flex.png" alt="inline-flex"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex-vs-inline-flex&quot;&gt;&lt;a href=&quot;#flex-vs-inline-flex&quot; class=&quot;headerlink&quot; title=&quot;flex vs inline-flex&quot;&gt;&lt;/a&gt;flex vs inline-flex&lt;/h1&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="inline-flex" scheme="https://loco9939.github.io/tags/inline-flex/"/>
    
  </entry>
  
</feed>
