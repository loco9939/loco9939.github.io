<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loco&#39;s Dev Blog</title>
  
  <subtitle>Frontend Developer</subtitle>
  <link href="https://loco9939.github.io/atom.xml" rel="self"/>
  
  <link href="https://loco9939.github.io/"/>
  <updated>2023-08-18T15:28:39.538Z</updated>
  <id>https://loco9939.github.io/</id>
  
  <author>
    <name>loco9939</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>디바운스와 스로틀 차이</title>
    <link href="https://loco9939.github.io/2023/08/19/Daily/%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A1%9C%ED%8B%80-%EC%B0%A8%EC%9D%B4/"/>
    <id>https://loco9939.github.io/2023/08/19/Daily/%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A1%9C%ED%8B%80-%EC%B0%A8%EC%9D%B4/</id>
    <published>2023-08-18T15:16:09.000Z</published>
    <updated>2023-08-18T15:28:39.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h1><p>이벤트가 연달아 발생할 때, 제일 처음 또는 마지막 이벤트일 때만 함수를 호출하는 방법</p><p>만약 키보드 이벤트가 발생할 때마다 API를 요청한다고 가정해보자.</p><p>“감”이라는 글자를 입력하는데 “ㄱ”, “가”, “감” 3번의 이벤트가 발생하게됩니다. 이러면 불필요한 이벤트까지 API 요청에 포함시키면 낭비이므로 이를 방지하기 위해 디바운스를 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;여기에 ajax 요청&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>주로 키보드 입력 이벤트에 사용</li></ul><h1 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h1><p>마지막 이벤트가 발생한 후 일정 시간이 지나기 전에 다시 호출되지 않도록 막는 방법</p><p>만약 스크롤이벤트가 발생했을 때, 처음에 스크롤 이벤트가 발생할 때, 함수를 호출하고 몇초동안은 이벤트가 발생해도 함수를 호출시키지 않는 방법이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;여기에 ajax 요청&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>주로 스크롤 이벤트에 사용</li></ul><p>위와 같이 직접 구현하는 방법보다는 예외 사항을 처리하지 못할 경우도 있기때문에, <code>_.debounce</code>, <code>_.throttle</code>을 사용한다.</p><p>요즘은 토스에서도 해당 라이브러리를 지원하니 관심이 있으면 사용해보자.</p><p><a href="https://slash.page/ko/libraries/react/react/src/hooks/useDebounce.i18n">토스 디바운스 라이브러리 바로가기</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Debounce&quot;&gt;&lt;a href=&quot;#Debounce&quot; class=&quot;headerlink&quot; title=&quot;Debounce&quot;&gt;&lt;/a&gt;Debounce&lt;/h1&gt;&lt;p&gt;이벤트가 연달아 발생할 때, 제일 처음 또는 마지막 이벤트일 때만 함수를 호출하는 </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="debounce" scheme="https://loco9939.github.io/tags/debounce/"/>
    
    <category term="throttle" scheme="https://loco9939.github.io/tags/throttle/"/>
    
  </entry>
  
  <entry>
    <title>var setTimeout Quiz</title>
    <link href="https://loco9939.github.io/2023/08/18/Daily/var-setTimeout-Quiz/"/>
    <id>https://loco9939.github.io/2023/08/18/Daily/var-setTimeout-Quiz/</id>
    <published>2023-08-18T12:15:13.000Z</published>
    <updated>2023-08-18T12:22:13.083Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 코드의 결과는??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정답</span></span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="이유"><a href="#이유" class="headerlink" title="이유"></a>이유</h2><p>var 키워드로 선언한 변수는 함수 레벨 스코프를 갖는다. for문 코드 블록에서는 전역 변수로 선언되었기 때문에, 변수 i 값이 갱신된다.</p><p>setTimeout 함수는 비동기 처리 방식으로 실행된다.</p><p>setTimeout 함수는 Web API로 이동하여 타이머가 만료되면 Task Queue로 이동한다.</p><p>Task Queue에서 Call Stack이 비워질 때 까지 대기한다.</p><p>대기하는 동안, 다음 for 문이 돌고 있으므로, setTimeout 함수가 Task Queue에서 실행 컨텍스트가 비워질 때 까지 계속 대기한다.</p><p>이러한 이유로 i가 5가 될 때, Call Stack이 비워지므로 그때서야 이벤트 루프에 의해서 console 창에 출력되는 i 값이 5이므로 5가 5번 찍히게 된다.</p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><h3 id="1-블록-레벨-스코프"><a href="#1-블록-레벨-스코프" class="headerlink" title="1. 블록 레벨 스코프"></a>1. 블록 레벨 스코프</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-즉시실행함수"><a href="#2-즉시실행함수" class="headerlink" title="2. 즉시실행함수"></a>2. 즉시실행함수</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(param), <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setTimeout 함수를 즉시실행함수로 감싸서 함수 레벨 스코프를 갖도록 해준 뒤 즉시실행함수의 인수로 i를 전달해주고 즉시실행함수 내부의 함수에 파라미터로 해당 인수를 어디서 참조할지 설정해주면 된다. 위 예제에서는 콘솔 로그의 인수로 파라미터를 전달해줘야 할 것이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>React Query란?</title>
    <link href="https://loco9939.github.io/2023/08/17/React/React-Query%EB%9E%80/"/>
    <id>https://loco9939.github.io/2023/08/17/React/React-Query%EB%9E%80/</id>
    <published>2023-08-17T13:38:57.000Z</published>
    <updated>2023-08-18T12:09:57.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Query란"><a href="#React-Query란" class="headerlink" title="React Query란?"></a>React Query란?</h1><p>client에서 상태관리 라이브러리를 사용하는 것은 클라이언트에서만 유효하다.</p><p>서버의 데이터를 요청하고 클라이언트의 전역 상태로 갱신하는 로직이 추가되면 클라이언트의 상태관리 라이브러리 코드가 복잡해지는 문제가 생긴다.</p><blockquote><p>즉, 리액트 쿼리는 서버 데이터와 클라이언트 데이터를 구분하기 위해 사용한다.</p></blockquote><h1 id="useQuery"><a href="#useQuery" class="headerlink" title="useQuery"></a>useQuery</h1><p>컴포넌트나 custom hook에서 query를 구독하기 위해서는 useQuery를 호출해야한다.</p><p>이 때, 유니크한 <code>queryKey</code>와 promise를 반환하는 <code>queryFn</code>가 있어야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&quot;@tanstack/react-query&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> info = <span class="title function_">useQuery</span>(&#123; <span class="attr">queryKey</span>: [<span class="string">&quot;todos&quot;</span>], <span class="attr">queryFn</span>: fetchTodoList &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Todos</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLoading, isError, data, error &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&quot;todos&quot;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: fetchTodoList,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isError) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map((todo) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useQuery의 반환값은 데이터를 사용하기 위한 모든 정보를 담고 있다.</li><li>queryKey: query caching을 queryKey를 통해서 관리한다.<ul><li>쿼리키는 최상위 레벨이어야 하고, string으로 구성된 배열이어야 한다.</li></ul></li><li>queryKey에는 쿼리함수에서 사용되는 모든 변수가 포함되어야 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Todos</span>(<span class="params">&#123; todoId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&quot;todos&quot;</span>, todoId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchTodoById</span>(todoId),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>queryFn: 데이터를 resolve(분해)하거나 에러를 던지는 Promise를 반환하는 함수<ul><li>쿼리가 에러를 가지고 있다는 것을 결정하려면, 쿼리함수가 throw Error 또는 rejected Promise를 반환해야한다.</li></ul></li></ul><h1 id="useMutation"><a href="#useMutation" class="headerlink" title="useMutation"></a>useMutation</h1><p>query와 달리 mutation은 데이털를 생성, 갱신, 삭제하거나 서버에서 사이드 이펙트를 수행할 때, 사용된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(<span class="function">(<span class="params">newTodo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">&quot;/todos&quot;</span>, newTodo);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mutation.isLoading ? (</span></span><br><span class="line"><span class="language-xml">        &quot;Adding todo...&quot;</span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;mutation.isError ? (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>An error occurred: &#123;mutation.error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ) : null&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          &#123;mutation.isSuccess ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>Todo added!<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              mutation.mutate(&#123; id: new Date(), title: &quot;Do Laundry&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            Create Todo</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 mutation 중 error가 발생하여 data를 비우고 싶을 땐 reset을 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CreateTodo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(&#123; <span class="attr">mutationFn</span>: createTodo &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onCreateTodo</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    mutation.<span class="title function_">mutate</span>(&#123; title &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onCreateTodo&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mutation.error &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> mutation.reset()&#125;&gt;&#123;mutation.error&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;title&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setTitle(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Create Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="mutation의-사이드이펙트-처리"><a href="#mutation의-사이드이펙트-처리" class="headerlink" title="mutation의 사이드이펙트 처리"></a>mutation의 사이드이펙트 처리</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: addTodo,</span><br><span class="line">  <span class="attr">onMutate</span>: <span class="function">(<span class="params">variables</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// mutation이 발생할 때 호출</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 선택적으로 롤백 시 데이터를 포함하는 context를 반환할 수 있다.</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onError</span>: <span class="function">(<span class="params">error, variables, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 에러시 호출</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`rolling back optimistic update with id <span class="subst">$&#123;context.id&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="function">(<span class="params">data, variables, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 성공시 호출</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSettled</span>: <span class="function">(<span class="params">data, error, variables, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 에러든, 성공이든 호출</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>onMutate가 현재 mutate가 발생했을 때, 실행하는 함수이다. 위 코드에서는 롤백할 때, 사용할 데이터를 반환하고 있다.</li><li>만약 에러가 발생하면, 해당 업데이트를 롤백하는 데이터가 context에 포함되어있다.</li><li>onSettled는 성공하든 실패하든 호출되는 함수다.</li></ol><p>만약, 콜백함수에서 Promise를 반환하면, 다음 콜백이 호출되기 전에 대기한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: addTodo,</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m first!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSettled</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m second!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>onSuccess가 먼저 발생하는 이유는 내부 로직때문이 아니라 단순히 코드상 위에 있기 때문이다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React-Query란&quot;&gt;&lt;a href=&quot;#React-Query란&quot; class=&quot;headerlink&quot; title=&quot;React Query란?&quot;&gt;&lt;/a&gt;React Query란?&lt;/h1&gt;&lt;p&gt;client에서 상태관리 라이브러리를 사용하는 것은</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    
    <category term="React Query" scheme="https://loco9939.github.io/tags/React-Query/"/>
    
  </entry>
  
  <entry>
    <title>flex 박스 반응형 팁</title>
    <link href="https://loco9939.github.io/2023/08/16/Daily/flex-%EB%B0%95%EC%8A%A4-%EB%B0%98%EC%9D%91%ED%98%95-%ED%8C%81/"/>
    <id>https://loco9939.github.io/2023/08/16/Daily/flex-%EB%B0%95%EC%8A%A4-%EB%B0%98%EC%9D%91%ED%98%95-%ED%8C%81/</id>
    <published>2023-08-16T13:22:40.000Z</published>
    <updated>2023-08-16T14:07:41.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-grow와-flex-basis-사용하여-반응형-만들기"><a href="#flex-grow와-flex-basis-사용하여-반응형-만들기" class="headerlink" title="flex-grow와 flex-basis 사용하여 반응형 만들기"></a>flex-grow와 flex-basis 사용하여 반응형 만들기</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span> <span class="attr">for</span>=<span class="string">&quot;name-field&quot;</span>&gt;</span></span><br><span class="line">    Name:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name-field&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;email&quot;</span> <span class="attr">for</span>=<span class="string">&quot;email-field&quot;</span>&gt;</span></span><br><span class="line">    Email:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email-field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">hsl</span>(<span class="number">0deg</span> <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2.5rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name</span> &#123;</span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.email</span> &#123;</span><br><span class="line">  <span class="comment">/* display 속성 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">170px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>flex-grow</code>는 flex 아이템이 컨테이너 안ㄴ에서 다른 아이템들에 비해 얼마나 많은 여유공간을 차지할 것인지 결정하는 값이다.</li><li>위에서는 <code>flex-grow</code>가 총 5이니, 1&#x2F;5,1&#x2F;5,3&#x2F;5씩 차지하게 된다.</li><li><code>flex-basis</code>는 flex 아이템의 초기 크기를 결정한다.</li><li><code>flex-grow</code>가 계산되기 이전에 아이템이 어느정도 크기를 가져야하는지를 정의한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex-grow와-flex-basis-사용하여-반응형-만들기&quot;&gt;&lt;a href=&quot;#flex-grow와-flex-basis-사용하여-반응형-만들기&quot; class=&quot;headerlink&quot; title=&quot;flex-grow와 flex-basis 사용</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="flex" scheme="https://loco9939.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>useRef 예시</title>
    <link href="https://loco9939.github.io/2023/08/15/React/useRef-%EC%98%88%EC%8B%9C/"/>
    <id>https://loco9939.github.io/2023/08/15/React/useRef-%EC%98%88%EC%8B%9C/</id>
    <published>2023-08-14T15:00:39.000Z</published>
    <updated>2023-08-14T15:14:06.969Z</updated>
    
    <content type="html"><![CDATA[<p><code>useRef</code> hook은 DOM에 접근하기 위해 사용한다.</p><p><code>useRef</code>는 <code>current</code> 프로퍼티를 포함한 객체를 반환한다.</p><p><code>current</code> 프로퍼티를 포함한 객체는 컴포넌트 전체 생명 주기에서 사용될 수 있고 리렌더링을 발생시키지 않으면서 데이터를 유지할 수 있도록 한다.</p><p>즉, <code>useRef</code> 값은 렌더링 중에도 같은 값을 유지할 수 있다.</p><ul><li>리렌더링 없이 참조값을 갱신하는 것</li></ul><h1 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newRefComponent = <span class="title function_">useRef</span>(initialValue);</span><br></pre></td></tr></table></figure><ul><li>주로 변형가능한 데이터를 리렌더링 없이 저장하기 위해 사용된다.</li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [anyInput, setAnyInput] = <span class="title function_">useState</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> showRender = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> randomInput = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setAnyInput</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    showRender.<span class="property">current</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusRandomInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    randomInput.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;TextBox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;randomInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;anyInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;toggleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Amount Of Renders: &#123;showRender.current&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;focusRandomInput&#125;</span>&gt;</span>Click To Focus On Input <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li><code>showRender</code> 데이터는 <code>toggleChange</code> 이벤트가 발생할 때마다 값이 증가하고 해당 값이 화면에 렌더링된다. 이 때, 리렌더링 없이 <code>showRender</code> 값을 변형할 수 있다.</li><li><code>current</code> 프로퍼티로 DOM에 접근하여 focus를 적용할 수 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; hook은 DOM에 접근하기 위해 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt;는 &lt;code&gt;current&lt;/code&gt; 프로퍼티를 포함한 객체를 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;current&lt;/c</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="useRef" scheme="https://loco9939.github.io/tags/useRef/"/>
    
  </entry>
  
  <entry>
    <title>useReducer 예시</title>
    <link href="https://loco9939.github.io/2023/08/14/React/useReducer-%EC%98%88%EC%8B%9C/"/>
    <id>https://loco9939.github.io/2023/08/14/React/useReducer-%EC%98%88%EC%8B%9C/</id>
    <published>2023-08-14T12:48:05.000Z</published>
    <updated>2023-08-14T13:04:59.519Z</updated>
    
    <content type="html"><![CDATA[<p><code>useReducer</code> hook은 상태관리 도구이다.</p><p><code>useState의</code> 대안으로 많이 사용된다.</p><p>2개 이상의 상태를 관리하기 위해서 각각을 <code>useState로</code> 관리하는 것 보단 <code>useReducer를</code> 사용하여 <code>action</code>별로 상태 관리하는 것이 훨씬 단순하다.</p><h1 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br></pre></td></tr></table></figure><ul><li><code>useReducer는</code> 3개의 인자를 받을 수 있다.</li><li><code>reducer</code> 함수, <code>initialState</code>(초기상태), <code>initFunction</code>(초기화함수, optional)</li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;USER_INPUT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">userInput</span>: action.<span class="property">payload</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;TOGGLE_COLOR&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">color</span>: !state.<span class="property">color</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">userInput</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">main</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;App, App-header&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">state.color</span> ? &quot;#<span class="attr">000</span>&quot; <span class="attr">:</span> &quot;#<span class="attr">FF07FF</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;state.userInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: &quot;USER_INPUT&quot;, payload: e.target.value &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;&gt;</span>&#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;DECREMENT&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;INCREMENT&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;TOGGLE_COLOR&quot; &#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Color</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">2rem</span>&quot; &#125;&#125;&gt;</span>&#123;state.userInput&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li><code>reducer</code> 함수에는 초기값 <code>state</code>와 <code>action</code>에 따른 case별로 반환하는 상태값을 정의한다.</li><li><code>useReducer</code> hook을 사용하여 <code>state(상태)</code>, <code>dispatch(상태변경함수)</code>를 선언한다.</li><li><code>dispatch(상태변경함수)</code>의 인자로 객체를 전달해주는데, <code>type</code>, <code>payload</code> 프로퍼티를 갖는 객체를 전달해준다.</li><li><code>action</code> 객체의 type에 따라 <code>reducer</code>에 정의해둔 <code>action</code> case에 따라 반환하는 값이 달라진다.</li><li>위와 같이 사용하면, <code>useState</code>와 <code>useState</code> 변경함수를 여러 개 정의하지 않고도 직관적으로 상태관리 코드를 작성할 수 있다는 장점이 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; hook은 상태관리 도구이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;useState의&lt;/code&gt; 대안으로 많이 사용된다.&lt;/p&gt;
&lt;p&gt;2개 이상의 상태를 관리하기 위해서 각각을 &lt;code&gt;useState로&lt;/code</summary>
      
    
    
    
    <category term="React" scheme="https://loco9939.github.io/categories/React/"/>
    
    
    <category term="useReducer" scheme="https://loco9939.github.io/tags/useReducer/"/>
    
  </entry>
  
  <entry>
    <title>git 커밋 되돌리기</title>
    <link href="https://loco9939.github.io/2023/08/13/git/git-%EC%BB%A4%EB%B0%8B-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/13/git/git-%EC%BB%A4%EB%B0%8B-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/</id>
    <published>2023-08-13T12:36:48.000Z</published>
    <updated>2023-08-13T12:43:48.072Z</updated>
    
    <content type="html"><![CDATA[<p>git을 사용하다 보면 이전 커밋으로 되돌아가고 싶은 경우가 있다.</p><p>이 때 사용할 수 있는 명령어와 방법에 대해 알아보자.</p><h1 id="되돌리기-undoing"><a href="#되돌리기-undoing" class="headerlink" title="되돌리기(undoing)"></a>되돌리기(undoing)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> restore unread.md</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> restore . // 현재위치 기준 모든 파일의 변경사항 취소</span><br></pre></td></tr></table></figure><ul><li>커밋 몇 줄을 수정하기에는 너무 많아서 최신 커밋으로 되돌아 가는 방법이다.</li></ul><h1 id="unstaging"><a href="#unstaging" class="headerlink" title="unstaging"></a>unstaging</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> reset HEAD unread.md</span><br></pre></td></tr></table></figure><p>add한 변경사항을 working directory로 내리는 방법이다.</p><ul><li>작업한 단위 별로 add하고 커밋을 해줘야하는데, 전체파일을 다 add 해버렸으면 위 명령어로 add한 것을 취소할 수 있다.</li></ul><h1 id="직전에-작성한-커밋-수정"><a href="#직전에-작성한-커밋-수정" class="headerlink" title="직전에 작성한 커밋 수정"></a>직전에 작성한 커밋 수정</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> commit --amend</span><br></pre></td></tr></table></figure><ul><li>바로 직전의 커밋만을 수정하는 방법이다.</li><li>커밋창이 열리고 메세지를 수정해주면 된다.</li></ul><h1 id="직전에-작성한-커밋-삭제"><a href="#직전에-작성한-커밋-삭제" class="headerlink" title="직전에 작성한 커밋 삭제"></a>직전에 작성한 커밋 삭제</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> revert --no-commit HEAD~3..</span><br></pre></td></tr></table></figure><ul><li>–no-commit을 같이 입력해줘야 한번에 삭제가 가능하다. 안그러면 1개씩 커밋을 삭제해나가야한다.</li><li>git commit으로 왜 삭제하였는지에 대해서도 적어줘야한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git을 사용하다 보면 이전 커밋으로 되돌아가고 싶은 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 때 사용할 수 있는 명령어와 방법에 대해 알아보자.&lt;/p&gt;
&lt;h1 id=&quot;되돌리기-undoing&quot;&gt;&lt;a href=&quot;#되돌리기-undoing&quot; class=&quot;head</summary>
      
    
    
    
    <category term="git" scheme="https://loco9939.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://loco9939.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CSS import 피하기</title>
    <link href="https://loco9939.github.io/2023/08/10/Daily/CSS-import-%ED%94%BC%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/10/Daily/CSS-import-%ED%94%BC%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-10T11:32:06.000Z</published>
    <updated>2023-08-10T11:38:54.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS는-어떻게-동작하는가"><a href="#CSS는-어떻게-동작하는가" class="headerlink" title="CSS는 어떻게 동작하는가?"></a>CSS는 어떻게 동작하는가?</h1><ol><li>CSS는 존재만으로 CSS가 파싱되기 전까지 브라우저 렌더링을 막는다.</li><li>CSS는 HTML 파싱도 막는다. 스크립트가 페이지 스타일에 영향을 줄 수 있기 때문에, 브라우저가 CSS 관련 작업 중에는 작업이 완료된 후 script를 실행한다.</li></ol><blockquote><p>그러므로 이러한 상황을 피하기 위해서는 CSS를 최대한 빠르게 불러와야 하며 리소스를 최적의 순서로 불러와야 한다.</p></blockquote><h1 id="CSS-import-피하기"><a href="#CSS-import-피하기" class="headerlink" title="CSS import 피하기"></a>CSS import 피하기</h1><p>@import는 CSS 파일의 렌더링 속도를 느리게 한다.</p><h2 id="브라우저-렌더링-순서"><a href="#브라우저-렌더링-순서" class="headerlink" title="브라우저 렌더링 순서"></a>브라우저 렌더링 순서</h2><ol><li>HTML 다운로드</li><li>HTML이 CSS 요청</li><li>CSS가 또 다른 @import에 있는 CSS 요청</li><li>위 단계가 끝나면 Render Tree 생성</li></ol><h2 id="import-사용-시-네트워크-흐름"><a href="#import-사용-시-네트워크-흐름" class="headerlink" title="@import 사용 시 네트워크 흐름"></a>@import 사용 시 네트워크 흐름</h2><p><img src="/../../images/css_avoid.png" alt="import css"></p><h2 id="파일-별개로-분리-시-네트워크-흐름"><a href="#파일-별개로-분리-시-네트워크-흐름" class="headerlink" title="파일 별개로 분리 시 네트워크 흐름"></a>파일 별개로 분리 시 네트워크 흐름</h2><p><img src="/../../images/css_avoid2.png" alt="css split"></p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><ul><li>@import 사용 피하기</li><li>파일 별개로 분리하여 관리</li><li>CSS 작성 시 속성을 알파벳 순서대로 작성</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS는-어떻게-동작하는가&quot;&gt;&lt;a href=&quot;#CSS는-어떻게-동작하는가&quot; class=&quot;headerlink&quot; title=&quot;CSS는 어떻게 동작하는가?&quot;&gt;&lt;/a&gt;CSS는 어떻게 동작하는가?&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CSS는 존재만으로 CSS</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>Grid Layout 알아보기</title>
    <link href="https://loco9939.github.io/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/</id>
    <published>2023-08-09T13:30:30.000Z</published>
    <updated>2023-08-09T13:37:44.812Z</updated>
    
    <content type="html"><![CDATA[<p>푸터를 만들 때, Grid를 사용하여 설계를 해보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">2</span>/<span class="number">2</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/grid.png" alt="Grid 레이아웃"></p><ul><li>전체적인 레이아웃은 grid를 사용하고 내부의 세부적인 레이아웃은 flex를 사용한다.</li><li>grid 내부의 크기를 grid-area로 지정할 수 있다.</li><li>grid-area: 열,행</li><li>grid는 <code>margin-collapse</code> 일어나지 않는다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;푸터를 만들 때, Grid를 사용하여 설계를 해보자.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Grid" scheme="https://loco9939.github.io/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>컨테이닝 블록 구분하기</title>
    <link href="https://loco9939.github.io/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-08T11:31:40.000Z</published>
    <updated>2023-08-08T11:49:54.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="컨테이닝-블록"><a href="#컨테이닝-블록" class="headerlink" title="컨테이닝 블록"></a>컨테이닝 블록</h1><ul><li>요쇼의 크기, 위치를 결정하는 요인이다.</li><li><code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code> 속성값과 절대적 위치(<code>absolute</code>, <code>fixed</code>)로 설정된 요소의 offset 속성값은 자신의 컨테이닝 블록으로부터 계산된다.</li><li>대부분의 경우 요소의 컨테이닝 블록이 가장 가까운 블록 레벨 조상의 컨텐츠 영역이지만 <span style="color:red">예외가 있다.</span></li></ul><h2 id="컨테이닝-블록-식별"><a href="#컨테이닝-블록-식별" class="headerlink" title="컨테이닝 블록 식별"></a>컨테이닝 블록 식별</h2><p>position의 속성에 따라 완전히 달라진다.</p><h3 id="1-position-속성이-static-relative-sticky-인-경우"><a href="#1-position-속성이-static-relative-sticky-인-경우" class="headerlink" title="1. position 속성이 static, relative, sticky 인 경우"></a>1. position 속성이 static, relative, sticky 인 경우</h3><ul><li>컨테이닝 블록은 가장 가까운 조상 블록 컨테이너 또는 서식 맥락을 형성하는 조상 요소(<code>flex</code>,<code>table</code>,<code>grid</code>)의 컨텐츠 영역 경계를 따라 형성된다.</li></ul><h3 id="2-position-속성이-absolute-인-경우"><a href="#2-position-속성이-absolute-인-경우" class="headerlink" title="2. position 속성이 absolute 인 경우"></a>2. position 속성이 absolute 인 경우</h3><ul><li>컨테이닝 블록은 속성값이 <code>static</code>이 아닌 가장 가까운 조상의 내부 여백 영역</li><li>그래서 주로 조상 영역에 <code>relative</code>를 추가하여 조상을 기준으로 position을 조절한다.</li></ul><h3 id="3-position-속성이-fixed-인-경우"><a href="#3-position-속성이-fixed-인-경우" class="headerlink" title="3. position 속성이 fixed 인 경우"></a>3. position 속성이 fixed 인 경우</h3><ul><li>컨테이닝 블록은 <code>viewport</code>, 페이지 영역이다.</li></ul><h3 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h3><p>position 속성이 absolute, fixed 인 경우, 다음 조건을 만족하는 가장 가까운 조상 내부 영역이 컨테이닝 블록이 될 수 있다.</p><ol><li><p>transform이나 perspective 속성이 none이 아닐 때, transform 속성을 none으로 바꾸면 viewport 기준으로 바뀐다.</p></li><li><p>will-change 속성이 transform이나 perspective 일 때, will-change는 요소의 예상되는 변화의 힌트를 브라우저에게 제공한다.</p></li><li><p>filter 속성이 none이 아닐 때</p></li><li><p>contain 속성이 paint 일 때</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-absolute&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../images/containingBlock1.png" alt="컨테이닝 블록 예시"></p><ul><li>container 클래스에 아무런 값을 주지 않고 있어 p-absolute 값이 static이 아닌 조상 영역을 기준으로 위치하는데, static이 아닌 조상 요소가 없어서 최상위 브라우저를 기준으로 위치해있다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective:0; */</span></span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective: 10px; */</span></span><br><span class="line">  <span class="comment">/*   will-change: perspective; */</span></span><br><span class="line">  <span class="comment">/*   will-change: transform; */</span></span><br><span class="line">  <span class="comment">/*   filter:opacity(); */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p-absolute</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/containingBlcok2.png" alt="컨테이닝 블록 예시2"></p><ul><li>앞서 설명한 예외를 추가하면 position:relative를 추가한 것과 똑같이 동작하게 된다.</li><li>해당 속성을 가진 요소를 기준으로 위치를 조절한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;컨테이닝-블록&quot;&gt;&lt;a href=&quot;#컨테이닝-블록&quot; class=&quot;headerlink&quot; title=&quot;컨테이닝 블록&quot;&gt;&lt;/a&gt;컨테이닝 블록&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;요쇼의 크기, 위치를 결정하는 요인이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="컨테이닝블록" scheme="https://loco9939.github.io/tags/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D%EB%B8%94%EB%A1%9D/"/>
    
  </entry>
  
  <entry>
    <title>flex vs inline-flex</title>
    <link href="https://loco9939.github.io/2023/08/07/Daily/flex-vs-inline-flex/"/>
    <id>https://loco9939.github.io/2023/08/07/Daily/flex-vs-inline-flex/</id>
    <published>2023-08-07T11:15:13.000Z</published>
    <updated>2023-08-07T11:17:52.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-vs-inline-flex"><a href="#flex-vs-inline-flex" class="headerlink" title="flex vs inline-flex"></a>flex vs inline-flex</h1><ul><li>flex로 지정된 flex container는 block 요소 성향</li><li>inline-flex로 지정된 inline-flex container는 inline 요소 성향</li></ul><p><img src="/../../images/inline_flex.png" alt="inline-flex"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex-vs-inline-flex&quot;&gt;&lt;a href=&quot;#flex-vs-inline-flex&quot; class=&quot;headerlink&quot; title=&quot;flex vs inline-flex&quot;&gt;&lt;/a&gt;flex vs inline-flex&lt;/h1&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="inline-flex" scheme="https://loco9939.github.io/tags/inline-flex/"/>
    
  </entry>
  
  <entry>
    <title>hr 태그 사용하지 않고 가로선 스타일링 하기</title>
    <link href="https://loco9939.github.io/2023/08/06/Daily/hr-%ED%83%9C%EA%B7%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EA%B0%80%EB%A1%9C%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/06/Daily/hr-%ED%83%9C%EA%B7%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EA%B0%80%EB%A1%9C%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-06T14:16:50.000Z</published>
    <updated>2023-08-06T14:21:24.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h1><p>hr 태그는 콘텐츠 내용에서 주제가 바뀔 때, 사용하는 수평 가로선이다.</p><p>HTML 문서에서 주로 내용을 구분하거나 주제의 변화를 정의한다.</p><h2 id="HTML5에서-변경된-사항"><a href="#HTML5에서-변경된-사항" class="headerlink" title="HTML5에서 변경된 사항"></a>HTML5에서 변경된 사항</h2><ul><li>HTML5 이전에서는 단순히 가로선을 나타냈지만, HTML5에서는 주제의 흐름 변경을 나타내도록 변경되었다.</li><li>시각적인 의미보다는 의미적 용어(semantic term)로 사용된다.</li></ul><blockquote><p>또한, HTML5에서는 hr 요소의 layout을 더 이상 지원하지 않으며 CSS를 대신 사용하도록 변경되었다.</p></blockquote><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.news</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span> <span class="built_in">linear-gradient</span>(to right, <span class="number">#aaa</span>, <span class="number">#fff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>news라는 클래스의 가상 선택자로 css 스타일링 해줄 수 있다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h1&gt;&lt;p&gt;hr 태그는 콘텐츠 내용에서 주제가 바뀔 때, 사용하는 수평 가로선이다.&lt;/p&gt;
&lt;p&gt;HTML 문서에서 주로 내용을 구분하거나</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>텍스트 말줄임표 처리</title>
    <link href="https://loco9939.github.io/2023/08/05/Daily/%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%90%EC%A4%84%EC%9E%84%ED%91%9C-%EC%B2%98%EB%A6%AC/"/>
    <id>https://loco9939.github.io/2023/08/05/Daily/%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%90%EC%A4%84%EC%9E%84%ED%91%9C-%EC%B2%98%EB%A6%AC/</id>
    <published>2023-08-04T15:21:32.000Z</published>
    <updated>2023-08-04T15:24:49.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우"><a href="#한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우" class="headerlink" title="한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우"></a>한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h2 id="멀티라인인-경우"><a href="#멀티라인인-경우" class="headerlink" title="멀티라인인 경우"></a>멀티라인인 경우</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Webkit 기반 브라우저 (Chrome, Safari 등)에서 적용 가능하다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우&quot;&gt;&lt;a href=&quot;#한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우&quot; class=&quot;headerlink&quot; title=&quot;한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우&quot;&gt;&lt;/a&gt;한줄이</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>웹 폰트 적용하기</title>
    <link href="https://loco9939.github.io/2023/08/04/Daily/%EC%9B%B9-%ED%8F%B0%ED%8A%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/04/Daily/%EC%9B%B9-%ED%8F%B0%ED%8A%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-04T14:37:54.000Z</published>
    <updated>2023-08-04T14:40:48.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-import-방식으-CSS-최상단에-복붙"><a href="#1-import-방식으-CSS-최상단에-복붙" class="headerlink" title="1. @import 방식으 CSS 최상단에 복붙"></a>1. @import 방식으 CSS 최상단에 복붙</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.4/dist/web/static/pretendard.css&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="2-font-family-설정"><a href="#2-font-family-설정" class="headerlink" title="2. font-family 설정"></a>2. font-family 설정</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto,</span><br><span class="line">    <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Apple SD Gothic Neo&quot;</span>, <span class="string">&quot;Noto Sans KR&quot;</span>, <span class="string">&quot;Malgun Gothic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>font-family는 하나로 정해두고 굵기는 원하는 부분에서 font-weight로 조절한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-import-방식으-CSS-최상단에-복붙&quot;&gt;&lt;a href=&quot;#1-import-방식으-CSS-최상단에-복붙&quot; class=&quot;headerlink&quot; title=&quot;1. @import 방식으 CSS 최상단에 복붙&quot;&gt;&lt;/a&gt;1. @import 방</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="font" scheme="https://loco9939.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>HTML이란?</title>
    <link href="https://loco9939.github.io/2023/08/03/Daily/HTML%EC%9D%B4%EB%9E%80/"/>
    <id>https://loco9939.github.io/2023/08/03/Daily/HTML%EC%9D%B4%EB%9E%80/</id>
    <published>2023-08-03T12:23:10.000Z</published>
    <updated>2023-08-03T12:26:29.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-역사"><a href="#HTML5-역사" class="headerlink" title="HTML5 역사"></a>HTML5 역사</h1><ul><li><p>W3C가 XHTML 2.0을 만들고 있었는데 하위 호환상 문제가 있어서 개발을 접었다</p></li><li><p>이후 2004년 브라우저 3대장(애플,모질라,오페라 sw)이 공동으로 설립한 WHATWG(Web Hypertext Application Technology Working Group)가 W3C와 별개로 Web Application 1.0과 Web Forms 2.0 만들어 냈다.</p></li><li><p>그리하여 WHATWG의 표준안을 대부분 수용하여 HTML5가 탄생하게 되었다.</p></li><li><p>초기의 웹은 단순히 하이퍼텍스트 문서(HTML)를 웹 브라우저에 나타내는 수준으로, 웹표준 기술이 지원하지 못하는 부분을 비표준적인 태그들과 Active X, Flash, Flex, SilverLight 등의 써드파티(Third Party) 플러그인이 대신하였다.</p></li><li><p>이로 인해 여러 웹브라우저별로 화면이 다르게 보이거나 특정 웹브라우저에서만 동작하는 웹 애플리케이션이 만들어지는 등 각종 호환성 문제가 발생하였습니다. 그 결과 개발자에게는 개발의 어려움을, 사용자에게는 웹 브라우저 선택 제한과 각종 플러그인의 설치라는 불편함을 안겨주었다.</p></li><li><p>이러한 문제점과 기능적인 한계를 안고 있던 기존 HTML은 HTML5에서 새롭게 추가된 요소와 다양한 API들을 통해 한 단계 발전된 웹 구현과 접근성 및 호환성 극대화를 목표로 삼게 되었다.</p></li></ul><h2 id="XHTML과-HTML-차이점"><a href="#XHTML과-HTML-차이점" class="headerlink" title="XHTML과 HTML 차이점"></a>XHTML과 HTML 차이점</h2><p>둘다 표준이지만 문법이 다르다. XHTML이 조금 더 엄격한 특징을 가진다.</p><p>XHTML은 XML로 재구성된 문법이다.</p><table><thead><tr><th>HTML</th><th>XHTML</th></tr></thead><tbody><tr><td></td><td>DOCTYPE 반드시 명시</td></tr><tr><td></td><td><code>&lt;html&gt;</code> 태그의 xmlns 속성 반드시 명시</td></tr><tr><td><code>&lt;img&gt;</code></td><td><code>&lt;img /&gt;</code></td></tr><tr><td>대소문자 구분 x</td><td>태그는 반드시 소문자 사용</td></tr><tr><td></td><td>반드시 하나의 root 요소를 포함해야 한다.</td></tr><tr><td></td><td>속성 이름도 반드시 소문자 사용</td></tr><tr><td></td><td>속성값 반드시 따옴표로 감싼다</td></tr><tr><td>속성값 생략 가능 <code>&lt;input checked&gt;</code></td><td>속성값 생략 불가 <code>&lt;input checked = “check” /&gt;</code></td></tr><tr><td></td><td><code>&lt;img&gt;</code> 태그에 alt 반드시 명시</td></tr><tr><td></td><td>텍스트는 반드시 태그로 감싸야한다.</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML5-역사&quot;&gt;&lt;a href=&quot;#HTML5-역사&quot; class=&quot;headerlink&quot; title=&quot;HTML5 역사&quot;&gt;&lt;/a&gt;HTML5 역사&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;W3C가 XHTML 2.0을 만들고 있었는데 하위 호환상 문제가 있</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>원하는 요소를 제외한 영역 클릭 시 함수 실행하기</title>
    <link href="https://loco9939.github.io/2023/08/02/Daily/%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%A0%9C%EC%99%B8%ED%95%9C-%EC%98%81%EC%97%AD-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/02/Daily/%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%A0%9C%EC%99%B8%ED%95%9C-%EC%98%81%EC%97%AD-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/</id>
    <published>2023-08-02T13:42:39.000Z</published>
    <updated>2023-08-02T14:12:58.016Z</updated>
    
    <content type="html"><![CDATA[<p>흔히 웹을 사용하면서 select 태그를 클릭해서 options 들이 나타났을 때, select 태그 내부의 option을 클릭하면 해당 option이 선택되고, option 외부를 클릭했을 때, 나타났던 option들이 사라지도록 구현된 웹을 많이 경험했을 것이다.</p><p>나도 그래프를 CustomLegend의 요소를 클릭했을 때, 클릭한 Legend의 Line 그래프를 highlight 시켜주고, CustomLegend 내부의 요소 이외의 영역을 클릭했을 때, 클릭한 요소를 해제하도록 구현해보았다.</p><h3 id="1-선택된-그래프의-x축-값을-상태로-관리한다"><a href="#1-선택된-그래프의-x축-값을-상태로-관리한다" class="headerlink" title="1. 선택된 그래프의 x축 값을 상태로 관리한다."></a>1. 선택된 그래프의 x축 값을 상태로 관리한다.</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [clickedGraph, setClickedGraph] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-CustomLegend에-이벤트-위임을-해준다"><a href="#2-CustomLegend에-이벤트-위임을-해준다" class="headerlink" title="2. CustomLegend에 이벤트 위임을 해준다."></a>2. CustomLegend에 이벤트 위임을 해준다.</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;CUSTOM_LEGEND&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((elem) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elem.name&#125;</span>&gt;</span>&#123;elem.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>CustomLegend의 ul 태그에 id를 부여한다.</li><li>li 요소를 클릭 이벤트를 이벤트 위임을 통해 이벤트 발생을 캐치할 수 있다.</li></ul><h3 id="3-이벤트-핸들러-생성"><a href="#3-이벤트-핸들러-생성" class="headerlink" title="3. 이벤트 핸들러 생성"></a>3. 이벤트 핸들러 생성</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickGraph</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = e.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line">  <span class="title function_">setClickedGraph</span>(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickOutside</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> parentElem = e.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!targetElem.<span class="title function_">closest</span>(<span class="string">&quot;#CUSTOM_LEGEND&quot;</span>)) &#123;</span><br><span class="line">    <span class="title function_">setClickedGraph</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>클릭이벤트가 발생한 요소의 가장 가까운 요소 중 id가 <code>CUSTOM_LEGEND</code>인 요소가 없으면 clickedGraph의 값을 빈 값으로 초기화 시킨다.</li></ul><h3 id="4-브라우저에-이벤트-등록"><a href="#4-브라우저에-이벤트-등록" class="headerlink" title="4. 브라우저에 이벤트 등록"></a>4. 브라우저에 이벤트 등록</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClickOutside);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClickOutside);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>내가 지정한 영역은 ul 태그 안이고 내가 지정하지 않은 외부의 영역을 모두 다루기 위해서는 브라우저에 이벤트를 등록해줘야한다.</li><li>useEffect는 함수형 컴포넌트에서 리액트 컴포넌트의 라이프사이클에 원하는 함수를 실행할 수 있도록 도와주는 훅이다.<ul><li>return으로 함수를 반환하면 해당 함수는 컴포넌트가 소멸할 때, 실행된다.</li></ul></li></ul><blockquote><p>렌더링 되기 이전에 브라우저에 이벤트를 등록해주고 해당 컴포넌트가 소멸할 때, 이벤트를 제거해줘야 컴포넌트가 렌더링 될 때마다 이벤트가 중복으로 등록되지 않아 성능상 문제를 해결할 수 있다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;흔히 웹을 사용하면서 select 태그를 클릭해서 options 들이 나타났을 때, select 태그 내부의 option을 클릭하면 해당 option이 선택되고, option 외부를 클릭했을 때, 나타났던 option들이 사라지도록 구현된 웹을 </summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="이벤트 위임" scheme="https://loco9939.github.io/tags/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 날짜 쉽게 다루기</title>
    <link href="https://loco9939.github.io/2023/08/01/Daily/JavaScript-%EB%82%A0%EC%A7%9C-%EC%89%BD%EA%B2%8C-%EB%8B%A4%EB%A3%A8%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/08/01/Daily/JavaScript-%EB%82%A0%EC%A7%9C-%EC%89%BD%EA%B2%8C-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</id>
    <published>2023-08-01T13:29:01.000Z</published>
    <updated>2023-08-01T13:53:32.496Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트에서 날짜는 Date 객체로 다루곤 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Tue Aug 01 2023 22:32:45 GMT+0900 (Korean Standard Time)</span></span><br></pre></td></tr></table></figure><ul><li>1970년 1월 1일 UTC(국제표준시) 자정으로부터 지난 시간을 밀리초로 나타낸다.</li></ul><p>Date 객체도 다양한 메서드를 제공하는데, 개발자가 이를 다루기에 직관적이지 못하여 다루기가 까다롭다.</p><p>매번 chatGPT한테 물어볼 수도 없고 ..ㅎㅎ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = today.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">const</span> day = today.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="keyword">const</span> month = today.<span class="title function_">getMonth</span>();</span><br><span class="line"><span class="keyword">const</span> hours = today.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = today.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> ms = today.<span class="title function_">getMilliseconds</span>();</span><br><span class="line"><span class="keyword">const</span> sec = today.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(today); <span class="comment">// Tue Aug 01 2023 22:32:45 GMT+0900 (Korean Standard Time)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(day); <span class="comment">// 2 (0~6) 일 ~ 토</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(month); <span class="comment">// 7 (0~11)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hours); <span class="comment">// 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minutes); <span class="comment">// 32</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ms); <span class="comment">// 122</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sec); <span class="comment">// 45</span></span><br></pre></td></tr></table></figure><ul><li>day를 숫자로 표현해주고 있으니 직관적이지 못하다. 우리나라는 월요일부터 시작으로 세는 사람이 많은데 일요일부터 시작하니…</li><li>month도 왜 0부터 시작하는 것인지.. ㅋㅋ</li></ul><p>그래서 날짜를 좀 더 쉽게 다루기 위해 다양한 날짜 라이브러리가 나왔다.</p><p>오늘은 그 중 <code>date-fns</code> 라이브러리를 알아볼 것이다.</p><h1 id="date-fns"><a href="#date-fns" class="headerlink" title="date-fns"></a>date-fns</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install date-fns --save</span><br></pre></td></tr></table></figure><p>설치는 다음 명령어로 설치하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format, compareAsc &#125; <span class="keyword">from</span> <span class="string">&quot;date-fns&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">format</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">11</span>), <span class="string">&quot;MM/dd/yyyy&quot;</span>);</span><br><span class="line"><span class="comment">//=&gt; &#x27;02/11/2014&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dates = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1995</span>, <span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1987</span>, <span class="number">1</span>, <span class="number">11</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1989</span>, <span class="number">6</span>, <span class="number">10</span>),</span><br><span class="line">];</span><br><span class="line">dates.<span class="title function_">sort</span>(compareAsc);</span><br><span class="line"><span class="comment">//=&gt; [</span></span><br><span class="line"><span class="comment">//   Wed Feb 11 1987 00:00:00,</span></span><br><span class="line"><span class="comment">//   Mon Jul 10 1989 00:00:00,</span></span><br><span class="line"><span class="comment">//   Sun Jul 02 1995 00:00:00</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><ul><li>format 메서드를 사용하여 날짜를 원하는 형식으로 바꿀 수 있다.</li></ul><p>그 외에도 날짜를 서로 비교하여 우선순위를 매기거나 날짜를 더하고 뺄 수 있는 등 다양한 메서드를 사용하여 자유자재로 날짜를 다룰 수 있다.</p><p>예시로 날짜를 빼주는 메서드인 sub메서드만 알아보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subtract the following duration from 15 June 2017 15:29:20</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sub</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">29</span>, <span class="number">20</span>), &#123;</span><br><span class="line">  <span class="attr">years</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">months</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">weeks</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">days</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">hours</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">minutes</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">seconds</span>: <span class="number">30</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//=&gt; Mon Sep 1 2014 10:19:50</span></span><br></pre></td></tr></table></figure><ul><li>2017년에서 2년을 뺀다.</li><li>6월에서 9개월을 뺀다.</li><li>15일에서 1주일(7일)을 뺀다</li><li>나머지 8일에서 7일을 뺀다.</li><li>15시간에서 5시간을 뺀다.</li><li>29분에서 9분을 뺀다.</li><li>20초에서 30초를 뺀다.</li></ul><p>결과값은 2014년 9월 1일 월요일 10시 19분 50초가 나온다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자바스크립트에서 날짜는 Date 객체로 다루곤 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="date-fns" scheme="https://loco9939.github.io/tags/date-fns/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript의 var, let, const 키워드에 대해 설명하라</title>
    <link href="https://loco9939.github.io/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/"/>
    <id>https://loco9939.github.io/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</id>
    <published>2023-07-31T13:39:28.000Z</published>
    <updated>2023-07-31T13:58:56.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var-키워드"><a href="#var-키워드" class="headerlink" title="var 키워드"></a>var 키워드</h1><ul><li>함수레벨 스코프</li><li>생략 가능</li><li>변수 재선언, 재할당 가능</li><li>변수 호이스팅: 선언 이전에 참조할 수 있다.</li><li>전역 변수로 선언 시 전역 객체의 프로퍼티로 등록</li></ul><h1 id="let-키워드"><a href="#let-키워드" class="headerlink" title="let 키워드"></a>let 키워드</h1><ul><li>블록레벨 스코프</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let foo = 123; // 전역 변수</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let foo = 456; // 지역 변수</span><br><span class="line">  let bar = 456; // 지역 변수</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(foo); // 123</span><br><span class="line">console.log(bar); // ReferenceError: bar is not defined</span><br></pre></td></tr></table></figure><ul><li>재선언 불가</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">456</span>; <span class="comment">// 중복 선언 허용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">456</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;bar&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="let-키워드의-호이스팅"><a href="#let-키워드의-호이스팅" class="headerlink" title="let 키워드의 호이스팅"></a>let 키워드의 호이스팅</h2><p><img src="/../../images/var%20hoisting.png"></p><p><code>var</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 동시에 일어난다.</p><p><img src="/../../images/let%20hoisting.png"></p><p>하지만 <code>let</code>, <code>const</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 분리되어 진행된다.</p><h1 id="const-키워드"><a href="#const-키워드" class="headerlink" title="const 키워드"></a>const 키워드</h1><ul><li>재할당, 재선언 불가</li><li>상수를 주로 사용</li><li>변수 자체를 재할당할 순 없지만 객체의 프로퍼티는 변경 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 변수는 재할당이 금지된다.</span></span><br><span class="line"><span class="comment">// user = &#123;&#125;; // TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 내용은 변경할 수 있다.</span></span><br><span class="line">user.<span class="property">name</span> = <span class="string">&quot;Kim&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user); <span class="comment">// &#123; name: &#x27;Kim&#x27; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;var-키워드&quot;&gt;&lt;a href=&quot;#var-키워드&quot; class=&quot;headerlink&quot; title=&quot;var 키워드&quot;&gt;&lt;/a&gt;var 키워드&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;함수레벨 스코프&lt;/li&gt;
&lt;li&gt;생략 가능&lt;/li&gt;
&lt;li&gt;변수 재선언, 재할당</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript의 변수란?</title>
    <link href="https://loco9939.github.io/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/"/>
    <id>https://loco9939.github.io/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/</id>
    <published>2023-07-30T14:45:25.000Z</published>
    <updated>2023-07-30T14:58:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.</p><p>연산결과를 재사용하기 위해서는 메모리에 저장하고 <strong>메모리 주소</strong>를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</p><blockquote><p>메모리 주소에 직접 접근하는 것은 위험하다. 가령 운영체제가 사용하고 있는 값을 변경하면 시스템을 멈추게 하는 치명적인 오류가 발생할 수 있기 때문에 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.</p></blockquote><p><span style="font-size:18px">변수란, 하나의 값을 저장하기 위해 확보한 메모리 공간 또는 메모리 공간을 식별하기 위해 붙힌 이름이다.</span></p><ul><li>변수는 인터프리터나 컴파일러를 통해 값이 저장된 메모리 주소로 치환되어 실행된다.</li><li>자바스크립트 엔진은 변수 이름과 매핑된 메모리 주소를 통해 메모리 공간에 접근하여 저장된 값을 반환한다.</li></ul><h2 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h2><p>변수는 선언단계에서 변수 이름을 등록하여 자바스크립트 엔진에게 변수의 존재를 알린다.</p><p>또한 초기화 단계에서 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(score); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> score;</span><br></pre></td></tr></table></figure><p><span style="font-size:18px">모든 선언문은 런타임 이전에 먼저 실행된다.</span></p><h2 id="변수-할당"><a href="#변수-할당" class="headerlink" title="변수 할당"></a>변수 할당</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>변수 할당단계는 변수에 값을 저장하는 것을 말한다.</p><ul><li>선언과 할당이 한줄에 있어도 선언과 할당이 실행되는 시점이 다르다.</li><li><strong>값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임때 실행된다.</strong></li></ul><blockquote><p>변수에 값을 할당할 때, undefined가 있던 메모리 공간을 지우고 값을 저장하는 것이 아닌, 새로운 메모리 공간을 확보한 뒤 그곳에 새로운 값을 저장하고 해당 변수의 메모리 주소를 연결한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.&lt;/p&gt;
&lt;p&gt;연산결과를 재사용하기 위해서는 메모리에 저장하고 &lt;strong&gt;메모리 주소&lt;/strong&gt;를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
    <category term="변수" scheme="https://loco9939.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Recharts - Legend 커스터마이징</title>
    <link href="https://loco9939.github.io/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/"/>
    <id>https://loco9939.github.io/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/</id>
    <published>2023-07-29T03:47:43.000Z</published>
    <updated>2023-07-29T04:10:21.036Z</updated>
    
    <content type="html"><![CDATA[<p>저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.</p><p>이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.</p><h3 id="1-CustomLegend-컴포넌트"><a href="#1-CustomLegend-컴포넌트" class="headerlink" title="1. CustomLegend 컴포넌트"></a>1. CustomLegend 컴포넌트</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>예시를 위해 타입은 any로 설정하였다.</li><li>Legend의 각 li에 mouse 이벤트를 할당하였다.</li><li>마우스 이벤트는 호버된 데이터를 제외한 데이터들의 opacity를 줄여서 해당 데이터만 highlight 되도록 한다.</li></ul><h3 id="2-CustomLegend의-props"><a href="#2-CustomLegend의-props" class="headerlink" title="2. CustomLegend의 props"></a>2. CustomLegend의 props</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">    key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">    prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그런데, 해당 데이터에 호버를 해도 모든 데이터의 opacity가 줄어드는 문제가 발생했다.</p><p>그 이유는 Legend에서의 props와 customLegend의 props가 달라서 mouse 이벤트가 잘못 동작했기 때문이다.</p><ul><li>이전 mouse 이벤트에서는 props안에 dataKey 속성으로 호버된 데이터 값을 가져올 수 있었다.</li><li>하지만 customLegend에서는 props에 너무나도 많은 속성이 있었고 이 중 나는 target속성의 innerHTML 속성으로 호버된 데이터의 dataKey를 확인하는 로직을 구성하였다.</li></ul><h3 id="3-전체-코드"><a href="#3-전체-코드" class="headerlink" title="3. 전체 코드"></a>3. 전체 코드</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&quot;styles/colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NewPortChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = useState&lt;<span class="built_in">any</span>&gt;(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mappedOpacity = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data[<span class="number">0</span>]).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      prev = &#123; ...prev, [curr]: <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedOpacity);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LineChart</span> <span class="attr">width</span>=<span class="string">&#123;857&#125;</span> <span class="attr">height</span>=<span class="string">&#123;440&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">align</span>=<span class="string">&quot;right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">verticalAlign</span>=<span class="string">&quot;middle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">content</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;<span class="attr">CustomLegend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;Object.keys(data[0]).map((key, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;linear&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity[key]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeLinecap</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&#123;colors.GRAPH[</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NewPortChart</span>;</span><br></pre></td></tr></table></figure><h4 id="기본-CustomLegend"><a href="#기본-CustomLegend" class="headerlink" title="기본 CustomLegend"></a>기본 CustomLegend</h4><p><img src="/../../images/customLegend1.png" alt="기본 customlegend"></p><h4 id="Hover된-데이터만-highlight"><a href="#Hover된-데이터만-highlight" class="headerlink" title="Hover된 데이터만 highlight"></a>Hover된 데이터만 highlight</h4><p><img src="/../../images/customLegend2.png" alt="hover1"><br><img src="/../../images/customLegend3.png" alt="hover2"><br><img src="/../../images/customLegend4.png" alt="hover3"></p><h3 id="추가로…"><a href="#추가로…" class="headerlink" title="추가로…"></a>추가로…</h3><p>색상만 바꿀 것이였다면 왜 CustomLegend까지 쓰면서 복잡하게 시도를 했을까 궁금증이 들 수도 있다.</p><p>디자이너 요구사항이 Legend와 해당 Line 데이터 끝 부분을 선으로 연결해달라는 요청이 있었기 때문에 CustomLegend를 사용해보았다.</p><p>아직 해당 부분은 좀 더 고민이 필요하기 때문에 추후에 포스팅하도록 하겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.&lt;/p&gt;
&lt;p&gt;이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.&lt;/p&gt;
&lt;h3 id=&quot;1-CustomLegend-컴포넌트&quot;</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Recharts" scheme="https://loco9939.github.io/tags/Recharts/"/>
    
  </entry>
  
</feed>
