<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loco&#39;s Dev Blog</title>
  
  <subtitle>Frontend Developer</subtitle>
  <link href="https://loco9939.github.io/atom.xml" rel="self"/>
  
  <link href="https://loco9939.github.io/"/>
  <updated>2023-07-31T13:58:56.188Z</updated>
  <id>https://loco9939.github.io/</id>
  
  <author>
    <name>loco9939</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript의 var, let, const 키워드에 대해 설명하라</title>
    <link href="https://loco9939.github.io/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/"/>
    <id>https://loco9939.github.io/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</id>
    <published>2023-07-31T13:39:28.000Z</published>
    <updated>2023-07-31T13:58:56.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var-키워드"><a href="#var-키워드" class="headerlink" title="var 키워드"></a>var 키워드</h1><ul><li>함수레벨 스코프</li><li>생략 가능</li><li>변수 재선언, 재할당 가능</li><li>변수 호이스팅: 선언 이전에 참조할 수 있다.</li><li>전역 변수로 선언 시 전역 객체의 프로퍼티로 등록</li></ul><h1 id="let-키워드"><a href="#let-키워드" class="headerlink" title="let 키워드"></a>let 키워드</h1><ul><li>블록레벨 스코프</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let foo = 123; // 전역 변수</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let foo = 456; // 지역 변수</span><br><span class="line">  let bar = 456; // 지역 변수</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(foo); // 123</span><br><span class="line">console.log(bar); // ReferenceError: bar is not defined</span><br></pre></td></tr></table></figure><ul><li>재선언 불가</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">456</span>; <span class="comment">// 중복 선언 허용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">456</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;bar&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="let-키워드의-호이스팅"><a href="#let-키워드의-호이스팅" class="headerlink" title="let 키워드의 호이스팅"></a>let 키워드의 호이스팅</h2><p><img src="/../../images/var%20hoisting.png"></p><p><code>var</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 동시에 일어난다.</p><p><img src="/../../images/let%20hoisting.png"></p><p>하지만 <code>let</code>, <code>const</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 분리되어 진행된다.</p><h1 id="const-키워드"><a href="#const-키워드" class="headerlink" title="const 키워드"></a>const 키워드</h1><ul><li>재할당, 재선언 불가</li><li>상수를 주로 사용</li><li>변수 자체를 재할당할 순 없지만 객체의 프로퍼티는 변경 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 변수는 재할당이 금지된다.</span></span><br><span class="line"><span class="comment">// user = &#123;&#125;; // TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 내용은 변경할 수 있다.</span></span><br><span class="line">user.<span class="property">name</span> = <span class="string">&quot;Kim&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user); <span class="comment">// &#123; name: &#x27;Kim&#x27; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;var-키워드&quot;&gt;&lt;a href=&quot;#var-키워드&quot; class=&quot;headerlink&quot; title=&quot;var 키워드&quot;&gt;&lt;/a&gt;var 키워드&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;함수레벨 스코프&lt;/li&gt;
&lt;li&gt;생략 가능&lt;/li&gt;
&lt;li&gt;변수 재선언, 재할당</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript의 변수란?</title>
    <link href="https://loco9939.github.io/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/"/>
    <id>https://loco9939.github.io/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/</id>
    <published>2023-07-30T14:45:25.000Z</published>
    <updated>2023-07-30T14:58:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.</p><p>연산결과를 재사용하기 위해서는 메모리에 저장하고 <strong>메모리 주소</strong>를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</p><blockquote><p>메모리 주소에 직접 접근하는 것은 위험하다. 가령 운영체제가 사용하고 있는 값을 변경하면 시스템을 멈추게 하는 치명적인 오류가 발생할 수 있기 때문에 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.</p></blockquote><p><span style="font-size:18px">변수란, 하나의 값을 저장하기 위해 확보한 메모리 공간 또는 메모리 공간을 식별하기 위해 붙힌 이름이다.</span></p><ul><li>변수는 인터프리터나 컴파일러를 통해 값이 저장된 메모리 주소로 치환되어 실행된다.</li><li>자바스크립트 엔진은 변수 이름과 매핑된 메모리 주소를 통해 메모리 공간에 접근하여 저장된 값을 반환한다.</li></ul><h2 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h2><p>변수는 선언단계에서 변수 이름을 등록하여 자바스크립트 엔진에게 변수의 존재를 알린다.</p><p>또한 초기화 단계에서 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(score); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> score;</span><br></pre></td></tr></table></figure><p><span style="font-size:18px">모든 선언문은 런타임 이전에 먼저 실행된다.</span></p><h2 id="변수-할당"><a href="#변수-할당" class="headerlink" title="변수 할당"></a>변수 할당</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>변수 할당단계는 변수에 값을 저장하는 것을 말한다.</p><ul><li>선언과 할당이 한줄에 있어도 선언과 할당이 실행되는 시점이 다르다.</li><li><strong>값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임때 실행된다.</strong></li></ul><blockquote><p>변수에 값을 할당할 때, undefined가 있던 메모리 공간을 지우고 값을 저장하는 것이 아닌, 새로운 메모리 공간을 확보한 뒤 그곳에 새로운 값을 저장하고 해당 변수의 메모리 주소를 연결한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.&lt;/p&gt;
&lt;p&gt;연산결과를 재사용하기 위해서는 메모리에 저장하고 &lt;strong&gt;메모리 주소&lt;/strong&gt;를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</summary>
      
    
    
    
    <category term="CS" scheme="https://loco9939.github.io/categories/CS/"/>
    
    
    <category term="변수" scheme="https://loco9939.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Recharts - Legend 커스터마이징</title>
    <link href="https://loco9939.github.io/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/"/>
    <id>https://loco9939.github.io/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/</id>
    <published>2023-07-29T03:47:43.000Z</published>
    <updated>2023-07-29T04:10:21.036Z</updated>
    
    <content type="html"><![CDATA[<p>저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.</p><p>이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.</p><h3 id="1-CustomLegend-컴포넌트"><a href="#1-CustomLegend-컴포넌트" class="headerlink" title="1. CustomLegend 컴포넌트"></a>1. CustomLegend 컴포넌트</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>예시를 위해 타입은 any로 설정하였다.</li><li>Legend의 각 li에 mouse 이벤트를 할당하였다.</li><li>마우스 이벤트는 호버된 데이터를 제외한 데이터들의 opacity를 줄여서 해당 데이터만 highlight 되도록 한다.</li></ul><h3 id="2-CustomLegend의-props"><a href="#2-CustomLegend의-props" class="headerlink" title="2. CustomLegend의 props"></a>2. CustomLegend의 props</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">    key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">    prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그런데, 해당 데이터에 호버를 해도 모든 데이터의 opacity가 줄어드는 문제가 발생했다.</p><p>그 이유는 Legend에서의 props와 customLegend의 props가 달라서 mouse 이벤트가 잘못 동작했기 때문이다.</p><ul><li>이전 mouse 이벤트에서는 props안에 dataKey 속성으로 호버된 데이터 값을 가져올 수 있었다.</li><li>하지만 customLegend에서는 props에 너무나도 많은 속성이 있었고 이 중 나는 target속성의 innerHTML 속성으로 호버된 데이터의 dataKey를 확인하는 로직을 구성하였다.</li></ul><h3 id="3-전체-코드"><a href="#3-전체-코드" class="headerlink" title="3. 전체 코드"></a>3. 전체 코드</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&quot;styles/colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NewPortChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = useState&lt;<span class="built_in">any</span>&gt;(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mappedOpacity = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data[<span class="number">0</span>]).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      prev = &#123; ...prev, [curr]: <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedOpacity);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LineChart</span> <span class="attr">width</span>=<span class="string">&#123;857&#125;</span> <span class="attr">height</span>=<span class="string">&#123;440&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">align</span>=<span class="string">&quot;right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">verticalAlign</span>=<span class="string">&quot;middle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">content</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;<span class="attr">CustomLegend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;Object.keys(data[0]).map((key, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;linear&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity[key]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeLinecap</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&#123;colors.GRAPH[</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NewPortChart</span>;</span><br></pre></td></tr></table></figure><h4 id="기본-CustomLegend"><a href="#기본-CustomLegend" class="headerlink" title="기본 CustomLegend"></a>기본 CustomLegend</h4><p><img src="/../../images/customLegend1.png" alt="기본 customlegend"></p><h4 id="Hover된-데이터만-highlight"><a href="#Hover된-데이터만-highlight" class="headerlink" title="Hover된 데이터만 highlight"></a>Hover된 데이터만 highlight</h4><p><img src="/../../images/customLegend2.png" alt="hover1"><br><img src="/../../images/customLegend3.png" alt="hover2"><br><img src="/../../images/customLegend4.png" alt="hover3"></p><h3 id="추가로…"><a href="#추가로…" class="headerlink" title="추가로…"></a>추가로…</h3><p>색상만 바꿀 것이였다면 왜 CustomLegend까지 쓰면서 복잡하게 시도를 했을까 궁금증이 들 수도 있다.</p><p>디자이너 요구사항이 Legend와 해당 Line 데이터 끝 부분을 선으로 연결해달라는 요청이 있었기 때문에 CustomLegend를 사용해보았다.</p><p>아직 해당 부분은 좀 더 고민이 필요하기 때문에 추후에 포스팅하도록 하겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.&lt;/p&gt;
&lt;p&gt;이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.&lt;/p&gt;
&lt;h3 id=&quot;1-CustomLegend-컴포넌트&quot;</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Recharts" scheme="https://loco9939.github.io/tags/Recharts/"/>
    
  </entry>
  
  <entry>
    <title>Recharts 커스터마이징 도전기 1</title>
    <link href="https://loco9939.github.io/2023/07/27/Daily/Recharts-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%8F%84%EC%A0%84%EA%B8%B0-1/"/>
    <id>https://loco9939.github.io/2023/07/27/Daily/Recharts-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%8F%84%EC%A0%84%EA%B8%B0-1/</id>
    <published>2023-07-27T14:03:13.000Z</published>
    <updated>2023-07-27T14:13:23.784Z</updated>
    
    <content type="html"><![CDATA[<p>서비스가 주식 관련 서비스이다 보니 차트를 사용할 일이 잦다.</p><p>차트를 직접 구현하자니 너무 공수가 많이 들 것 같아 Recharts 라이브러리를 자주 사용하고 있다.</p><p>하지만 공식문서에서 모든게 나와있지 않아서 ChatGPT의 도움도 많이 받고 있다. 그래도 꽤 쓸만한 라이브러리이다.</p><p>오늘은 Recharts 라이브러리로 legend에 hover했을 때, hover된 데이터만 highlight 되도록 구현해볼 것이다.</p><p><img src="/../../images/chart1.png" alt="chart"></p><p>우선 기본적인 Line 차트를 렌더링한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">XAxis</span>,</span><br><span class="line">  <span class="title class_">YAxis</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page A&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">4000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">2400</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2400</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page B&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">1398</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2210</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page C&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">9800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2290</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page D&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2780</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">3908</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page E&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">1890</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">4800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2181</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page F&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2390</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">3800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2500</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page G&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">3490</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">4300</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MultiLineCharts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = <span class="title function_">useState</span>(&#123; <span class="attr">uv</span>: <span class="number">1</span>, <span class="attr">pv</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dataKey &#125; = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mappedObj = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params">o</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dataKey &#125; = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mappedObj = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&#123;300&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LineChart</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;300&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">data</span>=<span class="string">&#123;data&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">margin</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">top:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">right:</span> <span class="attr">30</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">bottom:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">XAxis</span> <span class="attr">dataKey</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">YAxis</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;monotone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&quot;pv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity.pv&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&quot;#8884d8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;&#123;</span> <span class="attr">r:</span> <span class="attr">8</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;monotone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&quot;uv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity.uv&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&quot;#82ca9d&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MultiLineCharts</span>;</span><br></pre></td></tr></table></figure><ul><li><code>Line</code> 그래프의 <code>opacity</code>를 <code>useState로</code> 관리한다.</li><li><code>Legend에</code> <code>onMouseEnter</code>, <code>onMouseLeave</code> 이벤트를 할당한다.</li><li>여기서 유저가 이벤트를 발생시킨 요소만 <code>opacity</code>를 두고 나머지 데이터들의 <code>opacity</code>를 줄여주기 위해 <code>opacity</code> 객체를 재구성했다.</li><li><code>Object.entries()</code>와 <code>reduce()</code>를 사용하여 편리하게 객체를 재구성할 수 있다.</li></ul><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/../../images/chart_hover1.png" alt="hover chart"></p><ul><li>보라색 Legend Hover 시</li></ul><p><img src="/../../images/chart_hover2.png" alt="hover_chart2"></p><ul><li>연두색 Legend Hover 시</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;서비스가 주식 관련 서비스이다 보니 차트를 사용할 일이 잦다.&lt;/p&gt;
&lt;p&gt;차트를 직접 구현하자니 너무 공수가 많이 들 것 같아 Recharts 라이브러리를 자주 사용하고 있다.&lt;/p&gt;
&lt;p&gt;하지만 공식문서에서 모든게 나와있지 않아서 ChatGP</summary>
      
    
    
    
    <category term="Daily" scheme="https://loco9939.github.io/categories/Daily/"/>
    
    
    <category term="Recharts" scheme="https://loco9939.github.io/tags/Recharts/"/>
    
  </entry>
  
  <entry>
    <title>CSS - input 포커스 시 placeholder 사라지게 하기</title>
    <link href="https://loco9939.github.io/2023/07/26/CSS/CSS-input-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EC%8B%9C-placeholder-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/26/CSS/CSS-input-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EC%8B%9C-placeholder-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-26T12:34:19.000Z</published>
    <updated>2023-07-26T12:39:11.509Z</updated>
    
    <content type="html"><![CDATA[<p>input에 입력값을 입력하기 전까지 placeholder는 사라지지 않는다.</p><p>이는 input 창이 포커싱되어있는지 헷갈리게 할 수 있어 UX를 떨어뜨릴 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-webkit-input-placeholder,</span><br><span class="line">textarea:focus::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="comment">/* WebKit browsers */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>:-moz-placeholder,</span><br><span class="line">textarea:focus:-moz-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-moz-placeholder,</span><br><span class="line">textarea:focus::-moz-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>:-ms-input-placeholder,</span><br><span class="line">textarea:focus:-ms-input-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>크로스 브라우징을 고려하여 CSS를 추가해주었다.</li><li>포커스가 되었을 때, placeholder 색상을 투명하게 설정하도록 해준다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;input에 입력값을 입력하기 전까지 placeholder는 사라지지 않는다.&lt;/p&gt;
&lt;p&gt;이는 input 창이 포커싱되어있는지 헷갈리게 할 수 있어 UX를 떨어뜨릴 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="CSS" scheme="https://loco9939.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://loco9939.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript - 객체의 key 값에 유니온 타입 선언하기</title>
    <link href="https://loco9939.github.io/2023/07/25/TypeScript/TypeScript-%EA%B0%9D%EC%B2%B4%EC%9D%98-key-%EA%B0%92%EC%97%90-%EC%9C%A0%EB%8B%88%EC%98%A8-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/25/TypeScript/TypeScript-%EA%B0%9D%EC%B2%B4%EC%9D%98-key-%EA%B0%92%EC%97%90-%EC%9C%A0%EB%8B%88%EC%98%A8-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-25T14:37:36.000Z</published>
    <updated>2023-07-25T14:44:43.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="객체의-key-값에-유니온-타입-선언하기"><a href="#객체의-key-값에-유니온-타입-선언하기" class="headerlink" title="객체의 key 값에 유니온 타입 선언하기"></a>객체의 key 값에 유니온 타입 선언하기</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfoType = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: userInfoType]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../images/key_union.png" alt="유니온 타입 에러"></p><ul><li>“인덱스 시그니처 매개변수는 리터럴 타입이나 제네릭 타입이 될 수 없다.”는 에러가 발생했다.</li><li>매핑된 객체를 대신 사용하라고 알려준다.</li></ul><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfoType = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userType = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> userInfoType]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: userType = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;홍길동&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&quot;서울&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;객체의-key-값에-유니온-타입-선언하기&quot;&gt;&lt;a href=&quot;#객체의-key-값에-유니온-타입-선언하기&quot; class=&quot;headerlink&quot; title=&quot;객체의 key 값에 유니온 타입 선언하기&quot;&gt;&lt;/a&gt;객체의 key 값에 유니온 타입 선언</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://loco9939.github.io/categories/TypeScript/"/>
    
    
    <category term="타입스크립트" scheme="https://loco9939.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>큐 - 클래스로 구현하기</title>
    <link href="https://loco9939.github.io/2023/07/24/Python/DataStructure/Queue/%ED%81%90-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/24/Python/DataStructure/Queue/%ED%81%90-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-24T12:18:36.000Z</published>
    <updated>2023-07-24T14:08:29.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue-클래스로-구현하기"><a href="#Queue-클래스로-구현하기" class="headerlink" title="Queue 클래스로 구현하기"></a>Queue 클래스로 구현하기</h1><p><img src="/../../../../images/en,dequeue.png" alt="enqueue와 dequeue"></p><ul><li>Queue는 입구가 <code>rear</code>이고 출구가 <code>front</code>이다.</li><li>입구쪽에서 데이터를 추가하는 것을 <code>enqueue</code>라고 한다.</li><li>출구쪽에서 데이터를 제거하는 것을 <code>dequeue</code>라고 한다.</li></ul><h3 id="노드-삽입할-때"><a href="#노드-삽입할-때" class="headerlink" title="노드 삽입할 때,"></a>노드 삽입할 때,</h3><ul><li>빈 Queue이면 front, rear가 모두 첫 노드를 가리킨다.</li><li>빈 Queue가 아니면, rear의 next가 새 노드를 가리키고 rear를 새 노드로 옮긴다.</li></ul><h3 id="노드-꺼낼-때"><a href="#노드-꺼낼-때" class="headerlink" title="노드 꺼낼 때,"></a>노드 꺼낼 때,</h3><ul><li>빈 Queue가 되면, front, rear는 모두 None을 가리킨다.</li><li>Queue에 노드가 남아있으면 front를 front의 next로 옮긴다.</li></ul><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.front = <span class="literal">None</span></span><br><span class="line">        self.rear = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.front == <span class="literal">None</span>:</span><br><span class="line">            self.front = node</span><br><span class="line">            self.rear = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.rear.<span class="built_in">next</span> = node</span><br><span class="line">            self.rear = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self,data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.front == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.front</span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            self.front = <span class="literal">None</span></span><br><span class="line">            self.rear = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.front = self.front.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.front == <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Queue-클래스로-구현하기&quot;&gt;&lt;a href=&quot;#Queue-클래스로-구현하기&quot; class=&quot;headerlink&quot; title=&quot;Queue 클래스로 구현하기&quot;&gt;&lt;/a&gt;Queue 클래스로 구현하기&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../.</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>큐 - 개념 및 설명</title>
    <link href="https://loco9939.github.io/2023/07/23/Python/DataStructure/Queue/%ED%81%90-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/"/>
    <id>https://loco9939.github.io/2023/07/23/Python/DataStructure/Queue/%ED%81%90-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/</id>
    <published>2023-07-23T03:08:00.000Z</published>
    <updated>2023-07-23T03:13:00.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue-큐-란"><a href="#Queue-큐-란" class="headerlink" title="Queue(큐)란?"></a>Queue(큐)란?</h1><p>큐는 대기행렬(줄)이다.</p><p>우리가 무언가를 사거나 장소에 들어갈 때 줄을 선 순서를 생각하면 된다.</p><p>많은 양의 자료를 프린터로 출력한다 했을 때, 프린터 상태창을 보면 출력할 자료가 순서대로 들어가있고 <strong>들어간 순서대로 출력되는 것을 알 수 있다.</strong></p><p><img src="/../../../../images/queue.png" alt="queue"></p><p>스택이 한쪽입구가 막힌 상자에 자료를 차곡차곡 쌓는 것이라면, 큐는 입구와 출구가 따로 있는 통로로서 한쪽에서 밀어 넣으면 반대쪽에서 나오는 것이다.</p><ul><li>큐에서는 <code>head</code> 대신 <code>front</code>, <code>tail</code> 대신 <code>rear(or back)</code> 이라 한다.</li><li><code>enqueue</code>: 가장 마지막에 자료를 넣는 것으로 위 그림에서 연결리스트의 <code>append()</code>와 같다.</li><li><code>dequeue</code>: 가장 먼저 들어간 자료를 꺼내는 것으로 연결리스트의 <code>popLeft()</code>와 같다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Queue-큐-란&quot;&gt;&lt;a href=&quot;#Queue-큐-란&quot; class=&quot;headerlink&quot; title=&quot;Queue(큐)란?&quot;&gt;&lt;/a&gt;Queue(큐)란?&lt;/h1&gt;&lt;p&gt;큐는 대기행렬(줄)이다.&lt;/p&gt;
&lt;p&gt;우리가 무언가를 사거나 장소에 들어</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Queue" scheme="https://loco9939.github.io/categories/Python/DataStructure/Queue/"/>
    
    
    <category term="큐" scheme="https://loco9939.github.io/tags/%ED%81%90/"/>
    
  </entry>
  
  <entry>
    <title>CSS 내부 경계(border) 적용하기</title>
    <link href="https://loco9939.github.io/2023/07/22/CSS/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/22/CSS/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-22T00:18:37.000Z</published>
    <updated>2023-07-22T00:34:25.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="내부-경계-border-효과-주기"><a href="#내부-경계-border-효과-주기" class="headerlink" title="내부 경계(border) 효과 주기"></a>내부 경계(border) 효과 주기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><img src="/../../../images/inner_border.png" alt="문제사진"></p><p>CSS로 작업을 하다가 경계가 검정색 바탕 부분과 border에 약간의 단차가 생기는 문제가 있었다.</p><p>마크업 구조는 다음과 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>나의 자산 목표 금액 계산기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>목표 금액 계산기란?<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>h2 태그에 배경색이 검정색이다.</li><li>h2 태그와 형제태그인 div 태그에 보더를 주었더니 단차가 생겼다.</li></ul><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> gray inset;</span><br></pre></td></tr></table></figure><ul><li>box-shadow 효과를 inset으로 주어서 보더 처럼 보이도록 구현했다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;내부-경계-border-효과-주기&quot;&gt;&lt;a href=&quot;#내부-경계-border-효과-주기&quot; class=&quot;headerlink&quot; title=&quot;내부 경계(border) 효과 주기&quot;&gt;&lt;/a&gt;내부 경계(border) 효과 주기&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    <category term="CSS" scheme="https://loco9939.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>스택 - 자신보다 큰 원소 찾기</title>
    <link href="https://loco9939.github.io/2023/07/21/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%9E%90%EC%8B%A0%EB%B3%B4%EB%8B%A4-%ED%81%B0-%EC%9B%90%EC%86%8C-%EC%B0%BE%EA%B8%B0/%EC%8A%A4%ED%83%9D-%EC%9E%90%EC%8B%A0%EB%B3%B4%EB%8B%A4-%ED%81%B0-%EC%9B%90%EC%86%8C-%EC%B0%BE%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/21/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%9E%90%EC%8B%A0%EB%B3%B4%EB%8B%A4-%ED%81%B0-%EC%9B%90%EC%86%8C-%EC%B0%BE%EA%B8%B0/%EC%8A%A4%ED%83%9D-%EC%9E%90%EC%8B%A0%EB%B3%B4%EB%8B%A4-%ED%81%B0-%EC%9B%90%EC%86%8C-%EC%B0%BE%EA%B8%B0/</id>
    <published>2023-07-20T15:01:47.000Z</published>
    <updated>2023-07-20T16:02:06.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>참조: <a href="https://www.geeksforgeeks.org/next-greater-element/">https://www.geeksforgeeks.org/next-greater-element/</a></p><p>음이 아닌 정수 배열이 주어졌을 때, 각 원소의 오른쪽에 있는 원소 중에서 현재 원소보다 큰 값을 출력하되, 가장 근접한 원소를 출력하라. 현재 원소보다 큰 값이 없으면 -1을 출력하라.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">예시 1</span><br><span class="line"></span><br><span class="line">입력: [4, 5, 2, 25]</span><br><span class="line">출력:</span><br><span class="line">4 --&gt; 5</span><br><span class="line">5 --&gt; 25</span><br><span class="line">2 --&gt; 25</span><br><span class="line">25 --&gt; -1</span><br><span class="line">예시 2</span><br><span class="line"></span><br><span class="line">입력: [13, 7, 6, 12]</span><br><span class="line">출력:</span><br><span class="line">13 --&gt; -1</span><br><span class="line">7 --&gt; 12</span><br><span class="line">6 --&gt; 12</span><br><span class="line">12 --&gt; -1</span><br></pre></td></tr></table></figure><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><h3 id="이중반복문"><a href="#이중반복문" class="headerlink" title="이중반복문"></a>이중반복문</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">int_arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(int_arr)):</span><br><span class="line">        <span class="built_in">int</span> = int_arr[i]</span><br><span class="line">        result = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(int_arr)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span> &lt; int_arr[j]:</span><br><span class="line">                result = int_arr[j]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>&#125;</span> --&gt; <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="스택"><a href="#스택" class="headerlink" title="스택"></a>스택</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>*by_stack(int_arr):</span><br><span class="line">    n = <span class="built_in">len</span>(int_arr)</span><br><span class="line">    s = []</span><br><span class="line">    res = [-<span class="number">1</span> <span class="keyword">for</span> * <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(int_arr))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> s:</span><br><span class="line">            <span class="keyword">if</span> s[-<span class="number">1</span>] &gt; int_arr[i]:</span><br><span class="line">                res[i] = s[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s.pop()</span><br><span class="line">        s.append(int_arr[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;int_arr[i]&#125;</span> --&gt; <span class="subst">&#123;res[i]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>현재 원소와 오른쪽 원소를 비교하므로, 오른쪽에서 왼쪽으로 이동하면서 비교하면 수월하다.</li><li>문제에서 요구하는 것은 현재 원소의 오른쪽 값 중 가장 가까운 값이므로, 오른쪽 부터 왼쪽으로 가면서 원소를 저장했다면 꺼낼 때는 <code>역순으로 꺼내서 비교한다.</code></li></ul><ol><li>stack을 빈 상태로 초기화</li><li>res 배열을 -1로 배열 길이 만큼 초기화</li><li>역순으로 순회를 하면서 stack이 비어있으면, 원소를 추가한다.</li><li>만약 stack에 값이 있다면, 스택의 값들과 현재 원소를 비교한다.</li><li>스택의 값이 크다면 해당 원소의 index에 위치하는 res 배열에 스택의 값을 할당하고 해당 원소를 stack 저장</li><li>다음 순회</li><li>만약 스택의 값이 작다면 stack에 마지막 값을 <code>pop</code>한다.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h1&gt;&lt;p&gt;참조: &lt;a href=&quot;https://www.geeksforgeeks.org/next-greater-element/&quot;&gt;http</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>스택 - 후위 표기법2</title>
    <link href="https://loco9939.github.io/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%952/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%952/"/>
    <id>https://loco9939.github.io/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%952/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%952/</id>
    <published>2023-07-19T14:52:34.000Z</published>
    <updated>2023-07-19T15:18:12.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="후위-표기법-2"><a href="#후위-표기법-2" class="headerlink" title="후위 표기법 2"></a>후위 표기법 2</h1><p>소괄호를 포함한 후위 표기법 바꾸기</p><p>소괄호<code>()</code>는 <code>*</code>보다 우선순위가 높다.</p><p>후위 표기법은 우선순위가 높은 것을 먼저 출력하므로, 열린 소괄호가 나오면 스택에 넣는다.</p><p>이후 닫힌 소괄호가 나오면 스택에 열린 소괄호 나올 때 까지 pop하여 연산자를 결과값에 추가한다.</p><ul><li>괄호는 변수에 추가하면 안되므로 스택에서 pop하여 제거한다.</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x.isnumeric():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            s.append(x)</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> s[-<span class="number">1</span>] != <span class="string">&quot;(&quot;</span>:</span><br><span class="line">                result += s.pop()</span><br><span class="line">            s.pop()</span><br><span class="line">        <span class="keyword">elif</span> x <span class="keyword">in</span> priority:</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">and</span> s[-<span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> priority[s[-<span class="number">1</span>]] &lt; priority[x]:</span><br><span class="line">                result += s.pop()</span><br><span class="line">            s.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> s:</span><br><span class="line">        result += s.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><ul><li>코딩테스트를 본다고 생각하고 리스트를 활용하여 위 문제를 풀어보았다.</li><li><code>isnumeric()</code> 함수는 문자열이 숫자인지 판단하는 메서드이다.</li><li>stack의 top을 의미하는 s[-1] 슬라이싱을 활용하였다.</li><li>빈 리스트는 논리값이 False라는 점을 활용하여 while 반복문을 실행했다.</li></ul><h2 id="후위-표기법-계산하기"><a href="#후위-표기법-계산하기" class="headerlink" title="후위 표기법 계산하기"></a>후위 표기법 계산하기</h2><ol><li>문자열을 순회하면서 해당 문자가 숫자면 정수형으로 변환하여 스택에 push</li><li>연산자이면 스택에서 두 수를 pop하여 계산</li><li>스택은 후입선출이므로, 처음 pop한 수를 n2, 두번째 pop한 수를 n1으로 두고 <code>(n1 연산자 n2)</code>로 계산한다.</li><li>계산결과를 스택에 push</li><li>스택에 마지막에 저장된 값이 결과값이다.</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eval_postfix</span>(<span class="params">expression</span>):</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> exp <span class="keyword">in</span> expression:</span><br><span class="line">        <span class="keyword">if</span> exp.isnumeric():</span><br><span class="line">            s.append(<span class="built_in">int</span>(exp))</span><br><span class="line">        <span class="keyword">elif</span> exp != <span class="string">&quot; &quot;</span>:</span><br><span class="line">            n2 = s.pop()</span><br><span class="line">            n1 = s.pop()</span><br><span class="line">            <span class="keyword">if</span> exp == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                res = n1 + n2</span><br><span class="line">            <span class="keyword">elif</span> exp == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                res = n1 - n2</span><br><span class="line">            <span class="keyword">elif</span> exp == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                res = n1 * n2</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = n1 / n2</span><br><span class="line">            s.append(res)</span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;후위-표기법-2&quot;&gt;&lt;a href=&quot;#후위-표기법-2&quot; class=&quot;headerlink&quot; title=&quot;후위 표기법 2&quot;&gt;&lt;/a&gt;후위 표기법 2&lt;/h1&gt;&lt;p&gt;소괄호를 포함한 후위 표기법 바꾸기&lt;/p&gt;
&lt;p&gt;소괄호&lt;code&gt;()&lt;/code&gt;는</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>스택 - 후위 표기법</title>
    <link href="https://loco9939.github.io/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/"/>
    <id>https://loco9939.github.io/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/</id>
    <published>2023-07-19T13:41:59.000Z</published>
    <updated>2023-07-19T14:35:04.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="후위표기법-1"><a href="#후위표기법-1" class="headerlink" title="후위표기법 1"></a>후위표기법 1</h1><p>연산자를 피연산자 뒤에 쓰는 연산기법</p><p>예를 들어, <code>3+5x2</code> 를 중위 표기법이라 하고,</p><p><code>352x+</code>를 후위 표기법이라고 한다.</p><h2 id="계산-방법"><a href="#계산-방법" class="headerlink" title="계산 방법"></a>계산 방법</h2><p><code>3+5x2</code>를 후위 표기법으로 적으면, <code>352x+</code>이다.</p><p><code>352x+</code>를 계산하기 위해서 다음과정을 따른다.</p><ol><li>피연산자(숫자)는 스택에 담는다. <code>[3,5,2]</code></li><li>연산자를 만나면, 스택에서 피연산자 2개를 꺼내 계산한다.</li><li>결과값을 다시 스택에 넣는다. <code>[3,10]</code></li><li>다음 연산자는 <code>+</code>이므로 <code>3+10</code>을 계산한다.</li></ol><ul><li>컴퓨터 입장에서는 후위 표기법이 연산의 우선순위가 명확하다는 장점이 있다.</li></ul><h2 id="중위-표기법을-후위-표기법으로-변환"><a href="#중위-표기법을-후위-표기법으로-변환" class="headerlink" title="중위 표기법을 후위 표기법으로 변환"></a>중위 표기법을 후위 표기법으로 변환</h2><p><code>3+5x2</code>를 후위 표기법으로 바꾸는 과정을 알아보자.</p><ol><li>피연산자 3을 결과값에 추가</li><li><ul><li>연산자 스택에 push</li></ul></li><li>피연산자 5 결과값에 추가</li><li>x 연산자와 스택의 마지막 값인 + 우선순위 비교</li><li>x 연산자가 우선순위 높으므로 스택에 push</li><li>피연산자 2 결과값에 추가</li><li>스택이 빌 때까지 pop하여 결과값에 추가</li></ol><p><code>3x5+2</code>를 후위 표기법으로 바꿔보자.</p><ol><li>피연산자 3을 결과값에 추가</li><li>x 연산자 스택에 push</li><li>피연산자 5 결과값에 추가</li><li><ul><li>연산자와 스택의 마지막 값인 x 우선순위 비교</li></ul></li><li>스택의 마지막 값인 x 연산자가 높으니 pop하여 결과값에 추가</li><li><ul><li>연산자는 스택에 push</li></ul></li><li>피연산자 2을 결과값에 추가</li><li>스택이 빌 때까지 pop하여 결과값에 추가</li></ol><h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><h3 id="Stack-클래스를-이용한-풀이"><a href="#Stack-클래스를-이용한-풀이" class="headerlink" title="Stack 클래스를 이용한 풀이"></a>Stack 클래스를 이용한 풀이</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    s = Stack()</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> priority.keys():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.top == <span class="literal">None</span>:</span><br><span class="line">                s.push(x)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> priority[s.top.data] &lt; priority[x]:</span><br><span class="line">                    s_pop = s.pop()</span><br><span class="line">                    result += s_pop</span><br><span class="line">                s.push(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty():</span><br><span class="line">        s_pop = s.pop()</span><br><span class="line">        result += s_pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>아래는 if 문으 조금 줄여보았다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    s = Stack()</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> priority.keys():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s.is_empty() <span class="keyword">and</span> priority[s.top.data] &lt; priority[x]:</span><br><span class="line">                s_pop = s.pop()</span><br><span class="line">                result += s_pop</span><br><span class="line">            s.push(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty():</span><br><span class="line">        s_pop = s.pop()</span><br><span class="line">        result += s_pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;후위표기법-1&quot;&gt;&lt;a href=&quot;#후위표기법-1&quot; class=&quot;headerlink&quot; title=&quot;후위표기법 1&quot;&gt;&lt;/a&gt;후위표기법 1&lt;/h1&gt;&lt;p&gt;연산자를 피연산자 뒤에 쓰는 연산기법&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;3+5x2&lt;/co</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>스택 - 연습문제</title>
    <link href="https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/"/>
    <id>https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/</id>
    <published>2023-07-18T14:48:21.000Z</published>
    <updated>2023-07-18T15:26:53.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="문제-1-괄호-짝-검사"><a href="#문제-1-괄호-짝-검사" class="headerlink" title="문제 1. 괄호 짝 검사"></a>문제 1. 괄호 짝 검사</h1><p>괄호의 짝이 바르면 True, 바르지 않으면 False를 반환하는 함수를 작성하라.</p><p>예를 들어 <code>((a*(b+c))-d) / e</code>는 괄호의 짝이 올바르지만, <code>(((a*(b+c))-d) / e</code> 는 괄호의 짝이 맞지 않는다.</p><p>괄호는 소괄호(())만 사용한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(x)</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack.pop():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br></pre></td></tr></table></figure><ul><li>여는 괄호가 나오면 stack에 <code>Push</code></li><li>닫는 괄호가 나오면 stack을 <code>pop</code><ul><li>이 때, stack에서 아무것도 <code>pop</code>되지 않는다면, 제대로 된 괄호가 구성되지 않은 것이다.</li></ul></li></ul><h1 id="문제-2-소-중-대괄호-짝-검사"><a href="#문제-2-소-중-대괄호-짝-검사" class="headerlink" title="문제 2. 소,중,대괄호 짝 검사"></a>문제 2. 소,중,대괄호 짝 검사</h1><p>소괄호, 중괄호, 대괄호 짝이 맞는지 검사</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[&#123;a * (b + c)&#125; - d] / e&quot;</span> <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;[&#123;a * (b + c)] - d] / e&quot;</span> <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="풀이-1"><a href="#풀이-1" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    brackets = &#123;<span class="string">&quot;)&quot;</span>:<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&#125;&quot;</span>:<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;]&quot;</span>:<span class="string">&quot;[&quot;</span>&#125;</span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> brackets.values():</span><br><span class="line">            stack.push(x)</span><br><span class="line">        <span class="keyword">elif</span> x <span class="keyword">in</span> brackets:</span><br><span class="line">            popped = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> popped <span class="keyword">or</span> brackets[x] != popped:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br></pre></td></tr></table></figure><ul><li>brackets을 관리하는 딕셔너리를 만든다.</li><li>여는 괄호면 stack에 push한다.</li><li>닫는 괄호면, 해당 닫는 괄호와 짝을 이루는 여는 괄호가 stack.pop()한 요소와 같은지 비교<ul><li>만약 다르거나 pop한 요소가 None이라면 False</li></ul></li></ul><h1 id="문제-3-짝지어-제거하기"><a href="#문제-3-짝지어-제거하기" class="headerlink" title="문제 3. 짝지어 제거하기"></a>문제 3. 짝지어 제거하기</h1><p>같은 알파벳 2개가 붙어 있는 짝을 찾습니다.</p><p>그 다음 그 둘을 제거한 뒤 앞뒤로 문자열을 이어 붙입니다.</p><p>이 과정을 반복하여 문자열이 모두 제거된다면 1을 반환하고 그렇지 않으면 0을 반환합니다.</p><h2 id="풀이-2"><a href="#풀이-2" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">and</span> ch == stack[-<span class="number">1</span>]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(ch)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>stack 클래스 대신 배열을 사용했다.</li><li>stack의 <code>push()</code>: <code>append()</code></li><li>stack의 <code>pop()</code>: <code>pop()</code></li><li>stack의 <code>peek()</code>: [-1]로 인덱싱</li><li><code>is_empty()</code>: 빈 리스트 논리값은 False 임을 이용</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;문제-1-괄호-짝-검사&quot;&gt;&lt;a href=&quot;#문제-1-괄호-짝-검사&quot; class=&quot;headerlink&quot; title=&quot;문제 1. 괄호 짝 검사&quot;&gt;&lt;/a&gt;문제 1. 괄호 짝 검사&lt;/h1&gt;&lt;p&gt;괄호의 짝이 바르면 True, 바르지 않으면 Fal</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>스택 - 파이썬으로 스택(stack) 구현하기</title>
    <link href="https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/"/>
    <id>https://loco9939.github.io/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</id>
    <published>2023-07-18T12:40:59.000Z</published>
    <updated>2023-07-18T14:39:49.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파이썬으로-Stack-스택-구현하기"><a href="#파이썬으로-Stack-스택-구현하기" class="headerlink" title="파이썬으로 Stack(스택) 구현하기"></a>파이썬으로 Stack(스택) 구현하기</h1><p><img src="/../../../../../images/stack.png" alt="stack"></p><ul><li>스택은 서류나 책 위에 다른 서류나 책을 쌓아 올리는 형태이다.</li><li>자료를 꺼낼 때에는 맨 위부터 꺼내야한다. 후입선출(Last In First Out, LIFO)</li></ul><p><img src="/../../../../../images/stack2.png" alt="stack2"></p><ul><li>90도 눕혀서 보게 되면 연결리스트와 비슷한 구조를 지닌다.</li><li>연결리스트의 <code>head</code>를 스택에서는 <code>top</code>이라고 부른다.</li></ul><h2 id="Stack-메서드"><a href="#Stack-메서드" class="headerlink" title="Stack 메서드"></a>Stack 메서드</h2><ul><li><code>push(data)</code>: data를 넣는 작업, 연결리스트의 <code>appendLeft와</code> 같다.</li><li><code>pop()</code>: 자료를 꺼내는 작업, 연결리스트의 <code>popLeft와</code> 같다.</li><li><code>peek()</code>: 마지막에 넣은 자료 확인, pop과 비슷하지만 값을 제거하지는 않는다.</li><li><code>is_empty()</code>: 빈 스택인지 확인</li></ul><h2 id="Stack-클래스-만들기"><a href="#Stack-클래스-만들기" class="headerlink" title="Stack 클래스 만들기"></a>Stack 클래스 만들기</h2><ul><li>단일 연결리스트를 활용하여 Stack 클래스에서는 top 속성을 넣고 length 속성은 뺀다.</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">    self.data = data</span><br><span class="line">    self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.top = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,data</span>):</span><br><span class="line">    node = Node(data)</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      self.top = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node.<span class="built_in">next</span> = self.top</span><br><span class="line">      self.top = node</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    node = self.top</span><br><span class="line">    self.top = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> self.top.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.top == <span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;파이썬으로-Stack-스택-구현하기&quot;&gt;&lt;a href=&quot;#파이썬으로-Stack-스택-구현하기&quot; class=&quot;headerlink&quot; title=&quot;파이썬으로 Stack(스택) 구현하기&quot;&gt;&lt;/a&gt;파이썬으로 Stack(스택) 구현하기&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Stack" scheme="https://loco9939.github.io/categories/Python/DataStructure/Stack/"/>
    
    
    <category term="스택" scheme="https://loco9939.github.io/tags/%EC%8A%A4%ED%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>==, is는 같지 않다. (Python)</title>
    <link href="https://loco9939.github.io/2023/07/17/Python/is%EB%8A%94-%EA%B0%99%EC%A7%80-%EC%95%8A%EB%8B%A4-Python/"/>
    <id>https://loco9939.github.io/2023/07/17/Python/is%EB%8A%94-%EA%B0%99%EC%A7%80-%EC%95%8A%EB%8B%A4-Python/</id>
    <published>2023-07-17T13:27:06.000Z</published>
    <updated>2023-07-17T13:32:07.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x3D-x3D-is는-같지-않다"><a href="#x3D-x3D-is는-같지-않다" class="headerlink" title="&#x3D;&#x3D;, is는 같지 않다."></a>&#x3D;&#x3D;, is는 같지 않다.</h1><ul><li><code>==</code> 는 값을 비교한다.</li><li><code>is</code> 는 메모리 주소를 비교한다.</li></ul><p>파이썬에서 변수는 객체에 붙은 이름표라고 생각하자.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="예외-케이스"><a href="#예외-케이스" class="headerlink" title="예외 케이스"></a>예외 케이스</h1><h2 id="1-정수형값"><a href="#1-정수형값" class="headerlink" title="1. 정수형값"></a>1. 정수형값</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># True</span></span><br></pre></td></tr></table></figure><ul><li>Python은 메모리 최적화를 위해 -5 ~ 256 까지는 캐싱하는 싱글턴 오브젝트이다.</li></ul><h3 id="각-자료형-is-x3D-x3D-비교"><a href="#각-자료형-is-x3D-x3D-비교" class="headerlink" title="각 자료형 is, &#x3D;&#x3D; 비교"></a>각 자료형 is, &#x3D;&#x3D; 비교</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#정수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==integer==&#x27;</span>)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#부동소수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==float==&#x27;</span>)</span><br><span class="line">a = <span class="number">3.15982489254324342</span></span><br><span class="line">b = <span class="number">3.15982489254324342</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#복소수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==complex==&#x27;</span>)</span><br><span class="line">a = <span class="number">1</span>+<span class="number">4j</span></span><br><span class="line">b = <span class="number">1</span>+<span class="number">4j</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#문자열</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==string==&#x27;</span>)</span><br><span class="line">a = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#부울</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==bool==&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#리스트</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==list==&#x27;</span>)</span><br><span class="line">a = []</span><br><span class="line">b = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#튜플</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==tuple==&#x27;</span>)</span><br><span class="line">a = ()</span><br><span class="line">b = ()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#딕셔너리</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==dictionary==&#x27;</span>)</span><br><span class="line">a = &#123;&#125;</span><br><span class="line">b = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>주로 <code>==</code>을 사용하지 메모리를 직접 비교하는 <code>is</code>는 자주 사용되지 않고 헷갈리므로 <code>==</code>를 사용하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;x3D-x3D-is는-같지-않다&quot;&gt;&lt;a href=&quot;#x3D-x3D-is는-같지-않다&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x3D;&amp;#x3D;, is는 같지 않다.&quot;&gt;&lt;/a&gt;&amp;#x3D;&amp;#x3D;, is는 같지 않다.&lt;/h1</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>연결리스트 - 주어진 리스트가 순환이 있는지 확인하는 문제</title>
    <link href="https://loco9939.github.io/2023/07/17/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%88%9C%ED%99%98%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/"/>
    <id>https://loco9939.github.io/2023/07/17/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%88%9C%ED%99%98%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/</id>
    <published>2023-07-16T15:25:38.000Z</published>
    <updated>2023-07-16T15:26:31.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-연결리스트-길이로-풀기"><a href="#1-연결리스트-길이로-풀기" class="headerlink" title="1. 연결리스트 길이로 풀기"></a>1. 연결리스트 길이로 풀기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">    node = Linked_list.head</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Linked_list)):</span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> node <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>연결리스트의 길이를 구하여 연결리스트의 마지막 노드의 next 를 확인한다.<ul><li>만약 마지막 노드의 next가 있다면, 순환연결리스트</li><li>그렇지 않으면 연결리스트이다.</li></ul></li></ul><h3 id="2-집합을-사용하여-풀기"><a href="#2-집합을-사용하여-풀기" class="headerlink" title="2. 집합을 사용하여 풀기"></a>2. 집합을 사용하여 풀기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">node = Linked_list.head</span><br><span class="line"><span class="keyword">while</span> node:</span><br><span class="line"><span class="keyword">if</span> node <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">s.add(node)</span><br><span class="line">node = node.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li><strong>노드의 값이 중복되지 않는다면</strong>, 지나간 노드를 집합(set)에 저장한다.</li><li>노드가 이동할 때 마다 집합에 있는 노드인지 확인한다.<ul><li>집합에 지나간 노드가 있으면 True</li><li>그렇지 않으면 False</li></ul></li></ul><h3 id="3-중복된-값이-있을-경우-두개의-포인트를-사용하여-풀기"><a href="#3-중복된-값이-있을-경우-두개의-포인트를-사용하여-풀기" class="headerlink" title="3. 중복된 값이 있을 경우, 두개의 포인트를 사용하여 풀기"></a>3. 중복된 값이 있을 경우, 두개의 포인트를 사용하여 풀기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">    node1 = node2 = Linked_list.head</span><br><span class="line">    <span class="keyword">while</span> node1 <span class="keyword">and</span> node1.<span class="built_in">next</span>:</span><br><span class="line">        node1 = node1.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        node2 = node2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node1 == node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>node1은 두칸씩 이동한다.</li><li>node2는 한칸씩 이동한다.</li><li>만약 순환이 있다면 언젠가는 두 노드가 만난다.</li><li>순환이 없다면 node1 또는 node1.next가 None에 도달한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-연결리스트-길이로-풀기&quot;&gt;&lt;a href=&quot;#1-연결리스트-길이로-풀기&quot; class=&quot;headerlink&quot; title=&quot;1. 연결리스트 길이로 풀기&quot;&gt;&lt;/a&gt;1. 연결리스트 길이로 풀기&lt;/h3&gt;&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="LinkedList" scheme="https://loco9939.github.io/categories/Python/DataStructure/LinkedList/"/>
    
    
    <category term="연결리스트" scheme="https://loco9939.github.io/tags/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>연결리스트 - 클래스 구현</title>
    <link href="https://loco9939.github.io/2023/07/16/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84/"/>
    <id>https://loco9939.github.io/2023/07/16/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84/</id>
    <published>2023-07-16T14:23:56.000Z</published>
    <updated>2023-07-18T12:37:49.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="연결리스트-클래스"><a href="#연결리스트-클래스" class="headerlink" title="연결리스트 클래스"></a>연결리스트 클래스</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#파일 이름: sllist.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linked_list</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty List&quot;</span></span><br><span class="line">        node = self.head</span><br><span class="line">        string = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">            string += <span class="built_in">str</span>(node.data) + <span class="string">&quot; → &quot;</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> string + <span class="built_in">str</span>(node.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.data == data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">appendleft</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = self.head</span><br><span class="line">            self.head = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.head</span><br><span class="line">            <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">                prev = prev.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">popleft</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.head</span><br><span class="line">        self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">if</span> self.head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                prev = node</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, i, data</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= <span class="number">0</span>:</span><br><span class="line">            self.appendleft(data)</span><br><span class="line">        <span class="keyword">elif</span> i &gt;= self.length:</span><br><span class="line">            self.append(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>):</span><br><span class="line">                prev = prev.<span class="built_in">next</span></span><br><span class="line">            node = Node(data)</span><br><span class="line">            node.<span class="built_in">next</span> = prev.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = node</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head.data == data:</span><br><span class="line">            self.popleft()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        prev = self.head</span><br><span class="line">        <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> prev.<span class="built_in">next</span>.data == data:</span><br><span class="line">                prev.<span class="built_in">next</span> = prev.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">                self.length -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            prev = prev.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.length &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        ahead = self.head.<span class="built_in">next</span></span><br><span class="line">        prev = self.head</span><br><span class="line">        prev.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> ahead:</span><br><span class="line">            self.head = ahead</span><br><span class="line">            ahead = ahead.<span class="built_in">next</span></span><br><span class="line">            self.head.<span class="built_in">next</span> = prev</span><br><span class="line">            prev = self.head</span><br></pre></td></tr></table></figure><h2 id="연결리스트-테스트"><a href="#연결리스트-테스트" class="headerlink" title="연결리스트 테스트"></a>연결리스트 테스트</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(msg, end = <span class="string">&quot;&gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    data = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(data) <span class="keyword">if</span> data.isdigit() <span class="keyword">else</span> data</span><br><span class="line"></span><br><span class="line">my_list = LinkedList()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="string">실행할 명령어를 선택하세요.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[0] 연결 리스트의 상태 출력</span></span><br><span class="line"><span class="string">[1] 처음에 노드 추가   [2] 끝에 노드 추가      [3] 노드 검색</span></span><br><span class="line"><span class="string">[4] 첫 노드 꺼내기     [5] 마지막 노드 꺼내기  [6] 특정 위치에 노드 삽입</span></span><br><span class="line"><span class="string">[7] 노드 삭제         [8] 연결 리스트 뒤집기</span></span><br><span class="line"><span class="string">[9] 끝내기</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(menu, end=<span class="string">&quot; &gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    command = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> command == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">1</span>:</span><br><span class="line">        my_list.appendLeft(get_data(<span class="string">&quot;추가할 값(정수, 문자)을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">2</span>:</span><br><span class="line">        my_list.append(get_data(<span class="string">&quot;추가할 값(정수, 문자)을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">3</span>:</span><br><span class="line">        data = get_data(<span class="string">&quot;검색할 값을 입력하세요.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">in</span> my_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 있습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 없습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list.popLeft())</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list.pop())</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">6</span>:</span><br><span class="line">        index = get_data(<span class="string">&quot;값을 추가할 인덱스를 입력하세요.&quot;</span>)</span><br><span class="line">        my_list.insert(index, get_data(<span class="string">&quot;추가할 값을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">7</span>:</span><br><span class="line">        data = get_data(<span class="string">&quot;삭제할 값을 입력하세요.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> my_list.remove(data):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(을)를 정상적으로 삭제했습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 없습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">8</span>:</span><br><span class="line">        my_list.reverse()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;리스트를 뒤집었습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;연결리스트-클래스&quot;&gt;&lt;a href=&quot;#연결리스트-클래스&quot; class=&quot;headerlink&quot; title=&quot;연결리스트 클래스&quot;&gt;&lt;/a&gt;연결리스트 클래스&lt;/h1&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="LinkedList" scheme="https://loco9939.github.io/categories/Python/DataStructure/LinkedList/"/>
    
    
    <category term="연결리스트" scheme="https://loco9939.github.io/tags/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>연결리스트 - 개념 및 설명</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/</id>
    <published>2023-07-15T14:51:57.000Z</published>
    <updated>2023-07-15T15:00:47.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="연결리스트"><a href="#연결리스트" class="headerlink" title="연결리스트"></a>연결리스트</h1><p>노드로 감싸진 요소를 인접한 메모리 위치가 아닌 독립적으로 저장한다.</p><p>각 노드는 next 또는 next,prev 라는 포인터로 서로 연결된 선형적인 자료구조</p><ul><li>참조: O(n)</li><li>탐색: O(n)</li><li>삽입 &#x2F; 삭제: O(1)</li></ul><p>연결리스트에 접근하기 위해서는 첫 노드를 가리키는 <strong>head</strong>가 반드시 있어야 한다.</p><blockquote><p>노드란, data와 next로 이루어진 구조체이다. 값을 담고 있는 data, 노드와 노드를 잇는 next라는 포인터로 이루어져 있다.</p></blockquote><h2 id="싱글연결리스트"><a href="#싱글연결리스트" class="headerlink" title="싱글연결리스트"></a>싱글연결리스트</h2><p><img src="/../../../../images/LinkedList/theory/single.png" alt="스크린샷 2023-07-15 오후 12.17.18.png"></p><p>next 포인터만 존재하여 한 방향으로만 데이터가 연결된다.</p><h2 id="원형연결리스트"><a href="#원형연결리스트" class="headerlink" title="원형연결리스트"></a>원형연결리스트</h2><p>마지막 노드와 첫번째 노드가 연결되어 원을 형성한다.</p><p>싱글연결리스트 또는 이중연결리스트로 이루어진 2가지 타입의 원형 리스트가 있다.</p><h3 id="싱글연결리스트로-구성된-원형연결리스트"><a href="#싱글연결리스트로-구성된-원형연결리스트" class="headerlink" title="싱글연결리스트로 구성된 원형연결리스트"></a>싱글연결리스트로 구성된 원형연결리스트</h3><p><img src="/../../../../images/LinkedList/theory/circleSingle.png" alt="스크린샷 2023-07-15 오후 12.18.41.png"></p><h3 id="이중연결리스트로-구성된-원형연결리스트"><a href="#이중연결리스트로-구성된-원형연결리스트" class="headerlink" title="이중연결리스트로 구성된 원형연결리스트"></a>이중연결리스트로 구성된 원형연결리스트</h3><p><img src="/../../../../images/LinkedList/theory/circleDouble.png" alt="스크린샷 2023-07-15 오후 12.18.50.png"></p><h2 id="랜덤접근과-순차적-접근"><a href="#랜덤접근과-순차적-접근" class="headerlink" title="랜덤접근과 순차적 접근"></a>랜덤접근과 순차적 접근</h2><p><img src="/../../../../images/LinkedList/theory/access.png" alt="스크린샷 2023-07-15 오후 12.21.39.png"></p><h3 id="랜덤접근-random-access-직접접근"><a href="#랜덤접근-random-access-직접접근" class="headerlink" title="랜덤접근(random access, 직접접근)"></a>랜덤접근(random access, 직접접근)</h3><ul><li>동일한 시간에 배열과 같은 순차적인 데이터가 있을 때, 임의의 인덱스에 해당하는 데이터에 접근할 수 있는 기능</li><li>vector, array는 랜덤 접근 가능하여 n번째 요소에 접근 시 O(1)</li></ul><h3 id="순차적-접근-squential-access"><a href="#순차적-접근-squential-access" class="headerlink" title="순차적 접근(squential access)"></a>순차적 접근(squential access)</h3><ul><li>데이터를 저장된 순서대로 검색하며 순차적으로 접근</li><li>연결리스트, 스택, 큐는 순차적 접근만 가능하여 n번째 요소 접근 시 O(n)</li></ul><h2 id="📌-배열과-연결리스트-비교"><a href="#📌-배열과-연결리스트-비교" class="headerlink" title="📌 배열과 연결리스트 비교"></a>📌 배열과 연결리스트 비교</h2><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><ul><li>배열은 indexing으로 원소에 접근은 쉽다. O(1)</li><li>하지만 맨 끝을 제외한 위치에서 원소를 추가 &#x2F; 삭제 하는 것은 연속한 메모리 공간을 확보하고 원소를 이동시켜야하므로 시간이 오래 걸린다. O(n)</li></ul><h3 id="연결리스트-1"><a href="#연결리스트-1" class="headerlink" title="연결리스트"></a>연결리스트</h3><ul><li>연결리스트는 이전 노드들을 순차적으로 접근해야 하므로 접근은 오래 걸린다. O(n)</li><li>하지만 삽입 &#x2F; 삭제는 노드를 생성하고 next, prev 포인터로 이전, 다음 노드만 연결해주면 되므로 시간 복잡도가 적다. O(1)</li><li>자료의 양이 정해져 있지 않아서 추가 및 삭제하는 일이 많은 경우 연결리스트가 적합하다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;연결리스트&quot;&gt;&lt;a href=&quot;#연결리스트&quot; class=&quot;headerlink&quot; title=&quot;연결리스트&quot;&gt;&lt;/a&gt;연결리스트&lt;/h1&gt;&lt;p&gt;노드로 감싸진 요소를 인접한 메모리 위치가 아닌 독립적으로 저장한다.&lt;/p&gt;
&lt;p&gt;각 노드는 next 또</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="LinkedList" scheme="https://loco9939.github.io/categories/Python/DataStructure/LinkedList/"/>
    
    
    <category term="연결리스트" scheme="https://loco9939.github.io/tags/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>메모리와 포인터</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%ED%8F%AC%EC%9D%B8%ED%84%B0/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%ED%8F%AC%EC%9D%B8%ED%84%B0/</id>
    <published>2023-07-15T14:46:26.000Z</published>
    <updated>2023-07-15T14:50:14.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-메모리와-주소"><a href="#1-메모리와-주소" class="headerlink" title="1. 메모리와 주소"></a>1. 메모리와 주소</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정수는 4byte</span></span><br><span class="line"><span class="type">int</span> i;</span><br></pre></td></tr></table></figure><p>C++에서 변수를 만들면 변수에 메모리 주소를 할당(예약)한다.</p><p>이 때, 변수 i의 메모리 주소는 변수가 사용하는 메모리 주소 첫번째를 가리킨다.</p><ul><li>&amp;(ampersand,앰퍼샌드) 연산자로 메모리 주소를 얻을 수 있다.</li></ul><h1 id="2-포인터"><a href="#2-포인터" class="headerlink" title="2. 포인터"></a>2. 포인터</h1><ul><li>자바, 파이썬, 자바스크립트는 개발자가 직접 변수에 메모리를 할당하거나 해제할 수 없고 GC를 통해 이를 수행한다.</li><li>C, C++ 하위레벨 언어는 GC가 없는 대신, 개발자가 직접 필요한 메모리를 예약 및 해제할 수 있다.</li></ul><p>포인터란, 변수의 메모리 주소를 담는 타입이다.</p><ul><li>메모리 동적할당</li><li>데이터 복사하지 않고 매개변수로 사용</li><li>클래스 및 구조체 연결</li></ul><p>ex) 연결리스트의 노드</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">string s = <span class="string">&quot;kundol&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> * a = &amp; i;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">string * b = &amp;s;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&amp; i : 변수의 메모리 주소</li><li>“타입 * 형태” 로 포인터를 정의한다.</li></ul><h3 id="포인터의-크기"><a href="#포인터의-크기" class="headerlink" title="포인터의 크기"></a>포인터의 크기</h3><ul><li>OS가 32bit라면 4byte, 64bit라면 8byte로 고정</li><li>어떤 타입(string,int, char 등) 상관없이 무조건 위 수치대로 고정</li><li>포인터는 메모리 주소를 담는 것이지 변수 자체를 담는 것이 아니다.<ul><li>집 주소(포인터)의 크기와 집(메모리)의 크기는 상관이 없다!</li></ul></li></ul><p><strong>ex) 1byte 짜리 char 타입의 변수의 포인터 크기는 1byte가 아니다.</strong></p><h1 id="3-역참조연산자"><a href="#3-역참조연산자" class="headerlink" title="3. 역참조연산자"></a>3. 역참조연산자</h1><ul><li>(에스터리스크) 기호를 포인터와 사용하여 역참조로 해당 메모리 주소의 할당된 값을 참조할 수 있다.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  string a = <span class="string">&quot;abcda&quot;</span>;</span><br><span class="line">  string * b = &amp;a;</span><br><span class="line">  cout &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; *b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x6ffdf0</span></span><br><span class="line"><span class="comment">abcda</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>a 라는 변수(메모리)에 ‘abcda’ 라는 string 값이 할당</li><li>string * b 로 포인터를 정의하여 a 변수의 메모리를 할당</li><li>*b 로 포인터를 역참조하여 포인터의 메모리 주소에 할당된 값을 출력</li></ol><h1 id="4-array-to-pointer-decay"><a href="#4-array-to-pointer-decay" class="headerlink" title="4. array to pointer decay"></a>4. array to pointer decay</h1><p>배열을 변수에 할당하여 해당 변수(주소값)을 T * 라는 포인터에 할당하게 되면, T[N] 이라는 배열의 크기 정보 N이 없어지고 첫번째 요소의 주소가 바인딩되는 현상</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> * c = a;</span><br><span class="line">  cout &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; &amp;a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; c + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; &amp;a[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>vector(동적배열)은 안되고 array(정적배열)만 가능</li><li>int * c 포인터에 a array를 할당<ol><li>array to pointer decay 현상 발생</li></ol></li><li>c 를 출력하면 array의 첫번째 요소의 메모리 주소가 출력 <code>(c == &amp;a[0])</code></li><li>포인터 c에 1을 더하면 array의 두번째 요소를 의미한다.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-메모리와-주소&quot;&gt;&lt;a href=&quot;#1-메모리와-주소&quot; class=&quot;headerlink&quot; title=&quot;1. 메모리와 주소&quot;&gt;&lt;/a&gt;1. 메모리와 주소&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    
  </entry>
  
  <entry>
    <title>배열 - 정적배열과 동적배열</title>
    <link href="https://loco9939.github.io/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%95%EC%A0%81%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4/"/>
    <id>https://loco9939.github.io/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%95%EC%A0%81%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4/</id>
    <published>2023-07-15T14:43:29.000Z</published>
    <updated>2023-07-15T14:46:50.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정적배열-Array"><a href="#정적배열-Array" class="headerlink" title="정적배열 - Array"></a>정적배열 - Array</h1><ul><li>연속된 메모리 공간에 위치한 같은 타입의 요소들의 모음</li><li>한번 정해진 크기는 변경불가<ul><li>가득찬 공간에 원소 추가하려면 더 큰 배열 생성 후 기존 배열의 원소를 복사한 후 새 원소 추가</li></ul></li><li>숫자 인덱스를 기반으로 랜덤 접근이 가능하고 중복을 허용한다.</li><li>vector와 달리 메서드가 없다.</li></ul><h2 id="C-선언타입"><a href="#C-선언타입" class="headerlink" title="C++ 선언타입"></a>C++ 선언타입</h2><h3 id="C스타일"><a href="#C스타일" class="headerlink" title="C스타일"></a>C스타일</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 할당</span></span><br><span class="line"><span class="type">int</span> b[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>배열의 크기를 정하여 선언 가능</li><li>크기를 정하지 않고 선언하면서 중괄호 요소들을 할당할 수 있다.</li></ul><h3 id="std스타일"><a href="#std스타일" class="headerlink" title="std스타일"></a>std스타일</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 10&gt; a;</span><br></pre></td></tr></table></figure><h1 id="동적배열"><a href="#동적배열" class="headerlink" title="동적배열"></a>동적배열</h1><ul><li>정적 배열의 특징을 가지면서 가변적인 특징이 더해짐</li><li>참조: O(1)</li><li>탐색: O(n)</li><li>맨끝에서 삽입 &#x2F; 삭제: O(1)</li><li>맨 끝 제외 삽입 &#x2F; 삭제: O(n)</li></ul><p>ex) 파이썬의 리스트</p><h2 id="C-선언방식"><a href="#C-선언방식" class="headerlink" title="C++ 선언방식"></a>C++ 선언방식</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;타입&gt; 변수명;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 크기 미리 정하거나 해당 크기의 어떤 값으로 초기화 가능</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a : v) cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">100 100 100 100 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;정적배열-Array&quot;&gt;&lt;a href=&quot;#정적배열-Array&quot; class=&quot;headerlink&quot; title=&quot;정적배열 - Array&quot;&gt;&lt;/a&gt;정적배열 - Array&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;연속된 메모리 공간에 위치한 같은 타입의 요소들의 </summary>
      
    
    
    
    <category term="Python" scheme="https://loco9939.github.io/categories/Python/"/>
    
    <category term="DataStructure" scheme="https://loco9939.github.io/categories/Python/DataStructure/"/>
    
    <category term="Array" scheme="https://loco9939.github.io/categories/Python/DataStructure/Array/"/>
    
    
    <category term="배열" scheme="https://loco9939.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
  </entry>
  
</feed>
