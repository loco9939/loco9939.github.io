<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>merge sort</title>
    <url>/2022/12/29/Algorithm/merge%20sort/</url>
    <content><![CDATA[<!-- 글쓰기 목적: merge sort를 처음 듣는 사람에게 이해시키도록 작성하자-->

<h1 id="merge-sort"><a href="#merge-sort" class="headerlink" title="merge sort"></a>merge sort</h1><p><img src="/../../images/mergeSort/mergeSort.jpeg" alt="mergeSort"></p>
<p>정렬되지 않는 배열을 각각 하나의 원소만 포함하는 n개의 부분 배열로 분할한다. n개의 부분 배열이 1개가 될 때까지 반복해서 병합할 때 정렬한다. 최종적으로 남은 부분 배열이 정렬된 배열이 된다.</p>
<p>두가지 역할을 하는 함수로 나누어 설명할 수 있다.</p>
<ol>
<li><strong>mergeSort(arr)</strong>: 배열을 절반으로 나누는 함수</li>
<li><strong>merge(left, right)</strong>: 반으로 나뉜 두 배열을 정렬하여 새로운 배열로 병합하는 함수</li>
</ol>
<h2 id="merge-함수-구현"><a href="#merge-함수-구현" class="headerlink" title="merge 함수 구현"></a>merge 함수 구현</h2><p>left[0]과 right[0]를 비교하여 더 작은 수를 새로운 배열에 순서대로 담는다.</p>
<p>만약 left[0]이 right[0]보다 작다면 새로운 배열에 left[0]을 담고 이후에 left[1]과 right[0]을 비교한다.</p>
<p>이렇게 비교하면서 새로운 배열을 생성하기를 left, right 배열의 요소가 하나도 남지 않을 때 까지 반복한다.</p>
<p>이게 가능하기 위해서는 left와 right는 정렬된 상태의 배열이여야만 합니다. left, right를 정렬된 배열로 만들어 주기 위해서 mergeSort 함수를 이용합니다.</p>
<h2 id="mergeSort-함수-구현"><a href="#mergeSort-함수-구현" class="headerlink" title="mergeSort 함수 구현"></a>mergeSort 함수 구현</h2><p>mergeSort 함수는 인수로 주어진 배열을 요소가 1개일 때까지 절반으로 나누고 정렬하며 merge 해주는 함수이다.</p>
<p>즉, 요소가 1개인 서로 다른 두 배열을 정렬하면서 하나의 배열로 만들어간다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">33</span>,<span class="number">2</span>,<span class="number">51</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1단계 - 나누기</span></span><br><span class="line">[<span class="number">33</span>,<span class="number">2</span>,<span class="number">51</span>], [<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2단계 - 나누기</span></span><br><span class="line">[<span class="number">33</span>,<span class="number">2</span>],[<span class="number">51</span>],[<span class="number">1</span>,<span class="number">10</span>],[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3단계 - 나누기</span></span><br><span class="line">[<span class="number">33</span>],[<span class="number">2</span>],[<span class="number">51</span>],[<span class="number">1</span>],[<span class="number">10</span>],[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4단계 - 병합</span></span><br><span class="line">[<span class="number">2</span>,<span class="number">33</span>], [<span class="number">1</span>,<span class="number">51</span>], [<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5단계 - 병합</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">51</span>], [<span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6단계 - 최종 병합</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">33</span>,<span class="number">51</span>]</span><br></pre></td></tr></table></figure>

<h2 id="코드-구현"><a href="#코드-구현" class="headerlink" title="코드 구현"></a>코드 구현</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">left, right</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sorted = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// left, right 비교하여 정렬된 배열에 담는다.</span></span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span> &amp;&amp; right.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">      sorted.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sorted.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// left 또는 right 배열 중 하나는 아직 남아있으므로 남은 배열은 정렬되어 있으므로 복사하여 뒤에 붙혀준다.</span></span><br><span class="line">  <span class="keyword">return</span> [...sorted, ...left, ...right];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mergeSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);</span><br><span class="line">  <span class="keyword">const</span> right = arr.<span class="title function_">slice</span>(mid);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">33</span>,<span class="number">2</span>,<span class="number">51</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> sorted = <span class="title function_">mergeSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [33,2,51,1,10,3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorted); <span class="comment">// [1,2,3,10,33,51]</span></span><br></pre></td></tr></table></figure>

<h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><ul>
<li>mergeSort는 O(n log n) 시간 복잡도를 가진다. 왜냐하면 절반씩 나눠서 비교하기 때문이다.</li>
<li>안정 정렬에 속한다.</li>
</ul>
<p>참고자료</p>
<ul>
<li><a href="https://velog.io/@proshy/JSmerge-sort%ED%95%A9%EB%B3%91-%EC%A0%95%EB%A0%AC">proshy 병합정렬</a></li>
<li><a href="https://maramarathon.tistory.com/55">maramarathon 병합정렬</a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>정렬</tag>
        <tag>merge sort</tag>
      </tags>
  </entry>
  <entry>
    <title>type 체크 문제 Tip</title>
    <url>/2022/10/08/Algorithm/type%20%EC%B2%B4%ED%81%AC%20%EB%AC%B8%EC%A0%9C%20Tip/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>입력값에 {}, [], null이 들어가면 출력값으로 type을 반환하도록 하는 함수를 만들어라</p>
<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">typeIs</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">`<span class="subst">$&#123;data&#125;</span>는 &#x27;object&#x27; 타입이 아닙니다.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;array&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;object&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>입력값에 object 타입만 받을 수 있도록 에러처리를 해주었다.</li>
<li>if, else if 문으로 조건에 따라 반환값을 반환해주었다.</li>
</ul>
<h2 id="새로운-코드"><a href="#새로운-코드" class="headerlink" title="새로운 코드"></a>새로운 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">typeIs</span> = data =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (&#123;&#125;).<span class="property">toString</span>.<span class="title function_">call</span>(data).<span class="title function_">toLowerCase</span>().<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toString</span>() 메서드는 “[object type]”을 반환한다.</span><br></pre></td></tr></table></figure>

<ul>
<li>call 메서드를 사용하여 data 값을 바인딩 toString() 메서드에 바인딩 해주었다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>toString</tag>
        <tag>call</tag>
      </tags>
  </entry>
  <entry>
    <title>순열알고리즘과 백트래킹</title>
    <url>/2022/08/09/Algorithm/%EC%88%9C%EC%97%B4%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC-%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/</url>
    <content><![CDATA[<h1 id="순열-알고리즘"><a href="#순열-알고리즘" class="headerlink" title="순열 알고리즘"></a>순열 알고리즘</h1><p>코딩문제를 풀 때 중간 과정에서 자주 등장하는(?) 알고리즘으로 조합, 순열 알고리즘이 있다.</p>
<p>오늘은 백트랙킹과 DFS를 이용하여 순열 알고리즘을 구현하는 방법을 알아보자</p>
<span id="more"></span>

<h2 id="순열"><a href="#순열" class="headerlink" title="순열"></a>순열</h2><p>순열은 <span style="color:red">순서에 상관있게</span> n개의 원소 중에 r개를 중복없이 골라 나열하는 경우의 수</p>
<p>ex) [“a”,”b”,”c”] 배열에서 3개의 알파벳으로 단어를 만드는 경우의 수</p>
<blockquote>
<p>순열과 조합 알고리즘을 이해하기 위해 백트래킹(tree 구조) 패턴으로 보면 이해가 쉽다.</p>
</blockquote>
<p><img src="/../../images/220809/permutation.png" alt="permutation"></p>
<p><strong style="font-size:1.5rem">백트랙킹과 DFS(깊이 우선 탐색)</strong>으로 순열 알고리즘을 구현해보자</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permutation</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DFS</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">i, arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// base condition</span></span><br><span class="line">    <span class="keyword">if</span> (i === arr.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">push</span>([...arr]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// swap</span></span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">      <span class="comment">// dfs</span></span><br><span class="line">      <span class="title function_">dfs</span>(i + <span class="number">1</span>, arr);</span><br><span class="line">      <span class="comment">// swap back</span></span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">dfs</span>(<span class="number">0</span>, arr);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>배열의 각 위치를 나타내는 i, j가 있다고 생각하자. (i,j는 처음에 a 위치에서 시작한다)</p>
</li>
<li><p>i가 배열의 길이만큼 커지면 그 때의 arr 배열값을 result 배열에 더해준다.</p>
</li>
<li><p>i,j의 위치를 바꿔준다. dfs 함수를 재귀적으로 i+1로 호출한다.</p>
</li>
</ol>
<p>그 결과 첫번째 result 배열에 담기는 값은 <span style="color:red">abc</span> 이다.</p>
<p>이후 다시 원상복귀로 돌아오면서 i &#x3D; 1일 때, 반복문이 j&#x3D;2 &lt; arr.length 조건에 만족하므로 a b c 요소에서 i &#x3D; 1인 b 요소와 j &#x3D; 2인 c 요소를 바꿔준다. (a c b)</p>
<p>이 후 dfs(i+1,arr) 함수 재귀로 호출하면 i &#x3D; 2 &#x3D; j가 되므로 a c b 위치가 바뀌지 않고 결국 i &#x3D; arr.length가 되어 2번째로 출력되는 값은 <span style="color:red">acb</span> 가 된다.</p>
<p>acb를 다시 원상 복귀 시킨 후 i &#x3D; 1, j &#x3D; 3으로 반복문이 종료되고 다시 처음이였던 i &#x3D; 0 &#x3D; j로 돌아오게 된다.</p>
<ol start="4">
<li>이제 반복문으로 i &#x3D; 0, j++ 되어 j &#x3D; 1이 되어 <span style="color:red">bac</span>로 위치 바꿔주고 앞선 과정을 반복한다.</li>
</ol>
<blockquote>
<p>만약 재귀가 이해가 잘 안된다면 디버깅을 통해서 노트에 적어가면서 이해해보자. 사실 나도 2번째 보고 있는데 이해가 잘 안되서 자주 확인하기 위해 TIL을 작성하였다.</p>
</blockquote>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>순열</tag>
        <tag>백트래킹</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode Remote SSH로 원격으로 코딩</title>
    <url>/2023/03/17/Daily/VSCode-Remote-SSH%EB%A1%9C-%EC%9B%90%EA%B2%A9%EC%9C%BC%EB%A1%9C-%EC%BD%94%EB%94%A9/</url>
    <content><![CDATA[<h1 id="Remote-SSH로-원격-코딩하기"><a href="#Remote-SSH로-원격-코딩하기" class="headerlink" title="Remote SSH로 원격 코딩하기"></a>Remote SSH로 원격 코딩하기</h1><p>우리가 로컬에서 개발한 프로젝트를 서버 컴퓨터에서 실행하고 싶으면 어떻게 해야할까?</p>
<p>방법은 서버 컴퓨터에서 해당 프로젝트를 실행해주면 된다.</p>
<p>말로는 정말 쉬워보이지만 막상 하려고 하면 뭐부터 해야할지 모르겠다.</p>
<p>그래서 단계를 나눠서 도전해보자.</p>
<h2 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h2><p><img src="/../../images/Daily/remotessh/remotessh.png" alt="remotessh"></p>
<ol>
<li>우선 VSCode에서 “Remote - SSH”라는 익스텐션을 다운받는다. 해당 extension을 사용하여 서버 컴퓨터에서 원격으로 프로젝트를 실행할 것이다.</li>
</ol>
<p><img src="/../../images/Daily/remotessh/sshsetting1.png" alt="sshSettings1"></p>
<ol start="2">
<li><p>톱니바퀴를 눌러서 config 파일을 연다.</p>
</li>
<li><p>config 파일 설정은 다음과 같다.</p>
</li>
</ol>
<p><img src="/../../images/Daily/remotessh/sshsetting2.png" alt="sshSetting2"></p>
<ul>
<li>Host는 원격 서버의 이름을 나타낸다.</li>
<li>User는 계정 이름으로 보통 “ubuntu”</li>
<li>ssh 파일 경로는 SSH키가 담긴 .pem 파일의 경로</li>
</ul>
<ol start="4">
<li>이제 VSCode를 사용하여 서버를 원격으로 조종할 수 있다.</li>
</ol>
<p><img src="/../../images/Daily/remotessh/sshsettting3.png" alt="sshSetting3"></p>
<p>우측에 새창으로 열기를 클릭하면 서버환경에서 VSCode가 열리게 될 것이다.</p>
<p>이 후 VSCode에서 터미널을 켜서 git clone을 하여 github 레포지토리를 클론한 다음</p>
<p>프로젝트를 실행하면 원격으로 서버 컴퓨터에서 프로젝트를 실행할 수 있게된다.</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>remote</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>1.1 + 0.1 === 1.2 가 틀린 이유는?</title>
    <url>/2023/01/19/CS/1-1-0-1-1-2-%EA%B0%80-%ED%8B%80%EB%A6%B0-%EC%9D%B4%EC%9C%A0%EB%8A%94/</url>
    <content><![CDATA[<h1 id="0-1은-우리-눈에-보이는-0-1이-아니다"><a href="#0-1은-우리-눈에-보이는-0-1이-아니다" class="headerlink" title="0.1은 우리 눈에 보이는 0.1이 아니다?"></a>0.1은 우리 눈에 보이는 0.1이 아니다?</h1><p>컴퓨터는 데이터를 RAM이라는 곳에 임시 저장한 뒤 CPU가 꺼내와서 데이터를 연산한다.</p>
<p>RAM에 데이터를 저장할 때 2진수로 저장을 하는데, 정수가 아닌 소수를 저장할 때는 다음과 같은 방식으로 저장한다.</p>
<p>ex) 5.125 -&gt; 101.001 -&gt; 1.01001 * 2^2</p>
<p><img src="/../images/../../images/primenum/example.png" alt="컴퓨터가 소수 저장하는 원리"></p>
<ol>
<li>32칸의 공간을 마련한 뒤 첫칸에 부호를 나타내는 숫자를 적어둔다. (양수:0, 음수:1)</li>
<li>소수점 우측 부분을 mantissa 부분으로, 정수부분 8칸 공간 뒤에 23칸에 넣어준다.</li>
<li>지수에다가 127을 더한 뒤 2진법으로 만들고(2+127 -&gt; 10000001) 이를 맨 앞 8칸에다가 넣어준다.</li>
</ol>
<h2 id="순환소수"><a href="#순환소수" class="headerlink" title="순환소수"></a>순환소수</h2><p>하지만 0.1같은 소수는 32칸으로 표현할 수 없는 무한한 소수점 이하의 값을 가진다. <strong>그러므로 컴퓨터는 32칸까지만 표시를 해주고 뒤의 값은 무시한다.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">a + b === <span class="number">1.2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>32칸뒤에 잘려나간 부분때문에 오차가 발생하여 위 비교식이 false가 판단된다.</p>
<h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><h3 id="정확히-계산하기-위해서는-정수를-사용하자"><a href="#정확히-계산하기-위해서는-정수를-사용하자" class="headerlink" title="정확히 계산하기 위해서는 정수를 사용하자."></a>정확히 계산하기 위해서는 정수를 사용하자.</h3><p>1m를 표시하는데, 1.2m를 표시하는 것을 변수에 그대로 담지 말고, mm로 단위를 통일하고 1200를 변수에 담자.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>CDN</title>
    <url>/2022/08/02/CS/CDN/</url>
    <content><![CDATA[<h1 id="📌CDN"><a href="#📌CDN" class="headerlink" title="📌CDN"></a>📌CDN</h1><ul>
<li>Content Delivery Network의 약자</li>
<li>지리적으로 분산된 여러 서버가 있고 사용자와 지리적으로 가까운 서버에서 전송하여 전송속도를 높인다.</li>
<li>ATM기기와 비슷하다고 생각하면 된다.</li>
</ul>
<p>CDN은 전체 트래픽의 균형을 맞춰 인터넷 컨텐츠에 접속하는 사용자들에게 최고의 웹 경험을 제공한다.</p>
<h2 id="사용이유"><a href="#사용이유" class="headerlink" title="사용이유"></a>사용이유</h2><p>20여 년동안 전 세계 사용자들이 빠르고 확장성있게 온라인 콘텐츠를 전송하도록 도와주었다.</p>
<p>만약 CDN을 사용하지 않았더라면 Origin 서버가 data를 복제 및 저장한 후 사용자가 웹에 접속하는 곳까지 컨텐츠를 가져가야하기 때문에 인터넷 속도가 느려질 수 있다.</p>
<h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><p>Origin 서버와 다른 여러 서버가 연결되어 있는데, 이 서버중 한곳에라도 문제가 생길 시 CDN을 사용하는 데에 문제가 발생할 수 있다.</p>
<p>가령 수강생들끼리 axios를 CDN으로 적용하여 페어프로그래밍 진행중 CDN이 먹통이 되어 모두 원하는 코드가 동작하지 않았던 경험이 있다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>간편하게는 사용하면 좋을 것 같지만 프로젝트를 하거나 안정성이 요구되는 상황에서는 CDN을 지양하는 것이 좋겠다.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>Context API란 무엇이고 Redux와 어떤 차이가 있나요?</title>
    <url>/2023/02/02/CS/Context-API%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-Redux%EC%99%80-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EB%82%98%EC%9A%94/</url>
    <content><![CDATA[<h1 id="Context-API란"><a href="#Context-API란" class="headerlink" title="Context API란?"></a>Context API란?</h1><div style="display:flex">
    <img src="../../images/contextapi/context.png" width="200" height="300">
    <p style="padding:0 1rem; line-height:1.5;">앱의 규모가 커지고 복잡해짐에 따라 부모 컴포넌트에서 중첩된 자식 컴포넌트에게 데이터나 데이터 변경함수를 전달해줄 때, 몇단계를 걸쳐서 전달해줌으로서 애플리케이션이 더욱 복잡해지는 문제가 발생하였다.<br />
    이를 해결하기 위해 context API가 등장하였고, 이로써 props를 단계별로 넘겨주지 않아도 데이터를 제공할 수 있게 되었다. 그 결과 <b>컴포넌트 트리로 묶인 컴포넌트 간 데이터 공유가 수월해졌다.</b> 
    </p>
</div>

<ul>
<li>리액트에서 제공하는 내장 기능이다.</li>
</ul>
<blockquote>
<p>단, Context API를 사용하게 되면 컴포넌트의 재사용이 어려워지므로 꼭 필요한 경우에만 사용한다.</p>
</blockquote>
<h1 id="Redux란"><a href="#Redux란" class="headerlink" title="Redux란?"></a>Redux란?</h1><p>Redux는 action이라는 이벤트를 사용하여 데이터를 관리할 수 있는 상태관리 라이브러리이다.</p>
<p><img src="/../../images/contextapi/Redux.png" alt="redux"></p>
<h2 id="리덕스의-3원칙"><a href="#리덕스의-3원칙" class="headerlink" title="리덕스의 3원칙"></a>리덕스의 3원칙</h2><ol>
<li>단 하나의 store에서 모든 상태가 저장된다.</li>
<li>store의 상태를 변경하는 유일한 방법은 action 객체를 dispatch하는 방법 뿐이다.</li>
<li>action에 의한 상태 변경은 순수함수를 통해서만 가능하도록 작성해야 한다.</li>
</ol>
<h2 id="리덕스-특징"><a href="#리덕스-특징" class="headerlink" title="리덕스 특징"></a>리덕스 특징</h2><ul>
<li>thunk, saga와 같은 미들웨어를 추가적으로 설정할 수 있다. 비동기 처리를 Util로 처리 가능</li>
<li>Redux Devtool Extension을 사용하여 디버깅이 용이하다.</li>
<li>전역 상태 관리 이외도 로컬스토리지에 상태 저장, 버그 리포트 등의 기능을 제공한다.</li>
</ul>
<h2 id="Context-API와-Redux의-차이"><a href="#Context-API와-Redux의-차이" class="headerlink" title="Context API와 Redux의 차이"></a>Context API와 Redux의 차이</h2><table>
<thead>
<tr>
<th></th>
<th>Context API</th>
<th>Redux</th>
</tr>
</thead>
<tbody><tr>
<td>Learning Curve</td>
<td>쉬움</td>
<td>어려움</td>
</tr>
<tr>
<td>알아야 할 것들</td>
<td>적다</td>
<td>많다</td>
</tr>
<tr>
<td>유지보수성</td>
<td>작고 간단한 애플리케이션에 적합</td>
<td>복잡한 애플리케이션에 적합</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP 요청 메서드 GET vs POST</title>
    <url>/2022/11/09/CS/HTTP-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%84%9C%EB%93%9C-GET-vs-POST/</url>
    <content><![CDATA[<h1 id="📌-GET"><a href="#📌-GET" class="headerlink" title="📌 GET"></a>📌 GET</h1><p>GET 방식은 전송 URL에 입력 데이터를 쿼리 스트링으로 보내는 방식<br>ex) <a href="http://jsonplaceholder.typicode.com/posts?userId=1&amp;id=1">http://jsonplaceholder.typicode.com/posts?userId=1&amp;id=1</a></p>
<ul>
<li>전송 URL 바로 뒤에 ?를 통해 데이터의 시작을 알려주고, Key-value 형태의 데이터 추가한다.</li>
<li>캐시가 가능하다.</li>
<li>1개 이상의 전송 데이터는 &amp;로 구분한다.</li>
<li><strong>URL에 전송 데이터가 모두 노출되어 보안에 문제가 있어 민감한 정보는 사용하지 않는다. 전송할 수 있는 데이터의 한계가 있다. (최대 255자)</strong></li>
<li>REST API에서 GET 메소드는 모든 또는 특정 리소스의 조회를 요청한다.<br>⇒ <red>GET 요청 보내면 ~ 이거이거 조회할게요~</red></li>
</ul>
<h1 id="📌-POST"><a href="#📌-POST" class="headerlink" title="📌 POST"></a>📌 POST</h1><p>POST 방식은 사용자의 요청을 <strong>Request Body에 담아 보내는 방식</strong><br>ex) <a href="http://jsonplaceholder.typicode.com/posts">http://jsonplaceholder.typicode.com/posts</a></p>
<ul>
<li>URL에 전송 데이터가 모두 노출되지 않지만 GET에 비해 속도가 느리다.</li>
<li>캐시가 불가능하다.</li>
<li>데이터 길이와 타입의 제한이 없다.</li>
<li>REST API에서 POST 메소드는 특정 리소스의 생성을 요청한다.<br>⇒ <red>POST 요청 보내면 ~ 이거 생성해주세요~</red></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>GET</tag>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP의 역사와 HTTPS</title>
    <url>/2022/11/09/CS/HTTP%EC%9D%98-%EC%97%AD%EC%82%AC%EC%99%80-HTTPS/</url>
    <content><![CDATA[<h1 id="📌-HTTP"><a href="#📌-HTTP" class="headerlink" title="📌 HTTP"></a>📌 HTTP</h1><p><strong>서버&#x2F;클라이언트 모델을 따라 데이터를 주고받기 위한 프로토콜</strong>이다.</p>
<p>일반적으로 프로토콜을 이용하여 HTML 파일을 주고받을 수 있는 공간을 의미한다.</p>
<ul>
<li>텍스트 교환으로 보안에 취약하다.</li>
</ul>
<h2 id="역사"><a href="#역사" class="headerlink" title="역사"></a>역사</h2><p>초기 웹 페이지는 단순한 서버-클라이언트의 구조를 따랐다. 처음부터 TCP &#x2F; IP 위에서 구현되도록 설계되었다. 지금의 TCP는 무겁고 느리다고 까이지만, 이 당시에는 연결 지향적 특성 때문에 안정적이고 신뢰성있는 통신을 제공하여 평이 좋았다.</p>
<p>초기 HTTP 구조는 매우 간단했다. 요청 메서드도 GET 한가지였고, 헤더나 상태 코드도 없었고 응답은 무조건 HTML 파일 그 자체였다.</p>
<p>하지만 웹이 인기를 끌다 보니 기존 HTTP 사양만으로는 사용자들의 요구사항을 충족시킬 수 없었고 <strong>명시적으로 약속된 사양이 없어</strong> 여러 브라우저들 간의 혼란이 있어서 HTTP 기본 구조를 그대로 유지하면서 <strong>HTTP를 표준화</strong>하기 위해 HTTP WG 조직이 탄생하고 이 때 <strong>HTTP&#x2F;1.0이 탄생</strong>하게되었다.</p>
<h1 id="📌-HTTP-x2F-1-0"><a href="#📌-HTTP-x2F-1-0" class="headerlink" title="📌 HTTP&#x2F;1.0"></a>📌 HTTP&#x2F;1.0</h1><ul>
<li>HTTP Header에 버전정보 명시되어있다.</li>
<li>요청 메서드 GET, POST, HEAD 3가지</li>
<li>상태 코드 추가 되어 클라이언트 측에서 요청 결과에 따라 동작하도록 설계 가능</li>
<li><strong>Content-type의 도움으로 HTML 이외의 파일도 전송</strong>할 수 있게되었다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 요청 --&gt;</span><br><span class="line">GET /mypage.html HTTP/1.0</span><br><span class="line">User-Agent: ...</span><br><span class="line"></span><br><span class="line">&lt;!-- 응답 --&gt;</span><br><span class="line">200 OK</span><br><span class="line">...</span><br><span class="line">Content-Type: text/html</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">  A page with on image</span><br><span class="line">  &lt;img src=&quot;/myimage.jpg&quot; /&gt;</span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>HTTP&#x2F;1.0의 간단한 요청과 응답 예시이다.</li>
</ul>
<h1 id="📌-HTTP-x2F-1-1"><a href="#📌-HTTP-x2F-1-1" class="headerlink" title="📌 HTTP&#x2F;1.1"></a>📌 HTTP&#x2F;1.1</h1><h2 id="❓-HTTP-x2F-1-0의-문제"><a href="#❓-HTTP-x2F-1-0의-문제" class="headerlink" title="❓ HTTP&#x2F;1.0의 문제"></a>❓ <strong>HTTP&#x2F;1.0의 문제</strong></h2><ul>
<li>HTTP&#x2F;1.0에서는 요청에 따른 응답이 수신되면 TCP 연결 바로 종료<ul>
<li>웹 페이지가 복잡해짐에 따라 이러한 TCP 핸드쉐이크 과정을 새로 거쳐야 하여 속도가 느려지는 문제가 있었다.</li>
</ul>
</li>
<li>1개의 요청을 보내면 1개의 응답을 받고 1번의 연결이 종료된다. 만약 10번의 요청을 보내면 TCP 연결을 10번 해야하므로 서버에 부담이 된다.</li>
</ul>
<h2 id="❗️-문제-해결책"><a href="#❗️-문제-해결책" class="headerlink" title="❗️ 문제 해결책"></a>❗️ 문제 해결책</h2><p><img src="/../../images/HTTP/pipe.png" alt="pipe"></p>
<ul>
<li><strong>연결 상태 유지(Persistent connection)</strong> : 기본적으로 한번 수립한 연결을 재사용 할 수 있도록 설정<ul>
<li>지정한 시간동안 연결을 끊지 않는 방식</li>
<li>연결 유지 시간 길어지면 서버 부하 🔺</li>
</ul>
</li>
<li><strong>Pipelining(파이프라이닝)</strong> : 클라이언트가 여러 요청 연달아 보내야할 때, 먼저 보낸 요청의 응답을 기다리는 것이 아니라 <strong>발생한 요청은 일단 전송하는 방식</strong><ul>
<li>클라이언트에서 여러 요청을 순차적으로 보내면 <strong>서버는 받은 순서에 따라 응답을 제공한다.</strong></li>
</ul>
</li>
</ul>
<h1 id="📌-HTTP-x2F-2"><a href="#📌-HTTP-x2F-2" class="headerlink" title="📌 HTTP&#x2F;2"></a>📌 HTTP&#x2F;2</h1><h2 id="❓-HTTP-x2F-1-1의-문제"><a href="#❓-HTTP-x2F-1-1의-문제" class="headerlink" title="❓ HTTP&#x2F;1.1의 문제"></a>❓ <strong>HTTP&#x2F;1.1의 문제</strong></h2><ul>
<li>매 요청마다 <strong>헤더를 중복</strong>해서 전송해야만 하는데 이것이 굉장한 낭비였다.</li>
<li>서버가 항상 요청받은 순서대로 응답해야하므로 <strong>HOLB(Head-of-Line Blocking)</strong> 방식이었다.</li>
<li>하나의 연결 내에서 응답 다중화(multiplexing)을 할 수 없어 요청이 순차적으로 처리되어야 했는데, <strong>서버가 응답 작성 중간에 문제가 생기면 후속 요청들이 전송되지 못하고 지연되는 문제가 있었다.</strong></li>
</ul>
<h2 id="❗️-문제-해결책-1"><a href="#❗️-문제-해결책-1" class="headerlink" title="❗️ 문제 해결책"></a>❗️ 문제 해결책</h2><p><img src="/../../images/HTTP/SPDY.png" alt="spdy"></p>
<ul>
<li>SPDY 프로토콜 기반으로 동작 ⇒ <red>웹 페이지 로드 시간 단축</red><ul>
<li>이진 프로토콜 : 단순 텍스트를 전송하는 것보다 컴퓨터 입장에서 훨씬 더 효율적으로 데이터 전송 가능</li>
</ul>
</li>
</ul>
<p><img src="/../../images/HTTP/multiplexing.png" alt="mutiplexing"></p>
<ul>
<li>응답 다중화 지원 : 하나의 TCP 연결에서 여러 요청을 동시에 처리할 수 있다. 바이너리 프레이밍으로 TCP 연결을 스트림, 메시지, 프레임으로 세분화하였다. <red>이는 요청 별 순서를 반드시 지켜야 했던 HTTP&#x2F;1.1과 대조적이다.</red><ul>
<li>스트림 : 요청과 응답이 양방향으로 오가는 연결 단위</li>
<li>메시지 : 하나의 요청과 응답을 구성하는 단위</li>
<li>프레임 : 메시지를 구성하는 최소 단위</li>
</ul>
</li>
</ul>
<p><img src="/../../images/HTTP/multiplexing2.png" alt="mutiplexing2"></p>
<ul>
<li>위 사진에서 하나의 TCP 연결에서 3개의 스트림이 존재한다.</li>
<li>5번 스트림은 클라이언트 측에서 서버로 데이터 전송하고, 1,3번 스트림은 서버 측에서 클라이언트로 데이터를 전송중이다.</li>
<li>1번 프레임 사이에 3번 스트림의 프레임이 끼워져있다.</li>
</ul>
<p>이로써 HTTP&#x2F;1.1에서 발생한 <strong>HOLB 문제 해결할 수 있었다.</strong></p>
<p><img src="/../../images/HTTP/headerCompressing.png" alt="headerCompressing"></p>
<ul>
<li>헤더 필드 압축 지원 : 달라진 부분만 다시 전송하는 코딩 기법 사용</li>
</ul>
<h1 id="📌-HTTP-x2F-3"><a href="#📌-HTTP-x2F-3" class="headerlink" title="📌 HTTP&#x2F;3"></a>📌 HTTP&#x2F;3</h1><h2 id="❗️-TCP로-인한-문제점"><a href="#❗️-TCP로-인한-문제점" class="headerlink" title="❗️ TCP로 인한 문제점"></a>❗️ <strong>TCP로 인한 문제점</strong></h2><p>앞서 헤더 필드 압축을 통해 HTTP&#x2F;1.1에서 발생한 HOLB 문제를 해결했다고 하였지만 이와 별개로 <red>TCP로 인해 발생하는 HOLB 문제는 해결할 수 없다는 한계가 있었다.</red></p>
<ul>
<li>신뢰성 지향하기에 데이터 손실 발생 시 데이터를 재전송하는데 순서대로 처리해야하기 때문에 HOLB 문제를 해결할 수 없다.</li>
<li>혼잡제어를 수행하기 때문에 전송 속도를 낮은 상태에서 높이는 방식으로 속도 제어를 하는데 이는 네트워크 상황이 좋을 때 불필요한 지연을 발생시킨다.</li>
</ul>
<p>문제를 해결하기 위해 TCP&#x2F;IP기반이 아닌 <red>UDP기반인 QUIC 프로토콜 위에서 동작하는 HTTP&#x2F;3</red>가 나왔다.</p>
<p>⇒ UDP는 신뢰성을 보장하지 않는데 <strong>QUIC 신뢰성 기능을 직접 구현하여 신뢰성 기능이 제공되는 UDP 기반의 프로토콜</strong>이다.</p>
<h2 id="👍-HTTP-x2F-3-장점"><a href="#👍-HTTP-x2F-3-장점" class="headerlink" title="👍 HTTP&#x2F;3 장점"></a>👍 HTTP&#x2F;3 장점</h2><p><img src="/../../images/HTTP/RTT.png" alt="RTT"></p>
<ul>
<li><strong>0-RTT 기능</strong> : 연결 정보를 캐싱하여 재사용하여 다음 연결때는 바로 연결이 가능</li>
</ul>
<p><img src="/../../images/HTTP/UDP.png" alt="UDP"></p>
<ul>
<li><strong>연결 다중화 지원</strong> : 각 스트림이 독립적으로 동작한다.<ul>
<li>HTTP&#x2F;2 방식의 경우 TCP 특성상 데이터 손실이 발생할 경우 <strong>데이터 복구를 우선 처리하여 HOLB가 발생</strong>한다.</li>
<li>HTTP&#x2F;3는 데이터 손실이 발생해도 연결 내 스트림이 독립적으로 동작하기 때문에 <red>다른 스트림에 영향을 주지 않는다.</red></li>
</ul>
</li>
<li><strong>연결 별 고유 UUID 지원</strong><ul>
<li>TCP 기반의 통신은 wifi 환경에서 셀룰러 환경으로 이동하는경우 IP주소가 변경되어 연결 재수립 과정을 거쳐야하지만, QUIC는 UUID(Connection ID) 연결 ID 기반으로 식별하여 연결을 유지할 수 있다.</li>
</ul>
</li>
</ul>
<h1 id="📌-HTTP-Message"><a href="#📌-HTTP-Message" class="headerlink" title="📌 HTTP Message"></a>📌 HTTP Message</h1><p>HTTP 메시지는 서버와 클라이언트 간에 데이터가 교환되는 방식이다. 메시지 타입에는 <strong>요청(Request), 응답(Response)이 있다.</strong></p>
<p><img src="/../../images/HTTP/httpmsgstructure2.png" alt="request와response"></p>
<p>요청과 응답의 구조는 유사하다.</p>
<ol>
<li><p>실행 되어야 할 요청 또는 요청의 성공, 실패가 기록된 한줄</p>
</li>
<li><p>요청에 대한 설명, 메시지 본문에 대한 설명이 포함된 <strong>HTTP Header 세트</strong>(optional)</p>
</li>
<li><p>요청에 대한 모든 메타 정보가 전송되었음을 알리는 빈 줄(blank line)</p>
</li>
<li><p>요청과 관련된 내용이 옵션으로 들어가거나, 응답과 관련된 문서가 들어간다. 본문의 존재 유무는 첫 줄과 HTTP Header에 명시된다.</p>
</li>
</ol>
<h2 id="✏️-HTTP-Request"><a href="#✏️-HTTP-Request" class="headerlink" title="✏️ HTTP Request"></a>✏️ HTTP Request</h2><p>요청은 클라이언트가 서버로 전달해서 서버의 액션이 일어나게끔 하는 메시지이다.</p>
<h3 id="1-Start-Line"><a href="#1-Start-Line" class="headerlink" title="1. Start Line"></a>1. Start Line</h3><ol>
<li>HTTP 메서드</li>
</ol>
<p>GET,POST 등의 서버가 수행해야 할 동작을 나타낸다.</p>
<ol start="2">
<li>요청 타겟 : URL 또는 (프로토콜,포트, 도메인)</li>
</ol>
<p>요청 타겟 포맷은 HTTP 메서드에 따라 달라진다.</p>
<ul>
<li>Origin 형식 : 끝에 ‘?’와 쿼리 문자열이 붙는 절대경로이다. 가장 일반적인 형식으로 GET, POST, HEAD, OPTIONS 메서드와 함께 사용한다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP 1.1</span><br><span class="line">GET /background.png HTTP/1.0</span><br><span class="line">HEAD /test.html?query=alibaba HTTP/1.1</span><br><span class="line">OPTIONS /anypage.html HTTP/1.0</span><br></pre></td></tr></table></figure>

<ul>
<li>absolute 형식 : 완전한 URL 형식으로, 프록시에 연결하는 경우 대부분 GET과 사용한다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://developer.mozilla.org/en-US/docs/Web/HTTP/Messages HTTP/1.1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>마지막으로 HTTP 버전이 들어간다.</li>
</ol>
<h3 id="2-Header"><a href="#2-Header" class="headerlink" title="2. Header"></a><strong>2. Header</strong></h3><p>대소문자 구분없는 문자열 다음에 콜론(:)이 붙고 그 뒤에 오는 값은 Header에 따라 달라진다.</p>
<p><img src="/../../images/HTTP/http_request_headers3.png" alt="header"></p>
<ul>
<li>HTTP Method</li>
<li>HTTP Version</li>
<li>Host</li>
<li>Content-Type</li>
</ul>
<h3 id="3-Body-본문"><a href="#3-Body-본문" class="headerlink" title="3. Body(본문)"></a>3. Body(본문)</h3><p>모든 요청에 본문이 들어가지 않는다. GET, HEAD, DELETE, OPTIONS 처럼 리소스를 가져오는 요청은 본문이 필요 없다.</p>
<p>보통 POST 요청으로 서버에 데이터를 업데이트 하기 위해 본문이 필요하다.</p>
<p>본문은 두가지 종류로 나뉜다.</p>
<ul>
<li>단일-리소스 본문(single-resource bodies) : Header 2개(Content-Type, Content-Length)로 정의된 단일 파일</li>
<li>다중-리소스 본문(muliple-resource bodies) : 파트마다 다른 정보를 지닌다.</li>
</ul>
<h2 id="✏️-HTTP-Response"><a href="#✏️-HTTP-Response" class="headerlink" title="✏️ HTTP Response"></a>✏️ HTTP Response</h2><p>응답은 요청에 대한 서버의 답변이다.</p>
<h3 id="1-Start-Line-1"><a href="#1-Start-Line-1" class="headerlink" title="1. Start Line"></a>1. Start Line</h3><ol>
<li><p>프로토콜 버전 (보통 HTTP&#x2F;1.1)</p>
</li>
<li><p>상태 코드 : 요청의 성공 여부를 나타낸다. 200, 404 또는 302</p>
</li>
<li><p>상태 텍스트 : 상태 코드에 대한 설명글</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 404 Not Found.</span><br></pre></td></tr></table></figure>

<h3 id="2-Header-1"><a href="#2-Header-1" class="headerlink" title="2. Header"></a><strong>2. Header</strong></h3><p>요청 Header와 동일한 구조이다.</p>
<p><img src="/../../images/HTTP/http_response_headers3.png" alt="resHeader"></p>
<ul>
<li>HTTP Version</li>
<li>Status</li>
<li>Content-Type</li>
<li><strong>Set-Cookie</strong></li>
</ul>
<h3 id="3-Body"><a href="#3-Body" class="headerlink" title="3. Body"></a>3. Body</h3><p>모든 응답에 Body가 들어가지는 않는다. 201, 204 상태 코드를 가진 응답은 Body가 없다.</p>
<h1 id="📌-HTTPS"><a href="#📌-HTTPS" class="headerlink" title="📌 HTTPS"></a>📌 HTTPS</h1><p>기존 프로토콜에서 데이터가 쉽게 도난당하는 것을 방지하기 위해 <strong>SSL(Secure Socket Layer) 또는 TLS(Transport Layer Security) 프로토콜</strong> 을 사용하여 <strong>브라우저와 서버를 암호화하여 연결해준다.</strong></p>
<p>또한 데이터가 전송중에 손상되거나 수정되는 것을 방지한다.</p>
<ul>
<li>구글같은 포털에서 SEO 가산점을 준다.</li>
</ul>
<h2 id="✏️-SSL-Secure-Socket-Layer-프로토콜"><a href="#✏️-SSL-Secure-Socket-Layer-프로토콜" class="headerlink" title="✏️ SSL(Secure Socket Layer) 프로토콜"></a>✏️ SSL(Secure Socket Layer) 프로토콜</h2><p>HTTPS 프로토콜이 텍스트를 암호화 할 수 있도록 도와주는 프로토콜이다. 암호화 원리는 <strong>공개키 암호화 방식</strong>이다.</p>
<blockquote>
<p>SSL 프로토콜 통제권을 IETF로 넘기면서 TLS로 바뀐 상태인데 현재는 두가지를 혼용해서 사용하고 있다.</p>
</blockquote>
<h3 id="공개키-암호화-방식"><a href="#공개키-암호화-방식" class="headerlink" title="공개키 암호화 방식"></a>공개키 암호화 방식</h3><p>공개키 암호화 방식은 공개키와 개인키를 사용하는 방식이다.</p>
<ul>
<li>공개키는 모두에게 공개해서 사용하는 키이다.</li>
<li>개인키는 서버에서만 가지고 있는 키이다.</li>
</ul>
<h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><ol>
<li>A 서버가 HTTPS 적용하기 위해 공개키와 개인키를 만든다.</li>
<li>CA 기업을 선택하고 해당 CA 기업에게 공개키 관리를 부탁하며 계약한다.</li>
<li>CA 기업은 <strong>기업명, A 서버 공개키, 공개키 암호화 방법</strong>을 담은 인증서를 만들고 해당 인증서를 CA 기업의 개인키로 암호화해서 A 서버에게 제공한다.</li>
<li>A 서버는 CA 기업의 개인키로 암호화된 인증서를 가지고서 클라이언트로부터 HTTPS이 아닌 요청이 오면 암호화된 인증서를 건네준다.</li>
<li>클라이언트는 예를 들어 <code>main.html</code> 을 서버에 요청했다고 하자. HTTPS 요청이 아니기 때문에 CA기업의 개인키로 암호화된 인증서를 받게된다.<ul>
<li>CA 기업의 공개키는 모두에게 공개되므로 클라이언트는 인증서를 공개키로 복호화하여 A 서버 공개키를 얻었다.</li>
</ul>
</li>
<li>클라이언트가 A 서버에 요청을 보낼 때 텍스트를 공개키로 암호화하며 HTTPS 요청을 보낸다.</li>
<li>서버는 개인키로 암호화된 텍스트를 복호화하여 데이터를 해석하고 응답을 개인키로 암호화하여 클라이언트에게 보낸다.</li>
<li>클라이언트는 다시 공개키로 응답을 해석하여 해당 서버가 인증된 서버임을 알 수 있다.</li>
</ol>
<aside>
📌 단, 신뢰받는 CA 기업이 아닌 자체 인증서를 발급한 경우 브라우저에서 `주의 요함`, `안전하지 않는 사이트`같은 주의를 받게된다.

</aside>

<h2 id="📚-참고"><a href="#📚-참고" class="headerlink" title="📚 참고"></a>📚 참고</h2><ul>
<li><p><a href="https://velog.io/@jiseung/02-what-is-http#http3-2021">Velog&#x2F;@Jiseung</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP">[MDN] HTTP</a></p>
</li>
<li><p><a href="https://gyoogle.dev/blog/computer-science/network/HTTP%20&%20HTTPS.html">Tech Interview</a></p>
</li>
<li><p><a href="https://yozm.wishket.com/magazine/detail/1686/?utm_source=stibee&utm_medium=email&utm_campaign=newsletter_yozm&utm_content=contents">웹 개발자라면 알고 있어야 할 HTTP의 진화 과정 | 요즘IT</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 토큰 방식은 무엇인가요?</title>
    <url>/2023/01/09/CS/JWT-%ED%86%A0%ED%81%B0-%EB%B0%A9%EC%8B%9D%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="🛠-JWT-토큰-방식이란"><a href="#🛠-JWT-토큰-방식이란" class="headerlink" title="🛠 JWT 토큰 방식이란?"></a>🛠 JWT 토큰 방식이란?</h1><p>JWT는 JSON Web Token의 약자로, 인증에 필요한 데이터를 암호화한 JSON으로 이루어진 토큰을 말한다.</p>
<p>기존의 세션 인증방식은 인증관련 정보를 세션 저장소라는 DB에 저장하여 서버가 과부하 되거나 서버를 확장하기가 어려웠다.</p>
<p>이러한 문제 때문에 서버자원을 절약하기 위해 사용자 인증에 필요한 정보를 토큰 자체에 담아두는 JWT를 사용하게 되었다.</p>
<blockquote>
<p>토큰은 로그인 이후 서버가 만들어주는 문자열이고, 토큰 안에는 사용자의 로그인 정보와 서버의 서명이 들어있다.</p>
</blockquote>
<h1 id="JWT-토큰-방식-순서"><a href="#JWT-토큰-방식-순서" class="headerlink" title="JWT 토큰 방식 순서"></a>JWT 토큰 방식 순서</h1><ol>
<li>사용자가 로그인을 하면 서버는 사용자에게 사용자 로그인 정보 및 서버의 서명이 들어간 토큰을 발급한다.</li>
<li>사용자는 토큰을 가지고 권한이 필요한 API 작업을 요청한다.</li>
<li>서버는 토큰의 유효성 검사를 통해 요청에 응답한다.</li>
</ol>
<h1 id="JWT-토큰-특징"><a href="#JWT-토큰-특징" class="headerlink" title="JWT 토큰 특징"></a>JWT 토큰 특징</h1><h2 id="👍-장점"><a href="#👍-장점" class="headerlink" title="👍 장점"></a>👍 장점</h2><ul>
<li>서버에서 사용자 정보를 저장해둘 필요가 없어 서버 스케일링시 큰 문제가 없다.</li>
<li>별도의 I&#x2F;O 작업 없는 빠른 인증 처리 가능</li>
</ul>
<h2 id="👎-단점"><a href="#👎-단점" class="headerlink" title="👎 단점"></a>👎 단점</h2><ul>
<li>한번 발급된 토큰은 수정 및 폐기가 불가능하다.(클라이언트에게 있으니깐!)<ul>
<li>그렇기 때문에 유효기간을 짧게 설정해주는것이 중요하다.</li>
</ul>
</li>
<li>토큰의 길이가 늘어날 수록 네트워크 부하가 심해진다.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 데이터 타입에 대해 설명하라</title>
    <url>/2023/02/02/CS/JavaScript-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="JavaScript-데이터-타입"><a href="#JavaScript-데이터-타입" class="headerlink" title="JavaScript 데이터 타입"></a>JavaScript 데이터 타입</h1><p>자바스크립트는 크게 2가지의 데이터 타입으로 나뉜다.</p>
<ol>
<li><p>원시타입 (Primitive Data Type)</p>
</li>
<li><p>객체타입(참조타입) (Object Type, Reference Type)</p>
</li>
</ol>
<p>이 중에서도 원시타입에는 6가지의 타입이 존재하고 그 외의 것들은 모두 객체타입이다.</p>
<h2 id="Primitive-Data-Type-원시타입"><a href="#Primitive-Data-Type-원시타입" class="headerlink" title="Primitive Data Type (원시타입)"></a>Primitive Data Type (원시타입)</h2><p>원시타입의 종류는 6가지가 있다.</p>
<ul>
<li>number (숫자형)</li>
<li>string (문자형)</li>
<li>undefined</li>
<li>null</li>
<li>boolean (불리언형)</li>
<li>symbol</li>
</ul>
<p><strong>원시 타입의 값은 변경 불가능한 값이며, pass-by-value(값에 의한 전달)이다.</strong></p>
<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>Javascript에서는 숫자형을 모두 실수로 처리한다. 추가로 아래와 같은 자료도 숫자형이다.</p>
<ul>
<li>Infinity : 양의 무한대</li>
<li>-Infinity : 음의 무한대</li>
<li>NaN : 산술 연산 불가(Not A Number)</li>
</ul>
<blockquote>
<p>NaN은 자기 자신과 일치하지 않는 유일한 값이다. 그러므로 어떤 값이 NaN인지 판단하기 위해서는 Number.isNaN() 빌트인 함수를 사용하거나 Object.is() 메서드를 사용하여야 한다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>C언어와 다르게 JavaScript의 문자열은 원시타입으로 변경 불가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;World&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>위 코드에서 str 변수에 ‘World’라는 문자열로 데이터를 수정하는 것이 아니다.<br>임의의 메모리 주소를 갖는 메모리 공간에 ‘World’라는 문자열을 저장하고 변수의 식별자인 str이 새로운 메모리 주소를 가리켜 변수를 <b style="color:red">재할당</b>하는 것이다.</p>
<h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>참, 거짓을 나타내는 자료형이다. 암묵적 불리언 형변환이 발생하면 해당 값들을 false로 바꿔주는 falsy 값들이 있다.</p>
<h4 id="falsy"><a href="#falsy" class="headerlink" title="falsy"></a>falsy</h4><ul>
<li>“” (빈문자열)</li>
<li>undefined</li>
<li>null</li>
<li>0, -0</li>
<li>NaN</li>
</ul>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>변수의 선언 단계는 사실 선언단계와 초기화 단계 두 단계로 나눠서 볼 수 있는데, 초기화 단계에서 컴퓨터가 변수가 할당되기 이전에 undefined값으로 변수의 값을 초기화해준다.</p>
<p>때문에 이는 개발자의 의도가 담긴 것이 아니다.</p>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>변수의 값이 없다는 것에 개발자의 의도를 담고 싶다면 null을 사용한다. 자바스크립트는 대소문자를 구별하기 때문에 null, Null, NULL 모두 다른 값이다.</p>
<blockquote>
<p>함수가 유효한 값을 반환할 수 없는 경우 명시적을 null을 반환하기도 한다.</p>
</blockquote>
<p>null 값의 type을 확인하기 위해서는 typeof 연산자를 사용하는 것 대신 일치 연산자(&#x3D;&#x3D;&#x3D;)를 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line">foo === <span class="literal">null</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>심볼은 이름이 충돌한 위험이 없는 유일무이한 원시타입의 값이다. 주로 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">typeof</span> key; <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj[key] = <span class="string">&quot;value&quot;</span>; <span class="comment">// 이름이 충돌할 위험이 없는 유일무이한 값인 심볼을 프로퍼티 키로 사용</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-Type-Reference-Type-객체타입"><a href="#Object-Type-Reference-Type-객체타입" class="headerlink" title="Object Type, Reference Type (객체타입)"></a>Object Type, Reference Type (객체타입)</h2><p>객체란, 데이터와 그 데이터에 관련된 동작(절차, 방법, 기능 등)을 모두 포함할 수 있는 개념적 존재이다.</p>
<p>다시말해 데이터를 의미하는 <strong>프로퍼티</strong>와 동작을 의미하는 <strong>메소드</strong>를 포함할 수 있는 독립적 주체이다.</p>
<p>원시타입을 제외한 나머지 값(배열, 함수, 정규표현식 등)이 모두 객체이다. 객체는 pass-by-reference (참조에 의한 전달)이다.</p>
<h3 id="얕은-복사와-깊은-복사"><a href="#얕은-복사와-깊은-복사" class="headerlink" title="얕은 복사와 깊은 복사"></a>얕은 복사와 깊은 복사</h3><p>객체는 참조에 의한 전달을 하기 때문에 복사를 객체 데이터를 복사하였을 때, 서로의 참조값을 공유하고 있으므로 변경 사항도 공유되는 특징이 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy_obj = obj;</span><br><span class="line"></span><br><span class="line">copy_obj.<span class="property">name</span> = <span class="string">&quot;loco&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy_obj); <span class="comment">// &#123;name: &#x27;loco&#x27;, age: 29&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;loco&#x27;, age: 29&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy_obj === obj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>때문에 객체를 복사할 때에는 참조값을 다르게 복사해줘야한다. Object.assign 메서드를 사용하거나 ES6에 등장한 Spread 문법을 사용하여 객체를 복사할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy_obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"><span class="keyword">const</span> copy_obj2 = &#123; ...obj &#125;;</span><br><span class="line"></span><br><span class="line">copy_obj.<span class="property">name</span> = <span class="string">&quot;loco&quot;</span>;</span><br><span class="line">copy_obj2.<span class="property">name</span> = <span class="string">&quot;mac&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;yiju&#x27;, age: 29&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy_obj); <span class="comment">// &#123;name: &#x27;loco&#x27;, age: 29&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy_obj2); <span class="comment">// &#123;name: &#x27;mac&#x27;, age: 29&#125;</span></span><br></pre></td></tr></table></figure>

<p>위와 같은 방식을 얕은 복사라고 부른다. <strong>왜냐하면 depth가 1단계 밖에 복사하지 못하기 때문이다.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="attr">school</span>: &#123; <span class="attr">high</span>: <span class="string">&quot;donghwa&quot;</span>, <span class="attr">univ</span>: <span class="string">&quot;kangwon&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> copy_obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">copy_obj.<span class="property">age</span> = <span class="number">40</span>;</span><br><span class="line">copy_obj.<span class="property">school</span>.<span class="property">high</span> = <span class="string">&quot;Yebong&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;name:&#x27;yiju&#x27;, age:40, school: &#123;high: &#x27;Yebong&#x27;, univ:&#x27;kangwon&#x27;&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy_obj);</span><br><span class="line"><span class="comment">// &#123;name:&#x27;yiju&#x27;, age:29, school: &#123;high: &#x27;Yebong&#x27;, univ:&#x27;kangwon&#x27;&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

<p>1단계 깊이인 age는 다른 참조값을 공유하지 않지만 2단계 깊이인 school의 객체값은 참조값을 공유하고 있다.</p>
<p>깊은 복사를 하기 위해서는 재귀적으로 객체 내부를 단계별로 복사를 해줘야 가능하다. 혹은 라이브러리를 사용하여 구현할 수 있다.</p>
<blockquote>
<p>JSON.stringify()를 사용할 수 도 있지만 이 방법은 메서드까진 복사할 수 없기 때문에 추천되지 않는다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>Next.js는 왜 사용하나요?</title>
    <url>/2023/01/11/CS/Next-js%EB%8A%94-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94/</url>
    <content><![CDATA[<h1 id="Next-js를-왜-사용하나요"><a href="#Next-js를-왜-사용하나요" class="headerlink" title="Next.js를 왜 사용하나요?"></a>Next.js를 왜 사용하나요?</h1><p><strong>Next.js는 빠르게 웹 애플리케이션을 만들기 위한 React 프레임워크이다.</strong></p>
<p>우리가 웹 애플리케이션을 만들기 위해서는 단순히 React로 코드만 짜서는 만들 수 없다.</p>
<p>UI는 물론, 라우팅, 데이터 패칭, 렌더링, 성능 최적화, 확장성, DX 까지도 고려하여 웹 애플리케이션을 만들어야한다.</p>
<p>그렇기 때문에 우리는 각 부분을 직접 구현할 지 아니면 라이브러리나 프레임워크와 같은 도구를 사용할지 결정해야한다.</p>
<p><strong>즉, 우리는 React로 UI를 구축한 뒤 Next.js의 기능을 점진적으로 도입하여 라우팅, 데이터 가져오기 등 애플레이케이션 요구사항을 해결함과 동시에 UX, DX까지 개선할 수 있다.</strong></p>
<h2 id="Next-js-특징"><a href="#Next-js-특징" class="headerlink" title="Next.js 특징"></a>Next.js 특징</h2><h3 id="👍-장점"><a href="#👍-장점" class="headerlink" title="👍 장점"></a>👍 장점</h3><ul>
<li>SWR을 사용하여 컴파일, 축소, 코드분할, 번들링 작업을 하고 Babel보다 17배 빠른 컴파일 속도를 갖는다.</li>
<li>페이지 별 SSR, CSR, SSG를 사용할 수 있다. 이를 통해 SEO 최적화 가능</li>
<li>React 프로젝트에서 Next.js로 점진적 마이그레이션 용이</li>
</ul>
<h3 id="👎-단점"><a href="#👎-단점" class="headerlink" title="👎 단점"></a>👎 단점</h3><ul>
<li>SSR을 사용하여 서버 부하가 있을 수 있다.</li>
<li>페이지 이동 시 깜빡거림</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>OOP에 대해 설명하세요</title>
    <url>/2023/01/17/CS/OOP%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EC%84%B8%EC%9A%94/</url>
    <content><![CDATA[<h1 id="OOP란-무엇인가요"><a href="#OOP란-무엇인가요" class="headerlink" title="OOP란 무엇인가요?"></a>OOP란 무엇인가요?</h1><p>OOP(Obeject-Oriented-Programming)는 객체지향 프로그래밍을 말한다.</p>
<p>객체지향 프로그래밍이란, 실세계에 존재하고 우리가 인지하는 객체라는 대상을 추상화하여 프로그래밍에 접목 시킨 방식으로,</p>
<p>프로그래밍 관점에서 데이터를 추상화할 때, <strong>상태와 행동을 가진 객체를 만들고 이 객체들간의 유기적인 상호작용</strong>을 통해 로직을 구성하는 프로그래밍 방식을 객체지향 프로그래밍이라 한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TV</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Samsung UHD Ultra&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="string">&quot;1,000,000원&quot;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  <span class="attr">volume</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">volumeUp</span>(<span class="params">num = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> += num;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">volumeDown</span>(<span class="params">num = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> -= num;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>위는 TV라는 데이터를 상태와 행동으로 추상화한 객체로 표현한 것이다.</p>
<h2 id="OOP의-특징은-무엇인가요"><a href="#OOP의-특징은-무엇인가요" class="headerlink" title="OOP의 특징은 무엇인가요?"></a>OOP의 특징은 무엇인가요?</h2><h3 id="1-캡슐화"><a href="#1-캡슐화" class="headerlink" title="1. 캡슐화"></a>1. 캡슐화</h3><p>캡슐화란 객체를 특정한 목적을 위해 변수 혹은 메서드 하나로 묶는 것을 말한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">getCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>위 예시는 counter를 캡슐화한 예시이다. 이렇게 캡슐화를 하게되면 count라는 변수에 대해 참조하거나 변경하는 함수를 통해서만 간접적으로 접근이 가능하도록 하여 <span style='color:red;'>해당 데이터를 은닉하고 안전하게 보존하기 위해 사용한다.</span></p>
<h3 id="2-추상화"><a href="#2-추상화" class="headerlink" title="2. 추상화"></a>2. 추상화</h3><p>우리는 앞서 TV라는 데이터를 추상화하였다. 하지만 추상화는 예시처럼 간단하지만은 않다. 추상적으로 큰 틀에 공통적인 요소나 필수적인 요소를 담는 것을 말한다.</p>
<p>다시 TV의 예를 들어보겠다. 우리가 실생활의 모든 데이터(TV, 냉장고, 인덕션, 청소기 등)를 모두 개별적으로 만드는 것보단 이들의 공통적인 특성을 가진 큰 틀의 객체를 만들고 해당 객체의 상속을 받고 본인만의 특별한 기능을 추가하는 방법으로 객체를 생성해나가는 것이 <span style='color:red;'>중복을 줄이고 확장성의 장점을 살려</span> 추상화를 할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HomeAppliance</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TV</span> = <span class="keyword">new</span> <span class="title class_">HomeAppliance</span>(<span class="string">&quot;Samsung UHD Smart TV&quot;</span>, <span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Refrigerator</span> = <span class="keyword">new</span> <span class="title class_">HomeAppliance</span>(<span class="string">&quot;Samsung BSpoke&quot;</span>, <span class="number">2000000</span>);</span><br><span class="line"><span class="keyword">const</span> vacuumCleaner = <span class="keyword">new</span> <span class="title class_">HomeAppliance</span>(<span class="string">&quot;Dyson&quot;</span>, <span class="number">800000</span>);</span><br></pre></td></tr></table></figure>

<p>위 예시처럼 가전제품이라는 데이터를 추상화하여 객체로 생성한 뒤, 해당 객체의 상속을 받아 공통적인 행동을 할 수 있는 객체를 생성하여 TV, 냉장고, 청소기 데이터를 추상화하였다.</p>
<h3 id="3-상속-및-다형성"><a href="#3-상속-및-다형성" class="headerlink" title="3. 상속 및 다형성"></a>3. 상속 및 다형성</h3><p>다형성은 같은 동작이지만 다른 결과물을 반환하는 특징을 말한다.</p>
<p>상속과 다형성을 통해 기능을 확장하거나 변경하는 것이 가능하다. 그렇게 되면 <span style='color:red;'>코드의 재사용 및 코드 길이 감소되고 유지보수가 용이해지는 장점이 있다.</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 숫자를 문자열로 바꾸는 경우</span></span><br><span class="line"><span class="keyword">const</span> number = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> string1 = number.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 날짜를 문자열로 바꾸는 경우</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> string2 = date.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure>

<p>위 예시는 다형성의 예시이다. toString()이라는 메서드를 사용하여 타입에 따라 적절한 변환 방식을 정의해둠으로써 객체의 종류와 상관없는 추상도가 높은 변환 형식을 구현할 수 있다는 장점이 있다.</p>
<p>이러한 다형성의 개념을 녹여내는 방법은 오버라이딩(Overriding), 오버로딩(Overloading) 두가지가 있다.</p>
<h4 id="오버라이딩-Overriding"><a href="#오버라이딩-Overriding" class="headerlink" title="오버라이딩(Overriding)"></a>오버라이딩(Overriding)</h4><p>자식 클래스가 부모 클래스에게 상속받은 메서드를 특정 형태로 구현하는 것을 말한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, legs</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">legs</span> = legs;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;move forward faster!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat food&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;move like a dog!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Wal! Wal!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;eagle&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;seechu&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">dog.<span class="title function_">move</span>(); <span class="comment">// move like a dog!</span></span><br><span class="line">animal.<span class="title function_">move</span>(); <span class="comment">// move forward faster!!</span></span><br></pre></td></tr></table></figure>

<p>위 예시에서 자식 클래스는 부모 클래스에게 상속받은 move 메서드를 새롭게 정의하였다. 그리고 자식 클래스의 인스턴스와 부모 클래스의 인스턴스에서 각각 move 메서드를 사용했을 때, 각자 클래스에 정의된 move 메서드가 동작하는 것을 알 수 있다.</p>
<h4 id="오버로딩-Overloading"><a href="#오버로딩-Overloading" class="headerlink" title="오버로딩(Overloading)"></a>오버로딩(Overloading)</h4><p>하나의 클래스안에서 같은 이름의 메서드를 사용하지만 매개변수, Return Type 등의 특징에 따라 다른 용도로 사용되도록 구현하는 것을 말한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, legs</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">legs</span> = legs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params">direction, distance</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!direction || !distance) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;move forward faster!!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`move <span class="subst">$&#123;direction&#125;</span> for <span class="subst">$&#123;distance&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat food&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pig = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;kong-e&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">pig.<span class="title function_">move</span>(); <span class="comment">// move forward faster!!</span></span><br><span class="line">pig.<span class="title function_">move</span>(<span class="string">&quot;right&quot;</span>, <span class="string">&quot;10m&quot;</span>); <span class="comment">// move right for 10m</span></span><br></pre></td></tr></table></figure>

<p>위 예시는 자바스크립트에서 오버로딩을 구현한 예시이다. move라는 메서드를 사용할 때, 매개변수가 있고 없고에 따라 다르게 동작하도록 구현하였다.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>REST API란 무엇인가요?</title>
    <url>/2023/01/18/CS/REST-API%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="REST-API란-무엇인가요"><a href="#REST-API란-무엇인가요" class="headerlink" title="REST API란 무엇인가요?"></a>REST API란 무엇인가요?</h1><p>자원의 이름으로 구분하여 해당 자원의 상태(정보)를 주고 받는 것을 의미한다. REST API는 HTTP 프로토콜을 의도에 맞게 디자인 하도록 유도하고 있다.</p>
<p>즉, REST는 HTTP를 기반으로 클라이언트가 서버의 리소스에 접근하는 방식을 규정한 아키텍처이고 REST API는 REST를 기반으로 서비스 API를 구현한 것이다.</p>
<h2 id="REST-API의-구성"><a href="#REST-API의-구성" class="headerlink" title="REST API의 구성"></a>REST API의 구성</h2><ul>
<li>자원 : 모든 자원에는 고유한 ID가 존재하고 ID는 &#x2F;store&#x2F;:store_ID와 같은 HTTP URI이다.</li>
<li>행위 : 자원에 대한 행위 (HTTP 요청 메서드)</li>
<li>표현 : 자원에 대한 행위의 구체적 내용 (페이로드, JSON)</li>
</ul>
<h2 id="REST-API-설계-규칙"><a href="#REST-API-설계-규칙" class="headerlink" title="REST API 설계 규칙"></a>REST API 설계 규칙</h2><h3 id="1-URI는-리소스를-표현하는데-집중하고-마지막에-슬래시-포함하지-않는다"><a href="#1-URI는-리소스를-표현하는데-집중하고-마지막에-슬래시-포함하지-않는다" class="headerlink" title="1. URI는 리소스를 표현하는데 집중하고 마지막에 슬래시 포함하지 않는다."></a>1. URI는 리소스를 표현하는데 집중하고 마지막에 슬래시 포함하지 않는다.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># bad</span><br><span class="line"><span class="variable constant_">GET</span> /getTodos/<span class="number">1</span></span><br><span class="line"><span class="variable constant_">GET</span> /todos/show/<span class="number">1</span></span><br><span class="line"><span class="variable constant_">GET</span> /todos/<span class="number">1</span>/</span><br><span class="line"></span><br><span class="line"># good</span><br><span class="line"><span class="variable constant_">GET</span> /todos/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-행위에-대한-정의는-HTTP-요청-메서드를-통해-정의한다"><a href="#2-행위에-대한-정의는-HTTP-요청-메서드를-통해-정의한다" class="headerlink" title="2. 행위에 대한 정의는 HTTP 요청 메서드를 통해 정의한다."></a>2. 행위에 대한 정의는 HTTP 요청 메서드를 통해 정의한다.</h3><table>
<thead>
<tr>
<th>HTTP 요청 메서드</th>
<th>종류</th>
<th>목적</th>
<th>페이로드</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>index&#x2F;retrieve</td>
<td>모든&#x2F;특정 리소스 취득</td>
<td>X</td>
</tr>
<tr>
<td>POST</td>
<td>create</td>
<td>리소스 생성</td>
<td>O</td>
</tr>
<tr>
<td>PUT</td>
<td>replace</td>
<td>리소스 전체 교체</td>
<td>O</td>
</tr>
<tr>
<td>PATCH</td>
<td>modify</td>
<td>리소스 일부 수정</td>
<td>O</td>
</tr>
<tr>
<td>DELETE</td>
<td>delete</td>
<td>모든&#x2F;특정 리소스 삭제</td>
<td>X</td>
</tr>
</tbody></table>
<ul>
<li>리소스에 대한 행위는 HTTP 요청 메서드를 통해 표현하며 URI에 표현하지 않는다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># bad</span><br><span class="line"><span class="variable constant_">GET</span> /todos/<span class="keyword">delete</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># good</span><br><span class="line"><span class="variable constant_">DELETE</span> /todos/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="3-슬래시-구분자-x2F-는-계층-관계를-표현"><a href="#3-슬래시-구분자-x2F-는-계층-관계를-표현" class="headerlink" title="3. 슬래시 구분자(&#x2F;)는 계층 관계를 표현"></a>3. 슬래시 구분자(&#x2F;)는 계층 관계를 표현</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/stores/restaurant</span></span><br></pre></td></tr></table></figure>

<h3 id="4-불가피하게-긴-URI인-경우-하이픈-사용"><a href="#4-불가피하게-긴-URI인-경우-하이픈-사용" class="headerlink" title="4. 불가피하게 긴 URI인 경우 하이픈(-) 사용"></a>4. 불가피하게 긴 URI인 경우 하이픈(-) 사용</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/stores/very-long-store</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>단 밑줄(_)은 포함하지 않는다.</p>
</blockquote>
<h3 id="5-파일-확장자는-URI에-포함하지-않는다"><a href="#5-파일-확장자는-URI에-포함하지-않는다" class="headerlink" title="5. 파일 확장자는 URI에 포함하지 않는다."></a>5. 파일 확장자는 URI에 포함하지 않는다.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># bad</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/stores/restaurant/:1/logo.png</span></span><br><span class="line"></span><br><span class="line"># good</span><br><span class="line"><span class="variable constant_">GET</span> /stores/restaurant/:<span class="number">1</span>/logo <span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="attr">HOST</span>: example.<span class="property">com</span> <span class="title class_">Accept</span>: image/png</span><br></pre></td></tr></table></figure>

<ul>
<li>대신 Accept header를 사용한다.</li>
</ul>
<h2 id="RESTful한-REST-API-설계하기"><a href="#RESTful한-REST-API-설계하기" class="headerlink" title="RESTful한 REST API 설계하기"></a>RESTful한 REST API 설계하기</h2><p>RESTful은 이해하기 쉽고 사용하기 쉬운 REST API를 만들고, 일관적인 컨벤션을 통해 API의 이해도를 높이는 것을 말한다.</p>
<h3 id="REST-API-설계-예시"><a href="#REST-API-설계-예시" class="headerlink" title="REST API 설계 예시"></a>REST API 설계 예시</h3><table>
<thead>
<tr>
<th>CRUD</th>
<th>HTTP verbs</th>
<th>Route</th>
</tr>
</thead>
<tbody><tr>
<td>resource 목록 표시</td>
<td>GET</td>
<td>&#x2F;resource</td>
</tr>
<tr>
<td>resource 하나 내용 표시</td>
<td>GET</td>
<td>&#x2F;resource&#x2F;:id</td>
</tr>
<tr>
<td>resource 생성</td>
<td>POST</td>
<td>&#x2F;resource</td>
</tr>
<tr>
<td>resource 수정</td>
<td>PUT</td>
<td>&#x2F;resource&#x2F;:id</td>
</tr>
<tr>
<td>resource 삭제</td>
<td>DELETE</td>
<td>&#x2F;resource&#x2F;:id</td>
</tr>
</tbody></table>
<h4 id="응답상태-코드"><a href="#응답상태-코드" class="headerlink" title="응답상태 코드"></a>응답상태 코드</h4><table>
<thead>
<tr>
<th>상태코드</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>전송 프로토콜 수준의 정보 교환</td>
</tr>
<tr>
<td>2xx</td>
<td>클라이언트 요청 성공</td>
</tr>
<tr>
<td>3xx</td>
<td>클라이언트 요청 완료하기 위해 추가 행동 필요</td>
</tr>
<tr>
<td>4xx</td>
<td>클라이언트의 잘못된 요청</td>
</tr>
<tr>
<td>5xx</td>
<td>서버쪽 오류</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>SPA는 무엇인가요?</title>
    <url>/2023/01/06/CS/SPA%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="✏️-SPA란"><a href="#✏️-SPA란" class="headerlink" title="✏️ SPA란?"></a>✏️ SPA란?</h1><p><strong>Single Page Application의 약자로, 단일 페이지로 구성된 애플리케이션을 말한다.</strong></p>
<p>전통적으로 브라우저는 서버에서 HTML을 받아 렌더링 해주는 역할을 한다. 즉, 사용자가 다른 URL로 이동하거나 사용자 액션에 의해 화면의 UI가 변경될 때마다 서버에 HTML을 요청하고 응답받는 서버측 렌더링(SSR)을 사용한다.</p>
<p>하지만 오늘날 최신 SPA에서는 대화형 요소와 동적인 요소가 많아 클라이언트가 작업을 수행하고 작업에 대한 응답을 받을 수 있는 <strong>클라이언트 사이드 렌더링(CSR)을 사용한다.</strong></p>
<h1 id="🤓-SPA-동작-원리"><a href="#🤓-SPA-동작-원리" class="headerlink" title="🤓 SPA 동작 원리"></a>🤓 SPA 동작 원리</h1><ol>
<li>브라우저는 웹에 필요한 소스코드 및 스타일 시트를 서버로부터 응답받아 초기 페이지를 렌더링한다.</li>
<li>대화형 요소, 동적인 요소에 의해 새 페이지가 필요해지면, 새 페이지에 필요한 새 데이터는 서버에게 AJAX 요청을 보낸다. 이후 SPA는 초기 페이지 로드시 다운로드한 JavaScript를 통해 응답받은 데이터를 페이지에 동적으로 업데이트한다.</li>
</ol>
<blockquote>
<p>사용자가 다른 페이지로 이동할 때 새로고침이 발생하지 않는다. 페이지의 URL은 <strong>HTML5 History API</strong>를 통해 업데이트된다.</p>
</blockquote>
<h1 id="📚-SPA-특징"><a href="#📚-SPA-특징" class="headerlink" title="📚 SPA 특징"></a>📚 SPA 특징</h1><h3 id="👍-장점"><a href="#👍-장점" class="headerlink" title="👍 장점"></a>👍 장점</h3><ul>
<li>앱의 반응속도가 빨라지고 새로고침으로 인한 깜빡임 현상이 사라진다.</li>
<li>페이지 렌더링 시 중복된 데이터를 다시 다운받을 필요가 없어 서버에 대한 HTTP 요청이 줄어든다.</li>
<li>클라이언트와 서버간의 문제를 명확히 구분할 수 있다. 서버 코드를 수정하지 않고도 다양한 플랫폼을 위한 새로운 클라이언트를 쉽게 구축할 수 있다.</li>
</ul>
<h3 id="👎-단점"><a href="#👎-단점" class="headerlink" title="👎 단점"></a>👎 단점</h3><ul>
<li>초기에 웹에 필요한 모든 데이터를 서버로 부터 로드 받기 때문에 초기 페이지 로드 시간이 길다.</li>
<li>모든 요청을 단일 진입점으로 라우트하고 클라이언트 측 라우팅이 단일 진입점에서 응답받을 수 있도록 서버를 구성하는 추가 단계가 필요하다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 브라우저 새로고침 시 서버는 index.html 파일을 응답하고 클라이언트는 window.location.pathname을 참조해 라우팅</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>SPA는 JavaScript에 의존하는데 검색 엔진이 크롤링 중에 JavaScript를 실행하지 않기 때문에 해당 웹이 빈 컨텐츠로 표시될 수 있어 SEO 최적화에 부적합하다.<blockquote>
<p>이를 해결하기 위해 서버측에서 앱을 렌더링하거나 Prerender 같은 서비스를 사용하여 브라우저에서 JavaScript를 렌더링하고 정적 HTML을 저장한 다음 크롤러에게 반환할 수 있다.</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>SSR과 CSR에 대해 설명하라</title>
    <url>/2023/01/12/CS/SSR%EA%B3%BC-CSR%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="🐥-SSR과-CSR에-대해-설명하라"><a href="#🐥-SSR과-CSR에-대해-설명하라" class="headerlink" title="🐥 SSR과 CSR에 대해 설명하라"></a>🐥 SSR과 CSR에 대해 설명하라</h1><p>SSR은 서버 사이드 렌더링의 줄임말로, 클라이언트가 서버에 요청을 보낼 때 서버에서 HTML,JS 등을 렌더링하고 클라이언트에게 완성된 HTML 파일을 응답해주는 방식이다.</p>
<p>CSR은 서버에 요청을 보내면 서버에서 HTML,JS 리소스 파일등을 받은 이후 브라우저에서 렌더링을 진행하는 것이다. 이후 클라이언트는 서버에게 데이터만 요청하면서 브라우저가 렌더링한 페이지에 서버의 응답으로 받은 데이터만 패칭해주면 된다.</p>
<h2 id="😃-특징"><a href="#😃-특징" class="headerlink" title="😃 특징"></a>😃 특징</h2><h3 id="✈️-초기-로딩-속도"><a href="#✈️-초기-로딩-속도" class="headerlink" title="✈️ 초기 로딩 속도"></a>✈️ 초기 로딩 속도</h3><p>SSR은 클라이언트가 요청한 부분의 페이지만 렌더링해서 보내주면 되므로 초기 로딩 속도가 CSR에 비해서 빠른 반면, CSR은 HTML,JS, 모든 리소스를 한번에 로드하기 때문에 초기 로드 속도가 느리다.</p>
<h3 id="❗️-서버-부하"><a href="#❗️-서버-부하" class="headerlink" title="❗️ 서버 부하"></a>❗️ 서버 부하</h3><p>SSR은 View가 바뀔 때마다 서버에 요청을 보내고 서버는 그 때마다 응답해줘야하므로 서버의 부하가 높고 UX 측면에서는 깜빡임 현상이 있는 단점이 있다. 반면, CSR은 데이터 요청이 있을 때만 서버에 요청을 하기 때문에 서버 부하가 적다.</p>
<h3 id="📚-SEO"><a href="#📚-SEO" class="headerlink" title="📚 SEO"></a>📚 SEO</h3><p>SSR은 서버가 렌더링을 하고 완성된 페이지를 클라이언트에게 보내주는데, 그 안에는 SEO에 사용되는 meta 태그 등이 미리 정의 되어 있어 SEO 측면에서 유리하다. 반면 CSR은 초기에 비어있는 HTML 파일을 보내주고 JS를 다운로드하여 브라우저에서 렌더링이 완료되기 전까지는 빈 파일로 남아있기 때문에, SEO 측면에서 불리하다.</p>
<h3 id="Next-js에서-SSR-CSR"><a href="#Next-js에서-SSR-CSR" class="headerlink" title="Next.js에서 SSR,CSR"></a>Next.js에서 SSR,CSR</h3><p>이번 과제에서 Next.js를 사용하면서 새롭게 배우게 된 사실을 정리해본다. Next.js는 기본적으로 SSR을 지원한다. SSR을 지원하는 방법으로는 2가지 방법이 있는데,</p>
<p>첫번째, 클라이언트가 요청할 때마다 서버에서 렌더링을 해주는 진짜 SSR 방식</p>
<p>두번째, 미리 렌더링을 끝내놓은 페이지를 클라이언트가 요청할 때마다 캐싱하여 보여주는 SSG 방식</p>
<p>그리고 CSR까지 지원해준다.</p>
<p>Next.js를 사용하다보니 SSR, CSR, SSG에 대한 이해가 더 잘되는 것 같아서 마무리로 적어보았다.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>this가 어떻게 작동하나요?</title>
    <url>/2023/01/03/CS/this%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%82%98%EC%9A%94/</url>
    <content><![CDATA[<h1 id="this는-무엇인가"><a href="#this는-무엇인가" class="headerlink" title="this는 무엇인가?"></a>this는 무엇인가?</h1><p>this는 자바스크립트 언어에서 매우 추상적인 부분 중에 하나이다. 그래도 한마디로 단정짓는다면, <strong>this는 자기 자신을 나타내기 위한 키워드이다.</strong></p>
<p>좀 더 자세히 말하면 <strong>자신이 속한 객체나 자신이 생성할 객체를 가리키는 자기 참조 변수이다.</strong></p>
<ul>
<li>this는 자바스크립트 엔진에 의해 암묵적으로 생성된다.</li>
</ul>
<p>함수를 호출하면 arguments 객체와 this가 암묵적으로 함수 내부에 전달된다. arguments 객체를 함수 내부에서 지역변수처럼 사용할 수 있듯이 this도 마찬가지이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this로 자신이 속한 객체 참조</span></span><br><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="title function_">getValue</span>()); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 자신이 생성할 객체 참조</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Circle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getDiameter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle.<span class="title function_">getDiameter</span>()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p style="color:red;">this에 바인딩될 값은 함수 호출 방식에 의해 동적으로 결정되는 특징이 있다.</p> 
그러므로 this를 어떻게 호출하느냐에 따라 this 값이 달라지게 된다.

<h1 id="this의-작동원리-in-JavaScript"><a href="#this의-작동원리-in-JavaScript" class="headerlink" title="this의 작동원리 in JavaScript"></a>this의 작동원리 in JavaScript</h1><h2 id="1-일반-함수로-호출"><a href="#1-일반-함수로-호출" class="headerlink" title="1. 일반 함수로 호출"></a>1. 일반 함수로 호출</h2><p>일반 함수로 호출할 경우 해당 함수 내부의 this는 전역 객체에 바인딩된다.</p>
<p>이 때, 중첩함수, 콜백함수가 일반함수로 호출되는 경우에도 마찬가지이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// &#123;value: 100, foo: ƒ&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 내에서 정의한 중첩 함수</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다.</span></span><br><span class="line">    <span class="title function_">bar</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 콜백함수가 일반함수로 호출되는 경우</span></span><br><span class="line">  <span class="title function_">boo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// &#123;value: 100, foo: ƒ&#125;</span></span><br><span class="line">    <span class="comment">// 콜백 함수 내부의 this에는 전역 객체가 바인딩된다.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-new-키워드-사용하여-생성자-함수로-호출"><a href="#2-new-키워드-사용하여-생성자-함수로-호출" class="headerlink" title="2. new 키워드 사용하여 생성자 함수로 호출"></a>2. new 키워드 사용하여 생성자 함수로 호출</h2><p>new 키워드로 함수를 호출할 경우 자바스크립트는 해당 함수를 생성자 함수로 판단하고 암시적으로 다음 행동을 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩된다.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. this에 바인딩되어 있는 인스턴스를 초기화</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getDiameter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.</span></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>새로운 객체를 생성하고 this를 바인딩한다.</li>
<li>this에 바인딩 되어 있는 객체를 초기화한다.</li>
<li>해당 함수는 return 하는 값이 없다면 this가 암묵적으로 반환된다.</li>
</ol>
<p>생성자 함수는 this가 바인딩된 객체를 암묵적으로 반환하기 때문에, 생성자 함수로 호출 시 생성자 함수 내부의 this는 생성자 함수가 미래에 생성할 객체에 바인딩된다.</p>
<blockquote>
<p>new 키워드를 사용한 함수 내부에서 return을 명시적으로 해준다는 것은 this를 암묵적으로 반환하는 생성자 함수 행동을 훼손하므로 이는 안티 패턴이다.</p>
</blockquote>
<h2 id="3-메서드로-호출"><a href="#3-메서드로-호출" class="headerlink" title="3. 메서드로 호출"></a>3. 메서드로 호출</h2><p>메서드란, 객체의 프로퍼티 값이 함수인 경우를 해당 함수를 메서드라고 부른다.</p>
<p>메서드로 호출될 경우 메서드 내부의 this는 <span style="color:red;">해당 메서드가 속한 객체가 아닌 메서드를 호출한 객체에 바인딩된다.</span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// Lee</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">getName</span>()); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure>

<p><code>getName()</code>이라는 메서드가 person 객체 내부에 있으니 메서드로 호출 시 this 바인딩이 메서드를 포함하는 객체인 person에 될 것이라 생각하는 것은 잘못된 생각이다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherPerson = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// getName 메서드를 anotherPerson 객체의 메서드로 할당</span></span><br><span class="line">anotherPerson.<span class="property">getName</span> = person.<span class="property">getName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getName 메서드를 호출한 객체는 anotherPerson이다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="title function_">getName</span>()); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure>

<ul>
<li>위와 같이 getName 메서드를 <code>anotherPerson</code> 객체의 메서드로 할당한 경우, getName 메서드 내부의 this는 자신을 호출한 객체에 바인딩 되기 때문에 <code>anotherPerson.name</code>을 참조하게 된다.</li>
</ul>
<h2 id="4-apply-call-bind-함수에-의한-간접-호출"><a href="#4-apply-call-bind-함수에-의한-간접-호출" class="headerlink" title="4. apply,call,bind 함수에 의한 간접 호출"></a>4. apply,call,bind 함수에 의한 간접 호출</h2><p>이 경우 함수 내부의 this는 인수로 전달된 객체에 바인딩된다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getThisBinding</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 사용할 객체</span></span><br><span class="line"><span class="keyword">const</span> thisArg = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getThisBinding</span>()); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">apply</span>(thisArg)); <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">call</span>(thisArg)); <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 메서드는 첫 번째 인수로 전달한 thisArg로 this 바인딩이 교체된</span></span><br><span class="line"><span class="comment">// getThisBinding 함수를 새롭게 생성해 반환한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">bind</span>(thisArg)); <span class="comment">// getThisBinding</span></span><br><span class="line"><span class="comment">// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">bind</span>(thisArg)()); <span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>call, apply의 반환값은 호출한 함수의 반환값이다.</li>
<li>bind는 함수를 호출하지 않고 인수로 전달받은 객체로 this 바인딩이 교체된 함수를 새롭게 생성하여 반환한다.</li>
</ul>
<p>과거에는 this를 불일치 문제를 bind 함수를 사용하여 해결하였다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">foo</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>); <span class="comment">// ② Hi! my name is .</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>일반 함수로 호출된 콜백 함수 내부의 this.name은 브라우저 환경에서 window.name과 같다.</li>
<li>브라우저 환경에서 window.name은 브라우저 창의 이름을 나타내는 빌트인 프로퍼티이며 기본값은 ‘’이다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">foo</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>); <span class="comment">// ② Hi! my name is Lee.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-화살표-함수로-호출"><a href="#5-화살표-함수로-호출" class="headerlink" title="5. 화살표 함수로 호출"></a>5. 화살표 함수로 호출</h2><p>화살표 함수로 호출할 경우 위의 규칙을 모두 무시하고 화살표 함수가 생성된 시점에서 상위 스코프의 this에 바인딩된다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// Window</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">far</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arrow</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherObj = &#123;</span><br><span class="line">  <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function">() =&gt;</span> <span class="variable language_">this</span>)();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">far</span>(); <span class="comment">// Window</span></span><br><span class="line">anotherObj.<span class="title function_">baz</span>(); <span class="comment">// anotherObj</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/this/thisExample.png" alt="this 화살표함수 예시"></p>
<ul>
<li>arrow 함수는 생성된 시점에서 상위 스코프의 this는 전역객체(Window)이다.</li>
<li>anotherObj 객체의 baz 메서드 내부의 this는 자신을 호출한 객체에 바인딩된다. 그러므로 화살표 함수 내부의 this는 자신이 생성된 시점에서 상위 스코프인 baz의 this와 일치한다.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>제로베이스 프론트엔드 기술면접 후기</title>
    <url>/2022/08/02/CS/%E1%84%8C%E1%85%A6%E1%84%85%E1%85%A9%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%86%AB%E1%84%90%E1%85%B3%E1%84%8B%E1%85%A6%E1%86%AB%E1%84%83%E1%85%B3%20%E1%84%80%E1%85%B5%E1%84%89%E1%85%AE%E1%86%AF%E1%84%86%E1%85%A7%E1%86%AB%E1%84%8C%E1%85%A5%E1%86%B8%20%E1%84%92%E1%85%AE%E1%84%80%E1%85%B5/</url>
    <content><![CDATA[<h1 id="기술면접-후기"><a href="#기술면접-후기" class="headerlink" title="기술면접 후기"></a>기술면접 후기</h1><hr>
<p>제로베이스 커넥to 스쿨에 들어온지 4주차에 접어들었다.</p>
<p>데레사 강사님의 HTML&#x2F;CSS 수업을 들으며 정신없이 과제도 하며 나름 수업 복습도 열심히 하면서 지내왔다고 생각했다.</p>
<p>면접은 항상 준비가 되어있든 되어 있지 않든 긴장감이 있기 마련이다.</p>
<p>하지만 이번 기술면접은 다른 면접과는 다르게 더욱 긴장되었다.</p>
<p>그 이유는 거의 한달동안 배웠던 수업 내용에 대해 (자바스크립트 질문도 많았지만,) 면접관에게 직접 설명을 해야했고,</p>
<p>그 과정에서 나를 어필할 수 있는 방법을 써서 설명을 해야하는 부분 때문에 더욱 부담스럽게 느껴졌다.</p>
<hr>
<p>면접은 20분간 진행되기로 예정되었지만 긴장을 하여 말이 빨라지니 13분만에 끝마쳤다.</p>
<p>나름 면접관에게 돋보이기 위해 제스쳐도 크게 하려하고 아이컨택도 많이 하려고 했다.</p>
<p>하지만 개념에 대해 명확하게 알고 있지 않았고 명확히 알고 있는 개념도 누군가에게 말로 설명을 해보지 않았는데,</p>
<p>실제로 말로 해보려하니 머릿속에서 정리되지 않아 <span style="color:red">논리적이지 않은 사람으로 보였다.</span></p>
<h2 id="피드백"><a href="#피드백" class="headerlink" title="피드백"></a>피드백</h2><hr>
<h2 id="1-면접관의-흥미를-유발하라"><a href="#1-면접관의-흥미를-유발하라" class="headerlink" title="1. 면접관의 흥미를 유발하라"></a>1. 면접관의 흥미를 유발하라</h2><hr>
<p>오늘 면접관님의 태도는 매우 좋았다. 내가 무슨 말을 하는지 귀담아 들으려 노력해주시고 아이컨택도 계속 해주셨다.</p>
<blockquote>
<p>하지만 실제 면접장에서 면접관들은 지원자의 말을 귀담아 듣지 않는다.</p>
</blockquote>
<p>나라는 존재를 수많은 지원자 중에 1명으로 보여지게 하고 싶지 않다면, 그들의 흥미를 유발할 수 있는 <strong>어조, 제스쳐, 스토리</strong> 등으로 나를 어필해야 한다.</p>
<p>예를 들어, <code>클로져에 대해 아는대로 설명해보세요</code> 라는 질문을 받았다면 다음과 같이 답변해보자.</p>
<blockquote>
<p>제가 클로저라는 부분을 처음 접했을 때, 왜 자바스크립트에서만 이런 개념이 생겨나는지 궁금해서 찾아보았다. 그 이유 자바스크립트에서는 public 개념과 private 개념이 없기 때문이라는 것을 알게 되었다. 하지만 현재는 클래스라는 개념이 생겨나 이런 부분을 해결할 수 있었다. 저는 이 부분을 사용하여 이런 부분을 개선해보도록 노력해본 경험이 있습니다.</p>
</blockquote>
<p>위와 같이 스토리를 풀어서 설명하면 면접관의 흥미를 유발할 수 있을 것이다.</p>
<h2 id="2-말로-안되면-그려서라도-설명하라"><a href="#2-말로-안되면-그려서라도-설명하라" class="headerlink" title="2. 말로 안되면 그려서라도 설명하라"></a>2. 말로 안되면 그려서라도 설명하라</h2><hr>
<p>프로그래밍 개념은 말로만 전달하기 어려운 개념들이 많이 존재한다.</p>
<p>내가 만약 조리있게 말하지 못할 것 같은 질문이 나왔다면, 면접관에게 양해를 구한 후 그림을 그려서라도 설명을 해보자</p>
<p>이 때, 주의해야할 점이 <strong>그림을 다 그린 후 머릿속에서 어떻게 설명할지</strong> 정리한 다음에 설명을 이어가자.</p>
<p>면접장에 가면 마음이 조급해져서 위와 같은 상황에서 그림도 이해할 수 없을 정도로 대충 그리고 그 상태에서 말을 진행하게 된다.</p>
<p>이렇게 되면 그림을 그릴 시간을 달라한 이유가 없다.</p>
<h2 id="3-모르는-것은-모른다라고-확실히-말하자"><a href="#3-모르는-것은-모른다라고-확실히-말하자" class="headerlink" title="3. 모르는 것은 모른다라고 확실히 말하자"></a>3. 모르는 것은 모른다라고 확실히 말하자</h2><hr>
<p>아는 척하여 무엇 무엇 일 것 같다.. 라는 식의 답변은 최악이다.</p>
<p>모르는 질문이 나왔다면 모른다고 답변하자. 다만, 여기서 태도의 차이가 분명하게 나타날 수 있다.</p>
<p>누군가는 그 질문에 대해 모른다고 답변하고 끝날지라도, 누군가는 그 <em>질문과 연관된 다른 내용을 설명해도 되겠냐는 양해를 구한다.</em></p>
<p>두명의 지원자를 비교해보았을 때, 당신이라면 누구를 더 선호할 것인가?</p>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><hr>
<p>아침부터 프로젝트도 준비해야하고 기술면접도 준비해야해서 머리도 복잡해지고 힘든 하루가 지나갔다.</p>
<p>그래도 기술면접을 직접 경험해봄으로써 실제 면접장의 압박감과 내가 어떤 부분에서 부족하게 보였는지를 알게되어</p>
<p>그 부분을 고쳐나가면 면접을 즐길 수 있게 될 것 같다.</p>
<blockquote>
<p>나를 죽이지 못하는 고통은 나를 더 성장하게 만든다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>⛳️ MVC, MVP, MVVM 패턴</title>
    <url>/2022/11/10/CS/%E2%9B%B3%EF%B8%8F-MVC-MVP-MVVM-%ED%8C%A8%ED%84%B4/</url>
    <content><![CDATA[<h1 id="📌-디자인-패턴이란"><a href="#📌-디자인-패턴이란" class="headerlink" title="📌 디자인 패턴이란?"></a>📌 디자인 패턴이란?</h1><p>디자인 패턴은 애플리케이션내에서 각자 역할에 맞는 코드끼리 분리하여 유지보수성을 높이고 탄탄한 구조를 가진 애플리케이션을 설계할 수 있다.</p>
<h2 id="✏️-디자인-패턴-장점"><a href="#✏️-디자인-패턴-장점" class="headerlink" title="✏️ 디자인 패턴 장점"></a>✏️ 디자인 패턴 장점</h2><ol>
<li>검증된 해결책</li>
</ol>
<p>디자인 패턴은 소프트웨어 개발의 문제를 해결하는 확실한 접근 방식을 제공한다.</p>
<ol start="2">
<li>쉬운 재사용</li>
</ol>
<p>일반적으로 필요에 따라 조정가능하며 즉시 사용가능한 솔루션을 반영한다.</p>
<p><red>다만, 디자인 패턴이 모든 문제의 해결책은 아니다.</red> 패턴의 역할은 솔루션 체계를 제공하고 이를 지원하는 역할을 한다.</p>
<p>이외의 사소한 문제를 예방할 수 있고 반복을 피하여 파일 크기를 줄일 수 있으며, 개발자간의 소통을 원할하게 하는 장점이 있다.</p>
<h2 id="🛤-MVC-패턴"><a href="#🛤-MVC-패턴" class="headerlink" title="🛤 MVC 패턴"></a>🛤 MVC 패턴</h2><p>Model + View + Controller를 합친 용어이다.</p>
<p><img src="/../../images/design/mvc.png" alt="mvc"></p>
<ul>
<li>Model : 데이터와 데이터 변경 함수 관리하는 부분</li>
<li>View : 사용자에게 보여지는 UI</li>
<li>Controller : 사용자의 입력을 받고 처리하는 부분</li>
</ul>
<h3 id="동작"><a href="#동작" class="headerlink" title="동작"></a>동작</h3><ol>
<li>사용자 액션이 들어오면 컨트롤러가 액션 확인하고 모델을 업데이트한다.</li>
<li>컨트롤러는 모델을 나타낼 뷰를 선택한다.</li>
<li>뷰는 모델을 이용하여 화면에 나타낸다.</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">참고 - MVC에서 View가 업데이트 되는 방법</span><br><span class="line">- 뷰가 모델을 이용하여 직접 업데이트</span><br><span class="line">- 모델이 뷰에게 알림을 주어 업데이트</span><br><span class="line">- 뷰가 Polling으로 모델의 변경을 주기적으로 감지하여 업데이트</span><br></pre></td></tr></table></figure>

<p><code>polling이란?</code></p>
<p>하나의 장치가 충돌 회피 또는 동기화를 목적으로 다른 장치의 상태를 주기적으로 검사하여 일정 조건을 만족할 때, 송수신 자료를 처리하는 방식</p>
<hr>
<h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ul>
<li>컨트롤러는 여러 개의 뷰를 선택할 수 있는 1:n 구조</li>
<li>보편적이며 단순하다.</li>
<li>뷰와 모델 사이의 의존성이 높다. (bad~👎)</li>
</ul>
<h2 id="🏸-MVP-패턴"><a href="#🏸-MVP-패턴" class="headerlink" title="🏸 MVP 패턴"></a>🏸 MVP 패턴</h2><p>Model + View + Presenter를 합친 용어이다.</p>
<p><img src="/../../images/design/mvp.png" alt="mvp"></p>
<ul>
<li>Model : 데이터와 데이터 변경 함수 관리하는 부분</li>
<li>View : 사용자에게 보여지는 UI</li>
<li>Presenter : 뷰에서 요청한 정보로 모델을 가공하여 뷰에게 전달해주는 부분(<strong>View, Model을 붙여주는 접착제역할</strong>)</li>
</ul>
<h3 id="동작-1"><a href="#동작-1" class="headerlink" title="동작"></a>동작</h3><ol>
<li>사용자 액션은 뷰를 통해 들어온다.</li>
<li>뷰는 프레젠터에게 데이터를 요청한다.</li>
<li>프레젠터는 모델에게 데이터 요청한다.</li>
<li>모델은 프레젠터에게 요청받은 데이터를 응답한다.</li>
<li>프레젠터는 뷰에게 데이터를 응답한다.</li>
<li>뷰가 응답받은 데이터를 화면에 나타낸다.</li>
</ol>
<h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><ul>
<li>프레젠터는 뷰와 모델의 인스턴스를 가지고 있어 둘을 연결하는 접착제 역할</li>
<li>프레젠터와 뷰는 1:1</li>
<li>뷰와 모델간의 의존성이 없다. (Good~👍)</li>
<li>하지만 뷰와 프레젠터의 의존성 높다.</li>
</ul>
<h2 id="👑-MVVM-패턴"><a href="#👑-MVVM-패턴" class="headerlink" title="👑 MVVM 패턴"></a>👑 MVVM 패턴</h2><p>Model + View + View Model을 합친 용어이다.</p>
<p><img src="/../../images/design/mvvm.png" alt="mvvm"></p>
<ul>
<li>Model : 데이터와 데이터 변경 함수 관리하는 부분</li>
<li>View : 사용자에게 보여지는 UI</li>
<li>View Model : 뷰를 표현하기 위해 만든 뷰를 위한 모델</li>
</ul>
<h3 id="동작-2"><a href="#동작-2" class="headerlink" title="동작"></a>동작</h3><ol>
<li>사용자 액션이 뷰를 통해 들어온다.</li>
<li>뷰에 액션이 들어오면 Command 패턴으로 뷰 모델에 액션을 전달한다.</li>
<li>뷰 모델은 모델에게 데이터를 요청한다.</li>
<li>모델은 뷰 모델에게 요청받은 데이터를 응답한다.</li>
<li>뷰 모델은 응답받은 데이터를 가공하여 저장한다.</li>
<li>뷰는 뷰 모델과 데이터 바인딩하여 화면에 나타낸다.</li>
</ol>
<h3 id="특징-2"><a href="#특징-2" class="headerlink" title="특징"></a>특징</h3><ul>
<li>Command 패턴과 데이터 바인딩 두가지 패턴을 사용(<strong>뷰와 뷰 모델 사이의 의존성 제거</strong>)</li>
<li>뷰 모델과 뷰는 1:n</li>
<li>뷰와 모델사이의 의존성도 없으므로 각 부분은 독립적으로 모듈화하여 개발할 수 있다.</li>
<li>뷰 모델 설계가 어렵다.</li>
</ul>
<p><code>Command패턴이란?</code></p>
<p>요청을 객체 형태로 캡슐화하여 사용자가 보낸 요청을 나중에 사용할 수 있도록 메서드명, 매개변수 등 요청에 필요한 정보를 저장,로깅, 취소하는 패턴이다.</p>
<hr>
<p>참고</p>
<p><a href="https://beomy.tistory.com/43">[디자인패턴]MVC,MVP,MVVM 패턴 비교</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>객체 불변성에 대해 설명하라</title>
    <url>/2023/01/10/CS/%EA%B0%9D%EC%B2%B4-%EB%B6%88%EB%B3%80%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="객체-불변성에-대해-설명하라"><a href="#객체-불변성에-대해-설명하라" class="headerlink" title="객체 불변성에 대해 설명하라."></a>객체 불변성에 대해 설명하라.</h1><p>자바스크립트에서 데이터는 변경 불가능한 원시값, 변경 가능한 참조값으로 구성된다.</p>
<p>변경 가능한 참조값이 바로 객체를 말하는데, 객체는 값을 참조값으로 전달하고 전달 받으므로 객체가 참조를 통해 공유되어 있다면 하나를 바꿨을 때, 다른 것들도 바뀔 위험이 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = a;</span><br><span class="line"></span><br><span class="line">c.<span class="property">a</span> = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// &#123;a: 30, b: 200&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &#123;a: 30, b: 200&#125;</span></span><br></pre></td></tr></table></figure>

<p>위와 같은 문제를 해결하기 위한 방법으로 객체를 불변객체로 만들거나, 참조값을 복사하는 것이 아닌 객체의 값을 복사하여 새로운 객체를 생성하는 방법이 있다.</p>
<p>객체를 불변 객체로 만드는 방법은 Object.freeze메서드와 Object.seal 메서드를 사용하는 방법이 있다. 두 메서드는 직속 프로퍼티에만 적용된다(얕은 방지).</p>
<blockquote>
<p>Object.freeze(), Object.seal()의 차이는 Object.freeze()는 해당 객체에 속성 추가, 기존 속성 변경, 삭제가 모두 불가능하지만 Object.seal()은 새로운 속성 추가및 삭제가 불가능하고 기존 속성 변경은 가능하다.</p>
</blockquote>
<p>객체의 값을 복사하는 방법으로는 Object.assign()를 사용하는 방법, ES6 Spread 문법이 있다. 이 두가지 방법 역시 얕은 복사이므로, 깊은 복사를 하려면 라이브러리를 사용하거나 새로 추가된 structedClone() 메서드를 사용하는 방법이 있다.</p>
<blockquote>
<p>structedClone() 메서드는 Function 객체, DOM Node, 객체들의 몇몇 파라미터 일부 기능에 제한이 있다.</p>
</blockquote>
<h2 id="리액트에서-Props-State를-불변객체로-다루는-이유는"><a href="#리액트에서-Props-State를-불변객체로-다루는-이유는" class="headerlink" title="리액트에서 Props, State를 불변객체로 다루는 이유는?"></a>리액트에서 Props, State를 불변객체로 다루는 이유는?</h2><p>리액트에서는 Props와 State의 변경을 불변성을 이용해 감지하고 리렌더링을 발생시킨다.</p>
<p>만약 불변 객체를 사용하지 않는다면, 객체의 값이 어디에서 바뀌게 되었는지 예상하기 어렵고 해당 객체도 엉망이 될 것이다.</p>
<blockquote>
<p>setState는 비동기적으로 State를 변경시키는데, 불변 객체로 다루지 않고 직접 State를 변경시킨다면 이전의 값이 반환될 수 있다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>모의 면접 2차 회고</title>
    <url>/2023/01/10/CS/%EB%AA%A8%EC%9D%98-%EB%A9%B4%EC%A0%91-2%EC%B0%A8-%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="📌-1분-자기소개-파트"><a href="#📌-1분-자기소개-파트" class="headerlink" title="📌 1분 자기소개 파트"></a>📌 1분 자기소개 파트</h1><p>기술면접만 진행하실 줄 알았는데 갑자기 자기소개를 하라하셔서 당황하여 말을 제대로 못했다.</p>
<ul>
<li>~ 하는 편입니다. 보다는 ~ 합니다. 라고 명료하게 답변하자</li>
</ul>
<h1 id="📚-기술면접-파트"><a href="#📚-기술면접-파트" class="headerlink" title="📚 기술면접 파트"></a>📚 기술면접 파트</h1><h3 id="비동기-함수와-이벤트-루프에-대한-설명해라"><a href="#비동기-함수와-이벤트-루프에-대한-설명해라" class="headerlink" title="비동기 함수와 이벤트 루프에 대한 설명해라"></a>비동기 함수와 이벤트 루프에 대한 설명해라</h3><ul>
<li>Web API, setTimeout, 이벤트리스너등의 특수한 경우에서 자바스크립트는 멀티스레드로 동작하는 것처럼 보이는 것이다. 실제로 자바스크립트는 싱글 스레드이다.</li>
<li>일련의 과정을 설명하는데 짜임새가 부족하였다.</li>
<li>자바스크립트는 원래 싱글 스레드인데, 런타임 이전에서 AJAX나 비동기 코드를 위해 불가피하게 멀티 스레드를 두어 사용하게 되었다 라는 보충 설명 해주면 좋을 것 같다.</li>
</ul>
<h3 id="객체-불변성에-대해-설명해라"><a href="#객체-불변성에-대해-설명해라" class="headerlink" title="객체 불변성에 대해 설명해라"></a>객체 불변성에 대해 설명해라</h3><ul>
<li>리액트와 객체 불변성을 연관짓는 설명이 부족하다.</li>
<li>~ 한다고 생각합니다 대신 ~ 할 수 있습니다로 바꿔서 말하기</li>
</ul>
<h3 id="This-설명하라"><a href="#This-설명하라" class="headerlink" title="This 설명하라"></a>This 설명하라</h3><ul>
<li>처음에 4가지 분류를 말하였는데 말하다보니 까먹어서 3가지밖에 말하지 못한 부분이 아쉬웠다.</li>
<li>화살표 함수는 this를 가지고 있지 않으므로, 내부의 this는 상위 스코프의 this에 바인딩된다.</li>
</ul>
<h3 id="var-let-const-비교-설명하라"><a href="#var-let-const-비교-설명하라" class="headerlink" title="var, let, const 비교 설명하라"></a>var, let, const 비교 설명하라</h3><ul>
<li>스코프 설명하면서 함수레벨 스코프, 블록 레벨 스코프가 왜 더 안전한 코드를 짤 수 있도록 하는 지에 대한 설명 보충</li>
</ul>
<h3 id="함수가-일급-객체인-이유는"><a href="#함수가-일급-객체인-이유는" class="headerlink" title="함수가 일급 객체인 이유는?"></a>함수가 일급 객체인 이유는?</h3><ul>
<li>좀 더 자세한 설명이 필요하다.</li>
<li>특징을 2가지 밖에 말하지 못하여 아쉬웠다.</li>
</ul>
<h3 id="클로저-설명-장점-및-주의점"><a href="#클로저-설명-장점-및-주의점" class="headerlink" title="클로저 설명, 장점 및 주의점"></a>클로저 설명, 장점 및 주의점</h3><ul>
<li>주의점 설명이 부족했다. 클로저는 외부 함수의 실행 컨텍스트가 사라져도 내부 함수에 대한 참조가 유지되고 있기 때문에 메모리 누수에 대한 부분도 고려해줘야한다.</li>
<li>리액트내에서도 useEffect 함수 내부에서 클린업 함수를 해주어 메모리 누수를 방지하여야 한다.</li>
</ul>
<h3 id="CORS-우회-방법-설명하라"><a href="#CORS-우회-방법-설명하라" class="headerlink" title="CORS 우회 방법 설명하라"></a>CORS 우회 방법 설명하라</h3><ul>
<li>프록시 객체라는 설명이 모호해서 아쉬웠다. 프록시 서버에 대한 설명을 프록시 객체로 잘못 답변하였다.</li>
</ul>
<h3 id="제너레이터에-대해-설명하라"><a href="#제너레이터에-대해-설명하라" class="headerlink" title="제너레이터에 대해 설명하라"></a>제너레이터에 대해 설명하라</h3><ul>
<li>제너레이터 공부하자…</li>
</ul>
<h1 id="✏️-총평"><a href="#✏️-총평" class="headerlink" title="✏️ 총평"></a>✏️ 총평</h1><ul>
<li>정제된 단어로 정리해서 답변을 하면 더 좋을 것 같다.</li>
<li>객체 변경 불가성 중요하니깐 제대로 알아두자. 상태값을 객체로 주로 저장하기 때문에, 이 자체의 참조값을 바꿔야지만 내부적으로 렌더링이 일어난다.</li>
<li>클로저의 주의점에 대해서는 클린업 함수, 메모리 누수 설명 보충하자.</li>
<li>1급 객체에 대한 특징 및 조건 설명을 풍부하게 해보자.</li>
<li>CORS 해결 방법에 대한 설명을 제대로 답변하지 못하였으니 공부하자.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>모의 면접 회고</title>
    <url>/2023/01/02/CS/%EB%AA%A8%EC%9D%98-%EB%A9%B4%EC%A0%91-%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="📌-모의-면접-회고"><a href="#📌-모의-면접-회고" class="headerlink" title="📌 모의 면접 회고"></a>📌 모의 면접 회고</h1><p>HTML 수업 때 데레사 강사님께 기술면접을 1:1로 본 이후로 오래간만에 모의 면접을 보게되었다.</p>
<p>박신영 강사님께서 인성면접을, 다른 수강생은 기술면접을 면접관 입장이 되어 나에게 질문해주었다.</p>
<h2 id="1-😃-인성-면접"><a href="#1-😃-인성-면접" class="headerlink" title="1. 😃 인성 면접"></a>1. 😃 인성 면접</h2><p>어떤 개발자가 되길 원하는가?, 프로젝트 및 협업 과정에서 어떤 갈등을 겪었고 어떻게 해결하였는지 등 개발자로서 어떤 마인드를 가지고 있고 어떤 사람인지 판단할 수 있을 만한 질문들이었다.</p>
<p>모든 질문에 어떻게 답변했는지는 기억나지 않지만 피드백을 받은 것을 이야기해보자면,</p>
<h3 id="👍-좋았던-점"><a href="#👍-좋았던-점" class="headerlink" title="👍 좋았던 점"></a>👍 좋았던 점</h3><ol>
<li>시작할 때 웃는 모습이 좋은 사람이라는 인상을 주고 마음을 편안하게 해주어 좋았다.</li>
<li>커뮤니케이션과 협업을 일관되게 강조하고 중요시하고 있다는 점이 좋았다.</li>
<li>말의 끝맺음을 제대로 하여 듣는 사람 입장에서 좋았다.<ul>
<li><strong>추가로 대화에서, 개발에서 정리를 잘하는 사람인데 이 부분으로 어필할 수 있으면 더욱 좋을듯!</strong></li>
</ul>
</li>
<li>Why? 에 대해 생각하는 사람으로 느껴져서 좋았다.</li>
<li>약점에 대해서 스스로 대안이 있어서 인상적이었다.</li>
</ol>
<h3 id="💦-아쉬운-점"><a href="#💦-아쉬운-점" class="headerlink" title="💦 아쉬운 점"></a>💦 아쉬운 점</h3><ol>
<li>의견, 주장이 강해보여 의견 충돌 시 강한 타입처럼 느껴질 수 있을 것 같아보인다.</li>
<li>어떤 개발자가 되고 싶냐는 질문에 좀 더 <strong>직무, 역량 관점에서 답변할 수 있으면 좋을 것</strong> 같다.</li>
<li>면접볼 때는 흔들의자에 앉지 말고 고정된 의자에 앉도록 하자.</li>
<li>개발자로서 역량 설명할 때 커뮤니케이션 부분에서 누구와 협업을 하는지에 대해서도 간략하게 짚고 넘어갔으면 좋았을 것 같다.</li>
<li>협업 경험에 대해 설명할 때, 부정적인 얘기를 했던게 기억에 남을 것 같다. 이 부분을 나의 약점을 잘 살려냈던 것처럼 풀어나가보면 좋을 것 같다.</li>
<li><strong>신입,주니어 라는 용어 사용 금지</strong></li>
</ol>
<h2 id="2-🛠-기술-면접"><a href="#2-🛠-기술-면접" class="headerlink" title="2. 🛠 기술 면접"></a>2. 🛠 기술 면접</h2><p>기술면접은 프로젝트 경험에 대해 질문해주셨고 기술적으로 깊은 고민을 해본 적이 있는지, 면접자가 기술에 사용 이유와 원리를 알고 사용하는 것인지 확인하는 질문들이었다.</p>
<h3 id="👍-좋았던-점-1"><a href="#👍-좋았던-점-1" class="headerlink" title="👍 좋았던 점"></a>👍 좋았던 점</h3><ol>
<li>페어프로그래밍을 통해 기술적인 단계를 깊이있게 공부하고 블로그에 정리해두었다는 점이 인상깊었다.</li>
<li><strong>기술 블로그에 대해 피드백을 받고 개선한다는 부분을 차별점으로 어필하는 모습 좋았다.</strong></li>
</ol>
<h3 id="💦-아쉬운-점-1"><a href="#💦-아쉬운-점-1" class="headerlink" title="💦 아쉬운 점"></a>💦 아쉬운 점</h3><ol>
<li>전반적으로 기술적인 답변이 제대로 나오지 않아 아쉬웠다.</li>
<li>CBD 라이브러리를 만들었다고 할 때 정확히 어떤 부분까지 만들어보았는지 자세한 설명이 부족했다.</li>
<li>회피와 타협이라는 부정적인 단어 사용이 잦아서 아쉬웠다.<ul>
<li><strong>부정적인 단어 대신 “라이브러리를 고치는 것은 비용이 많이 드는 작업이어서 프로젝트 기간에는 해당 부분을 이런 식으로 구현하여 해결하였다”로 사용해보자.</strong></li>
</ul>
</li>
<li>트러블 슈팅 질문에 대한 답변이 기술적인 이슈 해결이 아닌 다른 답변이 나와서 아쉬웠다.<ul>
<li><strong>트러블 슈팅 질문에 대한 소스들을 미리 준비해두면 도움이 될 것 같다.</strong></li>
</ul>
</li>
<li>리팩터링 질문이 나왔을 때, 너무 협업에만 집중해서 이야기한 것이 아쉽다. 그렇다면 성능 개선, 최적화 등에 대한 고민을 하지 않는 것처럼 보여서 아쉬웠다.</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>브라우저 렌더링 과정에 대해 설명하라</title>
    <url>/2023/01/05/CS/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="브라우저란"><a href="#브라우저란" class="headerlink" title="브라우저란?"></a>브라우저란?</h1><p>브라우저는 HTML, CSS, Javascript로 작성된 텍스트 문서를 서버에게 요청하여 응답을 받아 의미있는 단위인 토큰으로 파싱하여 시각적으로 렌더링 해주는 역할을 담당한다.</p>
<h1 id="브라우저-렌더링-과정"><a href="#브라우저-렌더링-과정" class="headerlink" title="브라우저 렌더링 과정"></a>브라우저 렌더링 과정</h1><h2 id="1-요청과-응답"><a href="#1-요청과-응답" class="headerlink" title="1. 요청과 응답"></a>1. 요청과 응답</h2><p>서버에 요청하기 위해 브라우저는 주소창을 제공한다. 주소창에 URL을 입력하면 URL의 호스트 이름이 DNS를 통해 IP주소로 변환되고 IP 주소를 갖는 서버에게 요청을 전송한다.</p>
<p>이렇게 요청을 보내면 서버는 서버의 루트 폴더에 존재하는 정적파일로 응답을 보낸다. 기본적으로 index.html이다.</p>
<h2 id="2-HTML-파싱과-DOM-생성"><a href="#2-HTML-파싱과-DOM-생성" class="headerlink" title="2. HTML 파싱과 DOM 생성"></a>2. HTML 파싱과 DOM 생성</h2><p>브라우저 요청에 의해 서버가 응답한 HTML 문서는 문자열로 이루어진 순수한 텍스트이다.</p>
<p><strong>그래서 HTML 문서를 파싱하여 <span style="color:red">브라우저가 이해할 수 있는 자료구조인 DOM을 생성</span>한다.</strong></p>
<ol>
<li>문자열로 변환된 HTML문서를 토큰화한다.</li>
<li>각 토큰을 객체로 변환하여 노드를 생성한다. 노드는 DOM을 구성하는 기본 요소이다. ex) 문서 노드, 요소 노드 등</li>
<li>HTML 문서는 중첩관계를 통해 부자관계가 형성된다. 이러한 부자관계를 반영하여 <strong>모든 노드들을 트리 자료구조로 구성한다. 이러한 노드들로 구성된 트리 자료구조를 DOM이라 부른다.</strong></li>
</ol>
<h2 id="3-CSS-파싱과-CSSOM-생성"><a href="#3-CSS-파싱과-CSSOM-생성" class="headerlink" title="3. CSS 파싱과 CSSOM 생성"></a>3. CSS 파싱과 CSSOM 생성</h2><p>렌더링 엔진은 HTML을 한줄씩 읽어나가며 순차적으로 파싱하여 DOM을 생성해 나간다. <strong>DOM을 생성하다가 CSS를 로드하는 link 태그나 style 태그를 만나면 <span style="color:red">DOM 생성을 일시중단</span>한다.</strong></p>
<p>그 결과 CSS 파일을 서버에 요청하여 응답받은 CSS 파일이나 style 태그 내의 CSS를 HTML과 동일한 과정으로 토큰화 생성 → CSSOM 생성 과정을 거친다. 이후 파싱이 완료되면 HTML 파싱이 중단된 지점부터 다시 HTML을 파싱하기 시작한다.</p>
<h2 id="4-렌더-트리-생성"><a href="#4-렌더-트리-생성" class="headerlink" title="4. 렌더 트리 생성"></a>4. 렌더 트리 생성</h2><p>앞선 과정에서 생성된 DOM과 CSSOM은 렌더링을 위해 렌더 트리로 결합된다. 이 때 <strong>브라우저 화면에 렌더링되지 않는 노드<span style="color:red">(meta태그, script 태그 등)</span>와 CSS에 의해 표시되지 않는<span style="color:red">(display:none)</span> 노드들은 포함하지 않는다.</strong></p>
<p>지금까지의 렌더링 과정은 여러번 반복되서 실행될 수 있다. <strong>렌더링이 반복 실행되는 원인은 다음과 같다.</strong></p>
<ul>
<li>자바스크립트에 의한 노드 추가 또는 삭제</li>
<li>브라우저 창의 리사이징에 의한 viewport 크기 변경</li>
<li>HTML 요소의 레이아웃(위치와 크기)을 변경시키는 width, height, margin, padding, border, display, position 등의 스타일 변경</li>
</ul>
<p><strong>이러한 리렌더링은 비용이 많이 들고 성능에 악영향을 주므로 <span style="color:red">리렌더링이 적게 발생하도록 하여야한다.</span></strong></p>
<h2 id="5-자바스크립트-파싱과-실행"><a href="#5-자바스크립트-파싱과-실행" class="headerlink" title="5. 자바스크립트 파싱과 실행"></a>5. 자바스크립트 파싱과 실행</h2><p>HTML 파싱의 결과물 DOM은 HTML 문서의 구조와 정보뿐 아니라 HTML 요소와 스타일을 변경할 수 있는 프로그래밍 인터페이스로서 DOM API를 제공한다.</p>
<p>즉, DOM API를 사용하여 이미 생성된 DOM을 동적으로 조작할 수 있다.</p>
<p>CSS 파싱과정과 마찬가지로 script 태그 만나면 DOM 생성을 일시 중단한다.</p>
<p>이후 자바스크립트 파일을 서버에 요청하여 응답받은 파일이나 script 태그내의 코드를 파싱하기 위해 <strong>자바스크립트 엔진에 제어권을 넘긴다. <span style="color:red">(렌더링 엔진 → 자바스크립트 엔진으로 제어권 이동)</span></strong></p>
<p>이후 자바스크립트 파싱과 실행이 종료되면 렌더링 엔진으로 다시 제어권 넘겨 HTML 파싱 중단된 시점부터 DOM 생성을 재개한다.</p>
<h2 id="6-리플로우와-리페인트"><a href="#6-리플로우와-리페인트" class="headerlink" title="6. 리플로우와 리페인트"></a>6. 리플로우와 리페인트</h2><p>만약 자바스크립트 코드에 DOM, CSSOM을 변경하는 DOM API가 사용된 경우 DOM, CSSOM이 변경되고 변경된 DOM, CSSOM으로 다시 렌더트리로 결합되고 레이아웃과 페인트 과정을 거쳐 브라우저 화면에 다시 렌더링한다. 이를 리플로우, 리페인트라고 한다.</p>
<blockquote>
<p>리플로우가 발생하면 성능을 저하시키므로 리플로우가 발생하는 메서드 사용을 최소화 하여야 한다. 일단 가독성 위주로 코딩을 하되 성능 측정하여 렌더링에 2초 이상 걸린다면 리팩터링을 하여 성능을 개선해야한다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>비동기 함수를 이벤트 루프 관점에서 설명하라</title>
    <url>/2023/01/10/CS/%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="이벤트-루프가-비동기-함수를-어떻게-처리하는지-설명하라"><a href="#이벤트-루프가-비동기-함수를-어떻게-처리하는지-설명하라" class="headerlink" title="이벤트 루프가 비동기 함수를 어떻게 처리하는지 설명하라."></a>이벤트 루프가 비동기 함수를 어떻게 처리하는지 설명하라.</h1><p>우선 자바스크립트는 한번에 하나의 일을 처리할 수 있는 싱글 스레드 처리방식을 가진다.</p>
<p>그러므로 동기적으로 일을 처리할 때에 시간이 오래 걸리는 처리를 할 경우 다음 일에 블로킹이 발생한다.</p>
<p>이러한 블로킹 현상을 해결하기 위해 비동기식 처리 방식을 사용하고 여러 개의 일이 동시에 처리되는 것처럼 느껴지도록 도와주는 이벤트 루프가 있다.</p>
<blockquote>
<p>이벤트 루프는 브라우저에 내장된 기능 중 하나이다.</p>
</blockquote>
<p><img src="/../images/../../images/event/eventLoop.png" alt="이벤트 루프"></p>
<p>위 사진은 이벤트 루프가 동작하는 방식을 보여주는 사진이다.</p>
<ul>
<li><strong>콜 스택</strong> : 함수 호출 시 함수 실행 컨텍스트가 콜 스택에 푸시되어 순차적으로 실행된다.</li>
<li><strong>태스크 큐</strong> : 타이머 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역이다. 태스크 큐와는 별도로 프로미스의 후속처리 메서드의 콜백 함수가 일시적으로 보관되는 마이크로 태스크 큐도 존재한다.</li>
<li><strong>이벤트 루프 :</strong> 이벤트 루프는 현재 콜 스택에 실행중인 실행 컨텍스트가 있는지, 태스크 큐에 대기중인 함수가 있는지 확인하여 콜 스택이 비어있고 태스크 큐에 대기중인 함수가 있다면 이벤트 루프가 순차적(FIFO)으로 태스크 큐에 대기중인 함수를 콜 스택으로 이동시킨다. 즉, <strong>태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작한다.</strong></li>
</ul>
<blockquote>
<p>비동기 처리에서 소스코드 평가 및 실행을 제외한 모든 코드는 브라우저 또는 NodeJS가 담당한다. 브라우저는 멀티 스레드로 동작한다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>스코프는 무엇인가요?</title>
    <url>/2023/01/20/CS/%EC%8A%A4%EC%BD%94%ED%94%84%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="스코프"><a href="#스코프" class="headerlink" title="스코프"></a>스코프</h1><p>스코프란, 식별자가 참조할 수 있는 범위(유효범위)를 말한다. 자바스크립트 엔진이 식별자를 찾기 위해 사용하는 규칙이다.</p>
<ul>
<li>모든 식별자는 자신이 선언된 위치에 의해 상위 스코프를 결정한다.</li>
<li>식별자는 어떤 값을 구별하기 위해 유일 해야하므로 <span style="color:red">중복될 수 없다.</span> 단, 스코프가 다르면 중복될 수 있다.</li>
</ul>
<h2 id="지역-스코프"><a href="#지역-스코프" class="headerlink" title="지역 스코프"></a>지역 스코프</h2><p>자바스크립트는 함수 레벨 스코프를 갖는다. 그러므로 지역이란, 함수 몸체 내부를 말한다.</p>
<p>즉, 지역 스코프는 함수에 의해서 생성된다.</p>
<blockquote>
<p>let, const가 나오면서 블록 레벨 스코프를 갖는 식별자를 선언할 수 있다. 여기서 지역 스코프는 코드 블록에 의해 생성된다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure>

<p>var 키워드는 함수 레벨 스코프를 갖는다. 즉, 함수 몸체 내부에서 var 키워드로 선언된 변수는 지역 스코프 범위를 참조할 수 있다. 함수 몸체 이외에서 선언된 변수는 모드 전역 스코프 범위로 본다.</p>
<h2 id="스코프-체인"><a href="#스코프-체인" class="headerlink" title="스코프 체인"></a>스코프 체인</h2><p>스코프는 함수의 중첩에 의해 계층적 구조를 갖는다. 모든 스코프는 하나의 계층적 구조로 연결된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; <span class="comment">// 전역 스코프</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = -<span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 100</span></span><br><span class="line">  <span class="title function_">inner</span>(); <span class="comment">// -100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<ol>
<li><p>전역 스코프 (최상위 스코프)</p>
</li>
<li><p>outer 지역 스코프</p>
</li>
<li><p>inner 지역 스코프</p>
</li>
</ol>
<p>자바스크립트 엔진은 변수를 참조하는 스코프에서 시작하여 <span style="color:red">상위 스코프 방향</span>으로 이동하며 변수를 검색한다.</p>
<blockquote>
<p>실제 자바스크립트 엔진은 코드를 실행하기 전 렉시컬 환경이라는 자료구조를 생성한다. 변수 선언이 실행되면 변수 식별자가 자료구조의 key로 등록되고 변수 할당이 일어나면 변수 식별자에 해당하는 값을 변경한다.</p>
</blockquote>
<h2 id="렉시컬-스코프"><a href="#렉시컬-스코프" class="headerlink" title="렉시컬 스코프"></a>렉시컬 스코프</h2><p>렉시컬 스코프란, 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정된다.</p>
<p><span style="color:red">함수 호출이 아닌</span> 함수 정의(함수 선언문, 함수 표현식)가 실행되어 생성된 함수 객체는 자신이 정의된 스코프인 상위 스코프를 기억한다.</p>
<blockquote>
<p>즉, 내가(함수가) 정의된 스코프가 자신의 상위 스코드이다.</p>
</blockquote>
<hr>
<h1 id="전역변수와-var-키워드"><a href="#전역변수와-var-키워드" class="headerlink" title="전역변수와 var 키워드"></a>전역변수와 var 키워드</h1><p>변수는 생명주기가 있어 선언에 의해 생성되고 언젠가 소멸한다. 소멸하는 시점은 스코프에 따라 다르다.</p>
<ul>
<li><p>전역변수 : 런타임 이전에 자바스크립트 엔진에 의해 선언되고 애플리케이션이 종료되면 소멸한다.</p>
</li>
<li><p>지역변수 : 함수가 호출될 때 생성되고 함수가 종료하면 소멸한다. 함수가 호출되는 순간 함수 몸체에 있는 선언들이 호이스팅 된다.</p>
</li>
</ul>
<h2 id="전역변수의-문제점"><a href="#전역변수의-문제점" class="headerlink" title="전역변수의 문제점"></a>전역변수의 문제점</h2><ol>
<li><p>암묵적 결합<br>어디서든 참조하고 변경할 수 있어 의도치 않게 변경될 수 있다.</p>
</li>
<li><p>긴 생명주기</p>
</li>
</ol>
<p>메모리 자원도 오랜 기간 소비한다. 1번의 위험이 오래 지속되어 오류의 기회가 많아진다.</p>
<ol start="3">
<li>네임 스페이스 오염</li>
</ol>
<p>자바스크립트는 파일을 분리해도 전역 스코프를 공유한다는 점에서 다른 파일에서 동일한 이름의 전역 변수끼리 충돌이 일어날 수 있다.</p>
<blockquote>
<p>그러므로 전역변수를 꼭 써야하는 상황이 아니라면 사용하지 말자.</p>
</blockquote>
<h2 id="전역변수-사용-억제-방법"><a href="#전역변수-사용-억제-방법" class="headerlink" title="전역변수 사용 억제 방법"></a>전역변수 사용 억제 방법</h2><ol>
<li><p>즉시실행함수<br>즉시실행함수를만들어 함수 종료 시 변수도 사라져 메모리 해제도 빨리 되고 지역 스코프를 가져 충돌의 위험을 줄일 수 있다.</p>
</li>
<li><p>모듈패턴<br>클래스를 모방하여 관련이 있는 변수와 함수를 모아 즉시실행함수로 감싸 하나의 모듈로 만든다.</p>
</li>
</ol>
<p>전역변수 억제와 캡슐화까지 가능하다.</p>
<blockquote>
<p>캡슐화란, 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 메서드를 하나로 묶는 것을 말한다. 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 한다.(정보은닉)</p>
</blockquote>
<h1 id="var-키워드"><a href="#var-키워드" class="headerlink" title="var 키워드"></a>var 키워드</h1><p>var 키워드는 함수 레벨 스코프를 따른다. 함수 몸체 외부에서 var 키워드로 선언시 전역 변수로 선언되고 전역 스코프를 갖는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">x</span>); <span class="comment">// 10;</span></span><br></pre></td></tr></table></figure>

<p>var 키워드는 전역에서 선언시 전역 객체의 프로퍼티로 등록된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">y = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  z = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>키워드로 선언되지 않은 변수는 어디에서든지 항상 전역 변수이다.</p>
<p>선언되지 않은 변수는 해당 코드가 실행되어야 존재한다.</p>
<blockquote>
<p>키워드 없이 선언하는 것은 옳지 않다.</p>
</blockquote>
<p><span style="font-size:1.2rem">러버덕하면서 알게된 내용</span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="variable language_">window</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">//  &#123;value: 100, writable: true, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="variable language_">window</span>, <span class="string">&quot;y&quot;</span>); <span class="comment">// &#123;value: 50, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>var 키워드로 선언된 변수와 암묵적 선언으로 선언된 변수 모두 전역 객체의 프로퍼티로 등록된다.</p>
<p>하지만, 객체의 프로퍼티를 보면 configurable 값이 다른 것을 볼 수 있는데, 이것이 true이면 재정의(삭제, 변경)가 가능하다는 의미이다.</p>
<p>따라서 암묵적 선언으로 전역 객체의 프로퍼티로 등록이 되면 재정의가 가능하므로 암묵적 선언은 사용하지 않는 것이 좋다.</p>
<hr>
<h1 id="let-const-키워드"><a href="#let-const-키워드" class="headerlink" title="let, const 키워드"></a>let, const 키워드</h1><p>let, const 키워드는 블록 레벨 스코프를 따른다. 그러므로 var 키워드의 함수 레벨 스코프보다 더 한정적인 스코프를 지원하여 작은 범위의 스코프를 다룰 수 있어 유용하다.</p>
<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>var 키워드와 비교하여 let 키워드를 알아보자.</p>
<ol>
<li><p>변수 중복 선언 금지</p>
</li>
<li><p>블록 레벨 스코프</p>
</li>
</ol>
<p>let 키워드로 선언한 전역변수는 전역객체의 프로퍼티가 아니다. 전역 객체의 프로퍼티가 되는 것들은 var 키워드로 선언한 전역변수 및 전역함수, 그리고 선언하지 않는 변수에 값을 할당한 암묵적 전역이 있다. 이에 대해서는 실행 컨텍스트에 대해 배울 때 자세히 배우자.</p>
<ol start="3">
<li>변수 호이스팅</li>
</ol>
<p>var 키워드로 선언한 변수는 선언단계와 초기화 단계가 동시에 진행된다. 하지만 let 키워드로 선언한 변수는 선언단계와 초기화 단계가 분리되어 진행된다.</p>
<p>선언단계가 자바스크립트 엔진에 의해 실행되고 <span style="color:red">초기화 단계는 변수 선언문에 도달했을 때</span>, 실행된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="keyword">let</span> b;</span><br></pre></td></tr></table></figure>

<p>언뜻보면 let 키워드는 호이스팅이 일어나지 않는 것처럼 보이지만, 선언단계는 호이스팅이 되어 최상단에서 먼저 실행되었고 초기화 단계는 선언문에 도달했을 경우 진행되기 때문에 위와 같은 현상이 발생하는 것이다.</p>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>let 키워드와 비교해서 알아보자</p>
<ol>
<li>선언과 초기화</li>
</ol>
<p>const 키워드로 선언한 변수는 개발자가 선언과 초기화를 동시에 해야한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz; <span class="comment">// Uncaught SyntaxError : Unexpected identifier</span></span><br></pre></td></tr></table></figure>

<p>이전에 선언을 하면 선언단계와 초기화 단계가 진행된다 그랬었는데, 이것도 초기화가 맞지만 const를 사용하기 위해서는 개발자가 직접 초기화를 해줘야한다. 만약 초기화를 해주지 않고 나중에 값을 할당한다는 것이 재할당으로 해석되기 때문이다.</p>
<ol start="2">
<li>재할당 금지</li>
</ol>
<p>const 키워드로 선언한 변수에 원시값을 할당하면 값을 변경할 수 없다. 하지만 객체를 할당한 경우 값을 변경할 수 있다. 재할당 금지라는 말이 불변을 의미하지는 않는다. 왜냐하면 식별자가 가리키는 메모리 주소 공간은 참조값이 저장되어 있고 객체를 변경하여도 참조값은 변하지 않기 때문이다.</p>
<ol start="3">
<li>상수</li>
</ol>
<p>변하지 않는 값을 사용하기 위해 우리는 상수를 사용한다.</p>
<p>주로 상수의 이름은 대문자로 사용한다. 원시값을 할당한 경우 원시값은 변경 불가능한 값이고 재할당이 금지되므로 할당된 값을 변경할 방법은 없다.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>실행 컨텍스트에 대해 설명해주세요</title>
    <url>/2023/01/26/CS/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</url>
    <content><![CDATA[<h1 id="실행-컨텍스트란"><a href="#실행-컨텍스트란" class="headerlink" title="실행 컨텍스트란?"></a>실행 컨텍스트란?</h1><p>자바스크립트에서 실행 컨텍스트는 모든 코드의 동작원리를 담고 있는 핵심 개념이다.</p>
<p>다음 예시를 실행 컨텍스트 관점으로 설명해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">outer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">inner</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> closure = <span class="title function_">outer</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">closure</span>();</span><br></pre></td></tr></table></figure>

<h2 id="소스코드-평가와-실행"><a href="#소스코드-평가와-실행" class="headerlink" title="소스코드 평가와 실행"></a>소스코드 평가와 실행</h2><h3 id="1-전역-코드-평가"><a href="#1-전역-코드-평가" class="headerlink" title="1. 전역 코드 평가"></a>1. 전역 코드 평가</h3><p><img src="/../images/../../images/execution/exec1.png" alt="실행컨텍스트1"></p>
<ol>
<li>전역 실행 컨텍스트 생성</li>
<li>var 키워드로 선언된 전역변수 outer는 전역 객체에 등록</li>
<li>const 키워드로 선언된 전역변수 closure는 선언적 환경 레코드에 등록</li>
<li>this는 전역 객체 바인딩</li>
</ol>
<h3 id="2-전역-코드-실행-단계"><a href="#2-전역-코드-실행-단계" class="headerlink" title="2. 전역 코드 실행 단계"></a>2. 전역 코드 실행 단계</h3><p><img src="/../images/../../images/execution/exec2.png" alt="실행컨텍스트2"></p>
<ol>
<li>outer 우항의 함수를 평가한 뒤, 메모리에 저장한 뒤 전역 객체에서 outer 식별자에 할당</li>
<li>closure 우항의 outer 함수를 전역 객체에서 찾아 호출</li>
<li></li>
</ol>
<h3 id="3-outer-함수-평가-단계"><a href="#3-outer-함수-평가-단계" class="headerlink" title="3. outer 함수 평가 단계"></a>3. outer 함수 평가 단계</h3><p><img src="/../images/../../images/execution/exec3.png" alt="실행컨텍스트3"></p>
<ol>
<li>outer 함수 실행 컨텍스트 생성</li>
<li>outer 함수에서 선언된 변수 a, inner를 환경 레코드에 등록</li>
<li>outer 함수의 외부 렉시컬 환경 참조는 outer 변수에 할당된 익명함수 객체의 내부슬롯 [[Environment]]가 가리키는 외부 렉시컬 환경을 가리킨다.</li>
</ol>
<h3 id="4-outer-함수-실행-단계"><a href="#4-outer-함수-실행-단계" class="headerlink" title="4. outer 함수 실행 단계"></a>4. outer 함수 실행 단계</h3><p><img src="/../images/../../images/execution/exec4.png" alt="실행컨텍스트4"></p>
<ol>
<li>outer 함수 환경 레코드의 변수 a에 값 3이 할당된다.</li>
<li>변수 inner에 익명 함수 객체의 참조값이 할당되고, 익명 함수 객체의 내부 슬롯 [[Environment]]은 정의된 outer 렉시컬 환경을 가리킨다.</li>
</ol>
<h3 id="5-전역-코드-실행-단계-복귀"><a href="#5-전역-코드-실행-단계-복귀" class="headerlink" title="5. 전역 코드 실행 단계 복귀"></a>5. 전역 코드 실행 단계 복귀</h3><p><img src="/../images/../../images/execution/exec5.png" alt="실행컨텍스트5"></p>
<ol>
<li>전역 렉시컬 환경의 선언적 환경 레코드에서 closure를 찾는다.</li>
<li>inner 함수 객체가 closure라는 식별자에 할당된다.</li>
</ol>
<h3 id="6-closure-함수-평가-단계"><a href="#6-closure-함수-평가-단계" class="headerlink" title="6. closure 함수 평가 단계"></a>6. closure 함수 평가 단계</h3><p><img src="/../images/../../images/execution/exec6.png" alt="실행컨텍스트6"></p>
<ol>
<li>closure() 문이 실행되면서 closure의 실행 컨텍스트가 생성된다.</li>
<li>closure를 실행하기 위해 inner 함수 객체를 평가한다.<blockquote>
<p>즉, closure() 평가단계 &#x3D;&#x3D;&#x3D; inner() 평가단계</p>
</blockquote>
</li>
<li>const로 선언된 변수 b가 closure 환경 레코드에 등록된다.</li>
<li>화살표 함수의 this는 함수가 정의될 때 상위 스코프의 this로 정적으로 결정된다.</li>
</ol>
<h3 id="7-closure-함수-실행-단계"><a href="#7-closure-함수-실행-단계" class="headerlink" title="7. closure 함수 실행 단계"></a>7. closure 함수 실행 단계</h3><p><img src="/../images/../../images/execution/exec7.png" alt="실행컨텍스트7"></p>
<ol>
<li>closure 즉, inner 함수 내부 코드가 실행</li>
<li>b에 값 5가 할당되고 a+b를 수행하기 위해 스코프 체인에서 a를 찾는다.</li>
<li>closure 환경 레코드에는 a가 존재하지 않기 때문에 외부 렉시컬 환경 참조를 따라 익명함수 객체로 이동하고, 익명함수 객체의 [[Environment]]내부 슬롯이 가리키는 outer 함수 렉시컬 환경으로 이동된다. 결국 outer 환경 레코드에서 a를 찾을 수 있다.</li>
<li>a+b 연산을 수행하고 연산값을 반환한다.</li>
</ol>
<h3 id="8-closure-실행-컨텍스트-소멸"><a href="#8-closure-실행-컨텍스트-소멸" class="headerlink" title="8. closure 실행 컨텍스트 소멸"></a>8. closure 실행 컨텍스트 소멸</h3><p><img src="/../images/../../images/execution/exec8.png" alt="실행컨텍스트8"></p>
<ul>
<li>closure 함수 코드가 실행을 마치고 closure의 실행 컨텍스트가 pop 되어 더 이상 참조되지 않는 객체들은 Garbage Collector에 의해 메모리가 해제된다.</li>
</ul>
<h3 id="9-전역-실행-컨텍스트-소멸"><a href="#9-전역-실행-컨텍스트-소멸" class="headerlink" title="9. 전역 실행 컨텍스트 소멸"></a>9. 전역 실행 컨텍스트 소멸</h3><p><img src="/../images/../../images/execution/exec9.png" alt="실행컨텍스트9"></p>
<ul>
<li>마지막으로 전역 실행컨텍스트가 pop 되어 참조될 수 있는 객체가 없기 때문에 모든 객체가 Garbage Collector에 의해 메모리가 해제된다.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>이벤트 위임이란 무엇이고 왜 사용하는가?</title>
    <url>/2023/01/02/CS/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/</url>
    <content><![CDATA[<p>이벤트 위임에 대해 알기 전 우선 이벤트와 이벤트 핸들러에 대해 알고 가자.</p>
<h1 id="이벤트와-이벤트-핸들러"><a href="#이벤트와-이벤트-핸들러" class="headerlink" title="이벤트와 이벤트 핸들러"></a>이벤트와 이벤트 핸들러</h1><p>브라우저는 사용자가 어떤 행동을 하였을 때, 이를 감지하여 이벤트를 발생시킨다.</p>
<p>ex) 참된 개발자: 브라우저야 사용자가 제출하기 버튼을 클릭 했을 때, 정보를 제출하는 함수를 호출(실행)해줘~</p>
<p>이 때 사용자가 언제 행동을 할지 모르기 때문에 개발자는 브라우저에게 대신 함수를 호출해달라고 한다.</p>
<p><strong>이벤트 발생 시 호출할 함수를 이벤트 핸들러</strong>라고 한다.</p>
<ul>
<li>이벤트 발생 시 호출될 함수: 이벤트 핸들러</li>
<li>이벤트 발생 시 브라우저에게 이벤트 핸들러 호출을 위임: 이벤트 핸들러 등록</li>
<li>이벤트 핸들러를 등록하는 방법은 여러가지가 있는데 설명을 위해 이번 장에서는 <strong>이벤트 리스너 방식을 사용하겠습니다.</strong></li>
</ul>
<h1 id="이벤트-위임"><a href="#이벤트-위임" class="headerlink" title="이벤트 위임"></a>이벤트 위임</h1><p>이벤트 위임은 이벤트 리스너를 하위 요소에 추가하는 대신 상위 요소에 추가하여 이벤트를 위임하는 것을 말한다.</p>
<p>이벤트 리스너는 이벤트 버블링(Event Bubbling)으로 인해 하위 요소에서 이벤트가 발생할 때 마다 이벤트 리스너가 실행된다.</p>
<p>아래 그림은 이벤트 전파가 일어나는 흐름을 설명한 그림이다. 이벤트 전파에 대한 설명은 그림으로 대체한다.</p>
<p><img src="/../../images/event/eventFlow.png" alt="이벤트 Flow"></p>
<h1 id="이벤트-위임을-사용하는-이유"><a href="#이벤트-위임을-사용하는-이유" class="headerlink" title="이벤트 위임을 사용하는 이유"></a>이벤트 위임을 사용하는 이유</h1><p>이벤트 위임을 사용하면 하위 요소에 같은 동작을 하는 이벤트를 중복해서 등록해주지 않고 상위 요소에 이벤트 위임을 통해 등록하여 중복을 피하고 불필요한 메모리 낭비를 줄일 수 있다.</p>
<p>또한, 제거된 요소에 이벤트를 해제하고 새 요소에 이벤트를 다시 등록하는 번거로운 작업을 할 필요가 없어지므로 적절한 상황에 맞게 유용하게 사용할 수 있다.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>클로저는 무엇이고 언제, 어떻게 사용하나요?</title>
    <url>/2023/01/05/CS/%ED%81%B4%EB%A1%9C%EC%A0%80%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94/</url>
    <content><![CDATA[<h1 id="📚-클로저란-무엇인가요"><a href="#📚-클로저란-무엇인가요" class="headerlink" title="📚 클로저란 무엇인가요?"></a>📚 클로저란 무엇인가요?</h1><p>클로저란, ECMAScript에선 공식 사양으로 등장하진 않지만, 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다.</p>
<h1 id="❓-클로저는-왜-사용-하나요"><a href="#❓-클로저는-왜-사용-하나요" class="headerlink" title="❓ 클로저는 왜 사용 하나요?"></a>❓ 클로저는 왜 사용 하나요?</h1><p>클로저는 함수형 프로그래밍 방식에서 정보 은닉과 캡슐화를 통해 정보를 보다 안전하게 관리하기 위해 사용한다.</p>
<p>C++과 같은 객체지향 프로그래밍 언어와 달리 <strong>자바스크립트는 private 같은 접근 제한자를 제공하지 않는다.</strong></p>
<p>때문에 자바스크립트에서 객체 프로퍼티를 안전하게 참조 및 변경하기 위해 클로저를 사용한다.</p>
<h1 id="❓-클로저는-언제-어떻게-사용하나요"><a href="#❓-클로저는-언제-어떻게-사용하나요" class="headerlink" title="❓ 클로저는 언제, 어떻게 사용하나요?"></a>❓ 클로저는 언제, 어떻게 사용하나요?</h1><p>클로저를 구현하는 방법은 아래 두가지 조건을 만족시켜 구현할 수 있다.</p>
<ol>
<li>함수 안에 내부함수를 정의하고 내부함수는 외부함수의 식별자를 참조한다.</li>
<li>외부 함수의 반환값으로 내부함수를 반환하여 변수에 할당한다.</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 카운트 상태 변수</span></span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 클로저인 메서드를 갖는 객체를 반환한다.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ++num;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> num &gt; <span class="number">0</span> ? --num : <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increase</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increase</span>()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">decrease</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">decrease</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h1 id="❗️-주의점"><a href="#❗️-주의점" class="headerlink" title="❗️ 주의점"></a>❗️ 주의점</h1><p>클로저는 외부함수의 실행 컨텍스트가 제거되어도 내부함수가 외부함수의 변수를 기억하고 있는데 이는 추후에 메모리 누수가 발생할 수 있다.</p>
<p>예를 들어 리액트에서 useEffect 함수를 사용하여 렌더링 이후에 이벤트를 등록하였을 때, 이를 다시 렌더링이 되었을 때, 기존 이벤트를 클린업 해주지 않는 다면 같은 역할을 하는 이벤트가 중복등록이 되고 이는 성능상 문제를 일으킬 수 있으므로 이러한 점을 주의해야한다.</p>
<h1 id="📌-정리"><a href="#📌-정리" class="headerlink" title="📌 정리"></a>📌 정리</h1><p>클로저는 보다 안전하게 객체를 다루기 위해 사용한다.</p>
<p>하지만 ES6에서 클래스가 도입되어 다른 객체지향 프로그래밍 언어처럼 private 접근 제한자가 생겨나 객체를 안전하게 관리할 수 있게 되었다.</p>
<p>예전에 페어프로그래밍을 하면서 DOM 요소를 참조하고 변경하는 클로저함수만 외부로 빼내어 해당 함수로만 DOM 요소를 조작할 수 있도록 코드를 구현해본 경험이 있습니다.</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>프로세스와 스레드의 차이점은?</title>
    <url>/2023/01/19/CS/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80/</url>
    <content><![CDATA[<h1 id="프로세스와-스레드는-무엇인가요"><a href="#프로세스와-스레드는-무엇인가요" class="headerlink" title="프로세스와 스레드는 무엇인가요?"></a>프로세스와 스레드는 무엇인가요?</h1><p><strong>프로세스란?</strong> 작업의 단위로써, 작업을 관리하는 주체는 OS이다. 프로세스는 최소 1개의 스레드(thread)를 가진다.</p>
<p>컴퓨터가 명령을 받게되면 명령을 실행하면서 연산코드의 흐름이 생겨난다. <span style="color:red;">이 때의 흐름을 스레드라고 한다.</span></p>
<p><strong>즉, 스레드가 실질적으로 연산을 하는 주체가 된다.</strong></p>
<p>기본적으로 프로세스 흐름(스레드)은 1개이다. 그런데 흐름이 n개 일 수 있는데, 이런 경우를 멀티 스레딩(Multi-threading)라고 한다.</p>
<p>멀티 스레딩은 동시성과 동기화라는 특징이 있는데 이는 아래 예시를 통해 설명할 수 있다.</p>
<blockquote>
<p>만약 프로세스가 여러 개라면 멀티 태스킹(Multi-tasking)이라고 한다.</p>
</blockquote>
<h2 id="프로세스와-스레드-비유-설명"><a href="#프로세스와-스레드-비유-설명" class="headerlink" title="프로세스와 스레드 비유 설명"></a>프로세스와 스레드 비유 설명</h2><p><img src="/../images/../../images/processandthread/process_thread.png" alt="프로세스와 스레드 비유 설명"></p>
<p>한 가구(Process)가 있다고 하자. 해당 가구는 집(Virtual Memory)이라는 공간에 살게된다. 한 가구안에 세대원(Thread) 3명이 있다고 하자.</p>
<p>집 안에는 세대원들이 각자 방(Thread Local Storage)을 하나씩 사용한다. 뿐만 아니라 Thread마다 Stack 자료구조로 관리되는 메모리 공간이 따로 있다.</p>
<p>각자 방은 본인만 사용 가능하고 거실, 화장실, 부엌은 공용공간(Heap)이다.</p>
<h2 id="프로세스와-스레드-작동원리"><a href="#프로세스와-스레드-작동원리" class="headerlink" title="프로세스와 스레드 작동원리"></a>프로세스와 스레드 작동원리</h2><p><img src="/../images/../../images/processandthread/procee_thread_logic.png" alt="프로세스와 스레드 작동원리"></p>
<ol>
<li><p>Process가 Thread를 처리하기 위해서는 CPU와 메모리(연습장)가 필요하는데 이를 관리해주는 것이 바로 OS가 하는 일이다.</p>
</li>
<li><p>이 때 Process는 실제 메모리를 사용하지 않고 RAM(1차 메모리)과 HDD(2차 메모리)를 추상화한 Virtual Memory를 사용한다.</p>
</li>
<li><p>Virtual Memory는 RAM과 연결된 부분이 있을 수도 있고 HDD와 연결된 부분이 있을 수도 있다. RAM이 부족해서 연결하지 못하는 것보단 HDD라도 연결해주는 것이 낫기 때문이다.</p>
</li>
</ol>
<p>OS가 Virtual Memory를 Process에게 할당해준다. 때문에 Process 내부의 Thread는 작동범위가 Virtual Memory로 제한된다.</p>
<h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p><a href="https://www.youtube.com/watch?v=x-Lp-h_pf9Q&t=58s">유튜브 널널한 개발자 - Process와 Thread 차이</a></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>호이스팅에 대해 설명하라</title>
    <url>/2023/01/05/CS/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="📌-호이스팅이란"><a href="#📌-호이스팅이란" class="headerlink" title="📌 호이스팅이란?"></a>📌 호이스팅이란?</h1><p>호이스팅이란 코드에서 선언이 마치 코드 최상단으로 옮겨진 것처럼 동작하는 것을 말한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 선언은 에러를 발생하지 않는다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let/const 선언은 에러를 발생 시킨다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// ReferenceError: bar is not defined</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>마치 위 예제를 보았을 때, let, const 키워드로 선언할 경우 호이스팅이 발생하지 않는 것처럼 느낄 수 있는데, let, const 키워드로 선언했을 경우에도 호이스팅이 발생한다.</p>
<p>위 예제에서 오류를 발생시키는 것은 var 키워드의 경우 변수 선언 단계와 초기화 단계가 동시에 진행되므로 이 때, 변수가 선언됨과 동시에 undefined로 초기화되어 오류를 발생시키지 않는다.</p>
<p>반면, let, const 키워드는 선언단계와 초기화 단계가 분리되어 진행되어 <strong>초기화 단계 이전에 해당 변수를 참조하게 되면 참조에러를 발생시킨다.</strong></p>
<blockquote>
<p>선언단계 ~ 초기화 단계 시작 전까지 구간을 Temporal Dead Zone(일시적 사각 지대)라고 한다.</p>
</blockquote>
<h1 id="📚-함수-호이스팅"><a href="#📚-함수-호이스팅" class="headerlink" title="📚 함수 호이스팅"></a>📚 함수 호이스팅</h1><p>호이스팅은 선언 단계가 마치 최상단으로 올라간 것처럼 동작하는 것을 말하므로 이는 변수 선언과 함수 선언 모두 해당될 수 있다.</p>
<p>변수 선언은 앞의 예제에서 다루었으니 함수 호이스팅 예제를 보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = <span class="title function_">doubleNum</span>(numbers);</span><br><span class="line"><span class="keyword">const</span> trippled = <span class="title function_">trippleNum</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doubleNum</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">trippleNum</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: doubleNum is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>위 예제에서는 화살표 함수가 표현식으로 선언되었으므로 변수 호이스팅이 발생하여 오류를 발생하는 것을 볼 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = <span class="title function_">doubleNum</span>(numbers);</span><br><span class="line"><span class="keyword">const</span> trippled = <span class="title function_">trippleNum</span>(numbers);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trippled); <span class="comment">// [3, 6, 9, 12, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doubleNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trippleNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>위 예제에서는 함수 선언식으로 함수를 정의하여서 함수 호이스팅이 발생하여 오류를 발생시키지 않았다.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>프로토타입이란 무엇인가요?</title>
    <url>/2023/01/04/CS/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="프로토타입이란"><a href="#프로토타입이란" class="headerlink" title="프로토타입이란?"></a>프로토타입이란?</h1><p>자바스크립트는 프로토타입을 기반으로 상속을 구현하는 언어이다. 프로토타입은 엄밀히 말하면 프로토타입 객체이다.</p>
<p>프로토타입 객체는 어떤 객체의 상위(부모) 객체의 역할을 한다.</p>
<h2 id="프로토타입을-왜-사용하나요"><a href="#프로토타입을-왜-사용하나요" class="headerlink" title="프로토타입을 왜 사용하나요?"></a>프로토타입을 왜 사용하나요?</h2><p>객체 간 상속을 구현하기 위해 사용한다. 즉, 프로토타입을 상속 받은 하위(자식) 객체는 상위(부모) 객체의 프로퍼티를 자신의 프로퍼티처럼 자유롭게 사용할 수 있다.</p>
<h2 id="프로토타입이-어떻게-동작하나요"><a href="#프로토타입이-어떻게-동작하나요" class="headerlink" title="프로토타입이 어떻게 동작하나요?"></a>프로토타입이 어떻게 동작하나요?</h2><p>프로토타입은 객체 생성 방식에 따라 객체가 생성될 때 결정되고 해당 객체의 [[Prototype]] 내부 슬롯에 저장된다.</p>
<p>__proto__접근자 프로퍼티를 통해서 프로토타입에 간접적으로 접근이 가능하다.</p>
<p><img src="/../../images/prototype/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-01-04%2014.31.52.png" alt="prototype"></p>
<ul>
<li>생성자 함수가 생성한 객체 : __proto__접근자 프로퍼티로 자신의 프로토타입에 간접적 접근 가능</li>
<li>프로토타입 : 자신의 constructor 프로퍼티로 생성자 함수에 접근 가능</li>
<li>생성자 함수 : 자신의 prototype 프로퍼티로 프로토타입에 접근 가능</li>
</ul>
<blockquote>
<p>사실 모든 객체는 __proto__접근자 프로퍼티를 가지고 있다. 그러므로 모든 객체는 __proto__접근자 프로퍼티로 자신의 프로토타입 객체에 간접적으로 접근할 수 있다.</p>
</blockquote>
<h2 id="프로토타입-체인이란"><a href="#프로토타입-체인이란" class="headerlink" title="프로토타입 체인이란?"></a>프로토타입 체인이란?</h2><p>자바스크립트의 모든 객체는 프로토타입 기반 상속을 받고 있다. 자바스크립트는 객체의 프로퍼티에 접근할 때 해당 객체에 접근하려는 프로퍼티가 없다면, [[Prototype]] 내부슬롯의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다.</p>
<p>이를 프로토타입 체인이라고 한다.</p>
<p><img src="/../../images/prototype/prototypeChain.png" alt="프로토타입 체인"></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>🍪 Cookie</title>
    <url>/2022/11/10/CS/%F0%9F%8D%AA-Cookie/</url>
    <content><![CDATA[<h1 id="📌-Cookie란"><a href="#📌-Cookie란" class="headerlink" title="📌 Cookie란?"></a>📌 Cookie란?</h1><p>서버가 클라이언트에게 전송하는 데이터이다. 서버가 HTTP Response Header의 Set-Cookie에 내용을 넣어 전달하면 브라우저가 이 내용을 자체적으로 브라우저에 저장한다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Reponse Header --&gt;</span><br><span class="line">HTTP/2.0 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Set-Cookies: &lt;cookie-name&gt;=&lt;cookie-value&gt;</span><br><span class="line"></span><br><span class="line">// Page Content...</span><br></pre></td></tr></table></figure>

<ul>
<li>쿠키는 key,value를 쌍으로 브라우저에 문자열로 저장된다.</li>
<li>주로 만료 기간을 설정하거나 자동으로 서버로 전송되어야할 작은 용량의 정보를 담는다.<ul>
<li>Ex) n일 동안 보지 않기, 비로그인 장바구니 기능</li>
</ul>
</li>
<li>쿠키는 주로 <strong>인증</strong>을 위해 사용된다.</li>
<li>쿠키는 세션쿠키와 퍼머넌트 쿠키가 있다.</li>
</ul>
<h2 id="🐶-Session-Cookie"><a href="#🐶-Session-Cookie" class="headerlink" title="🐶 Session Cookie"></a>🐶 Session Cookie</h2><p>세션 쿠키는 클라이언트가 셧다운 되면 사라지는 쿠키이다. 왜냐하면 Expires, Max-Age를 지정해주지 않았기 때문이다.</p>
<p><code>일부 브라우저는 Session Resorting을 사용하여 세션쿠키를 영구적으로 만들 수 있다.</code></p>
<ul>
<li>Expires, Max-Age 설정으로 만료 기한을 정해주지 않은 쿠키</li>
</ul>
<h2 id="🐸-Permanent-Cookie"><a href="#🐸-Permanent-Cookie" class="headerlink" title="🐸 Permanent Cookie"></a>🐸 Permanent Cookie</h2><p>클라이언트가 브라우저를 열고 닫거나 새로고침을 하여도 쿠키의 데이터가 보존되는 쿠키이다. Set-Cookie에 몇가지 조건을 추가하여 Permanent Cookie를 설정할 수 있다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Thu, 10 Nov 2022 15:30:00 GMT;</span><br></pre></td></tr></table></figure>

<ul>
<li>만료시간은 클라이언트 시간을 따른다. (서버시간과 상이할 수 있다.)</li>
</ul>
<h2 id="✏️-쿠키-접근"><a href="#✏️-쿠키-접근" class="headerlink" title="✏️ 쿠키 접근"></a>✏️ 쿠키 접근</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;yummy_cookie=choco&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;tasty_cookie=strawberry&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line"><span class="comment">// logs &quot;yummy_cookie=choco; tasty_cookie=strawberry&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="🔨-쿠키-보안"><a href="#🔨-쿠키-보안" class="headerlink" title="🔨 쿠키 보안"></a>🔨 쿠키 보안</h2><p>🙅‍♂️ 민감한 정보는 HTTP 쿠키 내에 저장하면 안된다.</p>
<h3 id="🪜-HttpOnly-Cookie"><a href="#🪜-HttpOnly-Cookie" class="headerlink" title="🪜 HttpOnly Cookie"></a>🪜 HttpOnly Cookie</h3><p>XSS 공격으로부터 사용자의 쿠키 정보가 유출되는 것을 방지하기 위해 등장하였다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Thu, 10 Nov 2022 15:30:00 GMT; HttpOnly</span><br></pre></td></tr></table></figure>

<ul>
<li>document.cookie API로 접근할 수 없다.</li>
</ul>
<h3 id="🔒-Secure-Cookie"><a href="#🔒-Secure-Cookie" class="headerlink" title="🔒 Secure Cookie"></a>🔒 Secure Cookie</h3><p>HTTPS 전송을 보증해주는 역할을 하는 쿠키이다. Secure로 설정된 쿠키는 안전한 전송 프로토콜에만 쿠키 정보를 서버로 보낸다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Thu, 10 Nov 2022 15:30:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></table></figure>

<h3 id="👿-Cross-site-요청-위조-CSRF-공격"><a href="#👿-Cross-site-요청-위조-CSRF-공격" class="headerlink" title="👿 Cross-site 요청 위조(CSRF) 공격"></a>👿 Cross-site 요청 위조(CSRF) 공격</h3><p>현재 사용자가 은행 사이트에 로그인 되어있다. 송금과 같은 은행 업무를 보고 로그아웃 하지 않고 새 탭을 열어 어떤 사이트를 열었다. 그런데 이 사이트에는 해커에게 송금을 요청하는 form이 있고 이 form은 자동으로 제출되도록 설정되었다.</p>
<p>form이 해당 사이트를 거쳐 은행 사이트로 전송될 때 인증 쿠키도 함께 전송된다. 은행은 사용자로 착각하여 해커에게 돈을 송금하는 일이 발생한다.</p>
<p>⇒ 이런 공격을 <strong>크로스 사이트 요청 위조</strong> 라고 부른다.</p>
<p>🚪 <strong>방어 방법</strong></p>
<ul>
<li>XSRF 토큰이라는 특수 필드 넣어줘야한다.</li>
<li>민감한 동작에 필수로 요구되는 확인 절차가 항상 수행하도록 한다.</li>
<li>민감한 동작에 사용되는 쿠키는 짧은 수명만 갖도록 한다.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>🎡 Flux 패턴</title>
    <url>/2022/11/10/CS/%F0%9F%8E%A1-Flux-%ED%8C%A8%ED%84%B4/</url>
    <content><![CDATA[<h1 id="📌-Flux-패턴"><a href="#📌-Flux-패턴" class="headerlink" title="📌 Flux 패턴"></a>📌 Flux 패턴</h1><p>페이스북이 전통적인 MVC 디자인 패턴이 복잡한 애플리케이션에서 적합하지 않다고 판단하여 새로운 디자인 패턴을 소개한 것이 바로 <red>단방향 데이터 흐름을 갖는 Flux 패턴이다.</red></p>
<h2 id="🔥-문제점"><a href="#🔥-문제점" class="headerlink" title="🔥 문제점"></a>🔥 문제점</h2><p><img src="/../../images/flux/complicated%20MVC.png" alt="Complicated MVC"></p>
<p>애플리케이션 규모가 커짐에 따라 <red>양방향 데이터 흐름</red>을 그림처럼 복잡한 구조를 가지게 된다.</p>
<p>사용자와 상호작용하는 여러 View가 연결된 여러 Model을 업데이트하고 Model 또한 연결된 View를 업데이트하는 매우 복잡한 상황이 발생하기에 <strong>데이터 흐름을 예측하기란 매우 어려워진다.</strong></p>
<blockquote>
<p>사실 위 그림은 전통적인 MVC 패턴이고 Apple의 MVC 패턴은 사진처럼 Model과 View의 양방향 데이터 흐름이 발생하지 않는다. <red>문제는 양방향 데이터 흐름이다.</red></p>
</blockquote>
<p><img src="/../../images/flux/appleMVC.png" alt="AppleMVC"></p>
<h2 id="🦖-Flux-아키텍처"><a href="#🦖-Flux-아키텍처" class="headerlink" title="🦖 Flux 아키텍처"></a>🦖 Flux 아키텍처</h2><p><img src="/../../images/flux/flux.png" alt="flux"></p>
<p>Flux 패턴은 앱의 단방향 데이터 흐름을 촉진하는 시스템 아키텍처를 말한다.</p>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p><strong>사용자의 요청을 정의한 객체</strong>를 말한다.</p>
<ul>
<li>사용자 요청 타입(Type)과 데이터(Payload)를 가진다.</li>
<li>액션 크리에이터(Action Creator) 함수를 사용하여 디스패처로 전달한다.</li>
</ul>
<h3 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h3><p>디스패처는 중앙 데이터 흐름 관리한다. 스토어에 등록된 액션 타입마다 콜백되는 함수가 존재한다.</p>
<ul>
<li>사용자 액션으로부터 받은 액션 타입에 맞는 콜백함수를 실행한다.</li>
<li><strong>스토어 데이터 변경은 디스패처를 통해서만 가능하다.</strong></li>
</ul>
<h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>스토어는 상태(Model)를 관리하는 저장소이며 상태를 변경할 수 있는 콜백을 가진다. 각 액션을 처리하는 콜백함수는 디스패처에 등록된다.</p>
<ul>
<li>상태와 상태를 변경하는 함수를 가진다.</li>
<li>디스패처에 등록된 콜백함수가 실행되면 스토어의 상태가 변경되며 View에 데이터가 변경되었음을 알린다.(옵저버 패턴 활용)</li>
</ul>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>뷰는 사용자와 상호작용하는 컴포넌트이다. 스토어에서 상태가 변경되었다는 알림이 오면 뷰는 리렌더링이 발생한다.</p>
<ul>
<li>사용자는 View를 조작할 수 있고 상태 변경을 요청하는 액션을 생성할 수 있다.</li>
<li>생성된 액션은 디스패처에게 전달되고 디스패처는 해당 액션에 연결된 콜백을 실행하여 스토어의 상태를 변경한다.</li>
<li>상태가 변경되었음을 뷰에게 알리고 뷰는 리렌더링이 발생한다.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>🥁 CORS</title>
    <url>/2022/11/11/CS/%F0%9F%A5%81-CORS/</url>
    <content><![CDATA[<h1 id="📌-CORS란"><a href="#📌-CORS란" class="headerlink" title="📌 CORS란?"></a>📌 CORS란?</h1><p>교차 출처 리소스 공유(Cross-Origin Resource Sharing)는 추가 HTTP Header를 사용하여 한 출처에서 실행 중인 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 <red>브라우저에게 알려준다.</red></p>
<p><strong>웹 애플리케이션은 리소스가 자신의 출처(도메인, 프로토콜, 포트)와 다를 때, 교차 출처 HTTP 요청을 실행한다.</strong></p>
<p>ex) <code>https://domain-a.com</code>의 프론트 엔드 JavaScript 코드가 XMLHttpRequest를 사용하여 <code>https://domain-b.com/data.json</code>을 요청하는 경우 보안 상의 이유로 <red>브라우저는 HTTP 요청을 제한한다.</red></p>
<ul>
<li>CORS 체제는 브라우저와 서버 간의 안전한 교차 출처 요청 및 데이터 전송을 지원한다.</li>
<li>CORS 표준에 맞춘다는 것은 서버에서도 새로운 요청과 응답 Header를 처리해야한다.</li>
</ul>
<h2 id="🤿-DeepDive"><a href="#🤿-DeepDive" class="headerlink" title="🤿 DeepDive"></a>🤿 DeepDive</h2><p>CORS 표준은 웹 브라우저에서 허용된 출처를 서버에서 새로운 HTTP Header에 추가함으로써 동작한다.</p>
<h3 id="📮-Simple-Request"><a href="#📮-Simple-Request" class="headerlink" title="📮 Simple Request"></a>📮 Simple Request</h3><p>HTTP 요청 메서드가 GET, POST 일 때 사용한다.</p>
<ol>
<li><p>다른 출처끼리 요청을 보낼 때, 요청에 Origin이라는 Header를 추가한다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://loco9939.com:5000</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Origin은 요청하는 쪽의 Scheme, 도메인, 포트가 담겨있다.</strong></li>
<li>scheme : https</li>
<li>도메인 : loco9939.com</li>
<li>포트 : :5000</li>
</ul>
</li>
<li><p>요청 받은 서버는 응답 Header에 지정된 ACAO(Access Control Allow Origin) 정보를 실어서 보낸다.</p>
</li>
<li><p>브라우저가 ACAO 정보가 담긴 응답과 요청의 Origin을 비교하여 동일하면 허락한다.</p>
</li>
</ol>
<h3 id="✈️-Preflight"><a href="#✈️-Preflight" class="headerlink" title="✈️ Preflight"></a>✈️ Preflight</h3><p>브라우저가 사전요청을 먼저 보낸 후 서버의 응답을 보고 안전한지 확인한 후 본 요청을 보내는 방식이다. 본 요청은 Simple Request 방식과 동일하다.</p>
<h2 id="🌈-CORS-오류-해결-방법"><a href="#🌈-CORS-오류-해결-방법" class="headerlink" title="🌈 CORS 오류 해결 방법"></a>🌈 CORS 오류 해결 방법</h2><h3 id="🔨-서버-측"><a href="#🔨-서버-측" class="headerlink" title="🔨 서버 측"></a>🔨 서버 측</h3><ul>
<li>ACAO(Access Control Allow Origin) 설정하기<ul>
<li>구체적인 출처 명시하기</li>
<li>Credentials: <strong>include 옵션 사용한 경우 * 사용한 경우 CORS 에러발생</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpServer = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  <span class="comment">// Setting up Headers</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-origin&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 모든 출처(orogin)을 허용</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">    <span class="string">&quot;GET, POST, OPTIONS, PUT, PATCH, DELETE&quot;</span></span><br><span class="line">  ); <span class="comment">// 모든 HTTP 메서드 허용</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>); <span class="comment">// 클라이언트와 서버 간에 쿠키 주고받기 허용</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">httpServer.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running at port 3000...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Access-Control-Allow-origin 헤더 값으로 * 을 사용하면 모든 Origin에서 오는 요청을 허용한다는 의미이므로 당장은 편할 수 있겠지만, 바꿔서 생각하면 정체도 모르는 이상한 출처에서 오는 요청까지 모두 허용하기 때문에 보안은 더 허술해진다. 그러니 가급적이면 귀찮더라도 다음과 같이 출처를 직접 명시해주도록 하자.</p>
</blockquote>
<h3 id="👑-클라이언트-측"><a href="#👑-클라이언트-측" class="headerlink" title="👑 클라이언트 측"></a>👑 클라이언트 측</h3><ul>
<li>Proxy 설정<ul>
<li>브라우저 요청을 Proxy에서 설정한 주소로 우회하여 전송하는 방법</li>
<li>라이브러리 사용한다</li>
<li>개발단계에서만 사용하고 <red>Production 환경에서는 Proxy 처리가 되지 않는다.</red></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>22년 10월 29일 하루일기</title>
    <url>/2022/10/29/Diary/22%EB%85%84%2010%EC%9B%94%2029%EC%9D%BC%20%ED%95%98%EB%A3%A8%EC%9D%BC%EA%B8%B0/</url>
    <content><![CDATA[<p>CPU가 너무 바쁘게 돌아가길래 원인을 해결하고자 구글 검색을 해보았다.</p>
<p>icloud가 문제라고 로그아웃하고 다시 로그인 해보라는 해결책을 찾아냈다.</p>
<p>icloud를 로그아웃했다. icloud 문서가 사라졌다.</p>
<p>나의 개발 폴더가 날라갔다.</p>
<p>다시 복구하느라 시간을 많이 소모했다.</p>
<h1 id="🏓-오늘의-교훈"><a href="#🏓-오늘의-교훈" class="headerlink" title="🏓 오늘의 교훈"></a>🏓 오늘의 교훈</h1><p>백업을 잘 해두자…</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>페어프로그래밍이란?</title>
    <url>/2022/09/13/PairProgramming/%E1%84%91%E1%85%A6%E1%84%8B%E1%85%A5%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%86%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB?/</url>
    <content><![CDATA[<h1 id="페어프로그래밍"><a href="#페어프로그래밍" class="headerlink" title="페어프로그래밍"></a>페어프로그래밍</h1><p>하나의 컴퓨터로 두 사람이 프로그래밍 작업을 진행한다. 작업 속도는 더디겠지만, 서로의 생각이 달라 배울점이 많을 것이다.</p>
<p><span style="color:red">주의사항</span></p>
<ol>
<li>개발 구현에만 급급하지 말자. 만드는 것보다 어떻게 코드를 만드는 것이 좋은지를 복습하라.</li>
<li>안되면 원인을 분석해서 원인을 해결하고 돌파해야한다.</li>
<li>중복 제거</li>
<li>네이밍 중요</li>
<li>ESlint, prettier 일관성있게 유지하기가</li>
<li>요구사항 읽고 코드 짜기</li>
<li>회고를 하루에 30분씩 가져서 갈등해소 및 진행 방향 계획 및 수정</li>
</ol>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>일단 요구사항에 충족하여 되게끔만든다. 이후 리팩토링을 시작하는데 요구사항 충족에 쏟은 시간의 최소 2-3배의 시간을 더 들여서 리팩토링을 한다.</p>
<h2 id="네비게이터와-드라이버"><a href="#네비게이터와-드라이버" class="headerlink" title="네비게이터와 드라이버"></a>네비게이터와 드라이버</h2><p>네비게이터 : 전체 지도를 보며 목적지의 길을 안내한다. 운전 과정 중 의문이 드는 점 혹은 잘못 흘러가는 상황 바로 잡는다.</p>
<p>드라이버 : 직접 운전을 하는 역할, 현재 진행하는 것을 말로 표현하며 진행하고 네비게이터와 대화하며 진행한다.</p>
<ul>
<li>1시간 이내에서 서로 역할을 바꿔보자.</li>
</ul>
<h1 id="lodash로-throttle-구현하기"><a href="#lodash로-throttle-구현하기" class="headerlink" title="lodash로 throttle 구현하기"></a>lodash로 throttle 구현하기</h1><p>lodash를 CDN으로 설치하면 <code>const _ = require(&#39;lodash&#39;)</code> 해주지 않아도 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = _.<span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;throttle&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">throttle</span>(); <span class="comment">// 1초 후에 &#x27;throttle&#x27; 콘솔창에 찍힌다.</span></span><br></pre></td></tr></table></figure>

<p>옵션으로 leading(초기), trailing(후기)에 이벤트 캐치할 지 선택할 수 있다.<br>기본값은 둘다 true인데 만약 이벤트 발생하고 몇초 지난 뒤 콜백함수 호출하고 싶다면, { leading : false }를 3번째 인자로 넘겨주면 된다.</p>
<h1 id="localStorage-로컬-스토리지"><a href="#localStorage-로컬-스토리지" class="headerlink" title="localStorage 로컬 스토리지"></a>localStorage 로컬 스토리지</h1><p>브라우저에 제공하는 로컬 스토리지를 사용하면 키, 값을 쌍으로 객체처럼 데이터를 저장할 수 있다.</p>
<ul>
<li>이 데이터는 브라우저를 새로고침하거나 껐다 켜도 유지된다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isDark&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>로컬 스토리지의 ‘isDark’ 키 값을 가져온다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isDark&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>로컬 스토리지의 ‘isDark’키 값에 true 값을 바인딩한다.</p>
<blockquote>
<p>이 때, 값은 문자열로 감싸져서 저장된다.</p>
</blockquote>
</li>
</ul>
<p>문자열로 저장된 true값을 불리언 true로 변환해주기 위해 다음과 같은 방법을 사용할 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isDark&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="matchMedia로-시스템-다크모드-확인"><a href="#matchMedia로-시스템-다크모드-확인" class="headerlink" title="matchMedia로 시스템 다크모드 확인"></a>matchMedia로 시스템 다크모드 확인</h1><p>시스템모드가 다크모드인지 아닌지를 확인할 수 있는 방법이 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="property">matches</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 시스템 다크모드가 true면 위 값이 true가 나오고 시스템 모드가 라이트모드면 dark 대신 light를 넣어주면 true가 나온다.</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
      </categories>
  </entry>
  <entry>
    <title>CORS</title>
    <url>/2023/03/03/JavaScript/CORS/</url>
    <content><![CDATA[<h1 id="CORS란"><a href="#CORS란" class="headerlink" title="CORS란?"></a>CORS란?</h1><p>크롬, 사파리 같은 브라우저에서 보안상의 이슈때문에 모든 웹 사이트는 같은 출처에 대한 데이터 요청은 허락하지만(SOP, 동일 출처 정책), 다른 출처로 데이터를 요청할 경우 특별한 규칙에 따라 허락을 받아야한다.</p>
<p><span style="font-size:1.5rem">Cross Origin Resource Sharing</span></p>
<p>교차 출처 정보 공유에 대한 정책으로, <span style="color:red">브라우저가 출처가 불분명한 응답을 막고 있는 것을 풀어주는 역할</span>을 한다.</p>
<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>내가 은행 사이트 서버에 요청을 보내서 은행 홈페이지에 로그인을 하였다. 그러면 브라우저 쿠키에 사용자의 인증정보 및 쿠키가 저장되어 있는데, 해커가 어떤 사이트 링크를 내게 보내서 내가 그 링크를 클릭하여 앞서 말한 인증 정보, 쿠키를 서버로 가져오는 Script 코드가 포함된 리소스를 응답으로 보내서 내가 만약에 그 응답을 받게 된다면, 해커가 나의 인증 정보와 쿠키를 가져갈 수 있게 된다.</p>
<p>이러한 보안상의 이슈를 방지하기 위해 브라우저가 동일한 출처의 요청이 아니라면 응답을 막아주는 것이다.</p>
<blockquote>
<p>또한 쿠키를 못읽게 자바스크립트 코드로 만들어줘야한다.</p>
</blockquote>
<p>즉, CORS는 다른 출처 간의 리소스를 공유할 수 있도록 하는 정책이다.</p>
<ul>
<li>여기서 말하는 출처란, 보내고 받는 위치 즉, 웹 사이트랑 API 주소이다.</li>
<li>리소스는 주고 받는 데이터를 말한다.</li>
</ul>
<p>내가 만든 사이트와 어떤 API라는 서로 다른 출처끼리 정보교환이 가능하려면 CORS 정책을 지켜야 한다는 말이다.</p>
<h1 id="CORS-과정"><a href="#CORS-과정" class="headerlink" title="CORS 과정"></a>CORS 과정</h1><p><span style="font-size:1.2rem">요청을 받는 서버쪽에서 허락할 웹사이트를 미리 명시해줘야한다.</span></p>
<h2 id="Simple-Request-GET-POST-방식일-때-사용"><a href="#Simple-Request-GET-POST-방식일-때-사용" class="headerlink" title="Simple Request (GET, POST 방식일 때 사용)"></a>Simple Request (GET, POST 방식일 때 사용)</h2><ol>
<li>브라우저는 다른 출처끼리의 요청을 보낼 때에는 요청에 Origin 이라는 header를 추가한다.</li>
</ol>
<aside>
💡 header란, 데이터가 다른 곳으로 전송될 때 데이터의 맨 앞쪽에 붙는 보충 정보이다.

</aside>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//이주의사이트.com:5000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Origin은 요청하는 쪽의 scheme, 도메인, 포트가 담겨있다.<ul>
<li>scheme은 요청할 자원에 접근할 방법(Http, FTP, telnet…) &#x3D; <strong>프로토콜</strong></li>
</ul>
</li>
<li>https - scheme</li>
<li><a href="http://이주의사이트.com/">이주의사이트.com</a> - 도메인</li>
<li>:5000 - 포트</li>
</ul>
<ol>
<li><p>요청을 받은 API 서버는 응답의 헤더에 지정된 ACAO(Access Control Allow Origin) 정보를 실어서 보낸다.</p>
<ul>
<li>ACAO 정보에는 미리 명시된 URL들이 들어가있다.</li>
</ul>
</li>
<li><p>브라우저가 ACAO정보가 담긴 응답과 요청의 Origin을 비교하여 동일하면 허락해준다.</p>
</li>
<li><p>만약 동일하지 않아 허락못받으면 응답만 못받아온다. 빨간색 에러 발생</p>
</li>
</ol>
<p>추가로 토큰과 같은 사용자 식별 정보가 담긴 요청에 대해서는 더 엄격한데 요청의 옵션에 credentials 항목을 true로 세팅해줘야하며, 받는 쪽에서도 아무 출처나 다 된다는 의미의 와일드 카드(*)가 아니라 보내는 쪽의 출처와 웹페이지 주소를 명확히 명시하고 Access Control Allow Credentials 항목을 true로 맞춰줘야 한다.</p>
<aside>
💡 심플리퀘스트로 요청을 보낼 때에도 서버쪽에서 신경을 안써놓으면 서버에 저장된 데이터에 변경이 가해질 수 있으므로 SOP만 믿으면 되는 것이 아니라 서버 개발자가 이런 경우를 대비해서 서버를 프로그래밍 해야한다.

</aside>

<h2 id="Preflighted-PUT-DELETE-방식일-때-사용"><a href="#Preflighted-PUT-DELETE-방식일-때-사용" class="headerlink" title="Preflighted (PUT, DELETE 방식일 때 사용)"></a>Preflighted (PUT, DELETE 방식일 때 사용)</h2><p>Preflight 요청을 먼저 보내서 그에 대한 서버의 응답을 보고 안전한지 먼저 확인한다. 여기서 서버의 허락이 받아야지만 본 요청을 보낼 수 있다.</p>
<p>본 요청에 대한 과정은 심플리퀘스트와 동일하다.</p>
<ul>
<li>Origin, credentials, method 가 담긴 요청</li>
</ul>
<p>⇒ 서버의 데이터에 영향을 줄 수 있는 요청이기 때문에 요청 보내기 전에 먼저 허용 여부를 검증해줘야 한다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Callback, Promise, async/await 예제</title>
    <url>/2023/03/03/JavaScript/Callback-Promise-async-await-%EC%98%88%EC%A0%9C/</url>
    <content><![CDATA[<h1 id="비동기-이해하기-연습"><a href="#비동기-이해하기-연습" class="headerlink" title="비동기 이해하기 (연습)"></a>비동기 이해하기 (연습)</h1><p>이번시간에는 비동기 처리 결과를 이용하는 예제를 따라쳐보면서 익숙해지도록 해보자.</p>
<h1 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h1><p>API를 활용하여 서버에서 데이터를 가져와 화면에 렌더링하기</p>
<h2 id="코드-구현"><a href="#코드-구현" class="headerlink" title="코드 구현"></a>코드 구현</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> url = <span class="string">&quot;https://api.artic.edu/api/v1/artworks&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params">items</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>).<span class="property">innerHTML</span> = items</span></span><br><span class="line"><span class="language-javascript">          .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/li&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">          .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>).<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Status Error occured&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>서버에 XMLHttpRequest 요청을 보내 데이터 응답을 받았다.</p>
<p>이 과정을 다시 살펴보면 비동기 코드의 처리 결과를 render() 함수의 인수로 전달해주면서 비동기 처리 결과를 다루는 모습을 볼 수 있다.</p>
<p>만약에 비동기 처리 결과를 단순히 렌더해주는 것만이 아니라, 데이터의 조작이나 어떤 로직으로 처리가 많아지면 그 때마다 함수의 인수로 전달해줘야 하기 때문에 콜백 헬 현상이 발생하여 가독성과 복잡성이 떨어지게된다.</p>
<h2 id="콜백함수를-이용한-비동기-처리-결과-다루기"><a href="#콜백함수를-이용한-비동기-처리-결과-다루기" class="headerlink" title="콜백함수를 이용한 비동기 처리 결과 다루기"></a>콜백함수를 이용한 비동기 처리 결과 다루기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://api.artic.edu/api/v1/artworks&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params">items</span>) =&gt;</span><br><span class="line">  items.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/li&gt;`</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">url, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>).<span class="property">data</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;xhr.status&#125;</span> <span class="subst">$&#123;xhr.statusText&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">get</span>(url, <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>).<span class="property">innerHTML</span> = <span class="title function_">render</span>(param);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>위와 같이 비동기 처리 결과를 렌더해주는 로직 하나만 해주고 있어서 콜백 헬이 발생하지 않는다.</p>
<p>만약 데이터를 받아와서 수정을 거치고 삭제도 하고 여러가지 로직을 다루게 되면 그 때마다 함수의 인수로 전달해줘야 하기 때문에 코드가 가로로 길어지게 된다.</p>
<p>또한, 콜백함수들에서 에러가 발생했을 경우 에러처리가 까다로워진다.</p>
<blockquote>
<p>에러는 caller 즉, 함수 호출자(콜 스택하위)방향으로 전파가 된다. 비동기 함수는 호출자가 브라우저이므로 브라우저가 콜백함수를 호출할 때에는 이벤트 루프가 콜 스택에 비었을 때, 태스크 큐에서 콜 스택으로 콜백함수를 이동시켜(호출)주기 때문에 콜 스택 하위로 에러 전파가 발생하지 않아서 에러가 발생한 위치에서만 에러를 캐치해야한다는 단점이 있다.</p>
</blockquote>
<h2 id="프로미스로-비동기-처리-결과-다루기"><a href="#프로미스로-비동기-처리-결과-다루기" class="headerlink" title="프로미스로 비동기 처리 결과 다루기"></a>프로미스로 비동기 처리 결과 다루기</h2><p>프로미스는 객체의 완료 상태와 값을 저장한 객체이다. 이 때, 값에는 비동기 처리 성공시 resolve 함수의 인수로 전달되어 값이 저장되고 실패이 reject 함수의 인수로 전달된 에러가 저장된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://api.artic.edu/api/v1/artworks&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params">items</span>) =&gt;</span><br><span class="line">  items.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/li&gt;`</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">url</span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title function_">render</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>).<span class="property">data</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">get</span>(url);</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>).<span class="property">innerHTML</span> = result;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>get 함수가 프로미스 객체를 반환하고 있다. 반환한 프로미스는 콜백함수를 인수로 받는데 그 콜백함수 안에서 로직을 구현하고 콜백함수의 인수로 2개의 함수를 전달한다. 성공했을 경우 호출함 함수 resolve 함수와 실패했을 때 호출할 함수 reject 함수를 구현한다.</p>
<p>get 함수를 호출하여 반환된 프로미스 객체를 후속 처리 메서드 then, catch가 이어서 받아서 처리를 해준다.</p>
<ul>
<li><p>then 메서드 : 프로미스 객체의 상태가 pending 상태에서 fulfilled로 변경되면 resolve 함수의 인수를 인수로 전달 받아 콜백함수를 호출한다.</p>
</li>
<li><p>catch 메서드 : 프로미스 객체의 상태가 pending 상태에서 rejected로 변경되면 reject 함수의 인수를 인수로 전달받아 콜백함수를 호출한다.</p>
</li>
</ul>
<blockquote>
<p>catch 메서드를 사용하면 catch 이전의 구간에서 발생한 에러를 캐치할 수 있다.</p>
</blockquote>
<h2 id="async-await로-비동기-처리-결과-다루기"><a href="#async-await로-비동기-처리-결과-다루기" class="headerlink" title="async, await로 비동기 처리 결과 다루기"></a>async, await로 비동기 처리 결과 다루기</h2><p>ES6에서 새로 생겨난 async, await를 사용하면 마치 동기 처리 방식처럼 비동기 처리결과를 다룰 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://api.artic.edu/api/v1/artworks&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params">items</span>) =&gt;</span><br><span class="line">  items.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/li&gt;`</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">url</span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title function_">render</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>).<span class="property">data</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> titleData = <span class="keyword">await</span> <span class="title function_">get</span>(url);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>).<span class="property">innerHTML</span> = titleData;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>await는 반드시 async 키워드로 선언된 함수 안에서 사용해야한다.</p>
<p>단, Node.js 애플리케이션 환경에서 함수 레벨이 아닌 최상위 레벨에서도 await를 사용할 수 있다.</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>package.json 파일의 type을 module로 바꿔주면 독자적인 스코프인 모듈 스코프를 갖게되어 최상위 레벨에서도 await를 사용할 수 있다.</p>
<ul>
<li>async를 사용하면 에러전파가 되어 에러처리가 용이하다.</li>
</ul>
<p>제너레이터 함수와 연관지어 생각해보면 await 키워드를 만나면 일시 정지하고 제어권을 함수 외부로 이동시켜 동기 처리르 하다가 전역 코드가 다 실행되고 다시 일시 정지 했던 await 부분으로 돌아와서 프로미스 객체의 완료 상태가 settled로 바뀌면 코드를 실행하고 다음 코드 라인으로 넘어간다.</p>
<blockquote>
<p>즉, 프로미스 객체의 완료 상태가 pending이면 다음 코드를 실행하지 않고 계속 대기한다.</p>
</blockquote>
<h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>비동기를 동기처럼 다룰 수 있는 async,await를 사용하자.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>DOM과 NODE(attribute vs property)</title>
    <url>/2023/03/03/JavaScript/DOM%EA%B3%BC-NODE-attribute-vs-property/</url>
    <content><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>렌더링 엔진에 의해 HTML 문서를 브라우저가 이해할 수 있는 자료구조인 DOM을 생성한다. <strong>DOM이란, HTML문서의 계층적인 구조와 정보를 표현하며 이를 제어할 수 있는 API, 즉 프로퍼티와 메서드를 제공하는 트리 자료구조이다.</strong></p>
<h1 id="노드"><a href="#노드" class="headerlink" title="노드"></a>노드</h1><p>HTML 요소는 렌더링 엔진에 의해 DOM을 구성하는 요소 노드 객체로 변환된다. HTML 요소의 어트리뷰트는 어트리뷰트 노드로, HTML 요소의 텍스트 컨텐츠는 텍스트 노드로 변환된다.</p>
<p>노드 객체들로 구성된 트리 자료구조를 DOM이라한다.</p>
<blockquote>
<p>노드도 자바스크립트 객체이므로 프로토타입에 의한 상속 구조를 갖는다.</p>
</blockquote>
<h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><p>상속관계를 아는 것보다 어떤 DOM API를 사용하여 동적으로 변경하고 조작할 수 있는지를 알아야한다.</p>
<p><code>querySelector, querySelectorAll</code> 메서드가 다소 느리긴 하더라도 CSS 선택자로 요소 노드 취득시 구체적인 조건과 일관된 방식으로 요소 노드 취득할 수 있으므로 id 어트리뷰트가 있는 요소는 <code>getElementById</code> 메서드를 사용하고 그 외의 경우에는 <code>querySelector, querySelectorAll</code> 메서드를 사용하자.</p>
<h2 id="HTMLCollection과-NodeList"><a href="#HTMLCollection과-NodeList" class="headerlink" title="HTMLCollection과 NodeList"></a>HTMLCollection과 NodeList</h2><p>DOM 컬렉션 객체이 두 객체는 DOM API가 여러 개의 결과값을 반환하기 위한 객체이다. 둘 다 <strong>유사 배열 객체</strong>이면서 <strong>이터러블</strong>이다. 그러므로 for…of문으로 순회할 수 있으며 스프레드 문법을 사용하여 간단히 배열로 변환할 수 있다.</p>
<ul>
<li>HTMLCollection과 NodeList는 <strong>노드 객체의 상태 변화를 실시간으로 반영하는 살아있는 객체</strong>이다.</li>
<li>HTMLCollection은 언제나 live 객체로 동작한다.</li>
<li>NodeList는 <strong>대부분의 경우 상태 변화를 실시간으로 반영하지 않고 과거의 정적 상태를 유지</strong>하는 non-live 객체로 동작하지만 <strong>경우에 따라 live 객체로 동작</strong>한다.</li>
</ul>
<h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>HTMLCollection, NodeList 객체를 사용하지 말아라. 유사 배열 객체이면서 이터러블인 <strong>NodeList,</strong> <strong>HTMLCollection 객체를 배열로 변환하면 부작용을 제거할 수 있다.</strong> 유용한 배열 고차함수 forEach, map, filter 등을 사용할 수 있다.</p>
<h1 id="DOM-조작"><a href="#DOM-조작" class="headerlink" title="DOM 조작"></a>DOM 조작</h1><p>DOM 조작은 새로운 노드를 생성하여 DOM에 추가하거나 기존 노드 삭제 또는 교체 하는 것을 말한다. <strong>이 경우 리플로우와 리페인트가 발생한다.</strong></p>
<h2 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h2><p>시작 태그와 종료 태그 사이의 모든 마크업을 문자열로 반환한다. HTML 마크업도 포함된 문자열을 반환하는 것이 textContent 프로퍼티와 차이점이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>world!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// #foo 요소의 콘텐츠 영역 내의 HTML 마크업을 문자열로 취득한다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;foo&#x27;</span>).<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &quot;Hello &lt;span&gt;world!&lt;/span&gt;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>요소 노드의 innerHTML 프로퍼티에 문자열 할당하면 요소 노드의 모든 자식 노드가 제거되고 할당한 문자열이 텍스트로 추가된다. 이 때 <strong>HTML 마크업이 포함되어 있으면 파싱되어 요소 노드의 자식 노드로 DOM에 반영된다.</strong></li>
</ul>
<aside>
💡 단, innerHTML 프로퍼티에 사용자로부터 입력받은 데이터를 그대로 할당하는 것은 크**로스 사이트 스크립팅 공격에 취약하므로 위험**하다.

</aside>

<h2 id="복수의-노드-생성과-추가-⭐️"><a href="#복수의-노드-생성과-추가-⭐️" class="headerlink" title="복수의 노드 생성과 추가 ⭐️"></a>복수의 노드 생성과 추가 ⭐️</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $fruits = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fruits&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Orange&#x27;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1. 요소 노드 생성</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> $li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2. 텍스트 노드 생성</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(text);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 3. 텍스트 노드를 $li 요소 노드의 자식 노드로 추가</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $li.<span class="title function_">appendChild</span>(textNode);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 4. $li 요소 노드를 #fruits 요소 노드의 마지막 자식 노드로 추가</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $fruits.<span class="title function_">appendChild</span>($li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>위 예제는 3개의 요소 노드가 생성하여 DOM에 3번 추가하여 DOM이 3번 변경된다. 이러한 방법은 <strong>리플로우를 많이 발생 시키므로 피해야한다.</strong></li>
</ul>
<p>⇒ 컨테이너 요소를 미리 생성한 후 DOM에 추가할 3개 요소 노드를 컨테이너 요소의 자식 노드로 추가한 뒤 컨테이너 요소를 #fruits 요소에 자식으로 추가한다. 하지만 이 또한, 불필요한 컨테이너 요소(div)가 DOM에 추가되어 바람직 하지 않다.</p>
<h1 id="어트리뷰트"><a href="#어트리뷰트" class="headerlink" title="어트리뷰트"></a>어트리뷰트</h1><h2 id="어트리뷰트-노드와-attributes-프로퍼티"><a href="#어트리뷰트-노드와-attributes-프로퍼티" class="headerlink" title="어트리뷰트 노드와 attributes 프로퍼티"></a>어트리뷰트 노드와 attributes 프로퍼티</h2><p>HTML 문서의 요소는 여러 개의 어트리뷰트를 가질 수 있다. ex) class, checked, aria-label…</p>
<ul>
<li>모든 HTML 요소에 공통적인 것부터 해당 요소만 사용할 수 있는 어트리뷰트가 있다.</li>
<li>HTML 요소의 어트리뷰트는 어트리뷰트 노드로 변환되어 요소 노드와 연결된다. 이는 NamedNodeMap 객체에 담겨 요소 노드의 attributes 프로퍼티에 저장된다.</li>
<li><strong>attributes 프로퍼티는 getter만 존재하는 접근자 프로퍼티이다.</strong></li>
</ul>
<h2 id="HTML-어트리뷰트-vs-DOM-프로퍼티"><a href="#HTML-어트리뷰트-vs-DOM-프로퍼티" class="headerlink" title="HTML 어트리뷰트 vs DOM 프로퍼티"></a>HTML 어트리뷰트 vs DOM 프로퍼티</h2><ul>
<li>HTML 어트리뷰트는 <strong>초기값 (변하지 않는다.)</strong></li>
<li>DOM 프로퍼티는 HTML 프로퍼티를 초기값으로 가지고 <strong>변경될 수 있다.</strong></li>
</ul>
<p>첫렌더링 까지 어트리뷰트 노드의 어트리뷰트 값과 요소 노드의 value 프로퍼티에 할당된 값은 HTML 어트리뷰트 값과 동일하다. 하지만 첫 렌더링 이후 사용자가 input 요소에 무언가 입력시 바뀌게 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ungmo2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// attributes 프로퍼티에 저장된 value 어트리뷰트 값</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>($input.<span class="title function_">getAttribute</span>(<span class="string">&#x27;value&#x27;</span>)); <span class="comment">// ungmo2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 요소 노드의 value 프로퍼티에 저장된 value 어트리뷰트 값</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>($input.<span class="property">value</span>); <span class="comment">// ungmo2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>input 요소 노드는 상태를 가지고 있고 사용자의 입력에 의한 변경된 <strong>최신 상태를 관리해야 할뿐더러</strong> HTML 어트리뷰트로 지정한 <strong>초기 상태도 관리해야</strong>한다.</li>
</ul>
<p>즉, 요소 노드의 <strong>초기 상태는 어트리뷰트 노드가 관리</strong>하며 요소 노드의 <strong>최신 상태는 DOM 프로퍼티가 관리</strong>한다.</p>
<h3 id="HTML-어트리뷰트와-DOM-프로퍼티의-대응-관계"><a href="#HTML-어트리뷰트와-DOM-프로퍼티의-대응-관계" class="headerlink" title="HTML 어트리뷰트와 DOM 프로퍼티의 대응 관계"></a>HTML 어트리뷰트와 DOM 프로퍼티의 대응 관계</h3><p>대부분은 HTML 어트리뷰트는 HTML 어트리뷰트 이름과 동일한 DOM 프로퍼티와 1:1로 대응한다. 반드시는 아니다.</p>
<ul>
<li>id 어트리뷰트와 id 프로퍼티는 1:1 대응, 동일한 값으로 연동한다.</li>
<li>input 요소의 value 어트리뷰트는 value 프로퍼티와 1:1 대응, <strong>value 어트리뷰트는 초기상태</strong>를, <strong>value 프로퍼티는 최신 상태</strong>를 갖는다.</li>
<li>class 어트리뷰트에 대응하는 DOM 프로퍼티는 className, classList 프로퍼티이다.</li>
</ul>
<h3 id="DOM-프로퍼티-값의-타입"><a href="#DOM-프로퍼티-값의-타입" class="headerlink" title="DOM 프로퍼티 값의 타입"></a>DOM 프로퍼티 값의 타입</h3><p>getAttribute 메서드로 취득한 어트리뷰트 값은 언제나 문자열이지만 DOM 프로퍼티로 취득한 최신 상태 값은 문자열이 아닐 수 있다. boolean 타입일 수 있다.</p>
<p>ex) checkbox요소의 checked 어트리뷰트 값은 문자열 이지만 checked 프로퍼티 값은 불리언이다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Event</title>
    <url>/2023/03/03/JavaScript/Event/</url>
    <content><![CDATA[<h1 id="이벤트-드리븐-프로그래밍"><a href="#이벤트-드리븐-프로그래밍" class="headerlink" title="이벤트 드리븐 프로그래밍"></a>이벤트 드리븐 프로그래밍</h1><p>브라우저는 처리해야할 특정 사건이 발생하면 이를 감지하여 **이벤트(event)를 발생(trigger)**시킨다. 사용자가 어떤 행동을 하였을 때 브라우저가 이를 감지하여 함수를 호출하고 싶을 때 이벤트 드리븐 프로그래밍 방식을 사용한다.</p>
<p>즉, 이벤트란? 브라우저가 특정 사건이 발생한 것을 감지하고 함수를 호출하기 위해 필요한 것이다.</p>
<p><strong>즉, 함수를 언제 호출할지 알 수 없으므로 개발자가 명시적으로 함수를 호출하는 것이 아니라 브라우저에게 함수 호출을 위임하는 것이다.</strong></p>
<ul>
<li>이벤트 발생시 호출될 함수 ⇒ <strong>이벤트 핸들러</strong></li>
<li>이벤트 발생시 브라우저에게 이벤트 핸들러의 호출을 위임 ⇒ <strong>이벤트 핸들러 등록</strong></li>
</ul>
<p>Window, Document, HTMLElement 타입의 객체는 onclick과 같이 특정 이벤트에 대응하는 다양한 이벤트 핸들러 프로퍼티를 가지고 있다. 이 이벤트 핸들러 프로퍼티에 함수를 할당하면 해당 이벤트가 발생했을 때, <strong>할당한 함수가 브라우저에 의해 호출된다.</strong></p>
<p>이와 같이 프로그램의 흐름을 이벤트 중심으로 제어하는 프로그래밍 방식을 이벤트 드리븐 프로그래밍이라고 한다.</p>
<h1 id="이벤트-타입"><a href="#이벤트-타입" class="headerlink" title="이벤트 타입"></a>이벤트 타입</h1><p>이벤트 타입은 이벤트의 종류를 나타내는 문자열이다. 대표적으로 마우스 이벤트(click, mouseup, mousemove, mouseover…), 키보드 이벤트(keydown, keypress…), 포커스 이벤트(focus, focusin…) 등 다양한 이벤트가 있다.</p>
<aside>
💡 mousedown은 클릭후 손가락 떼지 않은 상태, click은 클릭하고 마우스에서 뗀 것

</aside>

<ul>
<li>이벤트 핸들러 프로퍼티 방식과 addEventListener 메서드 방식으로 등록할 수 있다.</li>
</ul>
<h1 id="이벤트-핸들러-등록-방식"><a href="#이벤트-핸들러-등록-방식" class="headerlink" title="이벤트 핸들러 등록 방식"></a>이벤트 핸들러 등록 방식</h1><h2 id="이벤트-핸들러-프로퍼티-방식"><a href="#이벤트-핸들러-프로퍼티-방식" class="headerlink" title="이벤트 핸들러 프로퍼티 방식"></a>이벤트 핸들러 프로퍼티 방식</h2><p>이벤트 핸들러 프로퍼티에 함수를 바인딩하면 이벤트 핸들러가 등록된다.</p>
<ul>
<li>이벤트 핸들러는 대부분 이벤트를 발생시킬 이벤트 타깃에 바인딩한다. <strong>하지만 반드시 이벤트 타깃에 이벤트 핸들러를 바인딩해야하는 것은 아니다.</strong></li>
<li>이벤트 핸들러 프로퍼티에 하나의 이벤트 핸들러만 바인딩할 수 있다는 단점이 있다.</li>
</ul>
<h2 id="addEventListener-메서드-방식"><a href="#addEventListener-메서드-방식" class="headerlink" title="addEventListener 메서드 방식"></a>addEventListener 메서드 방식</h2><p>EventTarget.prototype.addEventListener 메서드를 사용하여 이벤트 핸들러를 등록할 수 있다.</p>
<ul>
<li>이벤트 타입을 전달시 on 접두사를 붙이지 않는다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 이벤트 핸들러 프로퍼티 방식</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		$button.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button click&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// addEventListener 메서드 방식</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button click&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>이벤트 핸들러 프로퍼티 방식과 달리 <code>addEventListener</code> 메서드에는 이벤트 핸들러를 인수로 전달한다.</li>
<li>위 예제대로 두가지 방식을 같이 사용하여도 서로에게 영향을 주지 않으므로 클릭 이벤트 발생 시 2개의 이벤트 핸들러가 모두 호출된다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// addEventListener 메서드는 동일한 요소에서 발생한 동일한 이벤트에 대해</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 하나 이상의 이벤트 핸들러를 등록할 수 있다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[1]button click&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[2]button click&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>동일한 HTML 요소에서 발생한 동일한 이벤트에 대해 이벤트 핸들러 프로퍼티 방식은 하나 이상의 이벤트 핸들러를 등록할 수 없지만, <code>addEventListener</code> 메서드는 <strong>하나 이상의 이벤트 핸들러를 등록</strong>할 수 있다.</li>
</ul>
<h1 id="이벤트-핸들러-제거"><a href="#이벤트-핸들러-제거" class="headerlink" title="이벤트 핸들러 제거"></a>이벤트 핸들러 제거</h1><p>addEventListener 메서드로 등록된 이벤트를 제거하기 위해 removeEventListener 메서드를 사용한다.</p>
<ul>
<li>단, addEventListener 메서드에게 전달한 인수와 removeEventListener 메서드에게 전달한 인수가 같아야 한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button click&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 이벤트 핸들러 등록</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 이벤트 핸들러 제거</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// addEventListener 메서드에 전달한 인수와 removeEventListener 메서드에</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 전달한 인수가 일치하지 않으면 이벤트 핸들러가 제거되지 않는다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $button.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick, <span class="literal">true</span>); <span class="comment">// 실패</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $button.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick); <span class="comment">// 성공</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>이벤트 핸들러로 전달한 등록 이벤트 핸들러가 동일해야 하므로 <strong>무명 함수를 이벤트 핸들러로 등록한 경우 제거할 수 없다.</strong> 이 경우 이벤트 핸들러를 제거하기 위해서는 이벤트 핸들러 참조를 변수나 자료구조에 저장하고 있어야 한다.</li>
</ul>
<aside>
💡 이벤트 핸들러 프로퍼티 방식으로 등록한 이벤트 핸들러를 제거하는 방식은 null을 할당하는 것이다.

</aside>

<h1 id="이벤트-객체"><a href="#이벤트-객체" class="headerlink" title="이벤트 객체"></a>이벤트 객체</h1><p><strong>이벤트 발생 시</strong> 이벤트에 관련한 다양한 정보를 담고 있는 이벤트 객체가 동적으로 생성된다. <strong>생성된 이벤트 객체는 이벤트 핸들러의 첫번째 인수로 전달된다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>클릭하세요. 클릭한 곳의 좌표가 표시됩니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.message&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 클릭 이벤트에 의해 생성된 이벤트 객체는 이벤트 핸들러의 첫 번째 인수로 전달된다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">showCoords</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $msg.<span class="property">textContent</span> = <span class="string">`clientX: <span class="subst">$&#123;e.clientX&#125;</span>, clientY: <span class="subst">$&#123;e.clientY&#125;</span>`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">onclick</span> = showCoords;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>이벤트 객체는 이벤트 핸들러의 첫번째 인수로 전달되어 매개변수 e에 암묵적으로 할당된다. 이는 브라우저가 이벤트 핸들러 호출할 때, 이벤트 객체를 인수로 전달하기 때문이다.</li>
</ul>
<blockquote>
<p>이벤트 타입에 따라 생성되는 이벤트 객체의 고유한 프로퍼티가 달라진다.</p>
</blockquote>
<h2 id="이벤트-객체의-공통-프로퍼티"><a href="#이벤트-객체의-공통-프로퍼티" class="headerlink" title="이벤트 객체의 공통 프로퍼티"></a>이벤트 객체의 공통 프로퍼티</h2><table>
<thead>
<tr>
<th>공통 프로퍼티</th>
<th>설명</th>
<th>타입</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>이벤트 타입</td>
<td>string</td>
</tr>
<tr>
<td>target</td>
<td>이벤트를 발생시킨 DOM 요소</td>
<td>DOM 요소 노드</td>
</tr>
<tr>
<td>currentTarget</td>
<td>이벤트 핸들러가 바인딩된 DOM 요소</td>
<td>DOM 요소 노드</td>
</tr>
<tr>
<td>eventPhase</td>
<td>이벤트 전파 단계 (0: 이벤트없음, 1: 캡처링 단계, 2: 타깃 단계, 3: 버블링 단계)</td>
<td>number</td>
</tr>
<tr>
<td>bubbles</td>
<td>false면 버블링하지 않는다.</td>
<td>boolean</td>
</tr>
<tr>
<td>cancelable</td>
<td>preventDefault 메서드 호출하여 이벤트 기본 동작 취소 가능한지 여부 false면 취소할 수 없다.</td>
<td>boolean</td>
</tr>
<tr>
<td>defaultPrevented</td>
<td>preventDefault 메서드 호출하여 이벤트 취소했는지 여부</td>
<td>boolean</td>
</tr>
<tr>
<td>isTrusted</td>
<td>사용자 행위에 의해 발생한 이벤트인지 여부, click메서드, dispatchEvent 메서드를 통해 인위적으로 발생시킨 이벤트인 경우 false</td>
<td>boolean</td>
</tr>
</tbody></table>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span>off<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=checkbox]&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.message&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// change 이벤트가 발생하면 Event 타입의 이벤트 객체가 생성된다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $checkbox.<span class="property">onchange</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(e) === <span class="title class_">Event</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// e.target은 change 이벤트를 발생시킨 DOM 요소 $checkbox를 가리키고</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// e.target.checked는 체크박스 요소의 현재 체크 상태를 나타낸다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $msg.<span class="property">textContent</span> = e.<span class="property">target</span>.<span class="property">checked</span> ? <span class="string">&#x27;on&#x27;</span> : <span class="string">&#x27;off&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>사용자 입력에 의해 checked 프로퍼티 값 변경되면 change 이벤트 발생하고 Event 타입의 이벤트 객체가 생성된다.</li>
<li>이벤트 객체의 <strong>target 프로퍼티</strong>는 이벤트를 발생시킨 객체를 나타낸다. 즉, <strong>change 이벤트를 발생시킨 DOM 요소인 $checkbox</strong> 이다.</li>
<li>이벤트 객체의 currentTarget 프로퍼티는 이벤트 핸들러가 바인딩된 DOM 요소를 가리킨다.</li>
<li>일반적으로 이벤트 객체의 target 프로퍼티와 currentTarget 프로퍼티는 동일한 객체를 가리키지만 나중에 이벤트 위임에서는 서로 다른 객체를 가리킬 수 도 있다.</li>
</ul>
<h1 id="이벤트-전파"><a href="#이벤트-전파" class="headerlink" title="이벤트 전파"></a>이벤트 전파</h1><p>DOM 트리 상에 존재하는 DOM 요소 노드에서 발생한 이벤트는 DOM 트리를 통해 전파된다.</p>
<ul>
<li>생성된 이벤트 객체는 이벤트를 발생시킨 DOM 요소인 이벤트 타깃을 중심으로 DOM 트리를 통해 전파된다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $fruits = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fruits&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// #fruits 요소의 하위 요소인 li 요소를 클릭한 경우</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $fruits.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`이벤트 단계: <span class="subst">$&#123;e.eventPhase&#125;</span>`</span>); <span class="comment">// 3: 버블링 단계</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`이벤트 타깃: <span class="subst">$&#123;e.target&#125;</span>`</span>); <span class="comment">// [object HTMLLIElement]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`커런트 타깃: <span class="subst">$&#123;e.currentTarget&#125;</span>`</span>); <span class="comment">// [object HTMLUListElement]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>위 예제는 ul 요소에 이벤트 핸들러 바인딩하고 ul 요소의 하위 요소인 li 요소를 클릭하여 이벤트를 발생 시켜보자. <strong>event.target은 li 요소이고, event.currentTarget은 ul 요소이다.</strong></li>
</ul>
<h2 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h2><ol>
<li>li 요소 클릭시 클릭 이벤트 발생하여 <strong>클릭 이벤트 객체를 생성</strong>한다. <strong>클릭된 li 요소가 이벤트 타깃</strong>이 된다. 이 때 이벤트 객체는 window에서 시작해서 이벤트 타깃 방향으로 전파된다. <strong>(캡처링 단계)</strong></li>
<li>이벤트 객체는 이벤트를 발생시킨 이벤트 타깃에 도달한다. <strong>(타깃 단계)</strong></li>
<li>이벤트 객체는 이벤트 타깃에서 시작해서 window 방향으로 전파된다. <strong>(버블링 단계)</strong></li>
</ol>
<ul>
<li>이벤트 핸들러 어트리뷰트&#x2F;프로퍼티 방식으로 등록한 이벤트 핸들러는 타깃단계와 버블링 단계의 이벤트만 캐치할 수 있지만, <strong>addEventListener 메소드로 등록한 이벤트 핸들러는 타깃단계, 버블링단계, 캡처링 단계의 이벤트도 선별적으로 캐치</strong>할 수 있다. 캡처링 단계의 이벤트 캐치하려면 addEventListener 메소드의 3번째 인수로 true를 전달해야한다.</li>
</ul>
<p><strong>즉, 이벤트는 이벤트를 발생시킨 이벤트 타깃을 물론 상위 DOM 요소에서도 캐치할 수 있다.</strong></p>
<p>다음 이벤트들은 버블링을 통해 전파되지 않는다. 왜냐하면 event.bubbles 값이 false</p>
<ul>
<li>focus&#x2F;blur</li>
<li>load&#x2F;unload&#x2F;abort&#x2F;error</li>
<li>mouseenter&#x2F;mouseleave</li>
</ul>
<p>이러한 이벤트를 사용하여 캡처링으로 이벤트를 캐치하는 것보다 대안의 이벤트들을 사용하여 버블링을 통해 캐치하는 것이 더 합리적이다.</p>
<h1 id="이벤트-위임"><a href="#이벤트-위임" class="headerlink" title="이벤트 위임"></a>이벤트 위임</h1><p>이벤트 위임은 여러 개의 <strong>하위 DOM 요소에 각각 이벤트 핸들러를 등록하는 대신 하나의 상위 DOM 요소에 이벤트 핸들러를 등록하는 방법</strong>을 말한다. 이벤트 위임을 통해 상위 DOM 요소에 이벤트 핸들러 등록하면 여러 개의 하위 DOM 요소에 이벤트 핸들러를 등록할 필요가 없다. 또한 동적으로 하위 DOM 요소 추가하더라도 일일이 추가된 DOM 요소에 이벤트 핸들러를 등록할 필요가 없다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-id">#fruits</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">list-style-type</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-id">#fruits</span> <span class="selector-tag">li</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-id">#fruits</span> <span class="selector-class">.active</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-decoration</span>: underline;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>선택된 내비게이션 아이템: <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $fruits = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fruits&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> $msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.msg&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 사용자 클릭에 의해 선택된 내비게이션 아이템(li 요소)에 active 클래스를 추가하고</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 그 외의 모든 내비게이션 아이템의 active 클래스를 제거한다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">&#123; target &#125;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 이벤트를 발생시킨 요소(target)가 ul#fruits의 자식 요소가 아니라면 무시한다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (!target.<span class="title function_">matches</span>(<span class="string">&#x27;#fruits &gt; li&#x27;</span>)) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      [...$fruits.<span class="property">children</span>].<span class="title function_">forEach</span>($fruit =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $fruit.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;active&#x27;</span>, $fruit === target);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $msg.<span class="property">textContent</span> = target.<span class="property">id</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 이벤트 위임: 상위 요소(ul#fruits)는 하위 요소의 이벤트를 캐치할 수 있다.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $fruits.<span class="property">onclick</span> = activate;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>이벤트 객체의 currentTarget 프로퍼티는 언제나 $fruits 요소를 가리키지만 이벤트 객체의 target 프로퍼티는 실제로 이벤트를 발생시킨 DOM 요소를 가리킨다.</li>
</ul>
<p>만약 $fruits 요소의 하위 요소에서 클릭 이벤트가 발생했다면 이벤트 객체의 currentTarget 프로퍼티와 target 프로퍼티는 다른 DOM 요소를 가리킨다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>VanillaJS TodoList(MVC)-1탄</title>
    <url>/2023/03/03/JavaScript/VanillaJS-TodoList-MVC-1%ED%83%84/</url>
    <content><![CDATA[<h1 id="MVC-패턴을-적용시킨-TodoList"><a href="#MVC-패턴을-적용시킨-TodoList" class="headerlink" title="MVC 패턴을 적용시킨 TodoList"></a>MVC 패턴을 적용시킨 TodoList</h1><p>MVC 패턴을 적용 시킨 TodoList를 달달 외울 정도로 손에 익혀두자.</p>
<p>이를 기본으로 앞으로 애플리케이션을 만들때 두고두고 유용하게 쓰일 것이다.</p>
<h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML, CSS"></a>HTML, CSS</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MVC - TodoList<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.todo-filters</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">gap</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.todo-list</span> <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;todo-input&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-filters&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>All<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;completed&quot;</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>우선 정적인 요소와 동적인 요소를 구분지어서 HTML 구조를 설계한다.</li>
</ol>
<p>동적인 todo 요소를 추가할 것이고 그 외에 항목들은 정적인 요소들이다.</p>
<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> todos = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $todoInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.todo-input&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $todoList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.todo-list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateNextTodoId</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="title function_">max</span>(...todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">id</span>), <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params">todos</span>) =&gt; &#123;</span><br><span class="line">  $todoList.<span class="property">innerHTML</span> = todos</span><br><span class="line">    .<span class="title function_">map</span>(</span><br><span class="line">      <span class="function">(<span class="params">&#123; id, content, completed &#125;</span>) =&gt;</span></span><br><span class="line">        <span class="string">`&lt;li id=&quot;<span class="subst">$&#123;id&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;input type=&quot;checkbox&quot; <span class="subst">$&#123;completed ? <span class="string">&quot;checked&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span> /&gt;</span></span><br><span class="line"><span class="string">          &lt;span&gt;<span class="subst">$&#123;content&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;button&gt;X&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;`</span></span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setTodos</span> = (<span class="params">newTodos</span>) =&gt; &#123;</span><br><span class="line">  todos = newTodos;</span><br><span class="line">  <span class="title function_">render</span>(todos);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchTodos</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setTodos</span>([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&quot;일찍 일어나기&quot;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&quot;공부하기&quot;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&quot;저녁먹기&quot;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  ]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">  todos = [&#123; <span class="attr">id</span>: <span class="title function_">generateNextTodoId</span>(), content, <span class="attr">completed</span>: <span class="literal">false</span> &#125;, ...todos];</span><br><span class="line">  <span class="title function_">setTodos</span>(todos);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toggleCompleted</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  todos = todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span></span><br><span class="line">    todo.<span class="property">id</span> === +id ? &#123; ...todo, <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125; : todo</span><br><span class="line">  );</span><br><span class="line">  <span class="title function_">setTodos</span>(todos);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeTodo</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  todos = todos.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">id</span> !== +id);</span><br><span class="line">  <span class="title function_">setTodos</span>(todos);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchTodos</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$todoInput.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = $todoInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span> || content === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="title function_">addTodo</span>(content);</span><br><span class="line">  $todoInput.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$todoList.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">toggleCompleted</span>(e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$todoList.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;button&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeTodo</span>(e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>화면을 나타내는 부분을 View</p>
</li>
<li><p>상태(데이터)와 상태를 변경하는 메서드를 Model</p>
</li>
<li><p>화면으로 부터 받은 이벤틑 객체를 가지고 Model의 함수를 호출하여 상태를 변경하는 Controller</p>
</li>
</ol>
<p>크게 3가지 역할로 구분하여 애플리케이션을 바라보자.</p>
<blockquote>
<p>단, 너무 이 틀에 강박관념을 갖지 말길 바란다. 이러한 큰 틀이 있는 것일 뿐 100% 이 틀에 맞게 구분하는 것을 불가능하다.</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>VanillaJS TodoList(MVC)-2탄</title>
    <url>/2023/03/03/JavaScript/VanillaJS-TodoList-MVC-2%ED%83%84/</url>
    <content><![CDATA[<p>오늘은 MVC TodoList V2를 만들어 보면서 배웠던 내용을 정리해보는 시간을 갖겠다.</p>
<h1 id="1-setState를-왜-쓰는지"><a href="#1-setState를-왜-쓰는지" class="headerlink" title="1. setState를 왜 쓰는지?"></a>1. setState를 왜 쓰는지?</h1><p>직접 라이브 코딩한다고 생각을 하면서 한줄 한줄 코딩을 해나가다가 문득 setState 함수를 사용하지 않고 render 함수로 렌더만 해주면 되지 않을까? 라는 생각이 들었다.</p>
<p>이후 경현님께 코드 리뷰를 부탁하여 이러한 의견을 여쭤보니 다음과 같은 이점때문에 setState 함수를 만들어 사용하는 것이 좋다는 결론이 나왔다.</p>
<ol>
<li><p>관리해야할 상태 객체가 늘어나 확장성이 요구될 때 용이하다.</p>
</li>
<li><p>state에 대한 에러가 발생하였을 때 에러 핸들링이 용이하다. (상황에 따라 렌더링 할지 말지 결정 가능)</p>
</li>
<li><p>state가 변경되거나 재할당 되는 경우를 한곳에서 관리하여 용이하다.</p>
</li>
</ol>
<h1 id="2-filter-함수를-사용한-코드-리팩터"><a href="#2-filter-함수를-사용한-코드-리팩터" class="headerlink" title="2. filter 함수를 사용한 코드 리팩터"></a>2. filter 함수를 사용한 코드 리팩터</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">let</span> filteredTodos;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">filterId</span> === <span class="string">&quot;completed&quot;</span>) &#123;</span><br><span class="line">  filteredTodos = state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">completed</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">filterId</span> === <span class="string">&quot;active&quot;</span>) &#123;</span><br><span class="line">  filteredTodos = state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> !todo.<span class="property">completed</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  filteredTodos = state.<span class="property">todos</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">const</span> filteredTodos = state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">filterId</span> === <span class="string">&quot;completed&quot;</span>) <span class="keyword">return</span> todo.<span class="property">completed</span>;</span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">filterId</span> === <span class="string">&quot;active&quot;</span>) <span class="keyword">return</span> !todo.<span class="property">completed</span>;</span><br><span class="line">  <span class="keyword">return</span> todo;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>if 문으로 filter 함수 반환값이 다르게 filteredTodos 값이 할당되는 경우라면 filter 함수 안에 로직을 넣어서 해결해보자.</p>
<p>&#x3D;&gt; 훨씬 더 간결해진다.</p>
<h1 id="3-MVC-패턴으로-나누었다면-그에-알맞게-자신만의-역할을-하도록-분류한다"><a href="#3-MVC-패턴으로-나누었다면-그에-알맞게-자신만의-역할을-하도록-분류한다" class="headerlink" title="3. MVC 패턴으로 나누었다면 그에 알맞게 자신만의 역할을 하도록 분류한다."></a>3. MVC 패턴으로 나누었다면 그에 알맞게 자신만의 역할을 하도록 분류한다.</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">  state.<span class="property">todos</span> = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="title function_">generateNextTodoId</span>(), content, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ...state.<span class="property">todos</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">todos</span>: state.<span class="property">todos</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params">content</span>) =&gt;</span><br><span class="line">  <span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="title function_">generateNextTodoId</span>(), content, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      ...state.<span class="property">todos</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>위 예제에서 addTodo 함수는 내부에서 state.todos에 새로운 값을 할당 해준뒤 state를 변경하는 함수를 호출하여 렌더링 해주고 있다.</p>
<p>하지만, addTodo 함수의 기능은 Model의 todos 배열에 todo 요소 하나를 추가하는 것일 뿐이므로 before 처럼 state.todos(원본)에 재할당 하는 것은 옮지 않다.</p>
<p>setState 함수에게 새로운 객체(상태)를 전달하여 state의 변경에 따라 화면에 렌더링 되도록 로직을 짜는 것이 더 <span style="color:red">통일성</span>을 지킬 수 있다.</p>
<h1 id="4-함수의-매개변수를-명확하게-적어주자"><a href="#4-함수의-매개변수를-명확하게-적어주자" class="headerlink" title="4. 함수의 매개변수를 명확하게 적어주자."></a>4. 함수의 매개변수를 명확하게 적어주자.</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toggleAllCompleted</span> = (<span class="params">boolean</span>) =&gt; &#123;</span><br><span class="line">  state.<span class="property">todos</span> = state.<span class="property">todos</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> (&#123; ...todo, <span class="attr">completed</span>: boolean &#125;));</span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">todos</span>: state.<span class="property">todos</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toggleAll</span> = (<span class="params">checked</span>) =&gt; &#123;</span><br><span class="line">  checked</span><br><span class="line">    ? <span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">todos</span>: state.<span class="property">todos</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span></span><br><span class="line">          !todo.<span class="property">completed</span> ? &#123; ...todo, <span class="attr">completed</span>: checked &#125; : todo</span><br><span class="line">        ),</span><br><span class="line">      &#125;)</span><br><span class="line">    : <span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">todos</span>: state.<span class="property">todos</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span></span><br><span class="line">          todo.<span class="property">completed</span> ? &#123; ...todo, <span class="attr">completed</span>: checked &#125; : todo</span><br><span class="line">        ),</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>before 처럼 매개변수를 boolean 으로 설정하는 것은 옳지 않다. boolean은 타입을 나타내는 것이지 매개변수에 대한 설명으로는 부적절하다.</p>
<blockquote>
<p>after 코드에서는 인수로 넘어온 모든 check를 토글로 켰다 껐다 할 수 있는 함수이다.</p>
</blockquote>
<h1 id="5-이벤트-핸들러-사용시-이벤트-객체와-선택한-요소를-명확히-이해하자"><a href="#5-이벤트-핸들러-사용시-이벤트-객체와-선택한-요소를-명확히-이해하자" class="headerlink" title="5. 이벤트 핸들러 사용시 이벤트 객체와 선택한 요소를 명확히 이해하자"></a>5. 이벤트 핸들러 사용시 이벤트 객체와 선택한 요소를 명확히 이해하자</h1><p>오늘 코딩할 때 이 부분에서 문제를 계속 부딪혀서 시간을 많이 할애하였다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$todoList.<span class="title function_">addEventListener</span>(<span class="string">&quot;dblclick&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="property">path</span>[<span class="number">2</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;editing&quot;</span>);</span><br><span class="line">  <span class="comment">// e.target.parentNode.parentNode.classList.add(&#x27;editing&#x27;);</span></span><br><span class="line"></span><br><span class="line">  e.<span class="property">path</span>[<span class="number">1</span>].<span class="property">nextElementSibling</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> content = e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span> || content === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">editTodo</span>(content, e.<span class="property">path</span>[<span class="number">1</span>].<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>위 코드에서 ul 태그에서 더블클릭 이벤트 발생하면 div가 안보이게되고 input이 보이게 된다.</p>
<p>이 때, 내가 어떤 요소를 선택하여 어떤 타입의 이벤트를 등록하였고 그 타입에 따른 이벤트 객체는 무엇이 나오는지를 명확히 이해하고 코딩을 하자.</p>
<p>헷갈린다면 console.log()를 찍어보면서 확인하자. 그림을 그리거나 HTML 구조와 비교해가면서 이해하면 수월하다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>오늘 MVC TodoList V2를 만들어보면서 아침 10시부터 저녁 12시까지 이거만 집중해봤는데, 확실히 아직 익숙하지 않아서 버벅거리는 거 같다고 생각이 든다. 이해가 안되는 부분은 없지만 손으로 코딩이 술술 나오지가 않아서 어렵게 느껴졌다. 앞으로도 더 손 코딩을 많이 해보는 습관을 길러야 겠다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>VanillaJS TodoList(MVC)-3탄</title>
    <url>/2023/03/03/JavaScript/VanillaJS-TodoList-MVC-3%ED%83%84/</url>
    <content><![CDATA[<p>MVC 아키텍처 기반 TodoList V3를 만들어 보면서 느낀점을 기록해두려한다.</p>
<h1 id="1-동적-HTML-vs-정적-HTML"><a href="#1-동적-HTML-vs-정적-HTML" class="headerlink" title="1. 동적 HTML vs 정적 HTML"></a>1. 동적 HTML vs 정적 HTML</h1><p>동적 HTML은 js를 이용하여 동적으로 HTML을 render 해줘서 화면에 나타나게 하는 것이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$todoList.<span class="property">innerHTML</span> = filteredTodos</span><br><span class="line">  .<span class="title function_">map</span>(</span><br><span class="line">    <span class="function">(<span class="params">&#123; id, content, completed &#125;</span>) =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;li data-id=&quot;<span class="subst">$&#123;id&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;view&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;checkbox&quot; class=&quot;toggle&quot; <span class="subst">$&#123;completed ? <span class="string">&quot;checked&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span> /&gt;</span></span><br><span class="line"><span class="string">      &lt;label&gt;<span class="subst">$&#123;content&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">      &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;input class=&quot;edit&quot; value=&quot;<span class="subst">$&#123;content&#125;</span>&quot; /&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> activeTodoCount = state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> !todo.<span class="property">completed</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">todos</span>.<span class="property">length</span> === activeTodoCount) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.clear-completed&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.clear-completed&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!activeTodoCount) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.toggle-all&quot;</span>).<span class="property">checked</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 예제를 보면서 설명해보면, 동적 HTML로 생성한 HTML의 DOM을 조작하기 위해서는 innerHTML에 할당을 해준 뒤 render 함수를 사용하여 화면에 재렌더링 하는 방식을 사용하고 있다.</p>
<p>반면에 정적 HTML의 DOM을 조작하기 위해서는 document.querySelector를 꼭 써줘야 하고 자바스크립트 코드를 짜는데 있어서 <span style="color:red">통일성과 일관성을 유지하기가 어렵다.</span></p>
<p>또한, HTML이 바뀌었을 때 그에 따른 요소 노드도 변경되기 때문에 <span style="color:red">유지보수가 어려워지는 단점이 있다.</span></p>
<p>이를 js가 HTML에 종속되었다고 표현하며 js가 HTML에 종속되면 될수록 일관성이 결여된 코드를 짜게되며 가독성을 떨어뜨리고 복잡성을 증가시키는 요인이 되므로, 앞으로는 js를 사용하여 동적 HTML을 생성할 것이다.</p>
<blockquote>
<p>동적 HTML의 단점도 분명히 있다. 예를 들면 빈 HTML 파일에다가 동적으로 HTML을 그려넣는 것이므로 SEO(검색엔진최적화)가 떨어질 수 있다. 하지만 HTML 요소를 조작하는 작업이 많다면 동적으로 HTML을 생성해주는 것이 편리하다.</p>
</blockquote>
<h1 id="2-동적-HTML로-MVC-아키텍처-설계"><a href="#2-동적-HTML로-MVC-아키텍처-설계" class="headerlink" title="2. 동적 HTML로 MVC 아키텍처 설계"></a>2. 동적 HTML로 MVC 아키텍처 설계</h1><p>처음에 Js 파일이 읽히고 난 다음에 render 함수로 HTML이 그려지기 때문에 다음과 같이 요소노드를 취득하면 null값이 나온다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.todo-list&quot;</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>그러면 어떻게 동적인 HTML요소를 조작할 수 있을까?</p>
<p>&#x3D;&gt; 이벤트 위임을 통해서 이벤트를 등록할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todos v3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;js/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 파일은 다음과 같이 #root div태그만 가지고 있고 div 태그 안에 동적으로 HTML을 생성해줄 것이다. 즉, 동적으로 생성된 HTML의 요소 조작을 위해서 부모 요소 노드인 <code>document.querySelector(&#39;#root&#39;)</code>를 통해 동적 HTML을 조작할 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, fetchState);</span><br><span class="line"></span><br><span class="line">$root.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.new-todo&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> content = e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span> || content === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addTodo</span>(content);</span><br><span class="line">  e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>일단 window가 로드되면서 서버로 부터 초기 데이터를 받아 화면에 렌더링 해주는 것부터 시작한다.</p>
<p>이후, 아키텍처를 고려하면서 각자 역할에 맞는 함수를 분류하여 코딩을 한다.</p>
<h1 id="3-아키텍처가-무너지면-망한다"><a href="#3-아키텍처가-무너지면-망한다" class="headerlink" title="3. 아키텍처가 무너지면 망한다"></a>3. 아키텍처가 무너지면 망한다</h1><p>Model에는 state를 변경해주는 함수들이 모여있고, view에는 화면에 렌더링해주는 함수들이 모여있고, controller에는 화면에서 발생한 이벤트를 이벤트 핸들러로 이벤트 객체를 생성하여 Model의 함수의 인자로 넣어 호출한다.</p>
<p>여기서 중요한 점은 각자의 역할이 정해져있는데 이를 <span style="color:red">절대로 무시하거나 어기는 행위를 금지한다는 것이다.</span></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 함수로 통일시켜주기.</span></span><br><span class="line">$root.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.filter&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">filterId</span>: e.<span class="property">target</span>.<span class="property">id</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>controller는 이벤트 객체를 Model의 함수의 인자로 전달하여 호출하는 역할을 해야한다. 하지만 위 예제에서는 controller가 Model의 함수를 호출하는 것이 아닌 직접 setState 함수를 호출하는 모습을 볼 수 있다.</p>
<p>이렇게 통일성이 지켜지지 않는다면 앞으로의 코딩 협업은 무쓸모가 되므로 꼭 아키텍처를 지키면서 생각하며 코딩하는 습관을 길러야 한다.</p>
<blockquote>
<p>추가로 함수와 변수의 이름은 첫 아이 이름 짓듯이 신중하게 지어줘야 한다.</p>
</blockquote>
<h1 id="4-이벤트-핸들러-내부에-중첩된-이벤트-핸들러"><a href="#4-이벤트-핸들러-내부에-중첩된-이벤트-핸들러" class="headerlink" title="4. 이벤트 핸들러 내부에 중첩된 이벤트 핸들러"></a>4. 이벤트 핸들러 내부에 중첩된 이벤트 핸들러</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 더블클릭했을 때, editId에 상태를 관리해줘야한다.</span></span><br><span class="line"><span class="comment">// addEventListener 안에 또 있는것은 나눠줘야한다.</span></span><br><span class="line">$root.<span class="title function_">addEventListener</span>(<span class="string">&quot;dblclick&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="property">path</span>[<span class="number">2</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;editing&quot;</span>);</span><br><span class="line"></span><br><span class="line">  e.<span class="property">path</span>[<span class="number">2</span>].<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> content = e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span> || content === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">editTodo</span>(content, e.<span class="property">path</span>[<span class="number">1</span>].<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>더블클릭하였을 때, 생겨난 input 창에 글을 수정하는 로직을 구현하기 위해 사용한 코드이다.</p>
<p>위와 같이 이벤트 핸들러가 중첩되어 코드를 작성하게되면 앞서 설명한 일관성에 어긋나 유지보수를 어렵게 하는 원인이 되므로 이 경우 다음과 같이 코드를 최소한의 단위로 분리해주어야 하며, 아키텍처를 고려하여 역할을 나눠서 코딩을 해줘야 한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Model</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Model에 editId를 재할당해준다. =&gt; render 함수에서는 state.editId를 보고 &#x27;editing&#x27; 클래스 추가할지 말지 확인하여 렌더링한다.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createEditId</span> = (<span class="params">id</span>) =&gt;</span><br><span class="line">  <span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">editId</span>: +id,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 편집은 한번에 한개씩만 허용하기 때문에 editId를 배열로 받지 않는다.</span></span><br><span class="line"><span class="comment">// 편집이 완료되었으면 editId를 초기값으로 돌려놔야 한다. render 함수에서는 state.editId를 보고 &#x27;editing&#x27; 클래스 유지할지 제거할지 판단하여 렌더링한다.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">editTodo</span> = (<span class="params">content</span>) =&gt;</span><br><span class="line">  <span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">todos</span>: state.<span class="property">todos</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span></span><br><span class="line">      todo.<span class="property">id</span> === +state.<span class="property">editId</span> ? &#123; ...todo, content &#125; : todo</span><br><span class="line">    ),</span><br><span class="line">    <span class="attr">editId</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 더블클릭하면 EditId를 생성하여 Model에 반영하는 함수를 호출한다.</span></span><br><span class="line">$root.<span class="title function_">addEventListener</span>(<span class="string">&quot;dblclick&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createEditId</span>(e.<span class="property">path</span>[<span class="number">2</span>].<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// state.editId 값과 해당 요소가 같은지 비교하여 같으면 content를 매개변수로 받은 함수를 호출한다.</span></span><br><span class="line">$root.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.edit&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> content = e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span> || content === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">editTodo</span>(content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>그동안은 코드가 돌아가기만 하면 되는 것인줄 알았지만, 앞으로는 돌아가는 코드를 만들기 보다는 돌아가는 코드를 어떻게 하면 아키텍처를 잘 지키면서 각자 역할에 맞는 최소한의 단위로 구분하여 코드를 구현할지 생각하며 코딩을 하도록 해야한다는 것을 깊이 깨달은 날이었다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>setTimeout 비동기 함수</title>
    <url>/2023/03/03/JavaScript/setTimeout-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%A8%EC%88%98/</url>
    <content><![CDATA[<p>setTimeout 타이머 함수는 일정 시간이 경과된 이후 콜백 함수가 호출되도록 타이머를 생성한다. setTimeout 함수가 생성한 타이머가 만료되면 콜백함수가 호출된다.</p>
<ul>
<li>타이머 함수는 ECMAScript 사양에 정의된 빌트인 함수가 아니라 호스트 객체이다.</li>
<li>setTimeout 함수가 생성한 타이머는 1번 동작하고 콜백함수도 1번 호출된다.</li>
</ul>
<aside>
💡 자바스크립트는 단 하나의 실행 컨텍스트 스택을 갖기 때문에 타이머 함수는 비동기 처리 방식으로 동작한다.

</aside>

<h1 id="setTimeout-함수"><a href="#setTimeout-함수" class="headerlink" title="setTimeout 함수"></a>setTimeout 함수</h1><p>두번째 인수로 전달받은 시간(ms)으로 단 한번 동작하는 타이머를 생성한다. 타이머 만료되면 첫번째 인수로 전달받은 콜백함수가 호출된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeoutId = <span class="built_in">setTimeout</span>(func[, delay,param1, param2,...]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1초(1000ms) 후 타이머가 만료되면 콜백 함수가 호출된다.</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi!&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1초(1000ms) 후 타이머가 만료되면 콜백 함수가 호출된다.</span></span><br><span class="line"><span class="comment">// 이때 콜백 함수에 &#x27;Lee&#x27;가 인수로 전달된다.</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">name</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! <span class="subst">$&#123;name&#125;</span>.`</span>), <span class="number">1000</span>, <span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 번째 인수(delay)를 생략하면 기본값 0이 지정된다.</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>콜백함수에 전달할 인수가 있다면 세번째 이후의 인수로 전달할 수 있다.</li>
<li>setTimeout 함수는 생성된 타이머를 식별할 수 있는 고유한 타이머 id를 반환한다.</li>
<li>setTimeout 함수가 반환한 타이머 id를 clearTimeout 함수의 인수로 전달하여 타이머를 취소한다.</li>
</ul>
<h2 id="setTimeout-함수에-대한-오해"><a href="#setTimeout-함수에-대한-오해" class="headerlink" title="setTimeout 함수에 대한 오해"></a>setTimeout 함수에 대한 오해</h2><p>흔히들 setTimeout 함수를 인수로 전달해준 딜레이 시간이 지난 후에 콜백함수를 호출해준다고 알고 있다.</p>
<p>하지만 이 말에는 정확히 짚고 넘어가야할 부분이 있다.</p>
<p>setTimeout 함수의 첫번째 인수로 넘겨준 콜백함수는 setTimeout 함수가 호출해주는 것인가?</p>
<p>&#x3D;&gt; <span style='color:red'>그렇지 않다.</span></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;타이머&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;호출해주세요.&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>만약 위 코드에서 setTimeout 함수가 콜백함수를 호출하는 것이라면 setTimeout 함수의 실행 컨텍스트가 제거되지 않고 남아 있어 “호출해주세요”라는 메시지가 콘솔창에 출력되지 않고 Blocking 현상이 발생해야한다.</p>
<p>하지만 그렇지 않다. 그 이유는 setTimeout 함수는 타이머를 생성하고 timeId를 반환한 후 <span style='color:red'>브라우저에게 타이머 계산과 콜백함수 호출을 위임</span>하고 setTimeout 함수의 실행 컨텍스트가 종료된다.</p>
<p>쉽게 말해서 setTimeout 함수가 브라우저에게 일정 시간이 지나면 콜백함수를 호출해주세요~ 라고 위임하고 종료되는 것이다.</p>
<blockquote>
<p>즉, setTimeout 함수의 콜백함수는 브라우저가 호출하는 것이다.</p>
</blockquote>
<h1 id="비동기-함수"><a href="#비동기-함수" class="headerlink" title="비동기 함수"></a>비동기 함수</h1><p>자바스크립트 엔진의 콜 스택은 싱글 스레드이기 때문에 한번에 한가지 일 밖에 할 수 없다. 그리하여 시간이 오래 걸리는 작업을 하게된다면 그 작업이 끝날 때 까지 다음 코드가 실행되지 못하는 Blocking(블로킹) 현상이 발생한다.</p>
<p>시간이 오래걸리는 작업이나 setTimeout 함수의 콜백함수, addEventListener의 이벤트 핸들러 같은 함수는 개발자가 호출하지 않고 브라우저가 호출한다. 이러한 코드들을 포함하고 있는 함수를 비동기 함수라고 한다.</p>
<p>자바스크립트는 Blocking(블로킹) 현상을 해결하면서 동시성을 추구하기 위해 콜 스택, 태스크 큐, 이벤트 루프 구조를 생성하게 되었다.</p>
<p><img src="/images/220901/eventLoop.png" alt="eventLoop"></p>
<p>위 이미지를 보면서 아까의 코드를 이해해보면,</p>
<ol>
<li>전역 실행 컨텍스트가 생성되어 콜 스택에 쌓인다.</li>
<li>setTimeout 함수 실행 컨텍스트가 생성되어 콜 스택에 푸시된다.</li>
<li>setTimeout 함수는 두번째 인수로 전달받은 딜레이를 가진 타이머를 생성하고 브라우저에게 타이머 계산과 첫번째 인수로 전달받은 콜백함수를 호출할 것을 위임하고 timeId를 반환하며 종료되고 실행 컨텍스트 스택에서 pop 되어 종료된다.</li>
<li>브라우저는 타이머를 계산하여 만료되면 태스크 큐에 콜백함수를 전달한다. 동시에 콜 스택에서는 console.log 함수 실행 컨텍스트가 생성된다.</li>
<li>이벤트 루프는 콜 스택과 태스크 큐를 확인하면서 콜 스택이 비워지면 태스크 큐의 작업을 콜 스택으로 푸시하는 역할을 한다. 즉, console.log 함수 실행 컨텍스트가 제거되고 전역 실행 컨텍스트가 제거되기 전까지는 태스크 큐에 있는 콜백함수가 콜 스택으로 푸시될 수 없다.</li>
<li>console.log 함수가 종료되어 실행 컨텍스트가 pop되어 제거되고 전역 실행 컨텍스트도 pop되어 제거되면 이벤트 루프가 콜 스택이 비어있는 것을 확인하여 태스크 큐의 콜백함수를 콜 스택으로 푸시한다.</li>
<li>브라우저가 호출하여 콜백함수의 실행 컨텍스트가 생성되고 콜백함수를 실행한 뒤 종료되면 실행 컨텍스트 스택에서 pop되어 제거되고 코드가 종료된다.</li>
</ol>
<blockquote>
<p>7번에서 브라우저가 콜백함수를 호출한다는 의미는 태스크 큐에 있던 콜백함수를 콜 스택으로 이동시켜준다는 의미이다.</p>
</blockquote>
<p>다음 시간에는 비동기 함수의 callback 패턴과 promise 패턴, async, await에 대해서 알아보자.</p>
<p>참고자료<br><a href="https://velog.io/@jjunyjjuny/%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9C%EA%B0%81%ED%99%94-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84">https://velog.io/@jjunyjjuny/%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9C%EA%B0%81%ED%99%94-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>tagged templates</title>
    <url>/2023/03/03/JavaScript/tagged-templates/</url>
    <content><![CDATA[<h1 id="📌-template-literals"><a href="#📌-template-literals" class="headerlink" title="📌 template literals"></a>📌 template literals</h1><p>템플릿 리터럴은 내장된 표현식을 허용하는 문자열 리터럴이다.</p>
<h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul>
<li>&#96; 백틱이라는 기호를 사용한다.</li>
<li>${}를 사용하여 표현식을 삽입할 수 있다.</li>
<li>개행을 포함한다.</li>
</ul>
<h2 id="tagged-templates"><a href="#tagged-templates" class="headerlink" title="tagged templates"></a>tagged templates</h2><p>템플릿 리터럴의 발전된 형태로 태그드 템플릿이 있다.</p>
<p>마치 함수처럼 사용할 수 있다.</p>
<h2 id="예제-1"><a href="#예제-1" class="headerlink" title="예제 1"></a>예제 1</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> virtualNode = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;figure&quot;</span>,</span><br><span class="line">  <span class="attr">className</span>: <span class="string">&quot;tagged-template-literals&quot;</span>,</span><br><span class="line">  <span class="attr">style</span>: &#123; <span class="attr">cssText</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">styled</span> = (<span class="params">strings, Node, ...value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = strings</span><br><span class="line">    .<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur.<span class="title function_">trim</span>(), <span class="string">&quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  el.<span class="title function_">forEach</span>(<span class="function">(<span class="params">elem, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Node</span>.<span class="property">style</span>.<span class="property">cssText</span> += elem + value[i] + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Node</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> values = &#123;</span><br><span class="line">  <span class="attr">margin</span>: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#d08471&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> received = styled<span class="string">`<span class="subst">$&#123;virtualNode&#125;</span>margin: <span class="subst">$&#123;values.margin&#125;</span>;color: <span class="subst">$&#123;values.color&#125;</span>;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(received);</span><br></pre></td></tr></table></figure>

<ul>
<li>마치 함수처럼 인수를 받아서 템플릿 리터럴에 넣어 반환값을 원하는 대로 지정해줄 수 있다.</li>
<li>리액트의 StyledComponent가 태그드 템플릿을 활용하여 탄생하게 되었다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>문자타입과 다른 타입을 파라미터로 사용하는 함수를 만들 때 원하는 반환값을 직관적으로 사용할 수 있어 용이해보인다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>this</title>
    <url>/2023/03/03/JavaScript/this/</url>
    <content><![CDATA[<h1 id="this-키워드"><a href="#this-키워드" class="headerlink" title="this 키워드"></a>this 키워드</h1><p>메서드로 프로퍼티를 참조하고 변경하기 위해서는 우선 자신이 속한 객체를 가리키는 식별자를 참조해야만 가능한 일이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> circle = &#123;</span><br><span class="line">  <span class="comment">// 프로퍼티: 객체 고유의 상태 데이터</span></span><br><span class="line">  <span class="attr">radius</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="comment">// 메서드: 상태 데이터를 참조하고 조작하는 동작</span></span><br><span class="line">  <span class="title function_">getDiameter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 이 메서드가 자신이 속한 객체의 프로퍼티나 다른 메서드를 참조하려면</span></span><br><span class="line">    <span class="comment">// 자신이 속한 객체인 circle을 참조할 수 있어야 한다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * circle.<span class="property">radius</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle.<span class="title function_">getDiameter</span>()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>객체 리터럴은 circle 변수에 할당되기 직전에 평가된다?<br>&#x3D; 할당 연산자에 의해서 피연산자를 할당해주기 위해서는 우측의 객체 리터럴이 평가된 값으로 존재해야 할당을 해줄 수 있기 때문이다.</li>
</ul>
<p>하지만 위처럼 재귀적으로 자신이 속한 객체를 참조하는 것은 바람직하지 않다.</p>
<p>그 예시를 생성자 함수를 통해 설명해보자</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="comment">// 이 시점에는 생성자 함수 자신이 생성할 인스턴스를 가리키는 식별자를 알 수 없다.</span></span><br><span class="line">  ????.<span class="property">radius</span> = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Circle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getDiameter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 이 시점에는 생성자 함수 자신이 생성할 인스턴스를 가리키는 식별자를 알 수 없다.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * ????.<span class="property">radius</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수로 인스턴스를 생성하려면 먼저 생성자 함수를 정의해야 한다.</span></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>생성자 함수 내부에서 프로퍼티나 메서드를 추가하기 위해서는 자신이 생성할 인스턴스를 참조할 수 있어야 하는데, 인스턴스를 생성하려면 생성자 함수가 존재해야한다.</li>
</ul>
<p>따라서 자신이 속한 객체, 자신이 생성할 인스턴스를 가리킬 <strong>특별한 식별자가 필요하다.</strong></p>
<p><strong>this란, 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수이다. this를 통해 자신이 속한 객체나 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.</strong></p>
<ul>
<li>this는 코드 어디서든 참조할 수 있다. (전역에서도 가능)</li>
</ul>
<aside>
💡 단, this가 가리키는 값(this 바인딩)은 함수 호출 방식에 의해 동적으로 결정된다.

</aside>

<p>this는 객체의 프로퍼티나 메소드를 참조하기 위한 자기 참조 변수이므로 객체의 메서드 내부 또는 생성자 함수 내부에서만 의미가 있다. 따라서 strict mode가 선언된 일반 함수 내부의 this는 undefined가 바인딩된다. (일반함수에선 필요 없다)</p>
<h1 id="함수-호출방식과-this-바인딩"><a href="#함수-호출방식과-this-바인딩" class="headerlink" title="함수 호출방식과 this 바인딩"></a>함수 호출방식과 this 바인딩</h1><p><strong>this에 바인딩될 값은 함수 호출 방식에 의해 동적으로 결정된다.</strong></p>
<h2 id="1-일반-함수-호출"><a href="#1-일반-함수-호출" class="headerlink" title="1. 일반 함수 호출"></a>1. 일반 함수 호출</h2><p>전역 객체에 바인딩된다.</p>
<p>중첩 함수 또한 일반 함수로 호출 시 함수 내부의 this는 전역 객체에 바인딩 된다.</p>
<p>매서드 내에서 정의된 중첩함수도 일반 함수로 호출되면 역시 전역 객체에 바인딩 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 키워드로 선언한 전역 변수 value는 전역 객체의 프로퍼티다.</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// const 키워드로 선언한 전역 변수 value는 전역 객체의 프로퍼티가 아니다.</span></span><br><span class="line"><span class="comment">// const value = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// &#123;value: 100, foo: ƒ&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 내에서 정의한 중첩 함수</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다.</span></span><br><span class="line">    <span class="title function_">bar</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>콜백함수가 일반함수로 호출된다면 콜백함수 내부의 this에도 전역객체가 바인딩된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// &#123;value: 100, foo: ƒ&#125;</span></span><br><span class="line">    <span class="comment">// 콜백 함수 내부의 this에는 전역 객체가 바인딩된다.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback&#x27;s this: &quot;</span>, <span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback&#x27;s this.value: &quot;</span>, <span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>하지만 메서드 내의 중첩함수와 콜백함수는 외부함수를 돕는 헬퍼 함수의 역할을 하는데 <strong>외부함수인 메서드와 중첩함수 또는 콜백함수의 this가 일치하지 않는다</strong>는 것은 중첩함수 또는 콜백함수가 헬퍼 함수로 동작하는 것을 어렵게 만든다.</p>
<h3 id="화살표함수-내부에서-this"><a href="#화살표함수-내부에서-this" class="headerlink" title="화살표함수 내부에서 this"></a>화살표함수 내부에서 this</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 화살표 함수 내부의 this는 상위 스코프의 this를 가리킨다.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>), <span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<h2 id="2-메서드-호출"><a href="#2-메서드-호출" class="headerlink" title="2. 메서드 호출"></a>2. 메서드 호출</h2><p>메서드 내부의 this는 메서드를 소유한 객체가 아닌 <span style="color:red">메서드를 호출한 객체에 바인딩</span>된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// Lee</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">getName</span>()); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure>

<ul>
<li>person 객체의 getName 프로퍼티가 가리키는 함수 객체는 person 객체에 포함된 것이 아니라 독립적으로 존재하는 별도의 객체이다? 내 생각에는 this가 가리키는 것이 메서드를 소유한 객체라고 생각해도 맞지 않나?<br>person 객체에 getName 프로퍼티 키가 가리키는 함수 객체를 소유하고 있는 것이 아니라 참조값을 가지므로 독립적으로 존재하는 객체를 가리키고 있는 것이 맞다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherPerson = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// getName 메서드를 anotherPerson 객체의 메서드로 할당</span></span><br><span class="line">anotherPerson.<span class="property">getName</span> = person.<span class="property">getName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getName 메서드를 호출한 객체는 anotherPerson이다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="title function_">getName</span>()); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure>

<ul>
<li>새로운 객체의 프로퍼티에 person.getName 프로퍼티를 할당해줄 수 있다.</li>
</ul>
<p>this는 getName 메서드를 호출한 객체에 바인딩된다.</p>
<p>프로토타입 메서드 내부에서도 마찬가지로 바인딩된다.</p>
<h2 id="3-생성자-함수-호출"><a href="#3-생성자-함수-호출" class="headerlink" title="3. 생성자 함수 호출"></a>3. 생성자 함수 호출</h2><p>생성자 함수 내부의 this에는 생성자 함수가 (미래에) 생성할 인스턴스가 바인딩 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="comment">// 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getDiameter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 반지름이 5인 Circle 객체를 생성</span></span><br><span class="line"><span class="keyword">const</span> circle1 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 반지름이 10인 Circle 객체를 생성</span></span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle1.<span class="title function_">getDiameter</span>()); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle2.<span class="title function_">getDiameter</span>()); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Function-prototype-apply-x2F-call-x2F-bind-메서드에-의한-간접-호출"><a href="#4-Function-prototype-apply-x2F-call-x2F-bind-메서드에-의한-간접-호출" class="headerlink" title="4. Function.prototype.apply&#x2F;call&#x2F;bind 메서드에 의한 간접 호출"></a>4. Function.prototype.apply&#x2F;call&#x2F;bind 메서드에 의한 간접 호출</h2><p>apply, call, bind 메서드는 Function.prototype의 메서드이다. 이들 메서드는 <strong>모든 함수가 상속받아 사용 가능하다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getThisBinding</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 사용할 객체</span></span><br><span class="line"><span class="keyword">const</span> thisArg = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getThisBinding</span>()); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">apply</span>(thisArg)); <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">call</span>(thisArg)); <span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

<p>call,apply 메서드는 함수를 호출하면서 첫번째 인수로 전달한 객체를 호출한 함수의 this에 바인딩한다.</p>
<ul>
<li>위 예제에서는 getThisBinding() 함수에 인수를 전달해주지 않는다.</li>
<li><strong>call, apply의 반환값은 호출한 함수의 반환값이다.</strong></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getThisBinding</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 사용할 객체</span></span><br><span class="line"><span class="keyword">const</span> thisArg = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span></span><br><span class="line"><span class="comment">// apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">apply</span>(thisArg, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">call</span>(thisArg, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

<p>call,apply 메서드로 함수를 호출하면서 호출한 함수에 인수를 전달해줄 수 있다.</p>
<h3 id="유사배열-객체에-배열-메서드-사용"><a href="#유사배열-객체에-배열-메서드-사용" class="headerlink" title="유사배열 객체에 배열 메서드 사용"></a>유사배열 객체에 배열 메서드 사용</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertArgsToArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// arguments 객체를 배열로 변환</span></span><br><span class="line">  <span class="comment">// Array.prototype.slice를 인수없이 호출하면 배열의 복사본을 생성한다.</span></span><br><span class="line">  <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// const arr = Array.prototype.slice.apply(arguments);</span></span><br><span class="line">  <span class="comment">// const arr = Array.from(arguments)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">convertArgsToArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>arguments 객체는 배열이 아니므로 배열 메서드를 사용할 수 없지만 apply, call 메서드를 사용하면 가능하다.</li>
</ul>
<blockquote>
<p>새로 나온 Array.from() 정적 메서드를 사용할 수 있다. 하지만 arguments 객체를 잘 안쓴다.</p>
</blockquote>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getThisBinding</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this로 사용할 객체</span></span><br><span class="line"><span class="keyword">const</span> thisArg = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 메서드는 첫 번째 인수로 전달한 thisArg로 this 바인딩이 교체된</span></span><br><span class="line"><span class="comment">// getThisBinding 함수를 새롭게 생성해 반환한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">bind</span>(thisArg)); <span class="comment">// getThisBinding</span></span><br><span class="line"><span class="comment">// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getThisBinding.<span class="title function_">bind</span>(thisArg)()); <span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bind 메서드는 함수를 호출하지 않고 인수로 전달받은 객체로 this 바인딩이 교체된 함수를 새롭게 생성하여 반환한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// ①</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">foo</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>); <span class="comment">// ② Hi! my name is .</span></span><br><span class="line">  <span class="comment">// 일반 함수로 호출된 콜백 함수 내부의 this.name은 브라우저 환경에서 window.name과 같다.</span></span><br><span class="line">  <span class="comment">// 브라우저 환경에서 window.name은 브라우저 창의 이름을 나타내는 빌트인 프로퍼티이며 기본값은 &#x27;&#x27;이다.</span></span><br><span class="line">  <span class="comment">// Node.js 환경에서 this.name은 undefined다.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>person.foo의 콜백함수가 호출되기 전 1의 시점에서 this는 foo 메서드를 호출한 객체(person)를 가리킨다.</li>
<li>그러나 person.foo의 콜백함수가 일반 함수로서 호출된 2의 시점에서 this는 전역객체 windows를 가리킨다.</li>
<li>person.foo의 콜백함수는 헬퍼함수로 person.foo를 돕는 역할을 하기 때문에 서로의 this가 같아야한다.</li>
</ul>
<p>이 때, bind 메서드를 사용하여 this를 일치시킨다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// bind 메서드로 callback 함수 내부의 this 바인딩을 전달</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(callback.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">foo</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>); <span class="comment">// Hi! my name is Lee.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>callback 함수에 this가 바인딩된 새로운 함수를 반환</li>
</ul>
<p><strong>코드해설</strong></p>
<p>즉, foo안의 this는 person 객체를가리키는데, 콜백함수 호출하면 this가 window를 가리킨다. 그러므로 bind함수를 사용하여 foo 메서드가 가리키는 this를 callback 함수에 바인딩해줘서 콜백함수가 가리키는 this와 일치 시켜준다.</p>
<blockquote>
<p>bind, call, apply, that으로 this 바인딩을 일치 시켜주는 것 보다 화살표 함수를 사용하는 것이 간편하다. 하지만 여러 가지 방식에 대해서도 알아두자.</p>
</blockquote>
<table>
<thead>
<tr>
<th>함수 호출 방식</th>
<th>this 바인딩</th>
</tr>
</thead>
<tbody><tr>
<td>일반 함수 호출</td>
<td>전역 객체</td>
</tr>
<tr>
<td>메서드 호출</td>
<td>메서드를 호출한 객체</td>
</tr>
<tr>
<td>생성자 함수 호출</td>
<td>생성자 함수가 (미래에) 생성할 인스턴스</td>
</tr>
<tr>
<td>Function.prototype.apply&#x2F;call&#x2F;bind 메서드에 의한 간접호출</td>
<td>Function.prototype.apply&#x2F;call&#x2F;bind 메서드에 첫번째로 전달한 객체</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>window.open()과 target, rel 속성</title>
    <url>/2023/03/03/JavaScript/window-open-%EA%B3%BC-target-rel-%EC%86%8D%EC%84%B1/</url>
    <content><![CDATA[<h1 id="📌-window-open"><a href="#📌-window-open" class="headerlink" title="📌 window.open()"></a>📌 window.open()</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://www.w3schools.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>새 브라우저 탭에서 해당 URL을 연다.</p>
<ul>
<li>기본값이 <code>target=&quot;_blank&quot;</code> 이다.</li>
</ul>
<h2 id="❗️-하이퍼-링크를-신뢰할-수-없다면…"><a href="#❗️-하이퍼-링크를-신뢰할-수-없다면…" class="headerlink" title="❗️ 하이퍼 링크를 신뢰할 수 없다면…"></a>❗️ 하이퍼 링크를 신뢰할 수 없다면…</h2><p><code>target=&quot;\_blank&quot;</code> 속성이 적용되어 있다면 <red>성능과 보안 면에서 취약점이 발생한다.</red></p>
<p>새롭게 열린 페이지가 원본 페이지와 동일한 프로세스에서 실행될 수 있다.</p>
<p>새로 열린 페이지는 <strong>보조 브라우징 컨텍스트</strong>이다. 새로 열린 페이지는 자기 자신을 생성한 원본 브라우징 컨텍스트를 <strong>오프너 브라우징 컨텍스트</strong>라는 이름으로 참조하고 있다.</p>
<blockquote>
<p>만약 보조 브라우징 컨텍스트가 많은 JavaScript를 실행하는 경우 원본 페이지의 성능이 저하될 수 있다.</p>
</blockquote>
<ul>
<li>단, 위와 같은 문제는 최신 브라우저에서 발생하지 않도록 처리가 되어있다.</li>
</ul>
<h3 id="👿-Tab-nabbing-탭-내빙-피싱-공격"><a href="#👿-Tab-nabbing-탭-내빙-피싱-공격" class="headerlink" title="👿 Tab nabbing(탭 내빙) - 피싱 공격"></a>👿 Tab nabbing(탭 내빙) - 피싱 공격</h3><p>가장 큰 문제는 새롭게 열린 페이지에서 JavaScript를 통해 원본 페이지에 직접 접근이 가능해지는 문제이다.</p>
<p><code>window.opener</code>를 이용해 원본 페이지에 접근 가능한데 이를 **탭 내빙(Tab nabbing)**이라고 부른다.</p>
<p><img src="/../../images/noopener/tab-nabbing.svg" alt="tab-nabbing"></p>
<ol>
<li>사용자가 새탭을 열었다.</li>
<li>해커가 새 탭에 window.opener.location을 사용하여 원본 사이트와 교묘하게 다른 링크로 바꾼다.</li>
<li>사용자는 본래 탭으로 돌아오니 로그인일 풀렸다고 생각하여 정보를 입력한다.</li>
<li>피싱 사이트가 사용자의 로그인 정보를 탈취한 후 다시 원래 링크로 되돌려 놓는다.</li>
</ol>
<p>이러한 탭 내빙 문제는 <code>target=&quot;_blank&quot;</code> 속성이 적용되어 있을 때만 발생한다.<br><code>window.open()</code> 메서드는 기본속성이다.<br>그러므로 이러한 피싱 공격을 막기 위해 <code>rel=&#39;noopener&#39;</code> 속성을 설정해줘야한다.</p>
<h3 id="noreferer"><a href="#noreferer" class="headerlink" title="noreferer"></a>noreferer</h3><p>noreferer는 noopener와 동일한 기능을 하지만 추가로 브라우저가 해당 페이지를 불러오면서 <strong>HTTP 요청을 보낼 때 referer Header를 생략하는 기능</strong>이 있다.</p>
<p>즉, noreferer 속성이 있으면 링크 클릭 시 해당 유입이 어디에서 발생하였는지에 대한 정보가 새 페이지에 제공되지 않는다.</p>
<ul>
<li>일반적으로는 noopener noreferer 두 속성을 같이 적어준다.</li>
</ul>
<h3 id="nofollow"><a href="#nofollow" class="headerlink" title="nofollow"></a>nofollow</h3><p><code>nofollow</code> 속성은 검색 엔진에게 링크된 웹 사이트를 보증하거나 신뢰할 수 없으니 현재 웹 사이트와 연결하지 않기를 바라는 경우에 사용한다.</p>
<ul>
<li>스팸 댓글이 등장하여 나오게 되었다.</li>
</ul>
<p>스팸 댓글이 달린 게시물은 사이트 소유와 상관없이 평판이 내려가게 되어서 구글이 이에 대한 해결책으로 <code>nofollow</code> 를 제시하였다.</p>
<p><code>nofollow</code> 속성이 설정된 링크는 크롤링하지 않고 검색 엔진에도 영향을 미치지 않는다.</p>
<p>그러므로 댓글이나 포럼과 같이 <strong>사용자가 참여 콘텐츠의 링크에 적합하다.</strong></p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>allWAIs 링크 컴포넌트를 만들다가 window.location.href 속성을 사용하다가 새창을 열어주는 메서드인 window.open() 속성을 알게되었다.</p>
<p>그러다가 예전에 HTML 수업 때 배운 noopener, noreferer 속성이 잘 기억이 나지 않아 정리하기 위해 공부하였다.</p>
<p>이번 기회에 제대로 정리할 수 있어서 오래 기억에 남을 것 같다.</p>
<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="https://yozm.wishket.com/magazine/detail/1586/">요즘 IT - “하이퍼링크를 신뢰할 수 없다면?”</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>객체지향 프로그래밍과 프로토타입</title>
    <url>/2023/03/03/JavaScript/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</url>
    <content><![CDATA[<p>자바스크립트는 public,private,protected 등의 키워드가 없어서 객체지향 프로그래밍이 아니라는 오해를 받지만 자바스크립트는 클래스 기반 객체지향 프로그래밍 언어보다 효율적이며 더 강력한 <span style="color:red">프로토타입 기반의 객체지향 프로그래밍 언어</span>이다.</p>
<h1 id="객체지향-프로그래밍"><a href="#객체지향-프로그래밍" class="headerlink" title="객체지향 프로그래밍"></a>객체지향 프로그래밍</h1><p>객체지향 프로그래밍이란, 특성을 나타내는 속성들의 집합을 통해 실체를 나타내어 구별하거나 인식하는 개념을 프로그래밍에 접목시킨 프로그래밍 패러다임이다. 여기서 프로그램에 필요한 속성만을 간추려 추상화 한것이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">고양이 = &#123;</span><br><span class="line">  동물</span><br><span class="line">  귀여움</span><br><span class="line">  털이있음</span><br><span class="line">  다리가 <span class="number">4</span>개임...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">	<span class="attr">address</span>:<span class="string">&#x27;Seoul&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="프로토타입과-상속"><a href="#프로토타입과-상속" class="headerlink" title="프로토타입과 상속"></a>프로토타입과 상속</h1><p>자바스크립트는 프로토타입을 기반으로 상속을 구현하여 불필요한 중복을 제거한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 불필요한 메서드 중복 소유</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getArea</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle1 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1</span>); <span class="comment">// 얘도 getArea 가지고</span></span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>); <span class="comment">// 쟤도 getArea 가지네?</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle1.<span class="property">getArea</span> === circle2.<span class="property">getArea</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>위 예시는 Circle 생성자 함수가 인스턴스를 생성할 때마다 동일한 동작을 하는 getArea 메서드를 중복 생성하는데, 이 경우 모든 인스턴스가 메서드를 중복 소유하여 메모리 낭비를 야기시킬 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 프로토타입 상속을 기반으로 불필요한 중복 제거</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수가 생성한 모든 인스턴스가 getArea 메서드를 공유하여 사용할 수 있도록 프로토타입에 추가</span></span><br><span class="line"><span class="title class_">Circle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getArea</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle1 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circle1.<span class="property">getArea</span> === circle2.<span class="property">getArea</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="프로토타입-객체"><a href="#프로토타입-객체" class="headerlink" title="프로토타입 객체"></a>프로토타입 객체</h2><p>프로토타입 객체(줄여서 프로토타입)은 어떤 객체의 상위(부모) 객체의 역할을 하는 객체로서 다른 객체의 공유 프로퍼티(메서드 포함)를 제공한다.</p>
<ul>
<li>객체간 상속을 구현하기 위해 사용</li>
<li>프로토타입을 상속받은 하위 객체는 상위 객체의 프로퍼티를 자유롭게 사용</li>
</ul>
<p>앞으로 나올 개념은 그림이 없으면 이해하기 어렵다. 이 블로그는 나의 생각을 정리해 둔 것이므로 이해를 돕기 위해서 모던 자바스크립트 Deep Dive 책을 참고하도록하자. 혹은 Poiema Web 사이트를 참고하자.</p>
<blockquote>
<p>객체 생성 방식에 따라 객체가 생성될 때, 프로토타입이 결정되고 [[Prototype]] 내부 슬롯의 값으로 저장된다.</p>
</blockquote>
<h3 id="함수객체의-prototype-프로퍼티"><a href="#함수객체의-prototype-프로퍼티" class="headerlink" title="함수객체의 prototype 프로퍼티"></a>함수객체의 prototype 프로퍼티</h3><p>함수 객체만이 갖는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다.</p>
<p>함수 정의 방식에 따라 일반함수 정의할 경우 constructor이고 ES6에서 정한 메서드 축약표현, 화살표 함수로 함수 정의할 경우 non-constructor이다.</p>
<p>non-constructor인 화살표 함수, 메서드 축약표현으로 정의한 메서드는 prototype 프로퍼티를 소유하지 않는다. ⇒ <span style="color:red">프로토타입도 생성하지 않는다.</span></p>
<blockquote>
<p>프로토타입 객체(프로토타입), 생성자 함수의 prototype 프로퍼티, 프로토타입의 constructor 프로퍼티, 생성자 함수가 생성한 객체(인스턴스)의 <strong>proto</strong> 등 헷갈리는 용어들이 많이 나오니 혼동하지 않도록 한다.</p>
</blockquote>
<h3 id="프로토타입의-constructor-프로퍼티와-생성자-함수"><a href="#프로토타입의-constructor-프로퍼티와-생성자-함수" class="headerlink" title="프로토타입의 constructor 프로퍼티와 생성자 함수"></a>프로토타입의 constructor 프로퍼티와 생성자 함수</h3><p>모든 프로토타입은 constructor 프로퍼티를 갖는다. constructor 프로퍼티는 prototype 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다.</p>
<p>프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재하며 <span style="color:red">생성자 함수가 생성되는 시점과 더불어 프로토타입도 생성</span>된다.</p>
<hr>
<h2 id="프로토타입의-생성-시점"><a href="#프로토타입의-생성-시점" class="headerlink" title="프로토타입의 생성 시점"></a>프로토타입의 생성 시점</h2><p><span style="color:red">생성자 함수가 생성되는 시점과 더불어 프로토타입도 생성</span>된다.</p>
<p>사용자 정의 생성자 함수는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 만약 함수 표현식이라면 에러(변수호이스팅)</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>함수 선언문은 함수 호이스팅이 일어나 런타임 이전에 자바스크립트 엔진에 의해 실행된다.</p>
</li>
<li><p>이 때 함수 객체가 생성되고 더불어 생성된 프로토타입은 Person 생성자 함수의 prototype의 프로퍼티에 바인딩된다.</p>
</li>
</ol>
<p>이 때 생성된 프로토타입은 오직 constructor 프로퍼티만 갖는 객체이다.</p>
<blockquote>
<p>생성된 프로토타입의 프로토타입은 항상 Object.prototype이다.</p>
</blockquote>
<p>반면, 빌트인 생성자 함수의 경우 전역 객체가 생성되는 시점에 생성된다.</p>
<p>즉, 객체가 생성되기 이전에 생성자 함수와 프로토타입은 이미 객체화 되어 존재한다. 이 후 객체를 생성하면 프로토타입은 생성된 객체의 [[Prototype]] 내부 슬롯에 할당된다. 그 결과 생성된 객체는 프로토타입의 상속을 받는다.</p>
<hr>
<h2 id="객체-생성-방식과-프로토타입의-결정"><a href="#객체-생성-방식과-프로토타입의-결정" class="headerlink" title="객체 생성 방식과 프로토타입의 결정"></a>객체 생성 방식과 프로토타입의 결정</h2><p>객체는 다양한 방식으로 생성되어 세부적인 객체 생성 방식의 차이는 있지만 모두 추상연산 OrdinaryObjectCreate에 의해 생성된다는 공통점이 있다.</p>
<p>추상연산 OrdinaryObjectCreate는 필수적으로 자신이 생성할 객체의 프로토타입을 인수로 전달받는다.</p>
<p>즉, 프로토타입은 추상연산 OrdinaryObjectCreate에 전달되는 인수에 의해 결정된다. 인수는 객체가 생성되는 시점에 객체 생성 방식에 의해 결정된다.</p>
<ol>
<li>객체 리터럴로 생성된 객체의 프로토타입</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Object 생성자 함수로 생성된 객체의 프로토타입</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>사용자 정의 생성자 함수로 생성된 객체의 프로토타입</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">생성자함수.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure>

<p>생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체이다. 이 프로토타입은 constructor 프로퍼티만 가지고 있다.</p>
<hr>
<h2 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h2><p>자바스크립트는 객체의 프로퍼티에 접근하려고 할 때, 해당 객체에 접근하려는 프로퍼티가 없다면 [[Prototype]] 내부슬롯의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다. 이를 프로토타입 체인이라고 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로토타입 메서드</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Kim&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Person 생성자 함수에 의해 생성된 me 인스턴스는 Object.prototype의 메서드인 hasOwnProperty 메서드를 호출할 수 있다. 이것은 Person.prototype뿐만 아니라 Object.prototype도 상속 받았다는 것을 알 수 있다.</p>
<p>단, <span style="color:red">me 객체의 프로토타입은 Person.prototype</span>이다.</p>
<p>그리고 Person.prototype의 프로토타입은 Object.prototype이다.</p>
<blockquote>
<p>프로토타입 최상위에 있는 객체는 언제나 Object.prototype(프로토타입 체인의 종점)이다. 그러므로 Object.prototype의 [[Prototype]] 내부 슬롯은 null 이다.</p>
</blockquote>
<h3 id="식별자와-프로퍼티-차이"><a href="#식별자와-프로퍼티-차이" class="headerlink" title="식별자와 프로퍼티 차이"></a>식별자와 프로퍼티 차이</h3><p>식별자는 함수의 중첩관계로 이루어진 스코프의 계층적 구조로 이뤄진 스코프 체인에서 검색하여 찾는다.</p>
<p>반면에 객체의 프로퍼티는 해당 객체의 프로퍼티가 없다면 프로토타입 체인을 따라 [[Prototype]] 내부 슬롯에 바인딩된 프로토타입으로 이동하면서 프로퍼티를 검색한다.</p>
<p>스코프 체인과 프로토타입 체인은 별도로 동작하지 않고 서로 협력하여 식별자와 프로퍼티를 검색하는데 사용된다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>프로토타입에 대해 설명하기가 무척 어렵고 난해했는데 그림을 보며 공부하니 이해가 수월하였다. TIL을 정리하면서 저작권때문에 그림을 첨부할 순 없었지만 머릿속으로 다시 그려보면서 정리하니 기억에 오래 남을 것 같다.</p>
<p>이제 러버덕을 하면서 말로 설명해보는 시간을 가져야겠다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>데이터 타입</title>
    <url>/2023/03/03/JavaScript/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85/</url>
    <content><![CDATA[<h1 id="Javascript-Data-type"><a href="#Javascript-Data-type" class="headerlink" title="Javascript Data type"></a>Javascript Data type</h1><p>자바스크립트는 크게 2가지의 데이터 타입으로 나뉜다.</p>
<ol>
<li><p>원시타입 (Primitive Data Type)</p>
</li>
<li><p>객체타입 (Object Type, Reference Type)</p>
</li>
</ol>
<p>이 중에서도 원시타입에는 6가지의 타입이 존재하고 그 외의 것들은 모두 객체타입이다. 그래서 자바스크립트를 객체 지향 프로그래밍 언어라고 부르나 보다.(6가지 빼곤 모두 객체니깐…)</p>
<p>오늘은 데이터 타입에 대해 공부해보도록 하자.</p>
<hr>
<h2 id="Primitive-Data-Type-원시타입"><a href="#Primitive-Data-Type-원시타입" class="headerlink" title="Primitive Data Type (원시타입)"></a>Primitive Data Type (원시타입)</h2><p>원시타입의 종류는 6가지가 있다.</p>
<ul>
<li>number (숫자형)</li>
<li>string (문자형)</li>
<li>undefined</li>
<li>null</li>
<li>boolean (불리언형)</li>
<li>symbol</li>
</ul>
<p>원시 타입의 값은 변경 불가능한 값이며, pass-by-value(값에 의한 전달)이다. 이에 대한 자세한 내용은 다음 TIL에서 더 알아보고 각 자료형에 대해 알아보자.</p>
<hr>
<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>Javascript에서는 숫자형을 모두 실수로 처리한다. 추가로 아래와 같은 자료도 숫자형이다.</p>
<ul>
<li>Infinity : 양의 무한대</li>
<li>-Infinity : 음의 무한대</li>
<li>NaN : 산술 연산 불가(Not A Number)</li>
</ul>
<blockquote>
<p>NaN은 자기 자신과 일치하지 않는 유일한 값이다. 그러므로 어떤 값이 NaN인지 판단하기 위해서는 Number.isNaN() 빌트인 함수를 사용하거나 Object.is() 메서드를 사용하여야 한다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>C언어와 다르게 Javascript의 문자열은 원시타입으로 변경 불가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;World&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>위 코드에서 str 변수에 ‘World’라는 문자열로 데이터를 수정하는 것이 아니다.<br>임의의 메모리 주소를 갖는 메모리 공간에 ‘World’라는 문자열을 저장하고 변수의 식별자인 str이 새로운 메모리 주소를 가리켜 변수를 <b style="color:red">재할당</b>하는 것이다.</p>
<h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>참, 거짓을 나타내는 자료형이다. 암묵적 불리언 형변환이 발생하면 해당값들을 false로 바꿔주는 falsy 값들이 있다.</p>
<p><b>falsy</b></p>
<ul>
<li>“” (빈문자열)</li>
<li>undefined</li>
<li>null</li>
<li>0, -0</li>
<li>NaN</li>
</ul>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>변수의 선언 단계는 사실 선언단계와 초기화 단계 두 단계로 나눠서 볼 수 있는데, 초기화 단계에서 컴퓨터가 변수가 할당되기 이전에 undefined값으로 변수의 값을 초기화해준다.</p>
<p>때문에 이는 개발자의 의도가 담긴 것이 아니다.</p>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>변수의 값이 없다는 것에 개발자의 의도를 담고 싶다면 null을 사용한다. 자바스크립트는 대소문자를 구별하기 때문에 null, Null, NULL 모두 다른 값이다.</p>
<blockquote>
<p>함수가 유효한 값을 반환할 수 없는 경우 명시적을 null을 반환하기도 한다.</p>
</blockquote>
<p>null 값의 type을 확인하기 위해서는 typeof 연산자를 사용하는 것 대신 일치 연산자(&#x3D;&#x3D;&#x3D;)를 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line">foo === <span class="literal">null</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>심볼은 이름이 충돌한 위험이 없는 유일무이한 원시타입의 값이다. 주로 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">typeof</span> key; <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj[key] = <span class="string">&quot;value&quot;</span>; <span class="comment">// 이름이 충돌할 위험이 없는 유일무이한 값인 심볼을 프로퍼티 키로 사용</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Object-Type-Reference-Type-객체타입"><a href="#Object-Type-Reference-Type-객체타입" class="headerlink" title="Object Type, Reference Type (객체타입)"></a>Object Type, Reference Type (객체타입)</h2><p>객체란, 데이터와 그 데이터에 관련된 동작(절차, 방법, 기능 등)을 모두 포함할 수 있는 개념적 존재이다.</p>
<p>다시말해 데이터를 의미하는 <strong>프로퍼티</strong>와 동작을 의미하는 <strong>메소드</strong>를 포함할 수 있는 독립적 주체이다.</p>
<p>원시타입을 제외한 나머지 값(배열, 함수, 정규표현식 등)이 모두 객체이다.</p>
<blockquote>
<p>객체는 pass-by-reference (참조에 의한 전달)이다. 이 부분에 대해서는 후에 객체에 대해서 TIL 작성시 다뤄보자</p>
</blockquote>
<hr>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>모던 자바스크립트 Deep Dive 책을 읽으면서 그전에 포이마 웹을 통해 공부했을 때 놓쳤던 부분까지 꼼꼼하게 이해하고 넘어갈 수 있어서 재밌는 시간이었다.</p>
<p>매일 매일 조금씩 읽은 것들에 대해 하나의 주제를 잡고 정리해보는 습관을 가져봐야겠다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>메서드와 화살표함수</title>
    <url>/2023/03/03/JavaScript/%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98/</url>
    <content><![CDATA[<h1 id="ES6-이후-메서드"><a href="#ES6-이후-메서드" class="headerlink" title="ES6 이후 메서드"></a>ES6 이후 메서드</h1><p>ES6 이전의 함수는 사용 목적에 따라 일반함수로 호출이 가능했고 생성자 함수로 호출이 가능했다. <strong>즉, ES6 이전의 모든 함수는 callable이면서 constructor다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>심지어 콜백함수도 constructor이기 때문에 불필요한 프로토타입 객체를 생성한다.</li>
</ul>
<p>이처럼 ES6 이전의 모든 함수는 사용 목적에 따라 명확한 구분이 없어 호출방식에 제약이 없고 생성자 함수로 호출되지 않아도 프로토타입 객체를 생성한다. 이는 혼란스러워 실수를 유발하고 성능에도 좋지 않다.</p>
<ul>
<li>ES6 이후부터는 오류에 엄격하도록 만들고 있다. ⇒ 오류를 발생시킬 여지가 있는 것들은 그 부분을 개선해주고 있다.</li>
</ul>
<p><strong>ES6 사양에서 메서드는 <span style="color:red">메서드 축약표현으로 정의된 함수만을 의미</span>한다.</strong></p>
<p>⇒ <strong>인스턴스 생성할 수 없는 non-constructor이다.</strong></p>
<ul>
<li>인스턴스 생성 불가</li>
<li>prototype 프로퍼티 없다</li>
<li>프로토타입 생성 불가</li>
</ul>
<p><strong>ES6 메서드는 자신을 바인딩한 객체를 가리키는 내부 슬롯 [[HomeObject]]를 갖는다.</strong></p>
<h1 id="함수-사용-목적에-따라-구분한-ES6에서의-함수"><a href="#함수-사용-목적에-따라-구분한-ES6에서의-함수" class="headerlink" title="함수 사용 목적에 따라 구분한 ES6에서의 함수"></a>함수 사용 목적에 따라 구분한 ES6에서의 함수</h1><p>이를 해결하기 위해 ES6에서는 함수를 사용 목적에 따라 3가지로 구분하였다.</p>
<table>
<thead>
<tr>
<th>ES6 함수의 구분</th>
<th>constructor</th>
<th>prototype</th>
<th>super</th>
<th>arguments</th>
</tr>
</thead>
<tbody><tr>
<td>일반함수</td>
<td>O</td>
<td>O</td>
<td>X</td>
<td>O</td>
</tr>
<tr>
<td>메서드</td>
<td>X</td>
<td>X</td>
<td>O</td>
<td>O</td>
</tr>
<tr>
<td>화살표 함수</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
</tbody></table>
<h1 id="화살표-함수"><a href="#화살표-함수" class="headerlink" title="화살표 함수"></a>화살표 함수</h1><p>function 키워드 함수보다 표현만 간단한 것이 아니라 내부 동작도 간략한다.</p>
<p>주로 콜백 함수 내부에서 this가 전역 객체를 가리키는 문제를 해결하기 위해 사용한다.</p>
<h2 id="화살표-함수-정의"><a href="#화살표-함수-정의" class="headerlink" title="화살표 함수 정의"></a>화살표 함수 정의</h2><p>함수 선언문 안되고 함수 표현식으로만 정의 가능하다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x, y</span>) =&gt; x * y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x</span>) =&gt; x * y; <span class="comment">// 매개변수 1개면 소괄호 생략 가능</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params"></span>) =&gt; x * y; <span class="comment">// 매개변수 없으면 소괄호 생략 불가</span></span><br></pre></td></tr></table></figure>

<h2 id="화살표-함수-몸체-정의"><a href="#화살표-함수-몸체-정의" class="headerlink" title="화살표 함수 몸체 정의"></a>화살표 함수 몸체 정의</h2><p>함수 몸체 감싸는 {} 중괄호를 생략한 경우 표현식이 아닌 문일 경우 에러를 발생 시킨다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concise body</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">power</span> = x =&gt; x ** <span class="number">2</span>;</span><br><span class="line"><span class="title function_">power</span>(<span class="number">2</span>); <span class="comment">// -&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 표현은 다음과 동일하다.</span></span><br><span class="line"><span class="comment">// block body</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">power</span> = x =&gt; &#123; <span class="keyword">return</span> x ** <span class="number">2</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; <span class="keyword">const</span> x = <span class="number">1</span>; <span class="comment">// SyntaxError: Unexpected token &#x27;const&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 표현은 다음과 같이 해석된다.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; &#123; <span class="keyword">return</span> <span class="keyword">const</span> x = <span class="number">1</span>; &#125;;</span><br></pre></td></tr></table></figure>

<p>객체 리터럴을 반환하는 경우 소괄호로 감싸줘야한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">create</span> = (<span class="params">id, content</span>) =&gt; (&#123; id, content &#125;);</span><br><span class="line"><span class="title function_">create</span>(<span class="number">1</span>, <span class="string">&quot;JavaScript&quot;</span>); <span class="comment">// -&gt; &#123;id: 1, content: &quot;JavaScript&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 표현은 다음과 동일하다.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">create</span> = (<span class="params">id, content</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; id, content &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="화살표-함수와-일반함수-차이"><a href="#화살표-함수와-일반함수-차이" class="headerlink" title="화살표 함수와 일반함수 차이"></a>화살표 함수와 일반함수 차이</h2><ol>
<li>화살표 함수는 non-constructor로, 인스턴스 생성할 수 없다.</li>
</ol>
<ul>
<li>인스턴스 생성 불가</li>
<li>prototype 프로퍼티 없다</li>
<li>프로토타입 생성 불가</li>
</ul>
<ol>
<li>화살표 함수는 중복된 매개변수 이름 선언시 에러 발생</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">arrow</span> = (<span class="params">a, a</span>) =&gt; a + a;</span><br><span class="line"><span class="comment">// SyntaxError: Duplicate parameter name not allowed in this context</span></span><br></pre></td></tr></table></figure>

<ol>
<li>화살표 함수는 this, arguments, super, <a href="http://new.target/">new.target</a> 바인딩 갖지 않는다.</li>
</ol>
<p>따라서 화살표 함수 내부에서 위의 것들을 참조할 때 스코프 체인상 가장 가까운 <strong>상위 함수 중 화살표 함수가 아닌 함수의 this, arguements, super, new.target을 참조한다.</strong></p>
<h3 id="주의사항-메서드를-화살표-함수로-정의하지-않기"><a href="#주의사항-메서드를-화살표-함수로-정의하지-않기" class="headerlink" title="주의사항 : 메서드를 화살표 함수로 정의하지 않기"></a>주의사항 : 메서드를 화살표 함수로 정의하지 않기</h3><p>단, 메서드를 화살표 함수로 정의하면 안된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sayHi 프로퍼티에 할당된 화살표 함수 내부의 this는 상위 스코프인 전역의 this가 가리키는</span></span><br><span class="line"><span class="comment">// 전역 객체를 가리키므로 이 예제를 브라우저에서 실행하면 this.name은 빈 문자열을 갖는</span></span><br><span class="line"><span class="comment">// window.name과 같다. 전역 객체 window에는 빌트인 프로퍼티 name이 존재한다.</span></span><br><span class="line">person.<span class="title function_">sayHi</span>(); <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure>

<p>메서드 정의할 때는 메서드 축약 표현을 사용하는 것이 좋다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayHi</span>(); <span class="comment">// Hi Lee</span></span><br></pre></td></tr></table></figure>

<ul>
<li>메서드 내부에서 this는 메서드를 호출한 인스턴스에 바인딩된다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lee&quot;</span>);</span><br><span class="line"><span class="comment">// 이 예제를 브라우저에서 실행하면 this.name은 빈 문자열을 갖는 window.name과 같다.</span></span><br><span class="line">person.<span class="title function_">sayHi</span>(); <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>프로토타입 객체의 프로퍼티에 화살표 함수를 사용하는 것도 문제가 된다.</li>
<li>프로퍼티 동작 추가 시에는 <strong>ES6 메서드 정의 사용할 수 없으므로 일반함수로 정의해야한다.</strong></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>모듈 내보내기(import, export)</title>
    <url>/2023/03/03/JavaScript/%EB%AA%A8%EB%93%88-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0-import-export/</url>
    <content><![CDATA[<p>이번 리액트 수업시간 때, 모듈 파일을 내보내고 불러오는 과정에서 확실히 이해하지 못한 것 같아 이 글을 작성하게 되었습니다.</p>
<h1 id="📌-모듈이란"><a href="#📌-모듈이란" class="headerlink" title="📌 모듈이란?"></a>📌 모듈이란?</h1><p><bold>모듈이란, 개발을 하면서 애플리케이션이 방대해짐에 따라 파일을 분리해야할 경우가 발생한다. 이 때 분리된 파일을 모듈이라고 한다.</bold></p>
<p>시간이 지나 모듈이 웹 표준에 등재되면서 브라우저와 Node.js 환경에서 모듈을 사용할 수 있게 되었다.</p>
<h2 id="모듈-특징"><a href="#모듈-특징" class="headerlink" title="모듈 특징"></a>모듈 특징</h2><ul>
<li>모듈파일을 사용하기 위해서는 import 해온 script 파일에 type 속성이 module로 설정되어 있어야한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>모듈 스코프를 가진다.</li>
<li>Strict mode</li>
<li>지연 실행된다(defer) -&gt; 스크립트의 상대적인 순서가 유지될 수 있는 이유</li>
<li><red>확장자를 꼭 적어줘야한다.</red></li>
</ul>
<p>모듈은 단독적으로 사용하는 경우는 드물고 주로 <red>웹팩(Webpack)</red>이라는 번들러를 사용하여 모듈을 한번에 묶어 서버에 올리는 방식을 사용한다.</p>
<p>웹팩에 대해서는 새로운 게시물에서 다뤄보도록 하고 이제 모듈을 불러오고 내보내는 방법에 대해 알아보자.</p>
<h2 id="CommonJS-vs-ES6-방식"><a href="#CommonJS-vs-ES6-방식" class="headerlink" title="CommonJS vs ES6 방식"></a>CommonJS vs ES6 방식</h2><h3 id="1-CommonJS"><a href="#1-CommonJS" class="headerlink" title="1. CommonJS"></a>1. CommonJS</h3><ul>
<li>require : 가져오기 위한 키워드</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="built_in">require</span>(<span class="string">&quot;./sayHi.js&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>exports : 내보내기 위한 키워드</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sayHi.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sayHi~!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = foo;</span><br></pre></td></tr></table></figure>

<h3 id="2-ES6-방식"><a href="#2-ES6-방식" class="headerlink" title="2. ES6 방식"></a>2. ES6 방식</h3><ul>
<li>import : 가져오기 위한 키워드</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&quot;./sayHi.js&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>export</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sayHi.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sayHi~!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure>

<p>둘의 차이에 대해 알아두고 앞으로는 ES6 문법을 사용할 것이니 이에 대해서 자세히 알아보자.</p>
<h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>모듈을 내보내는 방식은 다양하다.</p>
<ol>
<li>선언부에서 내보내기</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;loco&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>단, 함수나 클래스를 내보내기할 경우에는 <red>; (세미콜론)을 붙이지 않아야 한다.</red></li>
</ul>
<ol start="2">
<li>선언부와 떨어진 곳에서 내보내기</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;loco&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> name;</span><br></pre></td></tr></table></figure>

<p>만약 여러개를 내보내고 싶다면 객체로 감싸서 내보내기 해야한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// say.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi~ <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayBye</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Bye~ <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; sayHi, sayBye &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sayHi, sayBye &#125; <span class="keyword">from</span> <span class="string">&quot;./say.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// Hi~ John!</span></span><br><span class="line"><span class="title function_">sayBye</span>(<span class="string">&quot;selly&quot;</span>); <span class="comment">// Bye~ selly!</span></span><br></pre></td></tr></table></figure>

<p>export 할 때, 객체형태로 감싸서 내보내기를 하였으면 불러올 때도 객체형태로 감싸 이름 그대로 가져와야한다.</p>
<p>하지만 가져와야할 함수나 변수가 100만개라면? 일일히 언제 써주기가 힘드니 이럴 경우 <bold>* (에스터리스트)를 사용하여 모두 가져오기하여 객체처럼 사용할 수 있다.</bold></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> greeting <span class="keyword">from</span> <span class="string">&quot;./say.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">greeting.<span class="title function_">sayHi</span>(<span class="string">&quot;Yong&quot;</span>); <span class="comment">// Hi~ Yong!</span></span><br><span class="line">greeting.<span class="title function_">sayBye</span>(<span class="string">&quot;Jin&quot;</span>); <span class="comment">// Bye~ Jin!</span></span><br></pre></td></tr></table></figure>

<p>하지만 이런 경우는 드물고, 대게 어떤 대상을 가져오는지를 구체적으로 하는 것 명시하는 것이 좋다.</p>
<p>왜냐하면 웹팩을 사용하면 로딩속도를 높이기 위해 최적화를 하게되는데 이 경우 사용하지 않는 리소스는 삭제되기 때문이다.</p>
<h3 id="import-as"><a href="#import-as" class="headerlink" title="import as"></a>import as</h3><p>as를 사용하여 이름을 바꿔서 가져올 수 있다. export 에서도 가능하지만 주로 import 에서만 사용하는 것이 명시적이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sayHi <span class="keyword">as</span> hi, sayBye <span class="keyword">as</span> bye &#125; <span class="keyword">from</span> <span class="string">&quot;./say.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hi</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// Hi~ John!</span></span><br><span class="line"><span class="title function_">bye</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// Bye~ John!</span></span><br></pre></td></tr></table></figure>

<h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><p>모듈은 크게 2가지 종류로 나뉘게 된다.</p>
<ol>
<li>위 처럼 say라는 함수들이 다수있는 라이브러리 형태의 모듈</li>
<li>개체 하나만 선언된 모듈</li>
</ol>
<p>유틸 함수들을 내보내는 경우가 아니라면 주로 2번의 경우를 선호한다.</p>
<p>해당 모듈에 개체가 1개만 있다는 것을 명시적으로 구분하기 위해 <bold>export default 키워드를 사용한다.</bold></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> validation <span class="keyword">from</span> <span class="string">&quot;./validation.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isValid = <span class="title function_">validation</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>export default로 내보내기한 경우에 가져오기할 때는 <bold>중괄호{}가 필요없고 원하는 이름으로 가져올 수 있다.</bold></li>
<li>또한, 개체 한개만 내보낸 것을 가져오기 때문에 <bold>export default로 내보낼 때는 식별자나 이름없이 내보낼 수 있다.</bold></li>
</ul>
<h1 id="🔥-22-11-09-추가"><a href="#🔥-22-11-09-추가" class="headerlink" title="🔥 [22.11.09 추가]"></a>🔥 [22.11.09 추가]</h1><h2 id="❗️-component-폴더의-index-js-모아서-다시-내보내기"><a href="#❗️-component-폴더의-index-js-모아서-다시-내보내기" class="headerlink" title="❗️ component 폴더의 index.js 모아서 다시 내보내기"></a>❗️ component 폴더의 index.js 모아서 다시 내보내기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/ToggleButton/ToggleButton.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ToggleButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// components/index.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./Demo&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./ToggleButton&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./A11yHidden&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./Banner&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app/App.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ToggleButton</span> &#125; <span class="keyword">from</span> <span class="string">&quot;components&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ToggleButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ToggleButton 컴포넌트를 이름 내보내기 해주고 있다.</li>
<li>위와 같이 components 폴더의 index.js파일에 여러 컴포넌트를 다시 내보내기로 보내줄 때, <strong>만약 ToggleButton 컴포넌트를 기본 내보내기를 해주었다면</strong> 아래처럼 index.js에서 다시내보내기 해줄 때, {}로 감싸고 default로 받은 객체를 이름으로 설정해주고 내보내줘야한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">ToggleButton</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./ToggleButton&quot;;</span></span><br></pre></td></tr></table></figure>

<p>왜냐하면, <strong>ToggleButton 이외의 다른 컴포넌트들도 default로 내보냈기 때문에 구분을 하기 위해서</strong> 다시 내보내기 할 때, 이름을 설정해줘야한다.</p>
<p>이러한 불편함 때문에 이름 내보내기를 사용한다.</p>
<h2 id="❗️-화살표-함수로-내보내기시-주의사항"><a href="#❗️-화살표-함수로-내보내기시-주의사항" class="headerlink" title="❗️ 화살표 함수로 내보내기시 주의사항"></a>❗️ 화살표 함수로 내보내기시 주의사항</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; onText, offText, on, onToggle, activeClass &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>위와 같이 화살표 함수로 한줄로 작성하여 익명함수로 내보내고 App.jsx에서 이름을 정하여 받아서 사용하더라도 브라우저 환경에서 컴포넌트 구조를 확인하면 컴포넌트 이름이 <red><strong>Annonymous</strong>라고 뜬다.</red></li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>수업시간에 모듈을 기본 내보내기, 이름 내보내기를 사용하면서 둘의 차이가 무엇인지? 그리고 CommonJS와 ES6에서 모듈을 불러오고 내보내는 방식의 차이에 대해 확실히 알고 가는 시간이여서 한층 성장하였다고 느낀다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>모듈 다시내보내기</title>
    <url>/2023/03/03/JavaScript/%EB%AA%A8%EB%93%88-%EB%8B%A4%EC%8B%9C%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="📌-모듈-다시-내보내기-기능"><a href="#📌-모듈-다시-내보내기-기능" class="headerlink" title="📌 모듈 다시 내보내기 기능"></a>📌 모듈 다시 내보내기 기능</h1><p>import한 모듈을 즉시 다시 내보내기 기능을 구현할 수 있다.</p>
<h2 id="사용하는-이유"><a href="#사용하는-이유" class="headerlink" title="사용하는 이유"></a>사용하는 이유</h2><p>진입점인 index.js 파일이 있다고 가정하자. 이 진입점을 내보내서 다른 개발자들이 안의 모듈들을 사용하려고 할 때, 다른 개발자가 모듈의 내부 구조를 건드리게 하면 안된다.</p>
<p>그러기 위해서 공개할 모듈만 index.js 파일에 넣어 내보내기를 하고 나머지는 숨기는 것이 현명하다.</p>
<p>때문에 내보낼 기능들을 분산하여 구현한 뒤 index.js에서 해당 기능들을 가져와서 다시 내보내기 하면 원하는 목적을 이룰 수 있다.</p>
<h2 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// currency, currencyKR 모듈을 다시 내보냅니다.</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./currency/currency.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetchBooks 모듈을 다시 내보냅니다.</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./fetchBooks.js&quot;</span>;</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">import</span>, <span class="keyword">export</span> 할 때 <span class="keyword">as</span> 라는 문법을 사용할 수 있다.</span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span>를 사용하면 이름을 바꿔서 모듈을 가져올 수 있다.</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; currencyKR <span class="keyword">as</span> currency &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/index.js&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>currencyKR 기능을 currency 라는 이름으로 바꿔서 import 해주었다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>module에 대해서는 쓸 때마다 헷갈렸었는데, 이렇게 모르는 것이 생길 때마다 공부하여 정리하다보면 익숙해지면서 알게 될 것 같다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>브라우저 렌더링 과정</title>
    <url>/2023/03/03/JavaScript/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95/</url>
    <content><![CDATA[<h1 id="브라우저란"><a href="#브라우저란" class="headerlink" title="브라우저란?"></a>브라우저란?</h1><p>브라우저는 HTML, CSS, Javascript로 작성된 텍스트 문서를 서버에게 요청하여 응답을 받아 의미있는 단위인 토큰으로 파싱하여 시각적으로 렌더링 해주는 역할을 담당한다.</p>
<h1 id="브라우저-렌더링-과정"><a href="#브라우저-렌더링-과정" class="headerlink" title="브라우저 렌더링 과정"></a>브라우저 렌더링 과정</h1><h2 id="1-요청과-응답"><a href="#1-요청과-응답" class="headerlink" title="1. 요청과 응답"></a>1. 요청과 응답</h2><p>서버에 요청하기 위해 브라우저는 주소창을 제공한다. 주소창에 URL을 입력하면 URL의 호스트 이름이 DNS를 통해 IP주소로 변환되고 IP 주소를 갖는 서버에게 요청을 전송한다.</p>
<p>이렇게 요청을 보내면 서버는 서버의 루트 폴더에 존재하는 정적파일로 응답을 보낸다. 기본적으로 index.html</p>
<h2 id="2-HTML-파싱과-DOM-생성"><a href="#2-HTML-파싱과-DOM-생성" class="headerlink" title="2. HTML 파싱과 DOM 생성"></a>2. HTML 파싱과 DOM 생성</h2><p>브라우저 요청에 의해 서버가 응답한 HTML 문서는 문자열로 이루어진 순수한 텍스트이다. 의미없는 문자열 데이터를 브라우저가 이해할 수 있는 자료구조(객체)로 변환하여 메모리에 저장해야한다.</p>
<p><strong>그래서 HTML 문서를 파싱하여 <span style="color:red">브라우저가 이해할 수 있는 자료구조인 DOM을 생성</span>한다.</strong></p>
<ol>
<li>서버는 요청의 응답하기 위해 요청한 HTML 파일을 읽어 메모리에 저장한 뒤 메모리에 저장된 바이트(2진수)를 인터넷을 경유하여 응답한다.</li>
<li>브라우저는 이를 받아 meta 태그의 charset 방식에 따라(UTF-8) 문자열로 변환한다.</li>
<li>문자열로 변환된 HTML문서를 토큰화한다.</li>
<li>각 토큰을 객체로 변환하여 노드를 생성한다. 노드는 DOM을 구성하는 기본 요소이다. ex) 문서 노드, 요소 노드 등</li>
<li>HTML 문서는 중첩관계를 통해 부자관계가 형성된다. 이러한 부자관계를 반영하여 <strong>모든 노드들을 트리 자료구조로 구성한다. 이러한 노드들로 구성된 트리 자료구조를 DOM이라 부른다.</strong></li>
</ol>
<h2 id="3-CSS-파싱과-CSSOM-생성"><a href="#3-CSS-파싱과-CSSOM-생성" class="headerlink" title="3. CSS 파싱과 CSSOM 생성"></a>3. CSS 파싱과 CSSOM 생성</h2><p>렌더링 엔진은 HTML을 한줄씩 읽어나가며 순차적으로 파싱하여 DOM을 생성해 나간다. <strong>DOM을 생성하다가 CSS를 로드하는 link 태그나 style 태그를 만나면 <span style="color:red">DOM 생성을 일시중단</span>한다.</strong></p>
<p>그 결과 CSS 파일을 서버에 요청하여 응답받은 CSS 파일이나 style 태그 내의 CSS를 HTML과 동일한 과정으로 토큰화 생성 → CSSOM 생성 과정을 거친다. 이후 파싱이 완료되면 HTML 파싱이 중단된 지점부터 다시 HTML을 파싱하기 시작한다.</p>
<h2 id="4-렌더-트리-생성"><a href="#4-렌더-트리-생성" class="headerlink" title="4. 렌더 트리 생성"></a>4. 렌더 트리 생성</h2><p>앞선 과정에서 생성된 DOM과 CSSOM은 렌더링을 위해 렌더 트리로 결합된다. 이 때 <strong>브라우저 화면에 렌더링되지 않는 노드<span style="color:red">(meta태그, script 태그 등)</span>와 CSS에 의해 표시되지 않는<span style="color:red">(display:none)</span> 노드들은 포함하지 않는다.</strong></p>
<p>지금까지의 렌더링 과정은 여러번 반복되서 실행될 수 있다. <strong>렌더링이 반복 실행되는 원인은 다음과 같다.</strong></p>
<ul>
<li>자바스크립트에 의한 노드 추가 또는 삭제</li>
<li>브라우저 창의 리사이징에 의한 viewport 크기 변경</li>
<li>HTML 요소의 레이아웃(위치와 크기)을 변경시키는 width, height, margin, padding, border, display, position 등의 스타일 변경</li>
</ul>
<p><strong>이러한 리렌더링은 비용이 많이 들고 성능에 악영향을 주므로 <span style="color:red">리렌더링이 적게 발생하도록 하여야한다.</span></strong></p>
<h2 id="5-자바스크립트-파싱과-실행"><a href="#5-자바스크립트-파싱과-실행" class="headerlink" title="5. 자바스크립트 파싱과 실행"></a>5. 자바스크립트 파싱과 실행</h2><p>HTML 파싱의 결과물 DOM은 HTML 문서의 구조와 정보뿐 아니라 HTML 요소와 스타일을 변경할 수 있는 프로그래밍 인터페이스로서 DOM API를 제공한다.</p>
<p>즉, DOM API를 사용하여 이미 생성된 DOM을 동적으로 조작할 수 있다.</p>
<p>CSS 파싱과정과 마찬가지로 script 태그 만나면 DOM 생성을 일시 중단한다.</p>
<p>이후 자바스크립트 파일을 서버에 요청하여 응답받은 파일이나 script 태그내의 코드를 파싱하기 위해 <strong>자바스크립트 엔진에 제어권을 넘긴다. <span style="color:red">(렌더링 엔진 → 자바스크립트 엔진으로 제어권 이동)</span></strong></p>
<p>이후 자바스크립트 파싱과 실행이 종료되면 렌더링 엔진으로 다시 제어권 넘겨 HTML 파싱 중단된 시점부터 다시 DOM 생성을 재개한다.</p>
<p>자바스크립트 엔진은 자바스크립트 코드를 파싱하기 시작한다. 자바스크립트를 해석하여 <strong>AST(추상적 구문 트리)를 생성</strong>한다. 그리고 <strong>AST를 기반으로</strong> 인터프리터가 실행할 수 있는 중간 코드인 <strong>바이트 코드를 생성</strong>하여 실행한다.</p>
<h2 id="6-리플로우와-리페인트"><a href="#6-리플로우와-리페인트" class="headerlink" title="6. 리플로우와 리페인트"></a>6. 리플로우와 리페인트</h2><p>만약 자바스크립트 코드에 DOM, CSSOM을 변경하는 DOM API가 사용된 경우 DOM, CSSOM이 변경되고 변경된 DOM, CSSOM으로 다시 렌더트리로 결합되고 레이아웃과 페인트 과정을 거쳐 브라우저 화면에 다시 렌더링한다. 이를 리플로우, 리페인트라고 한다.</p>
<h1 id="자바스크립트-파싱에-의한-HTML-파싱중단"><a href="#자바스크립트-파싱에-의한-HTML-파싱중단" class="headerlink" title="자바스크립트 파싱에 의한 HTML 파싱중단"></a>자바스크립트 파싱에 의한 HTML 파싱중단</h1><p>렌더링 엔진과 자바스크립트 엔진은 서로 제어권을 이동시키면서 병렬적으로 파싱하지 않고 <strong>직렬적으로 파싱을 수행한다.</strong> 브라우저는 이처럼 <strong>동기적</strong>으로, 즉 순차적으로 HTML, CSS, 자바스크립트를 파싱하고 실행한다.</p>
<p>script 태그를 만나면 제어권이 이동하기 때문에 HTML 문서 내의 script 태그의 위치는 중요한 의미를 갖는다.</p>
<p>대표적인 문제로는 HTML이 생성되기 전에 자바스크립트 코드가 HTML요소를 동적으로 조작하려고 하면 <strong>정상적으로 동작하지 않을 수 있다.</strong> 이에 대한 해결책으로는 아래와 같다.</p>
<ul>
<li>body 태그 제일 하단에 script 태그(자바스크립트)를 위치 시키는 것</li>
</ul>
<h2 id="script-태그의-async-x2F-defer-어트리뷰트"><a href="#script-태그의-async-x2F-defer-어트리뷰트" class="headerlink" title="script 태그의 async&#x2F;defer 어트리뷰트"></a>script 태그의 async&#x2F;defer 어트리뷰트</h2><p>앞서 알아본 문제를 근본적으로 해결하기 위해서 HTML5부터 script 태그에 <strong>async</strong>와 <strong>defer 어트리뷰트</strong>가 추가되었다.</p>
<p>두 어트리뷰트는 src 어트리뷰트를 통해 외부의 자바스크립트 파일을 로드하는 경우에만 사용할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;extern.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;extern.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>이 둘을 사용하면 HTML 파싱과 외부 자바스크립트 파일의 로드가 비동기적으로 진행된다. 단 두 어트리뷰트의 실행 시점의 차이가 있다.</p>
<ol>
<li>async 어트리뷰트</li>
</ol>
<p>자바스크립트의 파싱과 실행은 <strong>자바스크립트 파일의 로드가 완료된 직후 진행</strong>된다. 이 때 HTML 파싱이 중단된다.</p>
<p>여러개의 script 태그에 async 어트리뷰트를 지정하면 script 태그의 순서와는 상관없이 <strong>로드가 완료된 자바스크립트부터 먼저 실행되므로 순서가 보장되지 않는다.</strong></p>
<p>즉, 순서보장이 필요한 script 태그는 async 어트리뷰트 지정하지 않아야 한다.</p>
<ol start="2">
<li>defer 어트리뷰트</li>
</ol>
<p>자바스크립트의 파싱과 실행은 <strong>HTML 파싱이 완료된 직후, 즉 DOM 생성이 완료된 직후</strong>(DOMContentLoaded 이벤트가 발생한다) 진행된다.</p>
<blockquote>
<p>모듈은 기본적으로 defer이다. async는 잘 사용하지 않지만 폰트의 경우 용량도 크고 순서가 크게 상관이 없으니 최대한 빨리 가져오기 위해 async를 사용하기도 한다.</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>상속</title>
    <url>/2023/03/03/JavaScript/%EC%83%81%EC%86%8D/</url>
    <content><![CDATA[<p>자바스크립트에서 상속을 구현하기 위해 프로토타입을 기반으로 구현한다고 이전시간에 배워보았다.</p>
<p>그럼 상속을 구현하는 방법이 과연 이 방법뿐일까? 한번 알아보자.</p>
<h1 id="직접상속"><a href="#직접상속" class="headerlink" title="직접상속"></a>직접상속</h1><h2 id="Object-create에-의한-직접-상속-정적메서드"><a href="#Object-create에-의한-직접-상속-정적메서드" class="headerlink" title="Object.create에 의한 직접 상속 (정적메서드)"></a>Object.create에 의한 직접 상속 (정적메서드)</h2><p>Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(생성할 객체의 프로토타입, 생성할 객체의 프로퍼티키와 프로퍼티 디스크립터 객체로 이뤄진 객체)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(prototype[, propertiesObject])</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 프로토타입이 null인 객체를 생성한다. 생성된 객체는 프로토타입 체인의 종점에 위치한다.</span></span><br><span class="line"><span class="comment">// obj → null</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Object.prototype을 상속받지 못한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()); <span class="comment">// TypeError: obj.toString is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj → Object.prototype → null</span></span><br><span class="line"><span class="comment">// obj = &#123; x: 1 &#125;;와 동일하다.</span></span><br><span class="line">obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">x</span>: &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 위 코드는 다음과 동일하다.</span></span><br><span class="line"><span class="comment">// obj = Object.create(Object.prototype);</span></span><br><span class="line"><span class="comment">// obj.x = 1;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">x</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 빈객체만 생성하는 것이 아니다.</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj, &#123;</span><br><span class="line">  <span class="attr">x</span>: &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  <span class="attr">y</span>: &#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// &#123;x: 10, y: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myProto = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">// 객체리터럴로 생성된 객체를 직접 상속받는다.</span></span><br><span class="line"><span class="comment">// obj → myProto → Object.prototype → null</span></span><br><span class="line">obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(myProto);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">x</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) === myProto); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj → Person.prototype → Object.prototype → null</span></span><br><span class="line"><span class="comment">// obj = new Person(&#x27;Lee&#x27;)와 동일하다.</span></span><br><span class="line">obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Lee&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Lee</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Object.create 메서드의 첫번째 인수로 전달한 객체를 프로토타입으로 하는 프로토타입 체인에 속하는 객체를 생성한다. 즉, 객체를 생성하면서 직접적인 상속을 구현하는 것이다.</p>
<ul>
<li>new 연산자 없이 객체 생성 가능</li>
<li>프로토타입을 지정하면서 객체 생성 가능</li>
<li>객체 리터럴로 생성된 객체도 상속받을 수 있다.</li>
</ul>
<p>Object.prototype의 빌트인 메서드를 직접 호출하는 것은 위험하다. 그 이유는 Object.create 메서드를 사용하여 <span style="color:red">프로토타입 체인 종점에 위치하는 객체</span>를 생성할 수도 있기 때문이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 프로토타입이 null인 객체, 즉 프로토타입 체인의 종점에 위치하는 객체를 생성한다.</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj는 Object.prototype의 빌트인 메서드를 사용할 수 없다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// TypeError: obj.hasOwnProperty is not a function</span></span><br></pre></td></tr></table></figure>

<p>그러므로 Object.prototype의 빌트인 메서드는 call,apply 등을 통해 간접적으로 호출하는 것을 권장한다.</p>
<p>하지만 위 방법은 너무 길다…</p>
<p><span style="font-size:1.2rem">그래서 새로나온 문법을 사용하자</span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, property);</span><br></pre></td></tr></table></figure>

<p>위 방법을 사용하여 같은 기능을 구현할 수 있다.</p>
<h1 id="정적-프로퍼티-x2F-메소드"><a href="#정적-프로퍼티-x2F-메소드" class="headerlink" title="정적 프로퍼티&#x2F;메소드"></a>정적 프로퍼티&#x2F;메소드</h1><p>생성자 함수로 <span style="color:red">인스턴스를 생성하지 않아도</span> 참조,호출할 수 있는 프로퍼티, 메소드를 말한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로토타입 메서드</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정적 프로퍼티</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">staticProp</span> = <span class="string">&quot;static prop&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정적 메서드</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">staticMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;staticMethod&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lee&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수에 추가한 정적 프로퍼티/메서드는 생성자 함수로 참조/호출한다.</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">staticMethod</span>(); <span class="comment">// staticMethod</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 정적 프로퍼티/메서드는 생성자 함수가 생성한 인스턴스로 참조/호출할 수 없다.</span></span><br><span class="line"><span class="comment">// 인스턴스로 참조/호출할 수 있는 프로퍼티/메서드는 프로토타입 체인 상에 존재해야 한다.</span></span><br><span class="line">me.<span class="title function_">staticMethod</span>(); <span class="comment">// TypeError: me.staticMethod is not a function</span></span><br></pre></td></tr></table></figure>

<p>생성자 함수로 생성한 인스턴스로 정적 프로퍼티와 메소드를 참조, 호출할 수 없다.</p>
<p>생성자 함수가 생성한 인스턴스는 프로퍼티, 메소드를 참조할 때 <span style="color:red">프로토타입 체인 내에서만 할 수 있다.</span></p>
<p>정적 프로퍼티,메소드는 인스턴스의 프로토타입 체인 내에 없기 때문에 참조, 호출할 수 없다.</p>
<aside>
💡 MDN에 보면 정적메서드와 프로토타입 메서드를 구분하여 소개한다. 정적 메서드는 Object.isExtensible(), Object.keys() 처럼 중간에 prototype이 들어가지 않지만 프로토타입 메서드는 Object.prototype.hasOwnProperty() 처럼 중간에 prototype이 들어간다.
</aside>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>원시타입과 객체타입</title>
    <url>/2023/03/03/JavaScript/%EC%9B%90%EC%8B%9C%ED%83%80%EC%9E%85%EA%B3%BC-%EA%B0%9D%EC%B2%B4%ED%83%80%EC%9E%85/</url>
    <content><![CDATA[<p>원시타입과 객체타입에 대해서 제대로 알고 넘어가기 위해 오늘은 원시타입과 객체타입, 그리고 더 나아가 얕은복사, 깊은복사에 대해서도 알아보자.</p>
<h1 id="원시타입과-객체타입"><a href="#원시타입과-객체타입" class="headerlink" title="원시타입과 객체타입"></a>원시타입과 객체타입</h1><hr>
<h2 id="원시타입"><a href="#원시타입" class="headerlink" title="원시타입"></a>원시타입</h2><h3 id="1-원시타입의-값"><a href="#1-원시타입의-값" class="headerlink" title="1. 원시타입의 값"></a>1. 원시타입의 값</h3><p>원시타입의 값은 변경 불가능한 값이다. 읽기전용이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&quot;H&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<p>변수 str의 첫번째 문자열을 인덱스로 접근하여 직접 바꾸려했지만 변경불가능하여 바꿀 수 없다.</p>
<h3 id="2-원시타입의-메모리-공간"><a href="#2-원시타입의-메모리-공간" class="headerlink" title="2. 원시타입의 메모리 공간"></a>2. 원시타입의 메모리 공간</h3><p>원시타입은 변수 할당 시 메모리 공간에 실제 값을 저장한다.</p>
<p>변수와 메모리에 대해 자세히 언급하면 사실 변수라는 식별자가 <span style="color:red">값을 저장하는 게 아닌</span> 값이 저장된 메모리 공간에 대한 <strong>메모리 주소</strong>를 저장하고 있다.</p>
<blockquote>
<p>즉, 메모리 공간에는 값이 저장되어 있고 변수라는 식별자는 메모리 공간의 메모리 주소를 저장한다.</p>
</blockquote>
<h3 id="3-원시타입-값의-전달"><a href="#3-원시타입-값의-전달" class="headerlink" title="3. 원시타입 값의 전달"></a>3. 원시타입 값의 전달</h3><p>원시값을 갖는 변수를 다른 변수에 할당하면 <s>원시값이 복사되어 전달된다.</s></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greeting = str;</span><br><span class="line"></span><br><span class="line">greeting = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// hi</span></span><br></pre></td></tr></table></figure>

<p>사실 값이 복사되어 전달되는 것이 아니고 동일한 값을 <strong>새로운 메모리 저장공간</strong>에 저장한 뒤 해당 메모리 공간의 메모리 주소를 copy라는 변수에 할당하는 것이다.</p>
<hr>
<h2 id="객체타입"><a href="#객체타입" class="headerlink" title="객체타입"></a>객체타입</h2><h3 id="1-객체타입의-값"><a href="#1-객체타입의-값" class="headerlink" title="1. 객체타입의 값"></a>1. 객체타입의 값</h3><p>객체타입의 값은 변경가능한 값이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">  <span class="title function_">smoke</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;no-smoking&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;jangoon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;jangoon&#x27;, age: 28, smoke: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-객체타입의-메모리-공간"><a href="#2-객체타입의-메모리-공간" class="headerlink" title="2. 객체타입의 메모리 공간"></a>2. 객체타입의 메모리 공간</h3><p>객체타입은 변수 할당 시 메모리 공간에 참조값(주소값)이 저장된다.</p>
<p>원시타입에서는 메모리 공간에 값이 저장되고 변수 식별자에 해당 메모리 공간을 가리키는 주소가 저장되어 있다.</p>
<p>하지만, 객체타입에서는 <span style="color:red">메모리 공간에 다른 메모리 공간을 가리키는 메모리 주소</span>가 담겨있다. 다시말해서, 객체타입의 메모리는 원시타입의 메모리보다 과정이 한번 더 일어나게 되는 것이다.</p>
<h3 id="3-객체타입-값의-전달"><a href="#3-객체타입-값의-전달" class="headerlink" title="3. 객체타입 값의 전달"></a>3. 객체타입 값의 전달</h3><p>객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조값(주소값)이 복사되어 전달된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copy = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person === copy); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>변수 person과 copy는 {name:’Lee’} 객체 프로퍼티들의 주소가 담겨있는 메모리 공간의 메모리 주소를 저장한다. 그러므로 같은 참조값(주소값)을 비교하고 있기 때문에 일치 비교 연산자가 true가 나왔다.</p>
<hr>
<h2 id="객체타입의-얕은복사"><a href="#객체타입의-얕은복사" class="headerlink" title="객체타입의 얕은복사"></a>객체타입의 얕은복사</h2><p>객체를 spread 문법을 사용하여 얕은복사를 해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">  <span class="attr">fruit</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;peach&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;strawberry&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...person &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 객체가 같은지 비교</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person === someone); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 프로퍼티 비교</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span> === someone.<span class="property">name</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">fruit</span> === someone.<span class="property">fruit</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 원시타입의 값을 변경했을 경우</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;minseok&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123;name: &#x27;minseok&#x27;, fruit: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someone); <span class="comment">// &#123;name: &#x27;yiju&#x27;, fruit: &#123;…&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 객체타입의 값을 변경했을 경우</span></span><br><span class="line">person.<span class="property">fruit</span>[<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;watermelon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// fruit: &#123;1: &#x27;watermelon&#x27;, 2: &#x27;strawberry&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someone); <span class="comment">// fruit: &#123;1: &#x27;watermelon&#x27;, 2: &#x27;strawberry&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>변수 person의 원시타입의 값을 수정하였을 때, 서로의 원시타입의 값은 공유하지 않는다. 하지만 객체타입의 값을 바꾼 경우 서로의 객체타입의 값을 공유하는 모습을 볼 수 있다.</p>
<blockquote>
<p>왜 그럴까? 앞서 언급한 내용으로 깊게 파헤쳐보자.</p>
</blockquote>
<ol>
<li>person, someone은 일치하지 않으니 서로 다른 주소값을 갖는다. 각각의 주소는 <code>javascript &#123;name:&#39;yiju&#39;,fruit:&#123;1:&#39;peach&#39;,2:&#39;strawberry&#39;&#125;&#125; </code> 객체 프로퍼티들의 주소를 담고있는 메모리 공간을 가리킨다.</li>
</ol>
<p>예를 들면 name 식별자가 가리키는 주소, fruit 식별자가 가리키는 주소 이런식으로 프로퍼티의 주소들을 담고 있다.</p>
<p>여기서 name 식별자는 원시타입의 값을 가리키는 메모리 주소를 저장한다. <code>javascript person.name = &#39;minseok&#39;</code> 을 실행하면 person.name과 someone.name이 서로 다른 주소값을 갖게된다.</p>
<ol start="2">
<li>fruit의 식별자 주소는 <code>javascript &#123;1:&#39;peach&#39;,2:&#39;strawberry&#39;&#125;</code> 프로퍼티들의 주소를 담고있는 메모리 공간을 가리킨다. person.fruit와 someone.fruit가 서로 같다(메모리 주소가 같다). 즉, fruit 프로퍼티들의 주소가 담긴 메모리 공간을 가리키는 메모리 주소가 같다.</li>
</ol>
<p>그리하여 <code>javascript fruit[&#39;1&#39;] = &#39;watermelon&#39; </code> 로 fruit 프로퍼티인 1을 수정하면 식별자인 1이 가리키는 메모리 주소가 바뀌게 되고 person과 someone 식별자가 식별자 1을 포함하는 프로퍼티들의 주소를 담은 메모리 공간을 가리키는 메모리 주소는 변하지 않으므로 서로 공유하게 된다.</p>
<hr>
<h2 id="객체타입의-깊은복사"><a href="#객체타입의-깊은복사" class="headerlink" title="객체타입의 깊은복사"></a>객체타입의 깊은복사</h2><p>객체타입의 깊은복사는 JSON.parse, JSON.stringify 메서드를 사용하여 구현할 수도 있고 lodash 라는 라이브러리를 사용한다.</p>
<blockquote>
<p>하지만 JSON.stringify 방식으로는 함수(메서드)를 복사할 수 없기 때문에 재귀를 사용하거나 실무에선 라이브러리를 사용한다.</p>
</blockquote>
<h3 id="lodash-방법"><a href="#lodash-방법" class="headerlink" title="lodash 방법"></a>lodash 방법</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">x</span>: &#123; <span class="attr">y</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> c2 = _.<span class="title function_">cloneDeep</span>(o);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체비교</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c2 === o); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c2.<span class="property">x</span> === o.<span class="property">x</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-방법"><a href="#JSON-방법" class="headerlink" title="JSON 방법"></a>JSON 방법</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a));</span><br><span class="line">b.<span class="property">c</span>.<span class="property">d</span> = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &#123; b: 1, c: &#123; d: 2 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// &#123; b: 1, c: &#123; d: 4 &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>자바스크립트 DeepDive 책을 읽으면서 팀원들과 각자 공부한 내용을 말로 풀어서 설명하다보니 내가 무엇이 부족한지 알 수 있었고 내가 모르거나 제대로 알지 못하던 부분을 확실히 알고 이렇게 TIL까지 작성하면서 정리하니 기억에 오래 남을 것 같다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>이터러블과 이터레이터</title>
    <url>/2023/03/03/JavaScript/%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94%EA%B3%BC-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0/</url>
    <content><![CDATA[<h1 id="이터레이션-프로토콜"><a href="#이터레이션-프로토콜" class="headerlink" title="이터레이션 프로토콜"></a>이터레이션 프로토콜</h1><p>ES6에서 도입된 이터레이션 프로토콜은 순회 가능한 데이터 컬렉션을 만들기 위한 규약이다.</p>
<p>즉, ES6 이후부터는 순회 가능한 데이터 컬렉션을 이터레이션 프로토콜 규약을 준수하는 이터러블로 통일하였다.</p>
<h2 id="이터러블-프로토콜"><a href="#이터러블-프로토콜" class="headerlink" title="이터러블 프로토콜"></a>이터러블 프로토콜</h2><p>Symbol.iterator를 프로퍼티 키로 메서드 직접 구현하거나 프로토타입 체인을 통해 상속받은 Symbol.iterator 메서드를 호출 시 이터레이터 프로토콜을 준수한 이터레이터를 반환한다.</p>
<p>위의 규약을 준수한 객체를 이터러블이라고 한다. 이터러블은 다음이 가능하다.</p>
<ul>
<li>for…of 문 순회</li>
<li>spread 문법</li>
<li>배열 디스트럭처링 할당의 대상</li>
</ul>
<blockquote>
<p>일반객체는 Symbol.iterator 메서드를 구현하거나 상속받지 않으므로 이터러블이 아니다.</p>
</blockquote>
<h2 id="이터레이터-프로토콜"><a href="#이터레이터-프로토콜" class="headerlink" title="이터레이터 프로토콜"></a>이터레이터 프로토콜</h2><p>이터러블의 Symbol.iterator 메서드 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다. 이터레이터는 next 메서드를 소유하고 next 메서드 호출 시 이터러블을 순회하며 value와 done 프로퍼티를 갖는 이터레이터 리절트 객체를 반환한다. 이터레이터는 이터러블 요소를 탐색하기 위한 포인터 역할을 한다.</p>
<h1 id="이터레이션-프로토콜의-필요성"><a href="#이터레이션-프로토콜의-필요성" class="headerlink" title="이터레이션 프로토콜의 필요성"></a>이터레이션 프로토콜의 필요성</h1><p>이터러블은 for..of문, 스프레드 문법, 배열 디스트럭처링 할당과 같은 데이터 소비자에 의해 사용되므로 데이터 공급자의 역할을 한다고 볼 수 있다.</p>
<p>다양한 데이터 공급자(Array, String, Map 등)가 이터레이션 프로토콜이라는 하나의 규약만 준수하도록 규정하면 데이터 소비자(for..of, 스프레드 문법 등)는 이터레이션 프로토콜만 지원하도록 구현하면 된다.</p>
<p>즉, 이터레이션 프로토콜은 다양한 데이터 공급자가 <strong>하나의 순회방식을 갖도록 규정</strong>하여 데이터 소비자가 효율적으로 다양한 데이터 공급자를 사용할 수 있도록 <strong>데이터 소비자와 데이터 공급자를 연결하는 인터페이스 역할</strong>을 한다.</p>
<h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>어떤 객체가 Symbol.iterator 메서드를 호출하여 이터레이터 프로토콜을 준수한 이터레이터를 반환한다.</p>
<p>위와 같은 규약을 이터러블 프로토콜이라 하며 이터러블 프로토콜을 준수한 객체를 이터러블이라 한다.</p>
<p>next 메서드를 소유한 이터레이터가 next 메서드 호출하면 이터러블 순회하면서 이터레이터 리절트 객체 반환한다.</p>
<p>위와 같은 규약을 이터레이터 프로토콜이라 하며 이터레이터 프로토콜을 준수한 객체를 이터레이터라고한다.</p>
<ul>
<li>이터레이터 : next 메서드 소유하여 호출시 이터레이터 리절트 객체 반환</li>
<li>이터러블 : Symbol.iterator 메서드를 호출하여 이터레이터 반환</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>프로퍼티와 프로퍼티 어트리뷰트</title>
    <url>/2023/03/03/JavaScript/%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8/</url>
    <content><![CDATA[<h1 id="프로퍼티-어트리뷰트"><a href="#프로퍼티-어트리뷰트" class="headerlink" title="프로퍼티 어트리뷰트"></a>프로퍼티 어트리뷰트</h1><p>오늘은 프로퍼티 어트리뷰트에 대해서 알아보자. 한국말로 번역하면 속성 속성이다. 하지만 자바스크립트에서 속성은 두가지로 구분하여 사용하여야 한다. 이번 시간에는 속성 중 하나인 프로퍼티에 대해 알아보자</p>
<h1 id="내부슬롯-internal-slot"><a href="#내부슬롯-internal-slot" class="headerlink" title="내부슬롯 internal slot"></a>내부슬롯 internal slot</h1><p>내부슬롯과 내부메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 프로퍼티와 메서드이다.</p>
<p>내부슬롯은 개발자가 직접 접근할 수는 없다.</p>
<p>하지만, [[Prototype]] 내부슬롯은 <strong>proto</strong>를 통해 간접적으로 접근할 수 있다.</p>
<h1 id="프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체"><a href="#프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체" class="headerlink" title="프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체"></a>프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체</h1><p>자바스크립트 엔진은 프로퍼티 생성 시 <span style="color:red;">프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트</span>를 기본값으로 자동 정의한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(a).<span class="property">age</span>.<span class="property">value</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &#123;name: &#x27;kim&#x27;, age: 28&#125;</span></span><br></pre></td></tr></table></figure>

<p>프로퍼티 어트리뷰트란 <span style="color:red">내부슬롯</span>이다. 따라서 직접 접근할 순 없지만, Object.getOwnPropertyDescriptor 메서드로 간접적으로 접근할 수 있다.</p>
<p>다만 간접적으로 접근만 가능한 것이므로 위 메서드로 값을 변경하거나 할 수는 없다.</p>
<p>⇒ 프로퍼티 생성될 때 [[value]]는 프로퍼티 값으로 초기화 되고 나머지는 true로 초기화된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	name : <span class="string">&#x27;Lee&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;name&#x27;</span>); <span class="comment">// &#123;value: &#x27;Lee&#x27;, writable:true,... configurable: true&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>프로퍼티 디스크립터 객체를 반환한다. 존재하지 않거나 상속받은 프로퍼티라면 undefined 반환</li>
</ul>
<h2 id="데이터-프로퍼티와-접근자-프로퍼티"><a href="#데이터-프로퍼티와-접근자-프로퍼티" class="headerlink" title="데이터 프로퍼티와 접근자 프로퍼티"></a>데이터 프로퍼티와 접근자 프로퍼티</h2><h3 id="1-데이터-프로퍼티"><a href="#1-데이터-프로퍼티" class="headerlink" title="1. 데이터 프로퍼티"></a>1. 데이터 프로퍼티</h3><p>키와 값으로 구성된 일반적인 프로퍼티</p>
<ul>
<li>프로퍼티의 값 [[value]]</li>
<li>값의 갱신 가능여부 [[writable]] : false이면 프로퍼티의 [[value]]의 값을 변경할 수 없는 읽기 전용 프로퍼티</li>
<li>열거 가능여부 [[enumerable]] : for…in 혹은 Object.keys 메서드로 열거 가능 여부</li>
<li>재정의 가능여부 [[configurable]] : false이면 해당 프로퍼티 삭제, 프로퍼티 어트리뷰트 값의 변경 금지</li>
</ul>
<h3 id="2-접근자-프로퍼티"><a href="#2-접근자-프로퍼티" class="headerlink" title="2. 접근자 프로퍼티"></a>2. 접근자 프로퍼티</h3><p>자체적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티</p>
<ul>
<li>[[get]] : 접근자 프로퍼티 키로 프로퍼티 값에 접근하면 프로퍼티 어트리뷰트 [[get]]의 값 즉, getter 함수가 호출되고 그 결과가 프로퍼티 값으로 반환된다.</li>
<li>[[set]] : 접근자 프로퍼티 키로 프로퍼티 값을 저장하면 프로퍼티 어트리뷰트 [[set]]의 값 즉, setter 함수가 호출되고 그 결과가 프로퍼티 값으로 저장된다.</li>
<li>[[enumerate]]</li>
<li>[[configurable]]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="comment">// 데이터 프로퍼티</span></span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Donald&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Duck&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 함수</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setter 함수</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    [<span class="variable language_">this</span>.<span class="property">firstName</span>, <span class="variable language_">this</span>.<span class="property">lastName</span>] = name.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터 프로퍼티를 통한 프로퍼티 값의 참조</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + person.<span class="property">lastName</span>); <span class="comment">// Donald Duck</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 접근자 프로퍼티를 통한 프로퍼티 값의 저장</span></span><br><span class="line"><span class="comment">// 접근자 프로퍼티 fullName값을 저장하면 setter 함수가 호출</span></span><br><span class="line">person.<span class="property">fullName</span> = <span class="string">&quot;Daisy Duck&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123;firstName: &quot;Daisy&quot;, lastName: &quot;Duck&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 접근자 프로퍼티를 통한 프로퍼티 값의 참조</span></span><br><span class="line"><span class="comment">// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">fullName</span>); <span class="comment">// Daisy Duck</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// firstName은 데이터 프로퍼티</span></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&quot;firstName&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor);</span><br><span class="line"><span class="comment">// &#123;value:&quot;Daisy&quot;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fullName은 접근자 프로퍼티</span></span><br><span class="line">descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&quot;fullName&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor); <span class="comment">// &#123;get: f, set: f, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="접근자-프로퍼티와-데이터-프로퍼티-구분-방법"><a href="#접근자-프로퍼티와-데이터-프로퍼티-구분-방법" class="headerlink" title="접근자 프로퍼티와 데이터 프로퍼티 구분 방법"></a>접근자 프로퍼티와 데이터 프로퍼티 구분 방법</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 일반 객체의 __proto__는 접근자 프로퍼티</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;__proto__&quot;</span>);</span><br><span class="line"><span class="comment">// &#123;get: f, set: f, enumerable: true, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 객체의 prototype은 데이터 프로퍼티</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="string">&quot;prototype&quot;</span>);</span><br><span class="line"><span class="comment">// &#123;value: &#123;...&#125;, writable: true, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>

<p>위 예시는 접근자 프로퍼티의 경우 다음과 같은 프로퍼티 어트리뷰트가 나오고 데이터 프로퍼티의 경우 출력되는 프로퍼티 어트리뷰트가 다른 것을 확인할 수 있다.</p>
<h1 id="프로퍼티-정의"><a href="#프로퍼티-정의" class="headerlink" title="프로퍼티 정의"></a>프로퍼티 정의</h1><p>프로퍼티를 정의한다. 라는 것은 새로운 프로퍼티 추가하면서 프로퍼티 어트리뷰트를 명시적으로 정의하거나 기존 프로퍼티 어트리뷰트를 재정의하는 것을 말한다.</p>
<h2 id="데이터-프로퍼티-정의"><a href="#데이터-프로퍼티-정의" class="headerlink" title="데이터 프로퍼티 정의"></a>데이터 프로퍼티 정의</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;firstName&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;lastName&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Kim&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>Object.defineProperty 메서드로 프로퍼티 어트리뷰트 정의할 수 있다. 인수로는 객체의 참조, 데이터 프로퍼티의 키(문자열), 프로퍼티 디스크립터 객체를 전달한다.</li>
<li>디스크립터 객체 누락시키면 false가 기본값</li>
</ul>
<h3 id="궁금증"><a href="#궁금증" class="headerlink" title="궁금증"></a>궁금증</h3><p>왜 프로퍼티 동적으로 생성해줄 때, 프로퍼티 어트리뷰트 생략하는데 프로퍼티 어트리뷰트값이 true인데, define 메서드를 사용할 때 생략하면 기본값 false?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Kim&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">	<span class="attr">value</span>:<span class="number">19</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">왜 다른가?</span><br></pre></td></tr></table></figure>

<p>동적으로 생성시에 편의를 위해서 true로 설정된다. 그렇지 않은 경우 Object.defineProperty() 메서드를 사용할 때, 생략하는 어트리뷰트는 false로 설정된다.</p>
<h3 id="writable-false"><a href="#writable-false" class="headerlink" title="writable : false"></a>writable : false</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [[writable]] 값이 false 인 경우 해당 프로퍼티의 [[value]]의 값 변경할 수 없다.</span></span><br><span class="line"><span class="comment">// 에러 발생하지 않고 무시</span></span><br><span class="line">person.<span class="property">lastName</span> = <span class="string">&quot;soondae&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="enumerable-false"><a href="#enumerable-false" class="headerlink" title="enumerable : false"></a>enumerable : false</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [[enumerable]] 값이 false 인 경우 해당 프로퍼티는 for...in 문이나 Object.keys 등으로 열거할 수 없다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person)); <span class="comment">// [&#x27;firstName&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="configurable-false"><a href="#configurable-false" class="headerlink" title="configurable : false"></a>configurable : false</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [[configurable]] 값이 false 인 경우 해당 프로퍼티를 삭제할 수 없다.</span></span><br><span class="line"><span class="comment">// 삭제해도 에러없이 무시된다.</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">lastName</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 또한, 해당 프로퍼티를 재정의 할 수도 없다.</span></span><br><span class="line"><span class="comment">// Object.defineProperty(person, &#x27;lastName&#x27;, &#123; enumerable : true &#125;);</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: Cannot redefine property: firstName</span></span><br></pre></td></tr></table></figure>

<h2 id="접근자-프로퍼티-정의"><a href="#접근자-프로퍼티-정의" class="headerlink" title="접근자 프로퍼티 정의"></a>접근자 프로퍼티 정의</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;fullName&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// getter 함수</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// setter 함수</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    [<span class="variable language_">this</span>.<span class="property">firstName</span>, <span class="variable language_">this</span>.<span class="property">lastName</span>] = name.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person.<span class="property">fullName</span> = <span class="string">&quot;yoonju hong&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123;firstName: &#x27;yoonju&#x27;, lastName: &#x27;Kim&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>lastName은 writable이 false여서 값이 안바뀌는 것을 볼 수 있다.</li>
</ul>
<h1 id="객체-변경-방지"><a href="#객체-변경-방지" class="headerlink" title="객체 변경 방지"></a>객체 변경 방지</h1><p>객체 변경을 방지하는 메서드를 제공한다. 종류에 따라 금지하는 강도가 다르다.</p>
<p>직속 프로퍼티만 방지(얕은 방지)</p>
<table>
<thead>
<tr>
<th>구분</th>
<th>메서드</th>
<th>프로퍼티 추가</th>
<th>삭제</th>
<th>값 읽기</th>
<th>값 쓰기</th>
<th>프로퍼티 어트리뷰트 재정의</th>
</tr>
</thead>
<tbody><tr>
<td>객체 확장 금지</td>
<td>Object.preventExtensions</td>
<td>X</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>O</td>
</tr>
<tr>
<td>객체 밀봉</td>
<td>Object.seal</td>
<td>X</td>
<td>X</td>
<td>O</td>
<td>O</td>
<td>X (configurable : false)</td>
</tr>
<tr>
<td>객체 동결</td>
<td>Object.freeze</td>
<td>X</td>
<td>X</td>
<td>O</td>
<td>X (writable : false)</td>
<td>X (configurable : false)</td>
</tr>
</tbody></table>
<p>객체 확장 금지 확인 메서드 - Object.isExtensible( ) false면 확장 금지된 객체</p>
<p>객체 밀봉 확인 메서드 - Object.isSealed( ) true면 밀봉된 객체</p>
<p>객체 동결 메서드 - Object.isFrozen( ) true면 동결된 객체</p>
<p>깊은 방지를 구현하려면 재귀적으로 객체 값을 갖는 모든 프로퍼티에 대해 Object.freeze 메서드를 호출해야한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepFreeze</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 객체가 아니거나 동결된 객체는 무시하고 객체이고 동결되지 않는 객체만 동결</span></span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; <span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span> &amp;&amp; !<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(target)) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">freeze</span>(target);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(target).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> <span class="title function_">deepFreeze</span>(target[key]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123; <span class="attr">city</span>: <span class="string">&quot;Seoul&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 깊은 객체 동결</span></span><br><span class="line"><span class="title function_">deepFreeze</span>(person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person.<span class="property">address</span>));</span><br><span class="line"></span><br><span class="line">person.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;Busan&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>함수</title>
    <url>/2023/03/03/JavaScript/%ED%95%A8%EC%88%98/</url>
    <content><![CDATA[<h1 id="Function-함수"><a href="#Function-함수" class="headerlink" title="Function 함수"></a>Function 함수</h1><p>오늘은 자바스크립트의 함수에 대해 공부해보자.</p>
<p>자바스크립트에서 함수란, 코드블록으로 일련의 문(statement)을 감싸서 하나의 실행 단위로 정의한 것이다.</p>
<blockquote>
<p>함수를 목적에 맞게 사용하기 위해서는 함수이름, 매개변수, 인자 등을 알맞게 설정해줘야한다. 그렇지 않게 사용하는 것은 지양한다.</p>
</blockquote>
<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>함수를 사용하는 목적은 필요할 때마다 호출하여 일련의 코드들을 재사용하기 위해 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">returnRank</span>(<span class="params">name, tall</span>) &#123;</span><br><span class="line">  <span class="comment">// 이름과 키라는 매개변수를 통해 순위를 반환해주는 함수</span></span><br><span class="line">  <span class="keyword">return</span> rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100번째 줄</span></span><br><span class="line"><span class="title function_">returnRank</span>(<span class="string">&quot;yiju&quot;</span>, <span class="number">188</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 300번째 줄</span></span><br><span class="line"><span class="title function_">returnRank</span>(<span class="string">&quot;kim&quot;</span>, <span class="number">160</span>);</span><br></pre></td></tr></table></figure>

<p>위와 같이 하나의 로직을 여러 곳에서 재사용하고 싶을 때 함수를 사용하면 함수 이름으로 <span style="color:red">가독성</span>도 높아지고 100번째 줄이나 300번째 줄에서 코드가 문제가 발생했을 경우 returnRank 함수가 선언된 부분만 유지보수를 해주면 되기 때문에 <span style="color:red">유지보수</span>가 간편해진다.</p>
<blockquote>
<p>단, 함수는 목적에 맞게 가급적 작게 만들고 매개변수도 3개를 넘지 않도록 만들 것을 지향한다.</p>
</blockquote>
<hr>
<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>함수를 정의하는 방식은 4가지 방식이 있다.</p>
<ul>
<li>함수 선언문</li>
<li>함수 표현식</li>
<li>Function 생성자 함수</li>
<li>화살표 함수(ES6)</li>
</ul>
<p>기본적인 함수 선언문과 함수 표현식에 대해 알아보자</p>
<blockquote>
<p>자바스크립트에서 변수를 선언하면 암묵적으로 정의가 이뤄지기 때문에 선언과 정의가 모호하다.(MDN에서도 모호..) 위에서 함수 선언문이 평가되면 식별자가 암묵적으로 생성되고 함수 객체가 할당된다. 그렇기 때문에 “함수는 정의된다”로 표현한다. C언어에서 정의는 변수에 값을 할당하여 변수의 실체를 명확히 하는 것이다. 즉, 메모리 주소가 연결되면 정의라고 판단)</p>
</blockquote>
<h3 id="함수-리터럴"><a href="#함수-리터럴" class="headerlink" title="함수 리터럴"></a>함수 리터럴</h3><p>리터럴은 문자나 약속된 기호를 사용하여 값을 생성하는 표기법이다. 함수로 함수 리터럴을 사용하여 값을 생성할 수 있다. 함수 리터럴은 다음으로 구성되어 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>function 키워드</li>
<li>함수 이름 (add) <b>함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자</b></li>
<li>매개변수 목록 (x,y)</li>
<li>함수 몸체({})</li>
</ul>
<h3 id="함수-선언문"><a href="#함수-선언문" class="headerlink" title="함수 선언문"></a>함수 선언문</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 함수 선언문</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 호출 (함수이름과 똑같은 식별자를 사용)</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>함수 선언문은 표현식이 아닌 문이다.</li>
<li>함수 선언문은 함수 이름을 생략할 수 없다.</li>
</ul>
<p>앞서 언급했듯이 함수 이름은 함수 몸체 내에서만 참조 가능하다. 그렇다면 함수를 호출하려면 어떻게 할 수 있을까?</p>
<p>함수 선언문으로 사용되면 자바스크립트 엔진이 <b>암묵적</b>으로 함수 이름과 똑같은 식별자를 생성하고 함수 객체를 할당한다.</p>
<h3 id="함수-표현식"><a href="#함수-표현식" class="headerlink" title="함수 표현식"></a>함수 표현식</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 함수 표현식</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 호출 (함수 이름으로 호출)</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>자바스크립트 함수는 객체타입의 값이기 때문에 변수에 할당하거나 프로퍼티의 값으로 될 수 있고 배열과 같은 자료구조의 요소가 될 수 있다.</p>
<p>이러한 성질 때문에 자바스크립트 함수는 <span style="color:red">일급객체</span>다.</p>
<ul>
<li>함수 표현식은 함수 이름 생략하는 것이 일반적이다.</li>
<li>함수 표현식은 표현식인 문이다. 즉, 값처럼 사용할 수 있다. ex)변수할당</li>
</ul>
<hr>
<h2 id="중의적-코드-기명-함수-리터럴"><a href="#중의적-코드-기명-함수-리터럴" class="headerlink" title="중의적 코드 : 기명 함수 리터럴"></a>중의적 코드 : 기명 함수 리터럴</h2><p>함수 선언문은 함수 이름을 생략할 수 없으며 표현식이 아닌 문이므로 변수에 할당할 수 없다. 그러면 아래의 코드는 어떻게 동작할지 예상해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 기명 함수 리터럴 단독 사용 문맥 =&gt; 함수 선언문으로 해석</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수에 할당하는 문맥 =&gt; 함수 리터럴 표현식으로 해석</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 피연산자로 사용되는 문맥 =&gt; 함수 리터럴 표현식으로 해석</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// ReferenceError : bar is not defined</span></span><br></pre></td></tr></table></figure>

<p>위 코드에서는 함수 선언문이 변수에 할당된 것처럼 보인다. 이게 어떻게 가능할까?</p>
<p>우리는 블록문 {}에서 앞서 중의적 표현과 문맥에 대해 다룬 적이 있다.</p>
<p>자바스크립트 엔진이 {}를 객체 리터럴로 인지할 것인지, 아니면 코드 블록문으로 인지할 것인지는 <strong style="font-size:1.5rem">문맥</strong>에 따라 다르게 결정된다.</p>
<p>이와 같이 기명 함수 리터럴도 중의적인 코드이므로 문맥에 따라 해석이 달라질 수 있다. 다음은 자바스크립트 엔진이 기명 함수 리터럴을 해석하는 방식이다.</p>
<ol>
<li><p>기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석</p>
</li>
<li><p>함수 리터럴이 값으로 평가되어야 하는 문맥, 예시처럼 변수에 할당하거나 피연산자로 사용하면 함수 리터럴 표현식으로 해석한다.</p>
</li>
</ol>
<p>() 그룹 연산자 안에서 기명 함수 리터럴은 함수 리터럴 표현식으로 해석된다.</p>
<p>함수 리터럴에서 함수 이름은 함수 몸체 내부에서만 참조가능하기 때문에 외부에서 함수이름으로 호출시 에러 발생</p>
<blockquote>
<p>함수 선언문의 경우 함수이름으로 암묵적으로 식별자를 생성하여 객체를 할당해주기 때문에 함수 이름으로 호출 가능</p>
</blockquote>
<hr>
<h2 id="함수-선언문-vs-함수-표현식"><a href="#함수-선언문-vs-함수-표현식" class="headerlink" title="함수 선언문 vs 함수 표현식"></a>함수 선언문 vs 함수 표현식</h2><p>함수 선언문과 함수 표현식은 <strong>생성 시점</strong>이 다르다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add); <span class="comment">// ƒ add(x, y) &#123;return x + y;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sub); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 선언문</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 표현식</span></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>함수 선언문 : 모든 선언문이 런타임 이전에 JS엔진에 먼저 실행된다. 즉, 암묵적으로 함수 이름과 동일한 식별자를 생성하여 함수 객체를 할당한다. <span style="color:red">함수 호이스팅</span></p>
</li>
<li><p>함수 표현식 : 변수 선언 부분은 변수 호이스팅이 발생하여 undefined로 초기화되고 변수 할당문은 런타임에서 평가되어 함수 객체로 할당된다.</p>
</li>
</ul>
<hr>
<h2 id="함수호출"><a href="#함수호출" class="headerlink" title="함수호출"></a>함수호출</h2><p>일반 객체와 함수가 다른점은 함수는 호출을 할 수 있다는 것이다. 호출과 참조는 다르다. 호출은 실행흐름을 바꾸기도 하며 코드문들의 결과값을 반환해준다.</p>
<p>() 함수 호출 연산자를 사용하여 함수를 호출할 수 있다. 그러면 실행흐름이 함수로 옮겨지고 return 키워드를 만나게되면 그 즉시 함수 실행을 종료하고 return 키워드 우측 표현식에 대한 값을 반환한다.</p>
<blockquote>
<p>return 키워드 다음 행의 문들은 무시된다. return 키워드 다음에 개행하여 코드를 작성하면 자동 세미콜론 삽입 기능에 의해 큰 오류를 발생시킬 수 있다.</p>
</blockquote>
<h3 id="인수"><a href="#인수" class="headerlink" title="인수"></a>인수</h3><p>함수를 호출할 때 매개변수에 들어갈 인수를 전달해줘야한다. 하지만 인수가 매개변수보다 적거나 많더라도 오류를 발생시키지 않는다.</p>
<ul>
<li>매개변수보다 인수를 적게 전달할 경우 부족한 매개변수는 undefined 처리된다.</li>
<li>매개변수보다 인수가 많아도 오류 발생 시키지 않는다. 단, 모든 인수는 arguments 객체의 프로퍼티로 보관된다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y = <span class="number">0</span>,z</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, ,<span class="number">5</span>); <span class="comment">// X</span></span><br></pre></td></tr></table></figure>

<p>중간에 y값의 매개변수를 생략하고 싶어서 공백으로 둬서 호출할 수 없다.</p>
<p>만약 인자를 순서를 신경쓰지 않고 전달해주고 싶다면 객체를 인자로 전달해주면 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/user&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>단, 함수 내부에서 객체를 변경하게 되면 참조값으로 복사되었기 때문에 <span style="color:red">함수 외부의 객체가 변경되는 부수효과</span>가 발생할 수 있으니 주의해야한다.</p>
<hr>
<h2 id="순수함수와-비순수함수"><a href="#순수함수와-비순수함수" class="headerlink" title="순수함수와 비순수함수"></a>순수함수와 비순수함수</h2><p>외부 상태에 의존하거나 참조하거나 즉, 부수효과가 없는 함수를 순수함수라고 하고 그렇지 않은 함수를 비순수함수라고 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 함수는 a,b 매개변수가 함수 내부로 전달되어도 외부 변수 x의 값이 변경되면 결과값이 달라지기 때문에 순수함수가 아니다.</p>
<p>순수함수는 오직 매개변수만을 통해 함수 내부로 전달된 인수에게만 의존하여 값을 생성해 반환한다. <span style="color:red">전달받은 인수는 변경하지 않는다.</span></p>
<blockquote>
<p>하지만 우리가 순수함수만으로 프로그래밍을 하는 것은 불가능하다. 함수형 프로그래밍은 반복문, 조건문을 제거하여 복잡성을 해결하고 전역 변수 사용을 억제 및 생명주기 최소화하여 상태변경을 최소화하는 것을 목표로 하기 때문에 순수함수만을 사용하는 것은 옳지 않다.</p>
</blockquote>
<h3 id="콜백함수"><a href="#콜백함수" class="headerlink" title="콜백함수"></a>콜백함수</h3><p>함수의 매개변수를 통해 함수 내부로 전달되는 함수를 콜백함수라고 한다. 또한 콜백함수를 매개변수를 통해 받은 함수는 고차함수라고 한다.</p>
<p>콜백함수는 함수 외부에서 고차함수 내부로 주입하기 때문에 자유롭게 교체가 가능하고 경우에 따라 변경되는 로직을 가진 외부 함수를 내부로 전달할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 외부에서 전달받은 f를 n만큼 반복호출</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">repeat</span>(<span class="params">n, f</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="title function_">f</span>(i); <span class="comment">// i를 전달하면서 f를 호출</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logAll = <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">repeat</span>(<span class="number">5</span>, logAll); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logOdds = <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">repeat</span>(<span class="number">5</span>, logOdds); <span class="comment">// 1 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>콜백함수를 전달할 때에는 콜백함수를 호출하지 않고 함수 전달만 해야한다.</li>
</ul>
<p><strong style="font-size:1.5rem">콜백함수는 비순수함수인가?</strong></p>
<p>“앞서 함수 내부에서 외부 상태를 직접 참조하지 않더라도 매개변수를 통해 <span style="color:red">객체</span>를 전달받으면 비순수함수가 된다.”</p>
<p>&#x3D;&gt; 맞다 콜백함수도 비순수 함수이다. 나중에 addEventListener 함수도 콜백함수를 매개변수로 받아 DOM을 조작하는 것도 배울 텐데 DOM을 조작한다는 것 자체가 비순수함수가 되는 것이다. 다시말해 순수함수만으로 코드를 짜는것은 불가능하다.</p>
<hr>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>모던 자바스크립트 12장 함수 파트를 읽으면서 함수 정의와 목적에 대해 배웠고 그동안 무의식적으로 사용했던 함수 이름을 통한 호출에 대해 이유를 알게되어 재밌었다.</p>
<p>코드 맥락에 맞게 자바스크립트 엔진이 해석하는게 달라질 수 있다는 점과 콜백함수와 순수, 비순수 함수에 대해 제대로 알고 넘어갈 수 있어 좋았다.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Babel</title>
    <url>/2022/10/29/Settings/Babel/</url>
    <content><![CDATA[<h1 id="📌-babel"><a href="#📌-babel" class="headerlink" title="📌 babel"></a>📌 babel</h1><p>Babel은 자바스크립트 컴파일러로 아래의 역할을 하여 브라우저 호환 문제를 해결한다.</p>
<ul>
<li>구문 변환</li>
<li>대상 환경에 누락된 폴리필 기능</li>
<li>소스 코드 변환</li>
</ul>
<span id="more"></span>

<blockquote>
<p>Polyfill이란, 구멍난 벽을 충전해주는 솜을 말한다. 프로그래밍에서는 babel이 globalThis와 같이 모든 것을 컴파일 해주지 못하므로 이 때, core-js라는 폴리필 기능을 사용한다.</p>
</blockquote>
<h2 id="컴파일러-vs-트랜스파일러"><a href="#컴파일러-vs-트랜스파일러" class="headerlink" title="컴파일러 vs 트랜스파일러"></a>컴파일러 vs 트랜스파일러</h2><ol>
<li>컴파일러</li>
</ol>
<p>한 언어로 작성된 코드를 다른 언어로 변환해주는 역할을 한다.</p>
<ol start="2">
<li>트랜스파일러</li>
</ol>
<p>한 언어로 작성된 코드를 비슷한 수준의 추상화를 가진 다른 언어로 변환해주는 역할을 한다.</p>
<p>위키피디아에 따르면, 컴파일러가 트랜스파일러보다 큰 범주에 속해있다고 한다.</p>
<h2 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h2><ol>
<li>별도의 build 시스템이 없기 때문에 built-in을 사용하여 패키지를 설치한다.</li>
</ol>
<p><code>$npm i -D @babel/core @babel/cli @babel/preset-env</code></p>
<ol start="2">
<li>babel 구성파일 설정</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">comments</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="string">&quot;3.26.0&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>useBuiltIns 옵션은 폴리필을 처리하는 방법을 구성한다. usage 옵션값을 사용하기 위해 core-js 3버전을 설치해야한다.</p>
<p><code>$npm i core-js@3</code></p>
<p>babel 구성파일에 target을 설정해줄 수 있는데, 이 때 target은 어떤 브라우저까지 호환되도록 할지 범위를 정해주는 기준이 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .browserslistrc</span></span><br><span class="line">&gt; <span class="number">0.25</span>% <span class="keyword">in</span> <span class="variable constant_">KR</span></span><br><span class="line">last <span class="number">2</span> versions</span><br><span class="line">node &gt; <span class="number">16</span></span><br><span class="line">ie <span class="number">9</span>-<span class="number">11</span></span><br></pre></td></tr></table></figure>

<p>target은 .browserslistrc 파일로 관리하는 것이 편리하다.</p>
<ul>
<li>ie 11 : 인터넷 익스플로러 11만</li>
<li>last 2 versions : 최신 브라우저와 그 이전버전까지</li>
<li>last 2 node versions : node 최신버전과 그 이전버전까지</li>
<li>not dead : 업데이트가 종료되지 않은</li>
</ul>
<p>자세한 정보를 아래 사이트를 참고</p>
<p><a href="https://browsersl.ist/">https://browsersl.ist/</a></p>
<ol start="3">
<li>package.json에 명령어 등록</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&quot;compile&quot;</span>: <span class="string">&quot;cross-var babel $npm_package_config_file_input -o $npm_package_config_file_output&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compile:dir&quot;</span>: <span class="string">&quot;cross-var babel $npm_package_config_folder_input -d $npm_package_config_folder_output&quot;</span>,</span><br><span class="line">        <span class="string">&quot;watch:compile&quot;</span>: <span class="string">&quot;npm run compile -- --watch&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>파일을 compile 해줄 수 있고 폴더를 compile 해줄 수 있다.<br>watch 옵션 추가하면 파일이 변경되어 저장될 때마다 compile 자동 수행한다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>babel, webpack은 자주 사용하지 않으니 제대로 알아두면 편할 것 같다. 자세한 설정들은 babel 공식문서를 참고하도록 하자.</p>
]]></content>
      <categories>
        <category>Settings</category>
      </categories>
  </entry>
  <entry>
    <title>ESLint와 Prettier 설정</title>
    <url>/2022/11/05/Settings/ESLint%EC%99%80-Prettier-%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="📌-ESLint-Prettier란"><a href="#📌-ESLint-Prettier란" class="headerlink" title="📌 ESLint, Prettier란?"></a>📌 ESLint, Prettier란?</h1><p>ESLint는 vscode에서 코드를 작성하다가 문법적으로 오류가 발생한 곳을 사전에 미리 알려주는 도구이며, prettier는 ESLint가 알려준 오류를 즉각 고쳐주는 도구이다.</p>
<h2 id="🔨-Prettier-사용-방법"><a href="#🔨-Prettier-사용-방법" class="headerlink" title="🔨 Prettier 사용 방법"></a>🔨 Prettier 사용 방법</h2><p>프리티어 패키지를 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D prettier</span><br></pre></td></tr></table></figure>

<h3 id="프리티어-구성-파일"><a href="#프리티어-구성-파일" class="headerlink" title="프리티어 구성 파일"></a>프리티어 구성 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.cjs</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 화살표 함수 식 매개변수 () 생략 여부 (ex: (a) =&gt; a)</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">  <span class="comment">// 닫는 괄호(&gt;) 위치 설정</span></span><br><span class="line">  <span class="comment">// ex: &lt;div</span></span><br><span class="line">  <span class="comment">//       id=&quot;unique-id&quot;</span></span><br><span class="line">  <span class="comment">//       class=&quot;contaienr&quot;</span></span><br><span class="line">  <span class="comment">//     &gt;</span></span><br><span class="line">  <span class="attr">htmlWhitespaceSensitivity</span>: <span class="string">&quot;css&quot;</span>,</span><br><span class="line">  <span class="attr">bracketSameLine</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 객체 표기 괄호 사이 공백 추가 여부 (ex: &#123; foo: bar &#125;)</span></span><br><span class="line">  <span class="attr">bracketSpacing</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 행폭 설정 (줄 길이가 설정 값보다 길어지면 자동 개행)</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="comment">// 산문 래핑 설정</span></span><br><span class="line">  <span class="attr">proseWrap</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">  <span class="comment">// 객체 속성 key 값에 인용 부호 사용 여부 (ex: &#123; &#x27;key&#x27;: &#x27;xkieo-xxxx&#x27; &#125;)</span></span><br><span class="line">  <span class="attr">quoteProps</span>: <span class="string">&quot;as-needed&quot;</span>,</span><br><span class="line">  <span class="comment">// 세미콜론(;) 사용 여부</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 싱글 인용 부호(&#x27;) 사용 여부</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 탭 너비 설정</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 객체 마지막 속성 선언 뒷 부분에 콤마 추가 여부</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">  <span class="comment">// 탭 사용 여부</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>추가적인 부분은 공식문서를 참고하면 된다.</li>
</ul>
<h3 id="프리티어-제외-파일"><a href="#프리티어-제외-파일" class="headerlink" title="프리티어 제외 파일"></a>프리티어 제외 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .prettierignore</span></span><br><span class="line">dist;</span><br><span class="line">build;</span><br><span class="line">coverage;</span><br></pre></td></tr></table></figure>

<h2 id="🔨-ESLint-사용방법"><a href="#🔨-ESLint-사용방법" class="headerlink" title="🔨 ESLint 사용방법"></a>🔨 ESLint 사용방법</h2><p>ESLint 설치 및 초기화</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init @eslint/config</span><br></pre></td></tr></table></figure>

<h3 id="ESLint-구성-파일"><a href="#ESLint-구성-파일" class="headerlink" title="ESLint 구성 파일"></a>ESLint 구성 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintre.cjs</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:react/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:react/jsx-runtime&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">settings</span>: &#123;</span><br><span class="line">    <span class="attr">react</span>: &#123; <span class="attr">version</span>: <span class="built_in">require</span>(<span class="string">&quot;react/package.json&quot;</span>).<span class="property">version</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/no-var-requires&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="ESLint-플러그인"><a href="#ESLint-플러그인" class="headerlink" title="ESLint 플러그인"></a>ESLint 플러그인</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D eslint-plugin-react-hooks eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure>

<p>React 개발에 필요한 패키지와 프리티어 구성 통합을 위한 패키지를 설치한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.cjs</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:react/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:react/jsx-runtime&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:jsx-a11y/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prettier&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;@typescript-eslint&quot;</span>, <span class="string">&quot;jsx-a11y&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>역시 ESLint 제외파일도 지정할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintignore</span></span><br><span class="line">dist;</span><br><span class="line">build;</span><br><span class="line">coverage;</span><br></pre></td></tr></table></figure>

<h1 id="📌-저장할-때-prettier-자동으로-조절해주기"><a href="#📌-저장할-때-prettier-자동으로-조절해주기" class="headerlink" title="📌 저장할 때, prettier 자동으로 조절해주기"></a>📌 저장할 때, prettier 자동으로 조절해주기</h1><p><strong><code>vscode에서 Code - Preferences - settings - default formatter - prettier로 설정</code></strong></p>
]]></content>
      <categories>
        <category>Settings</category>
      </categories>
  </entry>
  <entry>
    <title>homebrew</title>
    <url>/2022/10/29/Settings/homebrew/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h1><p>mac, Linux에서 제공하지 않는 패키지를 설치할 수 있도록 도와주는 패키지 관리자이다. without requiring sudo.</p>
<h2 id="사용하는-이유"><a href="#사용하는-이유" class="headerlink" title="사용하는 이유"></a>사용하는 이유</h2><p>Homebrew 전용 디렉터리에 패키지들을 설치하여 관리한다.</p>
<p>macOS에서 앱, 폰트, 플러그인, 오픈소스 등의 설치를 위해 여기로 끌어다 놓으세요.. 라는 행동을 할 필요가 없다.</p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p><code>$brew install wget</code></p>
<p>이제 Cli 환경에서 brew를 사용하여 프로그램을 설치할 수 있다.</p>
<p>ex) git설치 - $brew install git</p>
]]></content>
      <categories>
        <category>Settings</category>
      </categories>
  </entry>
  <entry>
    <title>loader(로더) 설정하기</title>
    <url>/2022/11/05/Settings/loader-%EB%A1%9C%EB%8D%94-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="📌-Loader-로더-란"><a href="#📌-Loader-로더-란" class="headerlink" title="📌 Loader(로더)란?"></a>📌 Loader(로더)란?</h1><p>webpack은 기본적으로 Javascript, JSON 파일만 해석할 수 있다.</p>
<p>webpack이 로더를 사용하여 번들링 할 때에 다른 타입의 파일을 처리하거나 유효한 모듈로 변환하여 애플리케이션에서 사용할 수 있도록 도와준다.</p>
<span id="more"></span>

<p>Loader는 기본적으로 2가지 속성을 가진다.</p>
<ol>
<li><p>변환이 필요한 파일을 식별하는 <code>test</code> 속성</p>
</li>
<li><p>변환을 수행하는데 사용되는 로더를 지칭하는 <code>use</code> 속성</p>
</li>
</ol>
<h2 id="🔨-Babel-로더-설치"><a href="#🔨-Babel-로더-설치" class="headerlink" title="🔨 Babel 로더 설치"></a>🔨 Babel 로더 설치</h2><p>JSX, ECMAScript 구문을 해석하는데 필요한 코어, 프리셋 패키지, Webpack 로더를 프로젝트에 설치합니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i -D babel-loader @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure>

<h3 id="Babel-config-구성-파일"><a href="#Babel-config-구성-파일" class="headerlink" title="Babel config(구성) 파일"></a>Babel config(구성) 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;@babel/preset-react&quot;</span>, &#123; <span class="attr">runtime</span>: <span class="string">&quot;automatic&quot;</span> &#125;],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Babel-로더-설정"><a href="#Babel-로더-설정" class="headerlink" title="Babel 로더 설정"></a>Babel 로더 설정</h3><p>webpack에게 <code>babel-loader</code>를 사용할 수 있게한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/common.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&quot;node:path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commonConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> commonConfig;</span><br></pre></td></tr></table></figure>

<ul>
<li>JSX라는 확장자를 갖는 파일들을 <strong>webpack이 번들링 할 때, <code>babel-loader</code>가 JSX 파일을 컴파일 해줄 수 있다.</strong></li>
<li>babel 뿐만아니라 ESbuil로더,CSS 모듈 로더 등 다양한 로더를 사용할 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>Settings</category>
      </categories>
  </entry>
  <entry>
    <title>Snippets</title>
    <url>/2022/10/29/Settings/snippets/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h1><p>코드를 작성하다가 재사용되는 코드가 있다면 snippet으로 등록하여 간단한 단축키로 입력하여 코드의 생산성을 높힐 수 있다.</p>
<h2 id="snippets-generator-app"><a href="#snippets-generator-app" class="headerlink" title="snippets-generator.app"></a>snippets-generator.app</h2><p>아래 사이트는 snippets을 Editor에 맞게 쉽게 양식을 설정해주는 사이트이다.</p>
<p><a href="https://snippet-generator.app/">https://snippet-generator.app/</a></p>
<h2 id="설정-방법"><a href="#설정-방법" class="headerlink" title="설정 방법"></a>설정 방법</h2><p>vscode 명령 팔레트를 실행하여 configuration snippets를 들어간다.</p>
<p>원하는 언어 환경을 선택하고 파일을 만들어서 위 사이트에서 양식을 붙여넣어주면 된다. 이 때, 글로벌 환경에서 사용하고 싶다면 글로벌 환경으로 설정하고 파일을 만들어서 하면 된다.</p>
<h2 id="관리"><a href="#관리" class="headerlink" title="관리"></a>관리</h2><p>snippets 관리는 extension을 사용하여 편리하게 관리할 수 있다.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=robole.snippets-ranger">https://marketplace.visualstudio.com/items?itemName=robole.snippets-ranger</a></p>
]]></content>
      <categories>
        <category>Settings</category>
      </categories>
  </entry>
  <entry>
    <title>webpack 설정하기</title>
    <url>/2022/11/05/Settings/webpack-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="📌-webpack-이란"><a href="#📌-webpack-이란" class="headerlink" title="📌 webpack 이란?"></a>📌 webpack 이란?</h1><p>모듈로 관리하는 파일들을 번들링 해주는 툴이다.</p>
<h2 id="🔨-사용방법"><a href="#🔨-사용방법" class="headerlink" title="🔨 사용방법"></a>🔨 사용방법</h2><h3 id="명령어-환경-구성"><a href="#명령어-환경-구성" class="headerlink" title="명령어 환경 구성"></a>명령어 환경 구성</h3><p>Webpack 모듈 번들러를 명령어 환경에서 사용하기 위해 webpack, webpack-cli를 설치합니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i -D webpack webpack-cli</span><br></pre></td></tr></table></figure>

<h3 id="번들-명령어-등록"><a href="#번들-명령어-등록" class="headerlink" title="번들 명령어 등록"></a>번들 명령어 등록</h3><p>package.json 파일에 webpack 번들링을 수행하는 bundle 명령을 등록합니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack:config&quot;</span>: <span class="string">&quot;webpack --target=browserslist --entry=./src/main.js --output-path=public&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack:dev&quot;</span>: <span class="string">&quot;npm run webpack:config -- --mode=development&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack:prod&quot;</span>: <span class="string">&quot;npm run webpack:config -- --mode=production&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>entry 폴더와 output 폴더 경로를 지정해주면 된다.</li>
<li>dev는 개발환경 번들링 작업을 위한 명령이고 prod는 배포환경을 위한 번들링 작업이다. <bold>prod의 결과물은 배포 최적화되어 있다.</bold></li>
<li>target 속성은 어떤 브라우저 환경을 대상으로 번들링할 것인지를 명시해주는 것이다. <bold>프로젝트 루트 위치에 <code>.browserslistrc</code> 파일을 생성한다.</bold></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 0.5% in KR</span><br><span class="line">last 2 versions</span><br><span class="line">not dead</span><br><span class="line">ie 11</span><br></pre></td></tr></table></figure>

<h3 id="명령-실행"><a href="#명령-실행" class="headerlink" title="명령 실행"></a>명령 실행</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> run webpack:dev</span><br><span class="line"></span><br><span class="line"><span class="variable">$npm</span> run webpack:prod</span><br></pre></td></tr></table></figure>

<h2 id="🔨-Webpack-구성-파일"><a href="#🔨-Webpack-구성-파일" class="headerlink" title="🔨 Webpack 구성 파일"></a>🔨 Webpack 구성 파일</h2><p>기본적인 구성으로도 번들링 훌륭하지만 복잡한 구성을 위해서 구성파일을 별도로 작성해 관리하는 것이 좋습니다.</p>
<h3 id="공통-구성-파일"><a href="#공통-구성-파일" class="headerlink" title="공통 구성 파일"></a>공통 구성 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/common.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&quot;node:path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commonConfig = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;browserslist&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/main.js&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(<span class="string">&quot;public&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> commonConfig;</span><br></pre></td></tr></table></figure>

<h3 id="개발-구성-파일"><a href="#개발-구성-파일" class="headerlink" title="개발 구성 파일"></a>개발 구성 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/dev.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; merge &#125; <span class="keyword">from</span> <span class="string">&quot;webpack-merge&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> commonConfig <span class="keyword">from</span> <span class="string">&quot;./common.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> devConfig = <span class="title function_">merge</span>(commonConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;eval-cheap-source-map&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> devConfig;</span><br></pre></td></tr></table></figure>

<h3 id="빌드-구성-파일"><a href="#빌드-구성-파일" class="headerlink" title="빌드 구성 파일"></a>빌드 구성 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/prod.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; merge &#125; <span class="keyword">from</span> <span class="string">&quot;webpack-merge&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> commonConfig <span class="keyword">from</span> <span class="string">&quot;./common.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prodConfig = <span class="title function_">merge</span>(commonConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    ...commonConfig.<span class="property">output</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].min.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> prodConfig;</span><br></pre></td></tr></table></figure>

<h3 id="개발-빌드-명령-등록"><a href="#개발-빌드-명령-등록" class="headerlink" title="개발, 빌드 명령 등록"></a>개발, 빌드 명령 등록</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bundle&quot;</span>: <span class="string">&quot;webpack bundle -c webpack/dev.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack build --progress -c webpack/prod.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 기본 webpack 구성이 아닌 직접 생성한 파일을 통해서 번들링 작업을 해줄 수 있다.</p>
<h2 id="🔨-Webpack-개발-서버-구성"><a href="#🔨-Webpack-개발-서버-구성" class="headerlink" title="🔨 Webpack 개발 서버 구성"></a>🔨 Webpack 개발 서버 구성</h2><p>Webpack 전용 개발 서버를 구동하기위해 패키지를 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> i -D webpack-dev-server</span><br></pre></td></tr></table></figure>

<h3 id="서버-구성-파일"><a href="#서버-구성-파일" class="headerlink" title="서버 구성 파일"></a>서버 구성 파일</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/server.js</span></span><br><span class="line"><span class="keyword">const</span> devServer = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">liveReload</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">static</span>: [<span class="string">&quot;public&quot;</span>],</span><br><span class="line">  <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">client</span>: &#123;</span><br><span class="line">    <span class="attr">logging</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">    <span class="attr">overlay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">reconnect</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watchFiles</span>: &#123;</span><br><span class="line">    <span class="attr">paths</span>: [<span class="string">&quot;src/**/*.*&quot;</span>, <span class="string">&quot;public/**/*.*&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> devServer;</span><br></pre></td></tr></table></figure>

<h3 id="서버-구성-파일-불러오기"><a href="#서버-구성-파일-불러오기" class="headerlink" title="서버 구성 파일 불러오기"></a>서버 구성 파일 불러오기</h3><p>개발 환경에서 서버 구성 파일을 불러온다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack/dev.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; merge &#125; <span class="keyword">from</span> <span class="string">&quot;webpack-merge&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> commonConfig <span class="keyword">from</span> <span class="string">&quot;./common.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> devServer <span class="keyword">from</span> <span class="string">&quot;./server.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> devConfig = <span class="title function_">merge</span>(commonConfig, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;eval-cheap-source-map&quot;</span>,</span><br><span class="line">  devServer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> devConfig;</span><br></pre></td></tr></table></figure>

<h3 id="서버-구동-명령어-등록"><a href="#서버-구동-명령어-등록" class="headerlink" title="서버 구동 명령어 등록"></a>서버 구동 명령어 등록</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run server -- --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack server -c webpack/dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bundle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack bundle -c webpack/dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack build -c webpack/prod.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-Entry-수정"><a href="#HTML-Entry-수정" class="headerlink" title="HTML Entry 수정"></a>HTML Entry 수정</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko-KR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;main.bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Settings</category>
      </categories>
  </entry>
  <entry>
    <title>DOM 컨트롤(ref)</title>
    <url>/2022/11/12/React/DOM-%EC%BB%A8%ED%8A%B8%EB%A1%A4-ref/</url>
    <content><![CDATA[<h1 id="🕹-리액트-DOM-컨트롤"><a href="#🕹-리액트-DOM-컨트롤" class="headerlink" title="🕹 리액트 DOM 컨트롤"></a>🕹 리액트 DOM 컨트롤</h1><p>리액트 앱은 대부분 리액트에 의해 컨트롤되지만 <strong>예외인 상황이 있다.</strong> 리액트는 virtualDOM을 가지고 동작하기 때문에 RealDOM 요소에 접근하거나 조작해야할 경우 이는 <strong>리액트가 할 수 없는 일이다.</strong></p>
<p>이러한 일을 <red>리액트 사이드 이펙트</red>라고 부른다. 흔히들 사이드 이펙트를 부작용이라고 오인하는 경우가 있지만 여기서는 순수하지 않거나 역할에 맞는 일을 하지 않는 경우를 말한다.</p>
<p>사이드 이펙트를 처리하기 위해서는 다음과 같은 React API를 사용하여야한다.</p>
<ul>
<li>ref(참조 설정)<ul>
<li><strong>값이 변경되어도 리액트가 재렌더링하지 않는다.</strong></li>
</ul>
</li>
<li>callback ref(ref 속성에 연결된 함수)</li>
<li>React.createRef(참조 객체 생성)</li>
<li>React.forwardRef(참조 객체 전달)<ul>
<li>범용적으로 누구나 사용할 수 있는 컴포넌트를 만들기 위해서 꼭 필요하다.</li>
<li>외부 컴포넌트가 내부 컴포넌트를 전달받아서 컴포넌트를 내보낸다.</li>
<li>domRef를 통해서 전달할 수도 있다.</li>
</ul>
</li>
</ul>
<h2 id="💭-예시"><a href="#💭-예시" class="headerlink" title="💭 예시"></a>💭 예시</h2><p>컴포넌트 생성 시점에 이벤트를 구독한 경우, 컴포넌트 제거 시점에 구독한 이벤트를 취소해야한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TiltCard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// DOM 요소 참조를 목적으로 Ref를 생성합니다.</span></span><br><span class="line">  tiltRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>(<span class="literal">null</span>); <span class="comment">// &#123; current:null &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// DOM 요소 참조를 위한 목적의 클래스 인스턴스 멤버</span></span><br><span class="line">  #cardDomElement = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 최초 마운트 시점 이후 처리할 로직을 작성합니다.</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#cardDomElement = <span class="variable language_">this</span>.<span class="property">tiltRef</span>.<span class="property">current</span>;</span><br><span class="line">    <span class="title class_">VanillaTilt</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>.#cardDomElement);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 이벤트 구독</span></span><br><span class="line">    <span class="variable language_">this</span>.#cardDomElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&quot;tiltChange&quot;</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handleChangeTilt</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 마운트 해제 직전에 처리할 로직을 작성합니다.</span></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#cardDomElement.<span class="property">vanillaTilt</span>.<span class="title function_">destroy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 이벤트 구독 해지</span></span><br><span class="line">    <span class="variable language_">this</span>.#cardDomElement.<span class="title function_">removeEventListener</span>(</span><br><span class="line">      <span class="string">&quot;tiltChange&quot;</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handleChangeTilt</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// 생성된 Ref를 참조하도록 설정합니다.</span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.tiltRef&#125;</span> <span class="attr">className</span>=<span class="string">&quot;tiltCard&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>tiltRef에 <strong>DOM 요소를 저장하기 위해 ref를 생성하였다.</strong></li>
<li>tiltRef DOM 요소 얻기 위해 <strong>“current” 프로퍼티</strong>에 접근하였다.</li>
<li>tiltRef DOM 요소에 컴포넌트 생성주기에 맞게 이벤트를 등록하고 제거해주었고 ref를 참조하도록 설정해주었다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>JSX를 쓰기 위한 프론트 개발자의 향연 1탄</title>
    <url>/2022/11/02/React/JSX%EB%A5%BC-%EC%93%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-%ED%94%84%EB%A1%A0%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%ED%96%A5%EC%97%B0-1%ED%83%84/</url>
    <content><![CDATA[<h1 id="📌-JSX가-뭐길래"><a href="#📌-JSX가-뭐길래" class="headerlink" title="📌 JSX가 뭐길래?"></a>📌 JSX가 뭐길래?</h1><p>JSX는 리액트 컴포넌트 사용을 HTML 처럼 사용하기 위해 생겨났다. JSX는 XML 처럼 생긴 문법 표현식이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;loco&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕하세요~! &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rendered</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕하세요~! loco<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>하지만 우리는 이렇게 편리한 JSX를 바로 <red>사용할 수 없다.</red> 왜냐하면 브라우저는 HTML, CSS, Javascript 파일만 읽을 수 있으므로 JSX 문법은 읽을 수 없다.</p>
<p>하지만 이렇게 편리한데 사용하고 싶으니 <bold>babel이라는 컴파일러를 사용한다.</bold></p>
<h1 id="🌈-babel이-뭐길래"><a href="#🌈-babel이-뭐길래" class="headerlink" title="🌈 babel이 뭐길래?"></a>🌈 babel이 뭐길래?</h1><p>Babel은 자바스크립트 컴파일러로 아래의 역할을 하여 브라우저 호환 문제를 해결한다.</p>
<ul>
<li>구문 변환</li>
<li>대상 환경에 누락된 폴리필 기능</li>
<li>소스 코드 변환</li>
</ul>
<p>babel을 사용하면 최신 문법으로 작성한 코드를 원하는 브라우저 환경에 잘 동작하도록 알아서 코드를 변환한 새로운 파일을 생성해준다.</p>
<p>또한, 애플리케이션이 방대해짐에 따라 한곳에서 파일을 관리하기가 어려워 모듈로써 파일을 구분하기 시작했다.</p>
<p>그렇게 파일을 구분을 하긴 했는데 그 많은 파일을 선후 관계를 따져가면서 HTML 파일에 등록시키고 최적화 하는 작업은 <red>매우 번거로운 작업이다.</red></p>
<p>이러한 배경이 있기에 <bold>webpack이라는 모듈 번들러가 등장하였다.</bold></p>
<h1 id="🌏-webpack이-뭐길래"><a href="#🌏-webpack이-뭐길래" class="headerlink" title="🌏 webpack이 뭐길래?"></a>🌏 webpack이 뭐길래?</h1><p>앞서 설명했듯이 webpack은 모듈 번들러이다. 웹 브라우저 환경은 CBD, Module 프로그래밍에 적합하지 않다.</p>
<p>왜냐하면 브라우저 호환성때문이다. 모던 브라우저가 모듈을 사용할 수 있긴 하지만 <red>모든 브라우저에서 가능한 것은 아니다.</red> 또한, 브라우저는 애플리케이션을 <red>build하는 환경을 기본적으로 제공하지 않기에</red> 애플리케이션을 build하기 위한 환경을 개발자가 직접 설정해줘야 한다.</p>
<h2 id="☄️-webpack을-사용하는-이유"><a href="#☄️-webpack을-사용하는-이유" class="headerlink" title="☄️ webpack을 사용하는 이유"></a>☄️ webpack을 사용하는 이유</h2><h3 id="1-모듈-번들링"><a href="#1-모듈-번들링" class="headerlink" title="1. 모듈 번들링"></a>1. 모듈 번들링</h3><p>애플리케이션이 방대해짐에 따라 복잡성이 증가하여 코드가 혼란스러워지고 뒤섞이게 되어 개발이 어려워지는 문제가 발생하였다.</p>
<p>이를 해결하기 위해 코드 베이스를 모듈로 관리하고 번들링 해줘야한다.</p>
<h3 id="2-트리-쉐이킹-Tree-Shaking"><a href="#2-트리-쉐이킹-Tree-Shaking" class="headerlink" title="2. 트리 쉐이킹(Tree Shaking)"></a>2. 트리 쉐이킹(Tree Shaking)</h3><p>애플리케이션에서 사용되지 않는 코드는 최적화 과정을 통해 제거되어 꼭 필요한 코드만 번들에 포함되도록 한다.</p>
<h3 id="3-코드-분할-Code-Spliting"><a href="#3-코드-분할-Code-Spliting" class="headerlink" title="3. 코드 분할 (Code Spliting)"></a>3. 코드 분할 (Code Spliting)</h3><p>번들링으로 한곳에 묶기는 하였는데 이게 또 너무 크다보니 <red>로드시간이 길어지는 문제가 발생하였다.</red> 이를 해결하기 위해 코드 분할을 하여 런타임 중에 나눠진 파일들을 동적으로 불러오도록 하였다.</p>
<h3 id="4-코드-최적화와-소스맵-Source-Map"><a href="#4-코드-최적화와-소스맵-Source-Map" class="headerlink" title="4. 코드 최적화와 소스맵(Source Map)"></a>4. 코드 최적화와 소스맵(Source Map)</h3><p>주석, 공백, 긴 함수명 등을 모두 축소 또는 제거하여 파일의 크기를 크게 줄일 수 있다. 이렇게 최적화된 코드는 사람이 읽기 힘들기에 디버깅하기가 어렵다.</p>
<p>이를 위해 코드를 추적하는 <bold>소스맵(Source Map)을 사용하여 버그를 추적하기가 용이하게 되었다.</bold></p>
<p>결과적으로 편리한 JSX를 사용하기 위해서는 babel이라는 컴파일러로 변환은 하여 브라우저가 읽을 수 있는 파일로 변환해주어야 하며, 브라우저는 애플리케이션을 build 해주는 환경을 기본 제공해주지 않고 수많은 모듈 파일들을 번들링해주는 도구로서 webpack을 사용한다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>수업을 하면서 개발을 하기 위한 Tool이 왜 이렇게나 많은지, 하나를 배우는 데에도 시간이 오래걸려 쉽게 접근하지 못한 부분이었다.</p>
<p>그동안 CRA(Create React App)이라는 명령어를 통해 리액트를 쉽게 사용할 수 있는데, 이는 기본적인 설정을 지원하고 프로젝트에 맞게 설정을 변경할 수가 없다. 그렇기 때문에 config 파일들의 설정이 필요하다는 것을 알게되었다.</p>
<p>앞으로 더 훌륭한 개발자가 되기 위해서는 기본 설정에만 의존하지 않고 내가 진행하려는 목적에 맞는 세팅을 알아둘 필요가 있어 열심히 배워보려고한다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>LifeCycle(라이프사이클)</title>
    <url>/2022/11/10/React/LifeCycle-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4/</url>
    <content><![CDATA[<h1 id="📌-LifeCycle이란"><a href="#📌-LifeCycle이란" class="headerlink" title="📌 LifeCycle이란?"></a>📌 LifeCycle이란?</h1><p>라이프 사이클은 함수 컴포넌트와 달리 클래스 컴포넌트에서만 라이프 사이클이 제공된다. <strong>컴포넌트 생성, 마운트, 업데이트, 언마운트 등 특정 시점에서 실행되는 콜백함수를 말한다.</strong></p>
<h2 id="👑-LifeCycle-필요성"><a href="#👑-LifeCycle-필요성" class="headerlink" title="👑 LifeCycle 필요성"></a>👑 LifeCycle 필요성</h2><p>라이프 사이클은 React의 성능을 최적화하고 React가 컨트롤할 수 없는 <red>Side Effect(사이드이펙트)를 처리</red>하기 위함이다.</p>
<p>대표적인 사이드 이펙트는 다음과 같다.</p>
<ol>
<li>네트워크 통신 (비동기 통신 요청 및 응답)</li>
<li>DOM 컨트롤 (RealDOM 접근 및 조작)</li>
<li>구독&#x2F;취소 (이벤트 핸들링 등)</li>
<li>오류 감지 (ErrorBoundary 컴포넌트 등)</li>
</ol>
<h2 id="✏️-대표적인-LifeCycle-메서드"><a href="#✏️-대표적인-LifeCycle-메서드" class="headerlink" title="✏️ 대표적인 LifeCycle 메서드"></a>✏️ 대표적인 LifeCycle 메서드</h2><ul>
<li><code>constructor()</code><ul>
<li>마운트 되기 전에 실행된다.</li>
</ul>
</li>
<li><code>render()</code><ul>
<li>컴포넌트 렌더링 시점에 호출</li>
</ul>
</li>
<li><code>componentDidMount()</code><ul>
<li>DOM에 마운트 된 이후 실행된다.</li>
</ul>
</li>
<li><code>componentDidUpdate()</code><ul>
<li>최초 렌더링 시 실행 ❌</li>
<li>업데이트 이후 실행</li>
</ul>
</li>
<li><code>componentWillunmount()</code><ul>
<li>컴포넌트 소멸하기 직전에 실행</li>
</ul>
</li>
</ul>
<p><img src="/../../images/lifecycle/lifecycle.png" alt="LifeCycle"></p>
<h2 id="🌈-Render-단계"><a href="#🌈-Render-단계" class="headerlink" title="🌈 Render 단계"></a>🌈 Render 단계</h2><ul>
<li>render 단계는 virtualDOM을 조작하는 단계이다.<ul>
<li>성능 최적화를 위한 행동은 render 이전에 해줘야한다.</li>
<li>render가 끝났다고 해서 실제DOM에 바로 반영되는 것이 아니다.</li>
</ul>
</li>
<li>리액트 업데이트가 되는 경우는 다음 3가지 상황이다.<ol>
<li><strong>새로운 props가 전달되었을 때,</strong></li>
<li><strong>해당 컴포넌트의 state가 변경되었을 때,</strong></li>
<li><strong>강제로 변경시켰을 때만 업데이트가 발생한다.</strong></li>
</ol>
</li>
</ul>
<h2 id="🔨-Commit-단계"><a href="#🔨-Commit-단계" class="headerlink" title="🔨 Commit 단계"></a>🔨 Commit 단계</h2><p>commit 단계는 RealDOM이므로 명령형이 가능하다.</p>
<ul>
<li>DOM을 사용하여 <strong>componentDidMount, DidUpdate, WillUnmount 에서 명령형 코드 작성이 가능하다.</strong></li>
<li>사이드 이펙트 관련 함수는 여기서 수행해야한다.<aside>
📌 사이드 이펙트가 나쁜 의미로 부작용이 아니라 리액트가 하는 일이 아닌 부가적인 일을 의미한다.
</aside></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Mock Fn(모의함수) 테스트 (React DOM Test)</title>
    <url>/2022/11/08/React/Mock-Fn-%EB%AA%A8%EC%9D%98%ED%95%A8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-(React%20DOM%20Test)/</url>
    <content><![CDATA[<h1 id="📌-Mock-Fn-모의함수-란"><a href="#📌-Mock-Fn-모의함수-란" class="headerlink" title="📌 Mock Fn(모의함수)란?"></a>📌 Mock Fn(모의함수)란?</h1><p>테스트를 위한 함수로, 원하는 함수의 로직을 테스트 하려면 작성해야할 코드가 많지만 테스트 함수를 사용하여 원하는 테스트를 시험할 코드만 간략하게 작성하여 테스트해볼 수 있어 편리하다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;`onToggle` 속성(prop)에 연결된 함수가 정상적으로 실행됩니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> expected = <span class="string">&quot;triggering toggle event&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> received = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onToggle</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        received = expected;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(received).<span class="property">not</span>.<span class="title function_">toBe</span>(expected);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = screen.<span class="title function_">queryByRole</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">  fireEvent.<span class="title function_">click</span>(element); <span class="comment">// click button element</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(received).<span class="title function_">toBe</span>(expected);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>위 예제는 버튼이 클릭되었을 때, 해당 문구가 할당이 제대로 되는지 확인하는 테스트 코드이다.</li>
</ul>
<p>테스트 목적은 버튼 클릭이 제대로 인식되는지, 선택된 요소가 예상된 값으로 할당이 되는지를 확인한다.</p>
<p><strong>이렇게 테스트 코드를 작성하는 것은 번거로운 일이다.</strong></p>
<p>그러므로 간략하게 테스트 함수를 생성하여 이벤트가 발생할 때, 모의 함수가 호출되면 앞서 말한 로직을 구현해줄 수 있으므로 버튼이 클릭되었을 때, 모의 함수 호출이 제대로 되는지만 확인하면 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mock Fn</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;`onToggle` 속성(prop)에 연결된 함수가 정상적으로 실행됩니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mockFn = jest.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span> <span class="attr">onToggle</span>=<span class="string">&#123;mockFn&#125;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = screen.<span class="title function_">getByRole</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">  fireEvent.<span class="title function_">click</span>(element); <span class="comment">// click button element</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(mockFn).<span class="title function_">toHaveBeenCalled</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="✏️-React-VirtualDOM-Test"><a href="#✏️-React-VirtualDOM-Test" class="headerlink" title="✏️ React VirtualDOM Test"></a>✏️ React VirtualDOM Test</h2><p>리액트에서는 VitualDOM에 렌더링을 하여 RealDOM과 비교하기 때문에 Test시에도 <strong>RealDOM이 아닌 VirtualDOM에 렌더링된 것으로 테스트를 해줘야한다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;컴포넌트는 기본적으로 &lt;span&gt; 요소로 렌더링 됩니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">A11yHidden</span> <span class="attr">data-testid</span>=<span class="string">&quot;tester&quot;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = screen.<span class="title function_">getByTestId</span>(<span class="string">&quot;tester&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(element.<span class="property">localName</span>).<span class="title function_">toBe</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>RealDOM에서 <code>querySelector()</code>로 요소를 가져오는 것처럼 VirtualDOM에서는 <code>screen</code>으로 요소를 가져올 수 있다.</li>
<li>해당 요소를 가져오기 위해서 <code>data-testId</code> 값을 사용하였다.</li>
</ul>
<h3 id="❗️-localName-vs-nodeName-차이"><a href="#❗️-localName-vs-nodeName-차이" class="headerlink" title="❗️ localName vs nodeName 차이"></a>❗️ localName vs nodeName 차이</h3><ul>
<li>localName : 소문자를 반환</li>
<li>nodeName : 대문자를 반환</li>
</ul>
<h3 id="defaultProps-사용하기"><a href="#defaultProps-사용하기" class="headerlink" title="defaultProps 사용하기"></a>defaultProps 사용하기</h3><p>리액트 컴포넌트에서는 props에 default 값을 주기 위해서 defaultProps를 사용한다.</p>
<blockquote>
<p>직접 파라미터에 <code>App(&#123; as: ComponentName = &#39;div&#39; &#125;)</code> 이런식으로 주는 것을 안티패턴으로 본다.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;./A11yHidden.module.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">A11yHidden</span>(<span class="params">&#123; <span class="keyword">as</span>: ComponentName, ...restProps &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentName</span> <span class="attr">className</span>=<span class="string">&#123;styles.container&#125;</span> &#123;<span class="attr">...restProps</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">ComponentName</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A11yHidden.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">as</span>: <span class="string">&quot;span&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>as 라는 props를 받으면 해당하는 <strong>ComponentName으로</strong> 태그를 감싸서 컴포넌트를 생성한다.</li>
</ul>
<blockquote>
<p>component는 PascalCase 명명 규칙을 따르기 때문에 이를 따르지 않으면 에러를 발생시킨다.</p>
</blockquote>
<h3 id="getByRole-vs-getByTestId"><a href="#getByRole-vs-getByTestId" class="headerlink" title="getByRole vs getByTestId"></a>getByRole vs getByTestId</h3><p>기본적으로 <code>div, span</code> 같은 태그는 Role(역할)이 없다. 테스트 케이스에서 이러한 요소를 가져오기 위해서는 Role이 없으니 다른 방법을 찾아야한다.</p>
<p>그에 대한 대안으로 테스트용 <code>data-testId=&quot;tester&quot;</code> 값을 주고 <code>getByTestId()</code>를 사용하여 요소를 가져올 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// div 요소 가져올 경우</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;컴포넌트의 `as` 속성(prop) 값이 &quot;div&quot;인 경우, &lt;div&gt; 요소로 렌더링 됩니다.&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Banner</span> <span class="attr">as</span>=<span class="string">&quot;div&quot;</span> <span class="attr">data-testid</span>=<span class="string">&quot;tester&quot;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = screen.<span class="title function_">getByTestId</span>(<span class="string">&quot;tester&quot;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(element.<span class="property">localName</span>).<span class="title function_">toBe</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// figure 요소 가져올 경우</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;컴포넌트는 기본적으로 &lt;figure&gt; 요소로 렌더링 됩니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Banner</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = screen.<span class="title function_">getByRole</span>(<span class="string">&quot;figure&quot;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(element.<span class="property">localName</span>).<span class="title function_">toBe</span>(<span class="string">&quot;figure&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>figure, img</code> 등 우리가 직접 Role을 선정해주지 않아도 브라우저에서 해당 태그들을 해석할 때 Role을 할당해주기 때문에 이러한 요소들은 <code>getByRole()</code>를 이용하여 가져올 수 있다.</p>
</blockquote>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>마침 우테코에서도 Jest를 사용하고 있었는데, 수업시간 때 리액트 DOM 테스트를 해볼 수 있는 기회가 있어서 유익했다. 프론트 엔드에서는 사용자의 행동에 의해 UI가 변경되는 요소들이 많기 때문에 이러한 사용자 액션에 의한 test를 하기 어렵다.</p>
<p>이럴 경우 사용자가 행동하는 것처럼 테스트를 진행하는 storyBook이라는 testing Tool도 있으니 Jest가 익숙해지면 <strong>storyBook도</strong> 사용해봐야겠다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>mock</tag>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>Netlify 배포하기(drag&amp;drop, git repo)</title>
    <url>/2023/02/18/React/Netlify-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="netlify-배포하기"><a href="#netlify-배포하기" class="headerlink" title="netlify 배포하기"></a>netlify 배포하기</h2><h3 id="🖱-1-드래그-앤-드랍으로-배포하기"><a href="#🖱-1-드래그-앤-드랍으로-배포하기" class="headerlink" title="🖱 1. 드래그 앤 드랍으로 배포하기"></a><strong>🖱 1. 드래그 앤 드랍으로 배포하기</strong></h3><ol>
<li>npm run build 명령어를 실행하여 build 파일을 만든다.</li>
<li>netlify 홈페이지에 가서 build 폴더를 드래그 드랍한다.</li>
</ol>
<p><img src="/../../images/netlify/netlify%EC%82%AC%EC%9D%B4%ED%8A%B8.png" alt="netlify사이트"></p>
<p>배포 끝!</p>
<p><a href="https://react-cocktail-project-yiju.netlify.app/">🔗 Cocktail project site Link</a></p>
<h3 id="❗️React-Router-사용하여-netlify-배포시-문제"><a href="#❗️React-Router-사용하여-netlify-배포시-문제" class="headerlink" title="❗️React Router 사용하여 netlify 배포시 문제"></a>❗️React Router 사용하여 netlify 배포시 문제</h3><p>React Router를 사용하여 netlify에 배포했을 때, <strong>root 경로이외의 직접적으로 경로에 접근할 때, Page Not Found가 뜨는 문제가 있다.</strong></p>
<p>📌 문제 발생 원인!</p>
<p>해당 문제는 React Router는 클라이언트 사이드에서 라우팅을 다루기때문에, root 페이지가 아닌 경로로 직접적으로 방문했을 경우, netliffy는 해당 경로를 어떻게 다룰지 알 수 없다.</p>
<p>🙆🏻‍♂️ 어떻게 해결하는가?</p>
<p>netlify에서 _redirects 파일을 제공한다. 여기에 netlify가 클라이언트 사이드에서 다루지 않는 URL을 어떻게 다룰 지에 대한 코드를 적어주면 된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _redirects 파일</span></span><br><span class="line"><span class="comment">/*    /index.html   200</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/netlify/%ED%8F%B4%EB%8D%94%EA%B5%AC%EC%A1%B0.png" alt="폴더구조"></p>
<p>SPA 프레임워크를 사용하여 애플리케이션을 만들고 history pushstate를 사용하여 URL을 클린하게 사용하는 경우 위와 같이 파일을 생성하여 적어주면된다.</p>
<p>이렇게 하면 어떤 URL로 브라우저 요청이 오던지 간에 404 대신 index.html을 제공한다.</p>
<h3 id="2-github에서-CI-사용하여-배포하기"><a href="#2-github에서-CI-사용하여-배포하기" class="headerlink" title="2. github에서 CI 사용하여 배포하기"></a>2. github에서 CI 사용하여 배포하기</h3><p>이 방법을 사용하면 프로젝트 변경사항을 반영하여 배포하기 편리하다.</p>
<ol>
<li>깃헙 레포를 생성한다.</li>
<li>이미 존재하는 파일을 깃헙 레포에 푸시한다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;initial commit&quot;</span></span><br><span class="line">git remote add origin <span class="attr">https</span>:<span class="comment">//github.com/loco9939/react-cocktail-project.git</span></span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<ol>
<li>netlify에 가서 “add new site” 버튼 클릭한 후 github으로 배포하기 하여 생성한 레포를 선택하고 배포한다.</li>
</ol>
<p><img src="/../../images/netlify/netlify%EC%82%AC%EC%9D%B4%ED%8A%B8.png" alt="netlify사이트"></p>
<ol>
<li>package.json에 가서 build 명령어를 수정해주자.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">		...</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;CI= react-scripts build&quot;</span>,</span><br><span class="line">		...</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>보통 react-scripts build만 되어있을텐데 앞에 <code>CI=</code> 을 추가해주자.</p>
<ol>
<li>이후 해당 개발 파일을 수정한다음 깃헙에 push 하게 되면 netlify 가 알아서 배포를 해준다.</li>
</ol>
<p>body 태그의 배경 색깔을 변경해보았다.</p>
<p><img src="/../../images/netlify/github%EC%97%B0%EA%B2%B0%ED%9B%84%EC%83%89%EA%B9%94%EB%B3%80%EA%B2%BD.png" alt="색깔변경후화면"></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>Netlify배포</tag>
      </tags>
  </entry>
  <entry>
    <title>Portal(포털)</title>
    <url>/2022/11/14/React/Portal-%ED%8F%AC%ED%84%B8/</url>
    <content><![CDATA[<h1 id="📌-Portal이란"><a href="#📌-Portal이란" class="headerlink" title="📌 Portal이란?"></a>📌 Portal이란?</h1><p>포털을 사용하면 애플리케이션 영역을 벗어나 특정 위치에 컴포넌트를 렌더링할 수 있다. 즉, 지금껏 root 컨테이너에만 렌더링을 해왔다면 포털을 사용하여 <red>root 컨테이너 외부에다가도 컴포넌트를 렌더링할 수 있게된다.</red></p>
<blockquote>
<p>포털을 통해 렌더링된 컴포넌트는 DOM 트리 위치와 상관없이 React 컴포넌트 트리에 포함되기 때문이다.</p>
</blockquote>
<h2 id="🔨-사용방법"><a href="#🔨-사용방법" class="headerlink" title="🔨 사용방법"></a>🔨 사용방법</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(child, container);</span><br></pre></td></tr></table></figure>

<ul>
<li>child는 렌더링할 수 있는 자식</li>
<li>container는 DOM 요소이다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>,</span><br><span class="line">        domNode</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>위 경우 React는 새로운 div를 생성하지 않고 domNode 안에 자식을 렌더링한다.</li>
<li><strong>domNode는 DOM 내부의 어디에 있던지 간에 상관없다.</strong></li>
</ul>
<blockquote>
<p>시각적으로 자식을 튀어나오도록 보여야하는 다이얼로그, 호버카드, 툴팁에 사용된다. 이 때, <red>키보드 포커스 관리와 접근성을 고려해줘야한다.</red></p>
</blockquote>
<h2 id="🌈-다이얼로그-예시"><a href="#🌈-다이얼로그-예시" class="headerlink" title="🌈 다이얼로그 예시"></a>🌈 다이얼로그 예시</h2><h3 id="다이얼로그-특징"><a href="#다이얼로그-특징" class="headerlink" title="다이얼로그 특징"></a>다이얼로그 특징</h3><ol>
<li>다이얼로그가 띄워진 상태면 그 아래 위치한 내용은 비활성화 상태여야한다.</li>
<li>다이얼로그 바깥으로 초점이동되면 안된다.</li>
<li>dialog 역할(role)을 부여해야한다.</li>
<li>모달 기능일 경우 <code>aria-modal=true</code> 이여야한다.</li>
<li>다이얼로그 제목은 <code>aria-label</code>, <code>aria-labelledby</code>로 설정한다.</li>
</ol>
<h3 id="1-부모-컴포넌트"><a href="#1-부모-컴포넌트" class="headerlink" title="1. 부모 컴포넌트"></a>1. 부모 컴포넌트</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoDialog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  #opennerRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleShowDialog = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleHideDialog = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.box&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.#opennerRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&#123;styles.openDialogButton&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">aria-haspopup</span>=<span class="string">&quot;dialog&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">aria-label</span>=<span class="string">&quot;모달 다이얼로그 열기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">title</span>=<span class="string">&quot;모달 다이얼로그 열기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;this.handleShowDialog&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          모달열기</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.show &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Dialog</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClose</span>=<span class="string">&#123;this.handleHideDialog&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">openner</span>=<span class="string">&#123;this.#opennerRef.current&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Dialog.Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">h3</span>&gt;</span>불금 다이얼로그<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Dialog.Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Dialog.Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Dialog.Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>부모 컴포넌트에서는 버튼 클릭이벤트로 모달을 조건부 렌더링해주고 있다.</li>
</ul>
<h3 id="2-모달-컴포넌트-자식"><a href="#2-모달-컴포넌트-자식" class="headerlink" title="2. 모달 컴포넌트(자식)"></a>2. 모달 컴포넌트(자식)</h3><p>root 요소가 아닌 곳에 자식 컴포넌트를 그려주기 위해서 <strong>public 폴더의 index.html에 다음과 같이 div 요소를 추가해줘야한다.</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// public/index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 다이얼로그를 렌더링 할 컨테이너 요소 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dialogZone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">boyd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dialog.jsx</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">documentElement</span>: htmlElement &#125; = <span class="variable language_">document</span>;</span><br><span class="line"><span class="keyword">const</span> reactDomContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dialog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  #containerRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  handleClose = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">onClose</span>?.();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">openner</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; modal = <span class="literal">false</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createPortal</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">article</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.#containerRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">tabIndex</span>=<span class="string">&#123;-1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">aria-modal</span>=<span class="string">&#123;modal&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&#123;styles.container&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.children&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Dialog.Footer</span> <span class="attr">onClose</span>=<span class="string">&#123;this.handleClose&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;modal &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.dim&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClose&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span>,</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dialogZone&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>우선 해당 모달 컴포넌트를 그릴 domNode를 htmlElement로 지정해주었다.</li>
<li>컨테이너 DOM 요소 가져오기 위해서 ref를 생성해주었다.</li>
<li><code>createPortal()</code>에 렌더링할 자식 컴포넌트와 자식 컴포넌트를 렌더링할 컨테이너를 전달하였다.</li>
<li>모달이 켜져있을 때, <code>Dialog.footer</code> 자식 요소에게 onClose를 props로 전달하였다.</li>
</ul>
<h3 id="3-자식-컴포넌트-접근성-고려"><a href="#3-자식-컴포넌트-접근성-고려" class="headerlink" title="3. 자식 컴포넌트 접근성 고려"></a>3. 자식 컴포넌트 접근성 고려</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dialog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">#tabbableElements = [];</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">bindEscKeyEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">key</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;escape&quot;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pressed esc key&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleClose</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cleanup function</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #unbindEscKeyEvents = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#containerRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    <span class="variable language_">this</span>.#tabbableElements = <span class="title function_">getTabbableElements</span>(<span class="variable language_">this</span>.#containerRef.<span class="property">current</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">settingKeyboardTrap</span>();</span><br><span class="line"></span><br><span class="line">    htmlElement.<span class="property">style</span>.<span class="property">overflowY</span> = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">    reactDomContainer.<span class="title function_">setAttribute</span>(<span class="string">&quot;aria-hidden&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.#unbindEscKeyEvents = <span class="variable language_">this</span>.#<span class="title function_">bindEscKeyEvents</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    htmlElement.<span class="property">style</span>.<span class="property">overflowY</span> = <span class="string">&quot;visible&quot;</span>;</span><br><span class="line">    reactDomContainer.<span class="title function_">setAttribute</span>(<span class="string">&quot;aria-hidden&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.#unbindEscKeyEvents?.();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">settingKeyboardTrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tabbles = <span class="variable language_">this</span>.#tabbableElements;</span><br><span class="line">    <span class="keyword">const</span> firstElement = tabbles[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> lastElement = tabbles[tabbles.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    firstElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">shiftKey</span> &amp;&amp; e.<span class="property">key</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;tab&quot;</span>)) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        lastElement.<span class="title function_">focus</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lastElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!e.<span class="property">shiftKey</span> &amp;&amp; e.<span class="property">key</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;tab&quot;</span>)) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        firstElement.<span class="title function_">focus</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>key 이벤트를 등록해주고 제거해줄 때, <red>클로저를 사용하여 이벤트 핸들러를 동일한 참조값으로 일치</red>시켜주면 편하다.<ul>
<li><red>keydown 이벤트</red>를 사용해야지만 <code>e.preventDefault()</code>로 <strong>기본동작을 막을 수 있다.</strong></li>
</ul>
</li>
<li>모달 컴포넌트가 생성되었을 때, 해당 컨테이너(article)에 초점을 가게하기 위해 ref를 전달해준 것이다.</li>
<li><code>htmlElement.style.overflowY = &quot;hidden&quot;</code>로 모달 컴포넌트가 띄워져있을 때, 다른 요소는 스크롤이 비활성화시켜주었다.</li>
<li>모달이 켜져있으면 <strong>root 컨테이너는 aria-hidden을 스크린 리더기에서도 모달만 읽히도록 해줘야한다.</strong></li>
<li>컴포넌트가 소멸되기 직전에 <red>등록했던 key 이벤트를 제거해줘야하는 것을 잊지 말자.</red> (고려하지 않는다면 성능에 문제가 생길 것이다.)</li>
</ul>
<h3 id="4-모달-slot-구분"><a href="#4-모달-slot-구분" class="headerlink" title="4. 모달 slot 구분"></a>4. 모달 slot 구분</h3><p>어떤 컴포넌트들은 어떤 자식 요소가 들어올지 예상할 수 없는 경우가 있다. 이럴 경우 children prop을 사용하여 자식 요소를 출력에 그대로 전달하는 것이 좋다.</p>
<p><strong>합성(composition)을 사용하여</strong> <red>컴포넌트 간에 코드를 재사용하도록 하자.</red></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Dialog</span>.<span class="property">Header</span> = <span class="keyword">function</span> <span class="title function_">DialogHeader</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dialog</span>.<span class="property">Header</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React 포털로 연 다이얼로그(with 모달)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dialog</span>.<span class="property">Body</span> = <span class="keyword">function</span> <span class="title function_">DialogBody</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.body&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dialog</span>.<span class="property">Footer</span> = <span class="keyword">function</span> <span class="title function_">DialogFooter</span>(<span class="params">&#123; children, onClose &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">className</span>=<span class="string">&#123;styles.footer&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;styles.closeButton&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-label</span>=<span class="string">&quot;모달 다이얼로그 닫기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;모달 다이얼로그 닫기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;onClose&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        모달닫기</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React(리액트)는 어떻게 작동하는가?</title>
    <url>/2022/10/31/React/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%8A%94%20%EC%96%B4%EB%96%BB%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80?/</url>
    <content><![CDATA[<style>
  bold {
    font-weight:700;
    font-size:1rem;
  }
  
  red {
    color:red;
    font-size:1rem
  }
</style>

<h1 id="📌-React란"><a href="#📌-React란" class="headerlink" title="📌 React란?"></a>📌 React란?</h1><p>화면에 렌더링되는 UI를 컴포넌트 단위로 쪼개 사용할 수 있는 Javascript 라이브러리리 혹은 프레임워크이다.<br>라이브러리인가? 프레임워크인가?는 크게 중요하지 않다. 우리가 중점적으로 생각해야할 부분은 리액트는 <red>Progressive(점진적)</red>이라는 것이다.</p>
<h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ol>
<li><p>리액트는 점진적이므로 애플리케이션을 모두 리액트로 구성할 필요가 없다.</p>
</li>
<li><p>리액트는 Javascript 중점 라이브러리이다. 그러므로 자바스크립트를 잘하면 재밌을 것이다.</p>
</li>
<li><p>리액트는 별도의 설치가 필요없이 컴포넌트를 즉시 사용해볼 수 있다.</p>
</li>
<li><p>선언형 프로그래밍으로 명령형 프로그래밍보다 코드를 이해하기가 쉽다.</p>
</li>
<li><p>리액트를 배우면 웹, 리액트 네이티브를 배우면 모바일 등 한가지를 배워 확장성이 넓다.</p>
</li>
</ol>
<h2 id="시작하기-전"><a href="#시작하기-전" class="headerlink" title="시작하기 전"></a>시작하기 전</h2><h3 id="1-React-API-라이브러리를-사용하여-UI를-구상하는-VitualDOM을-생성한다"><a href="#1-React-API-라이브러리를-사용하여-UI를-구상하는-VitualDOM을-생성한다" class="headerlink" title="1. React API 라이브러리를 사용하여 UI를 구상하는 VitualDOM을 생성한다."></a>1. React API 라이브러리를 사용하여 UI를 구상하는 VitualDOM을 생성한다.</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CDN</span></span><br><span class="line">&lt;script src=<span class="string">&quot;//unpkg.com/react@17/umd/react.development.js&quot;</span> crossorigin&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>만약 버전을 변경하고 싶다면 @version을 써준다.</p>
</li>
<li><p>만약 IE를 고려 해야한다면 17 버전을 사용하고 그렇지 않다면 18 버전 사용하자.</p>
</li>
</ul>
<h3 id="2-ReactDOM-API-라이브러리를-사용하여-VirtualDOM을-RealDOM에-렌더링하여-UI를-구현한다"><a href="#2-ReactDOM-API-라이브러리를-사용하여-VirtualDOM을-RealDOM에-렌더링하여-UI를-구현한다" class="headerlink" title="2. ReactDOM API 라이브러리를 사용하여 VirtualDOM을 RealDOM에 렌더링하여 UI를 구현한다."></a>2. ReactDOM API 라이브러리를 사용하여 VirtualDOM을 RealDOM에 렌더링하여 UI를 구현한다.</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span> crossorigin&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>React API와 버젼을 일치시켜 줘야한다.</li>
</ul>
<p><strong>💡 React v17의 render()와 v18의 createRoot() 차이</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// version 17</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(app,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>),</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rendered!&#x27;</span>)&#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<ul>
<li>렌더링할 React 요소인 app을 인자로 전달하고 이를 렌더링할 container인 root container를 render()에 전달한다.</li>
</ul>
<p>리액트 버전 18부터 render() 대신 createRoot()를 사용한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createRoot</span>(container[, options])</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// version 18</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>; <span class="comment">// JSX</span></span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(element);</span><br></pre></td></tr></table></figure>

<p>문서의 RealDOM 요소 노드인 container를 React Root로 만들어 반환하고, React Root를 render() 메서드를 사용하여 React 요소를 RealDOM에 렌더링한다.</p>
<h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><h3 id="1-React-요소-노드와-Real-DOM-요소-노드-차이"><a href="#1-React-요소-노드와-Real-DOM-요소-노드-차이" class="headerlink" title="1. React 요소 노드와 Real DOM 요소 노드 차이"></a>1. React 요소 노드와 Real DOM 요소 노드 차이</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Real</span></span><br><span class="line"><span class="keyword">const</span> headlineNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">headlineNode.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;headline&#x27;</span>);</span><br><span class="line">headlineNode.<span class="title function_">setAttribute</span>(<span class="string">&#x27;land&#x27;</span>,<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">headlineNode.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">`Add &lt;strong&gt;React&lt;/strong&gt; to a Website`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React</span></span><br><span class="line"><span class="keyword">const</span> headlineVnode = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    className : <span class="string">&#x27;headline&#x27;</span>,</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&#x27;Add &#x27;</span>,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;strong&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;React&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;to a Website&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/React.createElement/React.createElement.png" alt="React.createElement"></p>
<ul>
<li><p>RealDOM 요소 노드는 브라우저가 렌더링하면서 생성한 것이고 이와 달리 React 요소 노드는 Object(객체)로 그 형태가 다르게 생겼다.</p>
</li>
<li><p>위 사진을 보면 props라는 객체에 children, className, lang 등이 담겨있는 것을 알 수 있다. props에 대해서는 이후에 알아보자.</p>
</li>
</ul>
<p><strong>❗️ StrictMode 오류 해결</strong></p>
<p>ECMAScript에서 ‘use strict’ 사용하여 문법적 오류를 미리 알려주었듯이 React에서도 이러한 오류를 미리 알려준다.</p>
<p>이에 대한 경고를 해결하기 위해서는 StrictMode 컴포넌트를 사용해야한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="title class_">React</span>.<span class="property">StrictMode</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">App</span>, &#123; <span class="attr">children</span>: [headline, reactLogo] &#125;)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>사용법은 간단하다. 생성하려는 React 요소를 React.StrictMode의 자식 요소로 전달해주면 된다.</p>
<h3 id="2-React-Component-vs-React-Element"><a href="#2-React-Component-vs-React-Element" class="headerlink" title="2. React Component vs React Element"></a>2. React Component vs React Element</h3><p>자바스크립트에서는 재사용을 위해 함수를 사용하고 리액트에서는 재사용을 위해 컴포넌트를 사용한다. 컴포넌트 생성 방법은 함수를 생성하듯이 생성할 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SvgPath</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;path&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">d</span>: props.<span class="property">d</span>,</span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&#x27;currentColor&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = props =&gt; <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">className</span>: <span class="string">&#x27;App&#x27;</span> &#125;,</span><br><span class="line">    ...props.<span class="property">children</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>리액트 컴포넌트는 매개변수로 props를 받는다.</p>
</li>
<li><p>props 객체를 통해 다른 컴포넌트에게 본인의 HTML attributes, 자바스크립트 값(객체, 배열, 함수 등)을 전달해줄 수 있다.</p>
</li>
<li><p>함수선언식, 함수표현식 둘 다 가능하다.</p>
</li>
</ul>
<p>하지만 createElement()를 사용하여 컴포넌트를 생성하는 것은 매우 번거로운 일이다. 그 대안으로 생겨난 것이 바로 JSX이다.</p>
<h2 id="JSX란"><a href="#JSX란" class="headerlink" title="JSX란?"></a>JSX란?</h2><p>JSX는 리액트 컴포넌트 사용을 HTML 처럼 사용하기 위해 생겨났다. JSX는 XML 처럼 생긴 문법 표현식이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;loco&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        안녕하세요~! &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rendered</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕하세요~! loco<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>자동 세미콜론 삽입이 되는 것을 방지하기 위해 <strong>괄호로 감싸는 것을 추천한다.</strong></p>
<h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><ol>
<li><p>선언형, HTML과 비슷한 구조, {}를 사용한 데이터 바인딩이 편리하다.</p>
</li>
<li><p>브라우저엔진에 의해 해석되지 못하므로 babel이 컴파일을 해줘야만 한다.</p>
</li>
<li><p>HTML 보단 JS에 가까우므로 camelCase 명명규칙을 따른다.</p>
</li>
<li><p>JSX는 렌더링하기 전에 이스케이프하므로 애플리케이션에서 명시적으로 작성되지 않는 내용은 script에 주입되지 않아 XSS 공격으로부터 안전하다.</p>
</li>
</ol>
<p><strong>❗️ React에서 babel 추가 설정</strong></p>
<p><img src="/../../images/React.babel/React.babel.png" alt="React바벨추가설정"></p>
<ol>
<li><p>이전에 React를 사용하기 전에 설정해두었던 babel 사양에서는 React를 컴파일 해줄 수 없다.</p>
</li>
<li><p>컴포넌트를 모듈 파일로 구분할 때에 babel은 input으로 지정된 파일만 컴파일 해주고 input 파일에서 import한 파일까지 컴파일해주지 않는다.</p>
</li>
</ol>
<p>위 2가지 문제 해결을 위해서는 <strong>플러그인을 설치 해줘야한다.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/preset-react</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">comments</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">loose</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>설치가 끝났다면 babel.config.js 파일에 해당 플러그인을 사용할 것이라고 등록을 해줘야 정상 동작한다.</p>
</li>
<li><p>옵션값이 있을 경우 []로 감싸서 넣어주고 그렇지 않은 경우 문자열로만 추가한다.</p>
</li>
</ul>
<h2 id="JSX로-컴포넌트-생성하기"><a href="#JSX로-컴포넌트-생성하기" class="headerlink" title="JSX로 컴포넌트 생성하기"></a>JSX로 컴포넌트 생성하기</h2><p>이제 JSX를 사용할 준비가 끝났으니 JSX를 사용하여 컴포넌트를 생성해보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HeadLine</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;headline&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Add <span class="tag">&lt;<span class="name">strong</span>&gt;</span>React<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> to a Website</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">HeadLine</span>&gt;</span><span class="tag">&lt;/<span class="name">HeadLine</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;react-root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReactDOMRoot</span> = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOMRoot</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>React.createElement()를 사용하여 React Element를 생성하여 컴포넌트를 생성하는 방법보다 훨씬 편리하다는 것을 알 수 있다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>리액트 수업을 듣고 배운것을 차근차근 익혀가면서 정리해보았다. props에 대한 개념도 확실히 잡히고, JSX를 왜 쓰게 되었는지, 안쓰면 무엇인 문제점이고 불편한지를 깨달을 수 있는 시간이여서 좋았다.</p>
<p>공식문서를 읽어볼 때도 영어로 된 것을 자동번역하여 읽지 않고 원문을 보면서 읽으니 시간이 조금 더디지만 그렇기 때문에 기억에 더 오래 남을 것이라고 생각하여 영어로 읽는 연습을 하고있다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>JSX</tag>
        <tag>React.createElement</tag>
        <tag>React.createRoot</tag>
      </tags>
  </entry>
  <entry>
    <title>React Testing Library</title>
    <url>/2022/11/07/React/React-Testing-Library/</url>
    <content><![CDATA[<h1 id="📌-React-Testing-Library"><a href="#📌-React-Testing-Library" class="headerlink" title="📌 React Testing Library"></a>📌 React Testing Library</h1><p>리액트에서 TDD 방식의 개발을 하기 위해서 테스팅 라이브러리를 사용해보자.</p>
<h2 id="🎯-목적"><a href="#🎯-목적" class="headerlink" title="🎯 목적"></a>🎯 목적</h2><h3 id="1-버그-캐치"><a href="#1-버그-캐치" class="headerlink" title="1. 버그 캐치"></a>1. 버그 캐치</h3><p>테스트를 통해 예상치 못한 여러가지 버그들을 사전에 확인하기 용이하다.</p>
<h3 id="2-애플리케이션-신뢰도-향상"><a href="#2-애플리케이션-신뢰도-향상" class="headerlink" title="2. 애플리케이션 신뢰도 향상"></a>2. 애플리케이션 신뢰도 향상</h3><p>어떠한 근거로 이 애플리케이션이 제대로 동작하는지 근거를 뒷받침하고 이 근거에 대한 <strong>신뢰도를 높일 수 있다.</strong></p>
<h3 id="3-질문-및-답변-시간-축소"><a href="#3-질문-및-답변-시간-축소" class="headerlink" title="3. 질문 및 답변 시간 축소"></a>3. 질문 및 답변 시간 축소</h3><p>누군가 어떤 컴포넌트가 어떻게 동작하는지 질문했을 때 그에대한 답변으로 이 테스트를 보여주기만 하면된다. 그럼으로 <strong>시간을 절약하고 유지보수성을 높일 수 있다.</strong></p>
<h3 id="4-문서-역할"><a href="#4-문서-역할" class="headerlink" title="4. 문서 역할"></a>4. 문서 역할</h3><p>테스트라는 문서를 제공함으로서 2,3번의 장점을 가능하도록 한다.</p>
<h2 id="💼-사용방법"><a href="#💼-사용방법" class="headerlink" title="💼 사용방법"></a>💼 사용방법</h2><p>우선 해당 라이브러리를 설치해준다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @testing-library/react</span><br><span class="line"></span><br><span class="line">npm install --save-dev @testing-library/dom</span><br><span class="line"></span><br><span class="line">npm install --save-dev @testing-library/user-event</span><br></pre></td></tr></table></figure>

<p><strong>리액트 테스팅 라이브리러</strong>와 <strong>DOM 테스트 라이브러리, 사용자 행동 테스트 라이브러리</strong>를 설치하여 테스트 개발을 해보자.</p>
<h3 id="🦖-Component-테스트"><a href="#🦖-Component-테스트" class="headerlink" title="🦖 Component 테스트"></a>🦖 Component 테스트</h3><h4 id="✏️-테스트-코드-작성하는-방법"><a href="#✏️-테스트-코드-작성하는-방법" class="headerlink" title="✏️ 테스트 코드 작성하는 방법"></a>✏️ 테스트 코드 작성하는 방법</h4><ol>
<li><p>테스트가 필요한 컴포넌트 렌더링</p>
</li>
<li><p>컴포넌트의 요소 탐색</p>
</li>
<li><p>요소와의 상호작용</p>
</li>
<li><p>어설션 테스트 결과와 기대 값이 일치하는 지 확인</p>
</li>
</ol>
<p>우선 컴포넌트를 생성해주자.</p>
<h3 id="📌-Tip-컴포넌트-생성"><a href="#📌-Tip-컴포넌트-생성" class="headerlink" title="📌 Tip 컴포넌트 생성"></a><strong>📌 Tip 컴포넌트 생성</strong></h3><p>컴포넌트를 쉽게 생성하기 위해 <strong>yamoo9님이 제공해준 Tool</strong>을 사용해보도록하자.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx degit yamoo9/create-react-component create-react-component</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span> <span class="punctuation">:</span></span><br><span class="line">    ...<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node create-react-component create&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node create-react-component delete&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run rc -- 컴포넌트_이름 // 컴포넌트 생성</span><br><span class="line">npm run rd -- 컴포넌트_이름 // 컴포넌트 제거</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ESLint 에서 테스팅 라이브러리를 사용하게되면 오류를 띄워주는데 이에 대한 Lint 경고를 꺼두자.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;testing-library/no-debugging-utils&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h1><h2 id="1-컴포넌트가-렌더링-확인"><a href="#1-컴포넌트가-렌더링-확인" class="headerlink" title="1. 컴포넌트가 렌더링 확인"></a>1. 컴포넌트가 렌더링 확인</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.jsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ToggleButton</span>(<span class="params">&#123; onText, offText, on &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;on ? onText : offText&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.test.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; render, screen &#125; <span class="keyword">from</span> <span class="string">&quot;@testing-library/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ToggleButton</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ToggleButton&quot;</span>;</span><br><span class="line"></span><br><span class="line">describe.<span class="title function_">only</span>(<span class="string">&quot;ToggleButton Test Start!&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&quot;컴포넌트가 정상적으로 렌더링 되었습니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span> <span class="attr">onText</span>=<span class="string">&quot;1&quot;</span> <span class="attr">offText</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> offTextElement = screen.<span class="title function_">getByText</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> onTextElement = screen.<span class="title function_">queryByText</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(offTextElement).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(onTextElement).<span class="property">not</span>.<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>getByText()</code> : 가상으로 그려진 문서에 존재하는 것만 가져올 수 있다. 만약 존재 하지 않는 다면 오류를 발생시킨다.</li>
<li><code>queryByText()</code> : 존재하지 않으면 오류를 발생시키지 않고 <red>null 값으로 가져온다.</red></li>
</ul>
<h2 id="2-활성화-상태-여부에-따라-텍스트-표시"><a href="#2-활성화-상태-여부에-따라-텍스트-표시" class="headerlink" title="2. 활성화 상태 여부에 따라 텍스트 표시"></a>2. 활성화 상태 여부에 따라 텍스트 표시</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.jsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ToggleButton</span>(<span class="params">&#123; onText, offText, on &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>&#123;on ? onText : offText&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.test.jsx</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;ToggleButton 컴포넌트&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&quot;활성 상태 여부에 따라 활성(ON)/비활성(OFF) 텍스트가 표시됩니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> onText = <span class="string">&quot;ON&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> offText = <span class="string">&quot;OFF&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span> <span class="attr">onText</span>=<span class="string">&#123;onText&#125;</span> <span class="attr">offText</span>=<span class="string">&#123;offText&#125;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elements = screen.<span class="title function_">queryAllByRole</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> firstElement = elements[<span class="number">0</span>];</span><br><span class="line">    <span class="title function_">expect</span>(firstElement).<span class="title function_">toHaveTextContent</span>(offText);</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_">debug</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cleanup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span> <span class="attr">onText</span>=<span class="string">&#123;onText&#125;</span> <span class="attr">offText</span>=<span class="string">&#123;offText&#125;</span> <span class="attr">on</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    elements = screen.<span class="title function_">queryAllByRole</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    firstElement = elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_">debug</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(firstElement).<span class="title function_">toHaveTextContent</span>(onText);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 on 일때의 text와 off일 때의 text를 찾고 싶다면 <strong><code>queryAllText()</code></strong> 를 사용해준다,</li>
<li><strong><code>cleanup()</code>을 해줘야지만 firstElement를 확인할 때, 앞에 그려진 것을 지우고 새로 그려진 것을 비교해줄 수 있다.</strong></li>
</ul>
<h2 id="3-onToggle-속성-prop-에-연결된-함수-실행-확인-amp-활성-상태-컴포넌트는-ToggleButton-on-클래스-이름-포함-확인"><a href="#3-onToggle-속성-prop-에-연결된-함수-실행-확인-amp-활성-상태-컴포넌트는-ToggleButton-on-클래스-이름-포함-확인" class="headerlink" title="3. onToggle 속성(prop)에 연결된 함수 실행 확인 &amp; 활성 상태 컴포넌트는 ToggleButton--on 클래스 이름 포함 확인"></a>3. onToggle 속성(prop)에 연결된 함수 실행 확인 &amp; 활성 상태 컴포넌트는 <code>ToggleButton--on</code> 클래스 이름 포함 확인</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ToggleButton</span>(<span class="params">&#123; onText, offText, on, onToggle &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">ToggleButton</span> $&#123;<span class="attr">on</span> ? &quot;<span class="attr">ToggleButton--on</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;`<span class="attr">.trim</span>()&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;onToggle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;on ? onText : offText&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToggleButton.test.js</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;ToggleButton 컴포넌트&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&quot;`onToggle` 속성(prop)에 연결된 함수가 정상적으로 실행됩니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> expected = <span class="string">&quot;triggering toggle event&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> received = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onToggle</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          received = expected;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(received).<span class="property">not</span>.<span class="title function_">toBe</span>(expected);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> element = screen.<span class="title function_">queryByRole</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fireEvent.<span class="title function_">click</span>(element); <span class="comment">// click button element</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(received).<span class="title function_">toBe</span>(expected);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="string">`활성 상태의 컴포넌트는 &#x27;ToggleButton--on&#x27; 클래스 이름을 포함한다.`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> expected = <span class="string">&quot;ToggleButton--on&quot;</span>;</span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ToggleButton</span> <span class="attr">on</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> element = screen.<span class="title function_">getByRole</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(element).<span class="title function_">toHaveClass</span>(expected);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>fireEvent()</code> : 이벤트를 발생시켜주는 메서드이다.</p>
</li>
<li><p><code>queryByRole()</code> : 해당 요소의 역할을 확인하는데 사용된다.</p>
<p><strong>ex) button 태그에 type을 “button”으로 명시적으로 작성하였는지…</strong></p>
</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>오늘 수업에서 상태를 가지지 않는 컴포넌트의 다양한 테스트 방법에 대해 실습을 진행하였다. 리액트를 TDD 방식으로 개발을 진행하게 된다면 앞서 말한 애플리케이션의 신뢰도 향상할 수 있고 테스트 문서를 생성하여 유지보수를 용이하게 할 수 있다는 생각이 들었다.</p>
<p>아직 jest에 익숙하지 않아 낯설고 어렵지만, 우테코에서도 jest를 사용하고 있고 앞으로 자주 사용해보면서 테스트 주도 개발에 대해 몸을 익히도록 해야겠다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>jest</tag>
        <tag>TDD</tag>
        <tag>jest/dom</tag>
      </tags>
  </entry>
  <entry>
    <title>React Virtual DOM이란?</title>
    <url>/2023/01/30/React/React-Virtual-DOM%EC%9D%B4%EB%9E%80/</url>
    <content><![CDATA[<h1 id="Virtual-DOM이란"><a href="#Virtual-DOM이란" class="headerlink" title="Virtual DOM이란?"></a>Virtual DOM이란?</h1><p>Virtual DOM은 Real DOM을 효율적으로 조작하기 위해 가상으로 DOM 구조를 흉내낸 자바스크립트 객체이다.</p>
<p>가상적인 표현을 메모리에 저장하고 React 같은 프레임워크를 통해 Real DOM과 동기화 하기 위해 사용된다.</p>
<h2 id="Virtual-DOM-사용하는-이유는"><a href="#Virtual-DOM-사용하는-이유는" class="headerlink" title="Virtual DOM 사용하는 이유는?"></a>Virtual DOM 사용하는 이유는?</h2><p>Real DOM을 조작하여 DOM Tree의 배치가 바뀌면 Real DOM의 재렌더링이 발생하기 때문에 컴퓨터에 부담이 되고 속도가 느려지게 될 것이다.</p>
<p>그래서 Real DOM과 구조가 똑같은 Virtual DOM을 만들고 DOM 조작이 가해진 요소만 찾아 Real DOM에 변화를 가하는 방법을 사용하여 메모리 상에서만 동작하고 실제 렌더링을 하지 않아 연산 비용을 최소화 할 수 있다.</p>
<h3 id="React에서-Virtual-DOM-작동원리"><a href="#React에서-Virtual-DOM-작동원리" class="headerlink" title="React에서 Virtual DOM 작동원리"></a>React에서 Virtual DOM 작동원리</h3><ol>
<li>우리가 UI를 조작하면 React는 Virtual DOM을 생성한다.</li>
<li>diffing 알고리즘을 통해 이전 Virtual DOM과 변경사항을 비교한다.</li>
<li>이 때 변경된 부분을 파악하여 Real DOM에 반영하여 변경된 부분만 재렌더링이 발생한다.</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React에서 Upload Button Component 만들기</title>
    <url>/2022/11/02/React/React%EC%97%90%EC%84%9C-Upload-Button-Component-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="요구사항"><a href="#요구사항" class="headerlink" title="요구사항"></a>요구사항</h1><p><img src="/../../images/uploadButton/result.png" alt="결과물"></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 버튼 컴포넌트를 만들어 재사용 가능하게 만들어라</li>
<li><input checked="" disabled="" type="checkbox"> 아이콘 컴포넌트를 만들어 재사용 가능하게 만들어라</li>
<li><input checked="" disabled="" type="checkbox"> 컴포넌트를 분리하여라</li>
</ul>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><h3 id="1-src-x2F-main-js-파일에서-렌더링-준비를-한다"><a href="#1-src-x2F-main-js-파일에서-렌더링-준비를-한다" class="headerlink" title="1. src&#x2F;main.js 파일에서 렌더링 준비를 한다."></a>1. src&#x2F;main.js 파일에서 렌더링 준비를 한다.</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">React</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Get Ready?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>업로드 버튼 컴포넌트의 type, content를 지정해주어 컴포넌트를 재사용할 수 있다.</li>
<li>사용자가 컴포넌트를 사용하려면 type과 content를 입력하여 아이콘과 내용을 적어주면 된다.</li>
</ul>
<h3 id="2-버튼-컴포넌트-생성"><a href="#2-버튼-컴포넌트-생성" class="headerlink" title="2. 버튼 컴포넌트 생성"></a>2. 버튼 컴포넌트 생성</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span>  &#123;children, type&#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;upload-button&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;type</span> === <span class="string">&#x27;disabled&#x27;</span> ? &quot;<span class="attr">disabled</span>&quot; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;<span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">&#123;type&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Button</span></span><br></pre></td></tr></table></figure>

<ul>
<li>버튼 컴포넌트에게 전달받은 props의 type값을 그대로 Icon 컴포넌트에게 전달해주었다.</li>
<li>props 객체로 전달받은 type값에 따라 조건부로 disable 속성을 등록&#x2F;해제 해주었다.</li>
</ul>
<h3 id="3-아이콘-컴포넌트-생성"><a href="#3-아이콘-컴포넌트-생성" class="headerlink" title="3. 아이콘 컴포넌트 생성"></a>3. 아이콘 컴포넌트 생성</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> icons = &#123;</span><br><span class="line">    <span class="string">&quot;idle&quot;</span> : <span class="string">&quot;M1.80202 3.65685L5.27085 0.292893C5.67355 -0.0976316 6.32645 -0.0976317 6.72915 0.292893L10.198 3.65685C10.6007 4.04738 10.6007 4.68054 10.198 5.07107C9.79528 5.46159 9.14238 5.46159 8.73968 5.07107L7.03117 3.41421L7.03117 11C7.03117 11.5523 6.5695 12 6 12C5.4305 12 4.96883 11.5523 4.96883 11L4.96883 3.41421L3.26032 5.07107C2.85762 5.46159 2.20472 5.46159 1.80202 5.07107C1.39933 4.68054 1.39933 4.04738 1.80202 3.65685Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pending&quot;</span>: <span class="string">&quot;M9.96461 3.87118C9.61452 3.2192 9.10905 2.66362 8.49296 2.25365C7.87687 1.84368 7.16918 1.59198 6.43257 1.52084C5.69597 1.4497 4.95319 1.56132 4.27003 1.84582C3.58688 2.13031 2.98442 2.5789 2.51604 3.15184C2.04766 3.72478 1.7278 4.40439 1.58481 5.13047C1.44181 5.85656 1.48009 6.6067 1.69626 7.31445C1.91242 8.02221 2.29979 8.66573 2.82407 9.18802C3.34834 9.7103 3.99333 10.0952 4.7019 10.3087L5.1124 8.94617C4.6279 8.8002 4.18687 8.53699 3.82839 8.17987C3.46991 7.82275 3.20503 7.38273 3.05723 6.89879C2.90942 6.41484 2.88325 5.90192 2.98102 5.40544C3.0788 4.90897 3.2975 4.44427 3.61777 4.05251C3.93804 3.66075 4.34998 3.35402 4.8171 3.15949C5.28422 2.96496 5.79211 2.88864 6.29578 2.93728C6.79945 2.98592 7.28335 3.15803 7.70461 3.43835C8.12588 3.71868 8.47151 4.09857 8.71088 4.54438L9.96461 3.87118Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resolved&quot;</span>: <span class="string">&quot;M11.6321 0.725152C12.0601 1.07426 12.124 1.70419 11.7749 2.13214L4.43311 11.1321C4.24683 11.3605 3.96931 11.4951 3.67466 11.4999C3.38 11.5047 3.09822 11.3794 2.90454 11.1573L0.246308 8.10888C-0.116669 7.69263 -0.0734819 7.06094 0.34277 6.69796C0.759022 6.33499 1.39071 6.37817 1.75369 6.79443L3.63274 8.94927L10.2251 0.867921C10.5742 0.439968 11.2042 0.376047 11.6321 0.725152Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rejected&quot;</span>: <span class="string">&quot;M6 12C9.31371 12 12 9.31371 12 6C12 2.68629 9.31371 0 6 0C2.68629 0 0 2.68629 0 6C0 9.31371 2.68629 12 6 12ZM3.40106 3.25359C3.79159 2.86306 4.42475 2.86306 4.81528 3.25359L6.01883 4.45714L7.22238 3.25359C7.61291 2.86306 8.24607 2.86306 8.6366 3.25359C9.02712 3.64411 9.02712 4.27728 8.6366 4.6678L7.43304 5.87135L8.6366 7.07491C9.02712 7.46543 9.02712 8.0986 8.6366 8.48912C8.24607 8.87964 7.61291 8.87964 7.22238 8.48912L6.01883 7.28557L4.81528 8.48912C4.42475 8.87964 3.79159 8.87964 3.40106 8.48912C3.01054 8.0986 3.01054 7.46543 3.40106 7.07491L4.60462 5.87135L3.40106 4.6678C3.01054 4.27728 3.01054 3.64411 3.40106 3.25359Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;disabled&quot;</span>: <span class="string">&quot;M12 6C12 9.31371 9.31371 12 6 12C2.68629 12 0 9.31371 0 6C0 2.68629 2.68629 0 6 0C9.31371 0 12 2.68629 12 6ZM9.65221 6.00001C9.65221 8.01707 8.01707 9.65221 6.00001 9.65221C5.37082 9.65221 4.77878 9.4931 4.26195 9.21293L9.21292 4.26194C9.4931 4.77878 9.65221 5.37081 9.65221 6.00001ZM2.83053 7.81592L7.81591 2.83053C7.28103 2.52342 6.66103 2.34781 6.00001 2.34781C3.98296 2.34781 2.34781 3.98296 2.34781 6.00001C2.34781 6.66103 2.52342 7.28104 2.83053 7.81592Z&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Icon</span> = props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type&#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">button-icon</span> $&#123;<span class="attr">type</span> === <span class="string">&#x27;pending&#x27;</span> ? &quot;<span class="attr">spinner_V8m1</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;`&#125; <span class="attr">width</span>=<span class="string">&#123;12&#125;</span> <span class="attr">height</span>=<span class="string">&#123;12&#125;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 12 12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">fillRule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clipRule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&#123;icons[type]&#125;</span> <span class="attr">fill</span>=<span class="string">&#123;type</span> === <span class="string">&#x27;disabled&#x27;</span> ? &quot;#<span class="attr">ADAEB6</span>&quot; <span class="attr">:</span> &quot;#<span class="attr">525577</span>&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>props 객체로 전달받은 type 값을 가지고 상황에 맞는 아이콘을 보여주고 그에 따라 스타일링도 해주었다.</li>
<li>icons 객체에 props 객체로 받은 타입에 대한 값을 저장하여 관리하였다.</li>
</ul>
<h3 id="4-컴포넌트-분리"><a href="#4-컴포넌트-분리" class="headerlink" title="4. 컴포넌트 분리"></a>4. 컴포넌트 분리</h3><p>이 모든 코드가 한 파일에 있기에 이를 컴포넌트 단위와 역할별로 구분해주어야 한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UploadButton</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Button.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UploadButton</span> <span class="attr">type</span>=<span class="string">&quot;idle&quot;</span>&gt;</span>업로드<span class="tag">&lt;/<span class="name">UploadButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UploadButton</span> <span class="attr">type</span>=<span class="string">&quot;pending&quot;</span>&gt;</span>업로드 중<span class="tag">&lt;/<span class="name">UploadButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UploadButton</span> <span class="attr">type</span>=<span class="string">&quot;resolved&quot;</span>&gt;</span>완료<span class="tag">&lt;/<span class="name">UploadButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UploadButton</span> <span class="attr">type</span>=<span class="string">&quot;rejected&quot;</span>&gt;</span>실패<span class="tag">&lt;/<span class="name">UploadButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UploadButton</span> <span class="attr">type</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>업로드<span class="tag">&lt;/<span class="name">UploadButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./components/UploadButton.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&#x27;./Icon.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span>  &#123;children, type&#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;upload-button&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;type</span> === <span class="string">&#x27;disabled&#x27;</span> ? &quot;<span class="attr">disabled</span>&quot; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;<span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">&#123;type&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Button</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./components/Icon.js</span></span><br><span class="line"><span class="keyword">const</span> icons = &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Icon</span> = props =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type&#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">button-icon</span> $&#123;<span class="attr">type</span> === <span class="string">&#x27;pending&#x27;</span> ? &quot;<span class="attr">spinner_V8m1</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;`&#125; <span class="attr">width</span>=<span class="string">&#123;12&#125;</span> <span class="attr">height</span>=<span class="string">&#123;12&#125;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 12 12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">fillRule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clipRule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&#123;icons[type]&#125;</span> <span class="attr">fill</span>=<span class="string">&#123;type</span> === <span class="string">&#x27;disabled&#x27;</span> ? &quot;#<span class="attr">ADAEB6</span>&quot; <span class="attr">:</span> &quot;#<span class="attr">525577</span>&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Icon</span></span><br></pre></td></tr></table></figure>

<ul>
<li>모듈이 하나의 개체로 이루어져 있으므로 기본 내보내기를 해주었다.</li>
<li>기본 내보내기를 해주었으므로 import시 이름을 변경하여 가져올 수 있다.</li>
</ul>
<h2 id="💪-맞닥뜨린-문제"><a href="#💪-맞닥뜨린-문제" class="headerlink" title="💪 맞닥뜨린 문제"></a>💪 맞닥뜨린 문제</h2><h3 id="1-리액트-import-오류"><a href="#1-리액트-import-오류" class="headerlink" title="1. 리액트 import 오류"></a>1. 리액트 import 오류</h3><p><img src="/../../images/uploadButton/importError.png" alt="import오류"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRoot, <span class="title class_">StrictMode</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./react.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(container);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi~!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>위와 같이 import를 해오고 싶었지만 <bold>CDN으로 React를 사용하는 것이기 때문에</bold> <red>react.js를 불러올 수 없다.</red></p>
<p>그러므로 ReactDOM, React로 객체처럼 사용해야만 했다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>간단한 업로드 버튼 컴포넌트를 구현하는 과제를 해보면서 리액트와 좀 더 친숙해지는 계기가 된 것 같다. figma 시안이 워낙 꼼꼼하게 잘 나와있어서 스타일링 하는데는 큰 어려움 없이 해서 좋았다.</p>
<p>처음 딱 시작하려는 순간부터 오류를 맞이해서 당황하였지만 문제도 잘 해결했고 SVG 파일에 애니메이션과 스타일을 입혀보는 것을 직접 해보니 더 기억에 오래 남을 것 같다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React에서 map 메서드를 사용할 때, key 프로퍼티를 왜 사용해야하나요?</title>
    <url>/2023/02/02/React/React%EC%97%90%EC%84%9C-map-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-key-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%82%98%EC%9A%94/</url>
    <content><![CDATA[<h1 id="React에서-key를-사용하는-이유"><a href="#React에서-key를-사용하는-이유" class="headerlink" title="React에서 key를 사용하는 이유"></a>React에서 key를 사용하는 이유</h1><p>리액트에서 배열 데이터와 map 메서드를 사용하여 다수의 컴포넌트를 렌더링할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">&#123; numbers &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>React 프레임워크는 state, props가 업데이트된 이후의 virtual DOM과 이전의 virtual DOM을 비교하고 변경 사항만 Real DOM에 반영하여 효율적으로 UI를 렌더링한다. <strong>이를 재조정 과정이라고 한다.</strong></p>
<p>재조정 과정에서 <span style="color:red;">key가 없다면 이전 DOM과 이후 DOM의 요소를 비교하기 어려워지고 O(n^3) 복잡성을 가지는 알고리즘을 사용해야 하기 때문에 성능상 문제가 생길 수 있다.</span></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>stateless 컴포넌트와 stateful 컴포넌트</title>
    <url>/2022/11/09/React/stateless-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-stateful-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</url>
    <content><![CDATA[<h1 id="🛤-Class-Component-vs-Function-Component"><a href="#🛤-Class-Component-vs-Function-Component" class="headerlink" title="🛤 Class Component vs Function Component"></a>🛤 Class Component vs Function Component</h1><p>과거의 리액트는 상태를 가지는 컴포넌트는 클래스형으로, 상태를 가지지 않는 컴포넌트는 함수형으로 작성하였다. <strong>왜 그랬을까?</strong></p>
<p><img src="/../images/stateless/class&function.png" alt="class&amp;function-components"></p>
<p>Container 컴포넌트는 상태를 가지는데, 함수형 컴포넌트로 생성하게 되면 <red>함수 호출하여 컴포넌트를 생성할 때 마다 상태가 초기화된</red> 값을 가지기 때문에 Container 컴포넌트는 클래스형으로만 작성하였다.</p>
<ul>
<li>this를 사용하기 때문에 <strong>클래스형 컴포넌트가 생성방식이 더 복잡하다.</strong></li>
<li>클래스형 컴포넌트에는 <code>render()</code> 메서드가 꼭 있어야 한다.</li>
<li>클래스형 컴포넌트에서 이벤트 등록 시 this 바인딩을 꼭 해줘야만 한다.</li>
</ul>
<h1 id="📌-stateless-컴포넌트"><a href="#📌-stateless-컴포넌트" class="headerlink" title="📌 stateless 컴포넌트"></a>📌 stateless 컴포넌트</h1><p>stateless 컴포넌트는 말 그대로 상태를 가지지 않는 컴포넌트이다. 이러한 컴포넌트를 stateless 컴포넌트 또는 presentational(프레젠테이셔널) 컴포넌트라고 한다.</p>
<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><ul>
<li><red>시각적 표현에 중점</red>을 둔 컴포넌트</li>
<li>시각적 표현을 목적으로 하니 복잡한 비즈니스 로직 필요없다</li>
<li><red>상태를 가질 필요가 없고</red> 외부에서 전달 받은 데이터를 화면에 그려준다.</li>
</ul>
<h2 id="✏️-stateless-컴포넌트는-함수형으로-작성한다"><a href="#✏️-stateless-컴포넌트는-함수형으로-작성한다" class="headerlink" title="✏️ stateless 컴포넌트는 함수형으로 작성한다?"></a>✏️ stateless 컴포넌트는 함수형으로 작성한다?</h2><p>표현을 목적으로 하는 컴포넌트는 복잡한 비즈니스 로직이 필요없고 이를 클래스로 작성할 경우 Babel 컴파일러가 클래스를 컴파일 해줄 때 함수형 컴포넌트일 때 보다 훨씬 더 많은 코드로 컴파일 해주기 때문에 <strong>stateless 컴포넌트를 클래스형으로 작성하는 것은 낭비이다.</strong></p>
<h1 id="📌-stateful-컴포넌트"><a href="#📌-stateful-컴포넌트" class="headerlink" title="📌 stateful 컴포넌트"></a>📌 stateful 컴포넌트</h1><p>상태를 가지는 컴포넌트를 stateful 컴포넌트 또는 Container(컨테이너) 컴포넌트라고 한다.</p>
<h2 id="목적-1"><a href="#목적-1" class="headerlink" title="목적"></a>목적</h2><ul>
<li>비즈니스 로직을 가지고 있다.</li>
<li><red>state(상태)</red>를 가진다.</li>
<li>Presentational 컴포넌트에게 Props를 전달하여 UI 렌더링 하도록 한다.</li>
<li>화면을 그리는 최소한의 스타일 정보를 가진다.</li>
</ul>
<h2 id="❓-stateful-컴포넌트는-함수형으로-작성하지-않는다"><a href="#❓-stateful-컴포넌트는-함수형으로-작성하지-않는다" class="headerlink" title="❓ stateful 컴포넌트는 함수형으로 작성하지 않는다?"></a>❓ stateful 컴포넌트는 <red>함수형으로 작성하지 않는다?</red></h2><p>하지만, <strong>React Hook</strong>의 등장으로 함수형 컴포넌트로도 Container 컴포넌트의 역할이 가능해졌다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>클래스형 컴포넌트와 함수형 컴포넌트에 차이에 대해 알게되었다.</p>
<p>프로젝트를 시작하게 될 때, 컴포넌트를 생성할텐데 이 때, 이 컴포넌트가 상태를 가지는 컴포넌트인지 상태를 갖지 않는 컴포넌트인지 구분을 짓고 컴포넌트를 생성해야겠다.</p>
<p>오늘날 리액트에서 React Hook이 등장하게 되면서 클래스형으로만 작성되던 stateful Component가 어떻게 함수형 컴포넌트로 바뀌게 되었는지를 배우게 되면 리액트에 대한 이해가 한층 더 깊어질 것 같다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>stateless</tag>
        <tag>stateful</tag>
      </tags>
  </entry>
  <entry>
    <title>useState로 컴포넌트 리셋하기</title>
    <url>/2023/02/07/React/useState%EB%A1%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A6%AC%EC%85%8B%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="useState란"><a href="#useState란" class="headerlink" title="useState란?"></a>useState란?</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(initialState);</span><br></pre></td></tr></table></figure>

<p>리액트에서 상태 변수를 컴포넌트에 추가할 때 사용하는 리액트 훅이다.</p>
<p>특징으로는 상태를 변경하기 위해서는 set 함수를 사용하여 변경해야만 하고, set 함수에 새로운 값을 인자로 전달하면 새로운 상태로 렌더링을 일으킨다.</p>
<h2 id="useState로-컴포넌트-Reset-시키기"><a href="#useState로-컴포넌트-Reset-시키기" class="headerlink" title="useState로 컴포넌트 Reset 시키기"></a>useState로 컴포넌트 Reset 시키기</h2><p>주로 어떤 상태를 reset 시키기 위해 아래와 같은 코드를 작성할 것이다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">resetList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setList</span>([]);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setList</span>([...list, <span class="number">10</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;resetList&#125;</span>&gt;</span>Reset Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addList&#125;</span>&gt;</span>Add 10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((num) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위와 같이 직접 상태를 초기화 하는 방법도 있지만 <strong>key props에게 변경된 상태를 전달함으로써 해당 컴포넌트는 물론 해당 컴포넌트의 하위 컴포넌트까지 reset할 수 있다.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [version, setVersion] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleReset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setVersion</span>(version + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleReset&#125;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form</span> <span class="attr">key</span>=<span class="string">&#123;version&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;Taylor&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;name&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>리액트 공식문서 읽어보기</title>
    <url>/2022/10/29/React/%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%20%EC%9D%BD%EC%96%B4%EB%B3%B4%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="🥨-리액트"><a href="#🥨-리액트" class="headerlink" title="🥨  리액트"></a>🥨  리액트</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>우리가 CBD 기반의 라이브러리를 직접 사용해보았을 때, 전역상태의 개념 부재, 지역 상태 관리의 어려움 등의 문제를 겪었던 경험이 있다. 리액트는 이러한 어려움을 줄여준다.</p>
<h1 id="👀-props-vs-state"><a href="#👀-props-vs-state" class="headerlink" title="👀  props vs state"></a>👀  props vs state</h1><ul>
<li>props는 컴포넌트로 전달된 입력 데이터를 객체화한 것<ul>
<li>읽기 전용이므로 수정해서는 안된다.</li>
</ul>
</li>
<li>state는 컴포넌트의 내부적인 상태 데이터를 객체화한 것 ⇒ 컴포넌트 상태 데이터 변경되면 렌더링 발생<ul>
<li>비공개 요소이며, 컴포넌트에 의해 완전히 제어된다.</li>
</ul>
</li>
</ul>
<h1 id="👹-JSX"><a href="#👹-JSX" class="headerlink" title="👹  JSX"></a>👹  JSX</h1><p>⇒ 리액트는 컴포넌트라는 느슨하게 연결된 유닛으로 관심사를 분리한다.</p>
<ul>
<li><strong>React element(객체)를 생성한다. (Babel은 JSX를 React.createElement() 호출로 컴파일한다.)</strong></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위와 동일</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX는 아래와 같은 element 객체를 생성하고, 이를 통해 화면에 렌더링을 한다.</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>표현식이다.</li>
</ul>
<p>⇒ if, for 문에 사용될 수 있다.</p>
<ul>
<li>JSX는 HTML보다 JS에 가깝기 때문에 어트리뷰트 이름 대신 camelCase로 명명한다.</li>
</ul>
<p>ex) class ⇒ className, tabindex ⇒ tabIndex</p>
<ul>
<li><strong>모든 값을 렌더링하기 전에 이스케이프하므로 악성 사용자가 XSS 공격을 하는 것을 방지할 수 있다.</strong></li>
</ul>
<h1 id="🖥️-component-vs-element"><a href="#🖥️-component-vs-element" class="headerlink" title="🖥️  component vs element"></a>🖥️  component vs element</h1><h2 id="element"><a href="#element" class="headerlink" title="element"></a>element</h2><p>DOM element와 달리 일반 객체이다. React DOM은 React 엘리먼트와 일치하도록 DOM을 업데이트 한다. 즉, <strong>가상돔을 구성하고 리얼돔을 이와 일치하도록 한다.</strong></p>
<p>React 엘리먼트를 렌더링하기 위해서 1. ReactDOM.createRoot()에 DOM 엘리먼트 전달 2. React 엘리먼트를 root.render() 에게 전달</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">root.<span class="title function_">render</span>(element);</span><br></pre></td></tr></table></figure>

<ul>
<li>불변객체로, 생성한 이후 해당 엘리먼트의 자식이나 속성을 변경할 수 없다.</li>
<li>특정 시점의 UI를 보여준다고 생각</li>
<li>이를 업데이트 하기 위해서는 새로운 엘리먼트 생성하고 이를 root.render()에게 전달하는 방법뿐</li>
</ul>
<aside>
💡 React 엘리먼트를 사용자 정의 컴포넌트로 나타낼 수 있다.

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수형 컴포넌트 정의</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 엘리먼트 생성</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성된 React 엘리먼트 렌더링(가상돔과 리얼돔 비교하여 바뀐 부분만 효율적인 렌더링)</span></span><br><span class="line">root.<span class="title function_">render</span>(element);</span><br><span class="line">혹은</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>	</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</aside>

<h2 id="component"><a href="#component" class="headerlink" title="component"></a>component</h2><p>element들이 모여서 컴포넌트를 이룬다. 엘리먼트는 컴포넌트의 구성요소이다.</p>
<ul>
<li>컴포넌트를 통해 UI를 재사용 가능한 여러 조각으로 나눔 ⇒ CBD</li>
<li>컴포넌트 정의 방법 ⇒ 함수 생성 (props라는 입력 데이터를 전달받는다)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 함수형 컴포넌트</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello~! Welcome &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스형 컴포넌트</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>React 컴포넌트는 자신의 props를 다룰 때, 반드시 순수함수 처럼 동작해야한다.<ul>
<li>프론트 개발을 하면서 순수함수로 개발을 한다는 것은 불가능한 일이기에 **state(상태)**가 등장하였다.</li>
</ul>
</li>
</ul>
<h1 id="🧬-state와-컴포넌트-생명주기"><a href="#🧬-state와-컴포넌트-생명주기" class="headerlink" title="🧬  state와 컴포넌트 생명주기"></a>🧬  state와 컴포넌트 생명주기</h1><p>생명주기 메서드를 사용하여 컴포넌트가 마운트되거나 언마운트될 때 일부 코드를 작동할 수 있다.</p>
<h2 id="마운팅"><a href="#마운팅" class="headerlink" title="마운팅"></a><strong>마운팅</strong></h2><p>컴포넌트가 처음 DOM에 렌더링 될 때마다 어떤 행동을 하도록 설정해주는 것을 “마운팅”이라고 한다.</p>
<h2 id="언마운팅"><a href="#언마운팅" class="headerlink" title="언마운팅"></a>언마운팅</h2><p>컴포넌트가 생성된 DOM에서 삭제될 때마다 어떤 행동을 하도록 설정해주는 것을 “언마운팅”이라고 한다.</p>
<h2 id="🎴-setState-유의사항"><a href="#🎴-setState-유의사항" class="headerlink" title="🎴  setState 유의사항"></a>🎴  setState 유의사항</h2><ul>
<li>this.props, this.state가 비동기적으로 업데이트 될 수 있어 state를 계산할 때, 해당 값에 의존하면 안된다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">increment</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">counter</span> + props.<span class="property">increment</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<ul>
<li>state가 소유하고 설정한 컴포넌트에만 state를 전달할 수 있다. ⇒ props를 통해 하향식(단방향식)으로만</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FormattedDate</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">FormattedDate</span> date=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">date</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p><code>FormattedDate</code> 컴포넌트는 <code>date</code>를 자신의 props로 받을 것이고 이것이 <code>Clock</code>의 state로부터 왔는지, <code>Clock</code>의 props에서 왔는지, 수동으로 입력한 것인지 <strong>알지 못합니다.</strong></p>
<aside>
💡 모든 state는 항상 특정한 컴포넌트가 소유하고 있으며 그 state로부터 파생된 UI 또는 데이터는 오직 트리구조에서 자신의 “아래”에 있는 컴포넌트에만 영향을 미칩니다.

</aside>

<h1 id="🌃-이벤트-처리"><a href="#🌃-이벤트-처리" class="headerlink" title="🌃  이벤트 처리"></a>🌃  이벤트 처리</h1><ul>
<li>camelCase 사용</li>
<li>문자열이 아닌 {함수}로 전달</li>
<li>e.preventDefault() 명시적으로 작성</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You clicked submit.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="♨️-JSX-콜백안에서-this-바인딩"><a href="#♨️-JSX-콜백안에서-this-바인딩" class="headerlink" title="♨️  JSX 콜백안에서 this 바인딩"></a>♨️  JSX 콜백안에서 this 바인딩</h2><p>Javascript 클래스 메서드는 기본적으로 바인딩되어 있지 않는다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Toggle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 콜백에서 `this`가 작동하려면 아래와 같이 바인딩 해주어야 합니다.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">isToggleOn</span>: !prevState.<span class="property">isToggleOn</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>onClick=&#123;this.handleClick&#125;</code>과 같이 뒤에 <code>()</code>를 사용하지 않고 메서드를 참조할 경우, 해당 메서드를 바인딩 해야 합니다.</li>
<li>만약 constructor에서 bind해주기 싫다면 <code>onClick=&#123;this.handleClick.bind(this)&#125;</code> 를 해줘야한다.</li>
</ul>
<h2 id="이벤트-핸들러에-인자-전달"><a href="#이벤트-핸들러에-인자-전달" class="headerlink" title="이벤트 핸들러에 인자 전달"></a>이벤트 핸들러에 인자 전달</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">deleteRow</span>(id, e)&#125;&gt;<span class="title class_">Delete</span> <span class="title class_">Row</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>위줄은 화살표함수, 아랫줄은 bind를 사용하였다.</li>
<li>React 이벤트를 나타내는 e 인자가 ID뒤의 두번째 인자로 전달된다.</li>
<li>bind 사용시 e 인자가 자동으로 전달된다.</li>
</ul>
<h1 id="🎁-조건부-렌더링"><a href="#🎁-조건부-렌더링" class="headerlink" title="🎁  조건부 렌더링"></a>🎁  조건부 렌더링</h1><ul>
<li>props로 전달되는 조건에 따라 렌더링 해주는 무상태 컴포넌트 렌더링</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 무상태</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.<span class="property">isLoggedIn</span>;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)); </span><br><span class="line"><span class="comment">// Try changing to isLoggedIn=&#123;true&#125;:</span></span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;false&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>상태를 가지지 않아 함수형 컴포넌트로 생성하였다. props로 전달되는 값에 따라 조건부 렌더링 한다.</p>
<ul>
<li>state로 관리하는 유상태 컴포넌트 렌더링</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginControl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleLoginClick</span> = <span class="variable language_">this</span>.<span class="property">handleLoginClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleLogoutClick</span> = <span class="variable language_">this</span>.<span class="property">handleLogoutClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleLoginClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleLogoutClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isLoggedIn</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span>;</span><br><span class="line">    <span class="keyword">let</span> button;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      button = <span class="language-xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      button = <span class="language-xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;button&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)); </span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">LoginControl</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>컴포넌트가 상태를 가지고 있고 상태를 변경하는 메서드도 지니고 있다. (캡슐화)</li>
<li>상태가 바뀌면 바뀐 상태에 따라 button 엘리먼트의 사용자 정의 컴포넌트가 다르게 할당된다.</li>
<li>상태가 바뀌면 바뀐 상태를 무상태 컴포넌트에게 props로 전달해주고 있다.</li>
</ul>
<aside>
💡 너무 조건이 복잡하다면 컴포넌트를 분리하기 좋을 때일 수 있다.

</aside>

<h1 id="🔑-리스트와-Key"><a href="#🔑-리스트와-Key" class="headerlink" title="🔑  리스트와 Key"></a>🔑  리스트와 Key</h1><p>리액트에서 반복문은 주로 map 고차함수를 통해 사용한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumberList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">numbers</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> listItems = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">numbers</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 li에 key props를 주지 않는다면 오류가 발생할 것이다.</li>
</ul>
<h2 id="Key란"><a href="#Key란" class="headerlink" title="Key란?"></a>Key란?</h2><p>React가 어떤 항목을 식별하기 위한 문자열이다. 주로 ID를 Key로 사용하지만 ID가 없다면 최후의 수단으로 index를 사용한다.</p>
<ul>
<li>key를 index로 사용하는 것은 권장하지 않는다.</li>
<li>key는 주변 배열의 context에서 의미가 있다. map 함수 내부 엘레먼트에 key 넣자.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ListItem</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = props.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>; <span class="comment">// 여기에 key가 있는 것이 아니다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">numbers</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> listItems = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">numbers</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> (</span><br><span class="line">			<span class="comment">// numbers 배열이 있는 맥락에 key가 있어야 한다.</span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>key는 배열의 형제 요소 사이끼리는 고유해야하지만 두 개의 다른 배열을 만들 때는 동일한 key 사용해도된다.</li>
<li>만약 컴포넌트에서 key와 동일한 값이 필요하다면 이는 key가 아닌 다른 이름의 props로 명시적으로 전달해야한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Blog</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sidebar = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.posts.map((post) =&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;post.title&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> content = props.<span class="property">posts</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;post.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;sidebar&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;Hello World&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;Welcome to learning React!&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Installation&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;You can install React from npm.&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = posts.<span class="title function_">map</span>(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Post</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span> // <span class="attr">X</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">id</span>=<span class="string">&#123;post.id&#125;</span> // <span class="attr">O</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">title</span>=<span class="string">&#123;post.title&#125;</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Blog</span> <span class="attr">posts</span>=<span class="string">&#123;posts&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>위 예시에서 Post 컴포넌트는 props.id는 읽을 수 있지만, props.key는 읽을 수 없다.</li>
</ul>
<aside>
💡 Key는 diff 알고리즘에서 바뀐 부분만 효율적으로 렌더링해주기 위해 필요하다.

</aside>

<h1 id="👔-Form-Element"><a href="#👔-Form-Element" class="headerlink" title="👔  Form Element"></a>👔  Form Element</h1><p>React 에서는 사용자의 입력값을 state로 관리하여 React state가 신뢰 가능한 단일 출처(Single Source of Truth)가 된다. 이렇게 React에 의해 값이 제어되는 입력 폼 엘리먼트를 “제어 컴포넌트”라고 한다.</p>
<p><code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;textarea&gt;</code> 및 <code>&lt;select&gt;</code> 모두 매우 비슷하게 동작한다.</p>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><p>HTML에서는 텍스트를 자식노드로 정의하지만, <strong>React에서는 textarea 태그에 value 어트리뷰트를 사용한다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;textarea value=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>&#125; onChange=&#123;<span class="variable language_">this</span>.<span class="property">handleChange</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>React에서는 select 태그에서 value 어트리뷰트를 통해 selected를 구현한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;select value=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>&#125; onChange=&#123;<span class="variable language_">this</span>.<span class="property">handleChange</span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;grapefruit&quot;</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lime&quot;</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;coconut&quot;</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;mango&quot;</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>multiple옵션 허용 시 value 어트리뷰트에 배열 전달 가능</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;select multiple=&#123;<span class="literal">true</span>&#125; value=&#123;[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="📈-State-끌어올리기"><a href="#📈-State-끌어올리기" class="headerlink" title="📈  State 끌어올리기"></a>📈  State 끌어올리기</h1><p>보통의 경우 state는 렌더링에 그 값을 필요로 하는 컴포넌트에 먼저 추가한다. 그러고 나서 다른 컴포넌트도 그 값이 필요하게 되면 그 값을 그들의 가장 가까운 공통 조상으로 끌어올리고 공통 조상이 자식 컴포넌트들에게 props를 통해 전달해주면 된다. 이 때, 공통 조상의 state를 변경하는 함수도 props에 담아 같이 전달한다.</p>
<ul>
<li>하향식 데이터 흐름을 활용</li>
<li>어떤 값이 props 또는 state로부터 계산될 수 있다면, 아마도 그 값을 state에 두어서는 안 됩니다.</li>
</ul>
<p>ex) <code>celsiusValue</code>와 <code>fahrenheitValue</code>를 둘 다 저장하는 대신, 단지 최근에 변경된 <code>temperature</code>와 <code>scale</code>만 저장하면 됩니다. 다른 입력 필드의 값은 항상 그 값들에 기반해서 <code>render()</code> 메서드 안에서 계산될 수 있습니다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>재사용 많이 되는 Loading 컴포넌트</title>
    <url>/2022/11/14/React/%EC%9E%AC%EC%82%AC%EC%9A%A9-%EB%A7%8E%EC%9D%B4-%EB%90%98%EB%8A%94-Loading-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</url>
    <content><![CDATA[<p>애플리케이션의 비동기 처리는 빈번하게 발생하므로 비동기 요청의 응답을 기다리는 동안 사용자에게 로딩을 표시해줘야한다. <strong>재사용이 가능한 컴포넌트로 로딩 컴포넌트를 만들어보자.</strong></p>
<h2 id="✏️-접근성-고려"><a href="#✏️-접근성-고려" class="headerlink" title="✏️ 접근성 고려"></a>✏️ 접근성 고려</h2><p>접근성을 고려하였을 때, <red>스크린 리더가 로딩중이 시작할 때와 로딩이 종료되었을 때를 읽을 수 있도록 하기 위해서는</red> public 폴더에 index.html 파일에 다음과 같이 기재가 되어있어야한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// public/index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 로딩 스피너 접근성을 위한 DOM 요소를 추가하세요. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loading-start&quot;</span> <span class="attr">aria-live</span>=<span class="string">&quot;assertive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loading-end&quot;</span> <span class="attr">aria-live</span>=<span class="string">&quot;assertive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>aria-live=&quot;assertive&quot;</code>속성을 주어 다른 것보다 우선적으로 스크린 리더가 읽도록 설정해준다.</li>
</ul>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spinner.js</span></span><br><span class="line"><span class="keyword">const</span> loadingElements = &#123;</span><br><span class="line">  <span class="attr">start</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loading-start&quot;</span>),</span><br><span class="line">  <span class="attr">end</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loading-end&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Spinner</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;connect&quot;</span>, <span class="comment">// &#x27;grow&#x27;, &#x27;learn&#x27;, &#x27;connect&#x27;*</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;로딩 중...&quot;</span>,</span><br><span class="line">    <span class="attr">showMessage</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">timeToDisappear</span>: &#123;</span><br><span class="line">      <span class="attr">start</span>: <span class="number">1500</span>,</span><br><span class="line">      <span class="attr">end</span>: <span class="number">2500</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type, message, showMessage &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> spinnerImagePath = <span class="title function_">getAsset</span>(<span class="string">`spinner/spinner-<span class="subst">$&#123;type&#125;</span>.gif`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">className</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#123;styles.image&#125;</span> <span class="attr">src</span>=<span class="string">&#123;spinnerImagePath&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;showMessage ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">A11yHidden</span> <span class="attr">as</span>=<span class="string">&quot;figcaption&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">A11yHidden</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; start &#125; = loadingElements;</span><br><span class="line">    start.<span class="title function_">setAttribute</span>(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;alert&quot;</span>);</span><br><span class="line">    start.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">      <span class="string">&quot;beforeend&quot;</span>,</span><br><span class="line">      <span class="string">`&lt;span class=&quot;a11yHidden&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.props.message&#125;</span>&lt;/span&gt;`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; start, end &#125; = loadingElements;</span><br><span class="line">    <span class="keyword">const</span> &#123; timeToDisappear &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      start.<span class="title function_">removeAttribute</span>(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">      start.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      end.<span class="title function_">insertAdjacentHTML</span>(</span><br><span class="line">        <span class="string">&quot;afterbegin&quot;</span>,</span><br><span class="line">        <span class="string">`&lt;span class=&quot;a11yHidden&quot;&gt;로딩이 종료되었습니다.&lt;/span&gt;`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;, timeToDisappear.<span class="property">start</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      end.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, timeToDisappear.<span class="property">end</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>loading 요소를 반복적으로 사용할 것이기 때문에 최상단에 객체의 프로퍼티로 등록시켜주었다.</li>
<li>Spinner 컴포넌트의 기본 props값을 설정해주었다.<ul>
<li>이는 컴포넌트를 만든 사람만 알 수 있기때문에 <strong>문서화를 하거나 TypeScript를 사용하여 개발자 경험(DX)를 높일 수 있다.</strong></li>
</ul>
</li>
<li>로딩중이라는 메시지를 보여주는 경우와 그렇지 않는 경우를 나누었다. 보여주지 않는 경우에는 접근성 컴포넌트로 생성하여 스크린 리더에는 읽히도록 설정해주었다.</li>
<li>컴포넌트가 mounted 될 때, <code>role=&quot;alert&quot;</code>속성을 주어 스크린 리더가 읽고 있는 것을 중지하고 로딩중을 읽도록 설정하였다.</li>
<li><red>StrictMode 에서는 mounted - unmounted - mounted 되는 특징</red>때문에 2번 작동할 수 있으므로 <strong>성능을 고려하여 clean Up을 해줘야한다.</strong></li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>컴포넌트 구성과 상태관리 전략</title>
    <url>/2023/03/18/React/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%96%B4%EB%96%A4-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EA%B5%AC%EC%84%B1%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C/</url>
    <content><![CDATA[<h1 id="데이터와-디자인을-컴포넌트로-구성하기"><a href="#데이터와-디자인을-컴포넌트로-구성하기" class="headerlink" title="데이터와 디자인을 컴포넌트로 구성하기"></a>데이터와 디자인을 컴포넌트로 구성하기</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;과일&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span> <span class="attr">&quot;stocked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;사과&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;과일&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1640</span><span class="punctuation">,</span> <span class="attr">&quot;stocked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;두리안&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;과일&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">2480</span><span class="punctuation">,</span> <span class="attr">&quot;stocked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;아보카도&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;채소&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1700</span><span class="punctuation">,</span> <span class="attr">&quot;stocked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;시금치&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;채소&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">2800</span><span class="punctuation">,</span> <span class="attr">&quot;stocked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;호박&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;채소&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1330</span><span class="punctuation">,</span> <span class="attr">&quot;stocked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;완도콩&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/comp/design.png" alt="design"></p>
<p>위와 같이 데이터와 디자인 시안이 제시되었을 때, 컴포넌트를 어떻게 구성하는 것이 좋을지 생각해본다.</p>
<p><strong>UI와 데이터는 주로 동일한 모양을 갖기 때문에 데이터 구조와 컴포넌트 구조가 자연스럽게 매핑된다.</strong></p>
<p>그러므로 다음과 같이 컴포넌트를 구성할 수 있을 것이다.</p>
<p><img src="/../../images/comp/components.png" alt="component"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FilterableProductTable</span><br><span class="line"> ├── SearchBar</span><br><span class="line"> └── ProductTable</span><br><span class="line">      ├── ProductCategoryRow</span><br><span class="line">      └── ProductRow</span><br></pre></td></tr></table></figure>

<p>폴더 구조는 위와 같이 구성할 수 있을 것이다.</p>
<blockquote>
<p>이상적인 컴포넌트 설계는 한가지만 책임하는 것이다. 만약 한가지 이상의 처리가 필요하다면 컴포넌트를 더 작은 컴포넌트로 나눠야한다.</p>
</blockquote>
<h2 id="React-정적-컴포넌트-구성"><a href="#React-정적-컴포넌트-구성" class="headerlink" title="React 정적 컴포넌트 구성"></a>React 정적 컴포넌트 구성</h2><p>컴포넌트에 대한 구상이 끝났으므로 React로 앱을 빌드해보자.</p>
<p>이 때 가장 간단한 접근법은 사용자와의 상호작용은 고려하지 않고 데이터 모델에서 UI를 렌더링 하는 버전으로 작성하는 것이다.</p>
<p>데이터 모델을 렌더링하는 앱을 만들고자 한다면 props와 state를 사용하고 싶을 것이다. 하지만 <span style="color:red;">현재 단계에서는 state를 사용하지 않는다.</span><br>왜냐하면 state는 사용자와 상호작용할 때 사용하기 때문에 아직 단계가 아니다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">PRODUCTS</span> <span class="keyword">from</span> <span class="string">&quot;../../api/products.json&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FilterableProductTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> products = [...<span class="variable constant_">PRODUCTS</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filterableProductTable&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SearchBar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProductTable</span> <span class="attr">products</span>=<span class="string">&#123;products&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FilterableProductTable</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>정적 빌드된 컴포넌트는 JSX만을 반환한다. 그리고 컴포넌트 트리 최상위 컴포넌트에서 데이터 모델을 하위 props로 전달하는 “단방향 데이터 흐름”을 구현한다.</p>
</blockquote>
<h2 id="컴포넌트-UI-대화형으로-만들기"><a href="#컴포넌트-UI-대화형으로-만들기" class="headerlink" title="컴포넌트 UI 대화형으로 만들기"></a>컴포넌트 UI 대화형으로 만들기</h2><p>UI를 대화형으로 만들려면 사용자가 기본 데이터를 변경할 수 있도록 해야한다. 이러한 상호작용이 필요할 때, state를 사용한다.</p>
<p><strong>state는 앱이 기억하고 변경해야 할 데이터의 최소 집합이라고 생각할 수 있다.</strong></p>
<p>이 때 상태를 구성하는 가장 중요한 원칙은 DRY(Don’t Repeat Yourself)이다. state는 최소한으로만 필요해야하며 나머지는 필요할 때 다시 고민한다.</p>
<p>그렇다면 위 컴포넌트에서는 state는 무엇이 될 수 있을까?</p>
<h3 id="state와-props-구분하기"><a href="#state와-props-구분하기" class="headerlink" title="state와 props 구분하기"></a>state와 props 구분하기</h3><h4 id="1-시간이-지남에도-변경이-없다면"><a href="#1-시간이-지남에도-변경이-없다면" class="headerlink" title="1. 시간이 지남에도 변경이 없다면?"></a>1. 시간이 지남에도 변경이 없다면?</h4><p>&#x3D;&gt; 이는 state가 아니다. state는 사용자와 상호작용해야하는 요소이기 때문이다.</p>
<h4 id="2-props를-통해-상위-컴포넌트로-부터-전달될-수-있다면"><a href="#2-props를-통해-상위-컴포넌트로-부터-전달될-수-있다면" class="headerlink" title="2. props를 통해 상위 컴포넌트로 부터 전달될 수 있다면?"></a>2. props를 통해 상위 컴포넌트로 부터 전달될 수 있다면?</h4><p>&#x3D;&gt; 이는 state가 아니다.</p>
<h4 id="3-컴포넌트의-기존-state-또는-props를-기반으로-계산할-수-있다면"><a href="#3-컴포넌트의-기존-state-또는-props를-기반으로-계산할-수-있다면" class="headerlink" title="3. 컴포넌트의 기존 state 또는 props를 기반으로 계산할 수 있다면?"></a>3. 컴포넌트의 기존 state 또는 props를 기반으로 계산할 수 있다면?</h4><p>&#x3D;&gt; 이는 state가 아니다.</p>
<p>그러므로 위 예시에서 state는 검색 텍스트 값과 체크박스 값이 될 수 있다.</p>
<h2 id="앱-상태-관리-하기"><a href="#앱-상태-관리-하기" class="headerlink" title="앱 상태 관리 하기"></a>앱 상태 관리 하기</h2><p>자 이제 앱이 가지는 최소한의 state를 파악했다. 그러면 이 state를 변경하고 소유하는 컴포넌트는 누가 할 것인지를 정해줘야한다.</p>
<p>React는 단방향 데이터 흐름을 사용하기 때문에 상위 컴포넌트에서 하위 컴포넌트로 데이터가 전달된다.</p>
<h3 id="컴포넌트-상태-관리-전략"><a href="#컴포넌트-상태-관리-전략" class="headerlink" title="컴포넌트 상태 관리 전략"></a>컴포넌트 상태 관리 전략</h3><ol>
<li>state를 기반으로 무언가를 렌더링하는 모든 컴포넌트 확인한다.</li>
<li>해당 컴포넌트와 가장 가까운 공통 상위 컴포넌트를 찾는다.</li>
</ol>
<p>이제 state를 어디서 관리할지 정해줘야한다. 경우의 수는 3가지가 있다.</p>
<ul>
<li>state를 공통 상위 컴포넌트에서 관리</li>
<li>state를 공통 상위 컴포넌트보다 상위에서 관리</li>
<li>state를 소유하는 것이 타당한 컴포넌트를 찾지 못한 경우, state를 유지하기 위한 새로운 컴포넌트 만들고 공통 상위 컴포넌트 보다 위 어딘가에 추가하여 관리</li>
</ul>
<p>위 예시에서 검색 텍스트 값과 체크박스 값이 state라고 하였다.</p>
<h3 id="컴포넌트-상태-관리-단계"><a href="#컴포넌트-상태-관리-단계" class="headerlink" title="컴포넌트 상태 관리 단계"></a>컴포넌트 상태 관리 단계</h3><ol>
<li>상태를 사용하는 컴포넌트 식별</li>
</ol>
<ul>
<li>SearchBar - 검색 텍스트 state 관리</li>
<li>ProductTable - 체크박스 유무 state 관리</li>
</ul>
<ol start="2">
<li>공통 상위 컴포넌트 찾기</li>
</ol>
<p>SearchBar, ProductTable 의 공통 상위 컴포넌트는 FilterableProductTable 컴포넌트이다.</p>
<ol start="3">
<li>state가 있는 위치 결정</li>
</ol>
<p>공통 상위 컴포넌트인 FilterableProductTable 컴포넌트에서 관리한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">PRODUCTS</span> <span class="keyword">from</span> <span class="string">&quot;../../api/products.json&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SearchBar</span> <span class="keyword">from</span> <span class="string">&quot;./SearchBar/SearchBar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ProductTable</span> <span class="keyword">from</span> <span class="string">&quot;./ProductTable/ProductTable&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FilterableProductTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> products = [...<span class="variable constant_">PRODUCTS</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [searchText, setSearchText] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [inStockOnly, setInStockOnly] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handeChangeSearchText</span> = (<span class="params">newSearchText: string</span>) =&gt;</span><br><span class="line">    <span class="title function_">setSearchText</span>(newSearchText);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handeChangeInStockOnly</span> = (<span class="params">inStockOnlyState: boolean</span>) =&gt;</span><br><span class="line">    <span class="title function_">setInStockOnly</span>(inStockOnlyState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filterableProductTable&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SearchBar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">searchText</span>=<span class="string">&#123;searchText&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">inStockOnly</span>=<span class="string">&#123;inStockOnly&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChangeSearchText</span>=<span class="string">&#123;handeChangeSearchText&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChangeInStockOnly</span>=<span class="string">&#123;handeChangeInStockOnly&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProductTable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">products</span>=<span class="string">&#123;products&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">searchText</span>=<span class="string">&#123;searchText&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">inStockOnly</span>=<span class="string">&#123;inStockOnly&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FilterableProductTable</span>;</span><br></pre></td></tr></table></figure>

<p>해당 컴포넌트에서 state를 관리하고 props로 전달하는 것은 완료했으니 state를 관리하는 컴포넌트에서 state 변경함수까지 props 전달하여 사용자가 UI를 업데이트 할 수 있도록 구현해주면 완성이다.</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>상태관리전략</tag>
      </tags>
  </entry>
  <entry>
    <title>🎧 PropTypes</title>
    <url>/2022/11/14/React/%F0%9F%8E%A7-PropTypes/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌈-PropTypes"><a href="#🌈-PropTypes" class="headerlink" title="🌈 PropTypes"></a>🌈 PropTypes</h1><p>리액트 컴포넌트에 전달되는 Prop(속성)의 Type(타입)을 검사하는 방법에 대해 알아보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">EmotionCard</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="comment">// 전달 속성 객체, 속성 이름, 컴포넌트 이름</span></span><br><span class="line">  <span class="title function_">emotion</span>(<span class="params">props, propName, componentName</span>) &#123;</span><br><span class="line">    <span class="comment">// 체크할 유형</span></span><br><span class="line">    <span class="keyword">const</span> checkType = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">    <span class="comment">// 전달 속성 유형</span></span><br><span class="line">    <span class="keyword">const</span> propType = <span class="keyword">typeof</span> props[propName];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 전달 속성 검사 (문자 값인지 확인)</span></span><br><span class="line">    <span class="keyword">if</span> (propType !== checkType) &#123;</span><br><span class="line">      <span class="comment">// 문자 값이 아닌 경우 오류 발생</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;componentName&#125;</span> 컴포넌트에 전달 된 속성 <span class="subst">$&#123;propName&#125;</span>의 데이터 유형은 <span class="subst">$&#123;checkType&#125;</span>이 요구되나, 실제 전달된 속성 유형은 <span class="subst">$&#123;propType&#125;</span>이니 확인 바랍니다.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>위와 같이 직접 custom propTypes를 통해 prop를 검사할 수 있지만 리액트 팀에서 제공하는 <strong>propTypes 패키지를 사용하면 편리하고 안정적으로 prop 검사를 할 수 있다.</strong></p>
<h2 id="패키지-사용"><a href="#패키지-사용" class="headerlink" title="패키지 사용"></a>패키지 사용</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D prop-types</span><br></pre></td></tr></table></figure>

<h3 id="사용-예시"><a href="#사용-예시" class="headerlink" title="사용 예시"></a>사용 예시</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Worker</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">  <span class="attr">career</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="attr">onCareerUp</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span><br><span class="line">  <span class="attr">isLeave</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>isRequired 는 필수입력을 요구하는 속성을 표시한다.</li>
</ul>
<h3 id="propTypes-검사-항목"><a href="#propTypes-검사-항목" class="headerlink" title="propTypes 검사 항목"></a>propTypes 검사 항목</h3><p><img src="/../../images/proptypes/type_categories.png" alt="propType_categories"></p>
<h3 id="PropTypes﹕objectOf-vs-shape"><a href="#PropTypes﹕objectOf-vs-shape" class="headerlink" title="PropTypes﹕objectOf vs. shape"></a>PropTypes﹕objectOf vs. shape</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; objectOf, number &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> geoProps = &#123;</span><br><span class="line">  <span class="attr">latitude</span>: <span class="number">37.331706</span>,</span><br><span class="line">  <span class="attr">longitude</span>: -<span class="number">122.030783</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">geoProps</span>: <span class="title function_">objectOf</span>(number),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>propTypes.objectOf</code> 는 <strong>객체의 속성 값이 모두 동일한 타입을 설명할 경우</strong> 사용한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shape, arrayOf, string &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personProp = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;야무&quot;</span>,</span><br><span class="line">  <span class="attr">job</span>: [<span class="string">&quot;강사&quot;</span>, <span class="string">&quot;디자이너&quot;</span>, <span class="string">&quot;개발자&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">personProp</span>: <span class="title function_">shape</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: string,</span><br><span class="line">    <span class="attr">job</span>: <span class="title function_">arrayOf</span>(string),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>내가 객체 prop 타입 설정하고 싶다하면 shape를 사용한다.</li>
<li><code>propTypes.shape</code> 는 객체의 각 속성별 타입을 설명할 때 사용한다.</li>
<li>객체의 name 속성은 string, job 속성은 배열을 사용하였다.</li>
<li>job의 배열에는 string으로만 구성된 배열이므로 <code>arrayOf</code>를 사용하였다.</li>
</ul>
<blockquote>
<p>객체의 속성이 정확히 동일하게 일치해야한다면 <red>propTypes.exact()</red>를 사용한다.</p>
</blockquote>
<h3 id="❗️-Null-타입-체크-주의"><a href="#❗️-Null-타입-체크-주의" class="headerlink" title="❗️ Null 타입 체크 주의"></a>❗️ Null 타입 체크 주의</h3><p>propTypes는 null 타입 체크를 할 수 없어 <strong>oneOf를 사용한다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; oneOf, oneOfType, shape, string &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SignInedInfo</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">authUser</span>: <span class="title function_">oneOfType</span>([</span><br><span class="line">    <span class="title function_">oneOf</span>([<span class="literal">null</span>]), <span class="comment">// ← 이렇게 작성합니다.</span></span><br><span class="line">    <span class="title function_">shape</span>(&#123;</span><br><span class="line">      <span class="attr">displayName</span>: string.<span class="property">isRequired</span>,</span><br><span class="line">      <span class="attr">photoURL</span>: string.<span class="property">isRequired</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>PropTypes.oneOf([’grow’, ‘learn’, ‘connect’])</code> 이 중 하나만 파라미터로 들어올 수 있다.</li>
</ul>
<h2 id="🔥-defaultProps와-같이-사용하기"><a href="#🔥-defaultProps와-같이-사용하기" class="headerlink" title="🔥 defaultProps와 같이 사용하기"></a>🔥 defaultProps와 같이 사용하기</h2><p>함수에 기본값을 주듯이 props에 기본값을 주는 것을 <red>리액트에서는 지양한다.</red> 그러므로 다음과 같이 기본값을 줘야한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; number, bool&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Worker</span> = (<span class="params">&#123; name, career, onCareerUp, isLeave &#125;</span>) =&gt; (</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 컴포넌트 전달 속성 기본 값 설정</span></span><br><span class="line"><span class="title class_">Worker</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">career</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">isLeave</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Worker</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">career</span>:number,</span><br><span class="line">  <span class="attr">isLeave</span>: bool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Worker</span> &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>boolean 대신 bool이라고 사용합니다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>HTMLElement 조작과 타입 좁히기</title>
    <url>/2022/11/22/TypeScript/HTMLElement-%EC%A1%B0%EC%9E%91%EA%B3%BC-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="📌-TypeScript로-HTML-요소-조작하기"><a href="#📌-TypeScript로-HTML-요소-조작하기" class="headerlink" title="📌 TypeScript로 HTML 요소 조작하기"></a>📌 TypeScript로 HTML 요소 조작하기</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (title <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span><br><span class="line">  title.<span class="property">innerHTML</span> = <span class="string">&quot;제목입니다.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>❗️ <code>title 요소가 null 타입일 수 도 있다.</code>라는 오류!</p>
<p>자바스크립트에서 HTML 요소를 타입 좁히기 없이 조작할 수 있었지만, <strong>TypeScript에서는 타입을 확실하게 지정해줘야지만 오류를 발생시키지 않는다.</strong></p>
<p>위와 같이 <red>타입을 좁히는 과정을 <strong>Narrowing</strong></red>이라고 한다.</p>
<h2 id="✈️-narrowing-방법"><a href="#✈️-narrowing-방법" class="headerlink" title="✈️ narrowing 방법"></a>✈️ narrowing 방법</h2><h3 id="1-HTML-구분-명확히"><a href="#1-HTML-구분-명확히" class="headerlink" title="1. HTML 구분 명확히"></a>1. HTML 구분 명확히</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;image&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (img <span class="keyword">instanceof</span> <span class="title class_">HTMLImageElement</span>) &#123;</span><br><span class="line">  img.<span class="property">src</span> = <span class="string">&quot;new.jpg&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>HTMLImageElement 말고 그냥 HTMLElement로 검사를 하게될 경우 광범위한 타입에 대한 문제와 <strong>HTMLElement 에는 src 속성이 없으므로 명확한 타입으로 narrowing 해줘야한다.</strong></li>
</ul>
<h3 id="2-instance-of-연산자"><a href="#2-instance-of-연산자" class="headerlink" title="2. instance of 연산자"></a>2. instance of 연산자</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (title <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span><br><span class="line">  title.<span class="property">innerHTML</span> = <span class="string">&quot;제목입니다.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-optional-chaining-연산자"><a href="#3-optional-chaining-연산자" class="headerlink" title="3. optional chaining 연산자"></a>3. optional chaining 연산자</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">button?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>button 요소가 null이거나 undefined 이면 undefined를 반환하고 그렇지 않으면 이벤트 리스너를 등록한다.</li>
</ul>
<h3 id="4-명시적-태그-사용-tagged-union"><a href="#4-명시적-태그-사용-tagged-union" class="headerlink" title="4. 명시적 태그 사용(tagged union)"></a>4. 명시적 태그 사용(tagged union)</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UploadEvent</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">  <span class="attr">fileName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DownloadEvent</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;download&quot;</span>;</span><br><span class="line">  <span class="attr">fileName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-let-대신-const-키워드로-선언"><a href="#5-let-대신-const-키워드로-선언" class="headerlink" title="5. let 대신 const 키워드로 선언"></a>5. let 대신 const 키워드로 선언</h3><ul>
<li>만능은 아니다. 너무 많은 후보들이 있으면 곤란하다.</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mixed = [<span class="string">&quot;x&quot;</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// (&#x27;x&#x27;|1)[]</span></span><br><span class="line"><span class="comment">// [&#x27;x&#x27;, 1]</span></span><br><span class="line"><span class="comment">// [string, number]</span></span><br><span class="line"><span class="comment">// readonly [string, number]</span></span><br><span class="line"><span class="comment">// (string|number)[]</span></span><br><span class="line"><span class="comment">// readonly (string|number)[]</span></span><br></pre></td></tr></table></figure>

<h3 id="6-if-구문-사용"><a href="#6-if-구문-사용" class="headerlink" title="6. if 구문 사용"></a>6. if 구문 사용</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;foo&quot;</span>); <span class="comment">// type is HTMLElement | null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (el) &#123;</span><br><span class="line">  el; <span class="comment">// type is HTMLElement</span></span><br><span class="line">  el.<span class="property">innerHTML</span> = <span class="string">&quot;party time&quot;</span>.<span class="title function_">blink</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el; <span class="comment">// type is null</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;No element #foo&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-in-연산자-사용"><a href="#7-in-연산자-사용" class="headerlink" title="7. in 연산자 사용"></a>7. in 연산자 사용</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickAB</span>(<span class="params">ab: A | B</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> ab) &#123;</span><br><span class="line">    ab; <span class="comment">// type is A</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ab; <span class="comment">// type is B</span></span><br><span class="line">  &#125;</span><br><span class="line">  ab; <span class="comment">// type is A | B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>type alias(타입별칭)와 타입 합치기</title>
    <url>/2022/11/22/TypeScript/type-alias-%ED%83%80%EC%9E%85%EB%B3%84%EC%B9%AD-%EC%99%80-%ED%83%80%EC%9E%85-%ED%95%A9%EC%B9%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="📌-type-alias-타입별칭"><a href="#📌-type-alias-타입별칭" class="headerlink" title="📌 type alias(타입별칭)"></a>📌 type alias(타입별칭)</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>type 타입변수명 &#x3D; 타입종류</li>
<li>이런 식으로 타입 별칭으로 변수처럼 담아서 재사용할 수 있다.</li>
<li>관습적으로 대문자 사용</li>
</ul>
<h2 id="🏓-function-type-지정하기"><a href="#🏓-function-type-지정하기" class="headerlink" title="🏓 function type 지정하기"></a>🏓 function type 지정하기</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NumOut</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ABC</span>: <span class="title class_">NumOut</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeDash</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = x.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseFloat</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>위와 같이 함수 타입도 type alias를 저장하여 사용할 수 있다.</li>
<li>함수타입을 사용하려면 함수를 <red>표현식으로 정의</red>해줘야한다.</li>
</ul>
<h3 id="callback-함수-type-지정하기"><a href="#callback-함수-type-지정하기" class="headerlink" title="callback 함수 type 지정하기"></a>callback 함수 type 지정하기</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">CutType</span> = <span class="function">(<span class="params">x: string</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">cutZero</span>: <span class="title class_">CutType</span> = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = x.<span class="title function_">replace</span>(<span class="regexp">/^0+/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeDash</span>(<span class="params">x: string</span>): number &#123;</span><br><span class="line">  <span class="keyword">let</span> result = x.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseFloat</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">newFunc</span> = (<span class="params">str: string, funA: CutType, funB: (x: string) =&gt; number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">removeDash</span>(<span class="title function_">cutZero</span>(str));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 콜백 함수의 타입을 지정해주고 싶다면 위와 같이 지정해줄 수 있다.</li>
</ul>
<h2 id="✏️-readonly로-객체-잠그기"><a href="#✏️-readonly로-객체-잠그기" class="headerlink" title="✏️ readonly로 객체 잠그기"></a>✏️ readonly로 객체 잠그기</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;loco&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>위와 같이 자바스크립트에서 const 키워드로 재할당을 막아도 객체 내부까지는 막을 수 없다. 이럴 때 <strong>readonly 타입을 지정해주면 막을 수 있다.</strong></li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;loco&quot;</span>; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>컴파일 시 에러가 발생한다.(변환된 js 파일은 바뀌어 있다.)</p>
</li>
<li><p>readonly number[ ]는 배열 요소를 읽을 수만 있다.</p>
</li>
<li><p>배열을 변경하는 pop 메서드를 비롯한 다른 메서드를 호출할 수 없다.</p>
</li>
</ul>
<h3 id="❗️-readonly-주의사항"><a href="#❗️-readonly-주의사항" class="headerlink" title="❗️ readonly 주의사항"></a>❗️ readonly 주의사항</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="keyword">readonly</span> <span class="built_in">number</span>[] = a;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="built_in">number</span>[] = b; <span class="comment">// Error: &#x27;readonly number[]는 변경가능한 number[] 타입에 할당할 수 없다.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>number[ ]는 readonly number[ ]보다 기능이 많기 때문에 <strong>readonly number[ ]의 서브타입</strong>이다.</li>
<li>number[ ]는 readonly number[ ]에 <strong>할당 가능하다</strong>.</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arraySum</span>(<span class="params">arr: <span class="keyword">readonly</span> <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    sum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>함수가 매개변수를 변경하지 않는다면 readonly로 선언해야한다.</li>
</ul>
<h2 id="⛳️-type-키워드-여러개-합치기"><a href="#⛳️-type-키워드-여러개-합치기" class="headerlink" title="⛳️ type 키워드 여러개 합치기"></a>⛳️ type 키워드 여러개 합치기</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> person = <span class="title class_">Name</span> | <span class="title class_">Age</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>OR 연산자를 사용하여 유니온 타입으로 만들 수 있다.</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PositionX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PositionY</span> = &#123; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">XandY</span> = <span class="title class_">PositionX</span> &amp; <span class="title class_">PositionY</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">XandZ</span> = <span class="title class_">PositionX</span> &amp; &#123; <span class="attr">z</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pos</span>: <span class="title class_">XandY</span> = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pos</span>: <span class="title class_">XandZ</span> = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>객체 타입은 &amp; 연산자를 사용하여 **합치기(extends)**가 가능하다.</li>
<li>XandY type is <code>&#123; x: number, y: number &#125;</code></li>
<li>Type alias &amp; Type alias 뿐만 아니라 Type alias &amp; { key: type }도 가능하다.</li>
</ul>
<blockquote>
<p>type 키워드는 <red>재정의가 불가능하다.</red></p>
</blockquote>
<h3 id="❗️-amp-연산자-주의사항"><a href="#❗️-amp-연산자-주의사항" class="headerlink" title="❗️ &amp; 연산자 주의사항"></a>❗️ &amp; 연산자 주의사항</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Combined</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span> &#125; &amp; &#123; <span class="attr">b</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Conflicting</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span> &#125; &amp; &#123; <span class="attr">a</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ta</span>: <span class="title class_">Combined</span> = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&quot;st&quot;</span> &#125;; <span class="comment">// 정상</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tt</span>: <span class="title class_">Conflicting</span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Combined 타입은 { a: number, b: string }</li>
<li>Conflicting 타입은 { a: <code>number와 string의 교집합 === never</code> }</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>타입스크립트 들어가기 전...</title>
    <url>/2022/11/18/TypeScript/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%20%EC%A0%84.../</url>
    <content><![CDATA[<h1 id="📌-타입스크립트란"><a href="#📌-타입스크립트란" class="headerlink" title="📌 타입스크립트란?"></a>📌 타입스크립트란?</h1><p>JavaScript는 동적 타입만을 제공하여 예측하기 어려운 타입변환으로 디버깅이 어려워지는 문제점이 있어 이를 해결하고자 TypeScript가 탄생하였다.</p>
<p>TypeScript는 정적 타입 시스템을 사용하여 <strong>코드가 실행되기 전에 코드에 대하여 예측해준다.</strong></p>
<span id="more"></span>

<p>JavaScript 위의 레이어로 자리잡고 있어 JavaScript 기능을 제공하면서 그 위에 타입 시스템이라는 레이어를 추가한 것이다.</p>
<p>즉, TypeScript는 <red>JavaScript 기능과 타입 시스템 기능을 제공하는 프로그래밍 언어</red>입니다.</p>
<h2 id="🤿-타입-추론"><a href="#🤿-타입-추론" class="headerlink" title="🤿 타입 추론"></a>🤿 타입 추론</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> helloWorld = <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/typescript/typeByReference.png" alt="타입추론"></p>
<p>위와 같이 JavaScript 코드를 작성하면 TypeScript는 위 사진같이 타입을 추론합니다.</p>
<h2 id="✏️-타입-정의"><a href="#✏️-타입-정의" class="headerlink" title="✏️ 타입 정의"></a>✏️ 타입 정의</h2><h3 id="객체-타입-정의"><a href="#객체-타입-정의" class="headerlink" title="객체 타입 정의"></a>객체 타입 정의</h3><p>타입을 구축하기 위해 우선적으로 interface 구문을 사용하고 특정 기능이 필요할 때, <code>type</code>을 사용한다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 변수 뒤에 : TypeName 구문을 사용하여 JavaScript 객체가 interface 형태를 따르고 있다는 것을 선언할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Hayes&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">&#125;; <span class="comment">// 성공</span></span><br></pre></td></tr></table></figure>

<p>하지만 해당 interface 형태와 다른 객체에 선언하면 오류를 발생시킨다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @errors: 2322</span></span><br><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">id</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;Hayes&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="인터페이스는-클래스로도-선언이-가능하다"><a href="#인터페이스는-클래스로도-선언이-가능하다" class="headerlink" title="인터페이스는 클래스로도 선언이 가능하다."></a>인터페이스는 클래스로도 선언이 가능하다.</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAccount</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, id: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = <span class="keyword">new</span> <span class="title class_">UserAccount</span>(<span class="string">&quot;Murphy&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="인터페이스는-함수에서-매개변수와-리턴-값을-명시할-수-있다"><a href="#인터페이스는-함수에서-매개변수와-리턴-값을-명시할-수-있다" class="headerlink" title="인터페이스는 함수에서 매개변수와 리턴 값을 명시할 수 있다."></a>인터페이스는 함수에서 매개변수와 리턴 값을 명시할 수 있다.</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @noErrors</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---cut---</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAdminUser</span>(<span class="params"></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteUser</span>(<span class="params">user: User</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🐥-타입-구성"><a href="#🐥-타입-구성" class="headerlink" title="🐥 타입 구성"></a>🐥 타입 구성</h2><p>interface 구문 대신 여러가지 타입을 이용하여 새 타입을 작성하기 위한 용도로 <strong>유니온(Unions)과 제네릭(Generic)</strong> 이 있다.</p>
<h3 id="유니온-Unions"><a href="#유니온-Unions" class="headerlink" title="유니온(Unions)"></a>유니온(Unions)</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> testBool = <span class="literal">true</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>유니온 타입이 가장 많이 사용되는 사례는 허용되는 타입들을 집합으로 나타낼 때이다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">WindowStates</span> = <span class="string">&quot;open&quot;</span> | <span class="string">&quot;closed&quot;</span> | <span class="string">&quot;minimized&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OddNumbersUnderTen</span> = <span class="number">1</span> | <span class="number">3</span> | <span class="number">5</span> | <span class="number">7</span> | <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">WindowStates</span> = <span class="string">&quot;open&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">OddNumbersUnderTen</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;4&quot;</span>]; <span class="comment">// error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>

<h3 id="제네릭-generic"><a href="#제네릭-generic" class="headerlink" title="제네릭(generic)"></a>제네릭(generic)</h3><p>제네릭은 타입에 변수를 제공하는 방법이다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StringArray</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectWithNameArray</span> = <span class="title class_">Array</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">strArr</span>: <span class="title class_">StringArray</span> = [<span class="string">&quot;str&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="number">3</span>]; <span class="comment">// 성공</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">objWithArr</span>: <span class="title class_">ObjectWithNameArray</span> = [&#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;]; <span class="comment">// Error</span></span><br><span class="line"><span class="comment">// Type &#x27;&#123; age: number; &#125;&#x27; is not assignable to type &#x27;&#123; name: string; &#125;&#x27;.</span></span><br><span class="line"><span class="comment">// Object literal may only specify known properties, and &#x27;age&#x27; does not exist in type &#x27;&#123; name: string; &#125;&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>제네릭으로 변수에 타입을 할당하고 이를 다른 타입에게 전달하거나 할 수 있다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 arg에 number가 들어오게 되면 Type 변수가 이를 기억했다가 identity 함수의 반환값도 number로 할당해준다.</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// 배열은 .length를 가지고 있습니다. 따라서 오류는 없습니다.</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt;): <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// 배열은 .length를 가지고 있습니다. 따라서 오류는 없습니다.</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 배열을 받아서 그 길이를 출력하고 배열을 반환하고 싶다면 위와 같이 작성할 수 있다.</li>
</ul>
<h2 id="⛳️-구조적-타입-시스템"><a href="#⛳️-구조적-타입-시스템" class="headerlink" title="⛳️ 구조적 타입 시스템"></a>⛳️ 구조적 타입 시스템</h2><p>TypeScript 핵심 원칙 중 하나는 타입 검사가 값이 있는 형태에 초점을 맞춘다는 것이다. 이는 duck typing 또는 구조적 타이핑이라고 부른다.</p>
<blockquote>
<p>구조적 타입 시스템에서 두 객체가 같은 형태를 가지면 같은 것으로 간주한다.</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> 오리 &#123;</span><br><span class="line">  꽥꽥: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> 오리인척하기(<span class="attr">duck</span>: 오리) &#123;</span><br><span class="line">  duck.꽥꽥();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 고양이 = &#123; 꽥꽥: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;꽥꽥&quot;</span>) &#125;;</span><br><span class="line">오리인척하기(고양이); <span class="comment">// 꽥꽥</span></span><br></pre></td></tr></table></figure>

<ul>
<li>고양이 변수는 오리라는 타입으로 선언된 적이 없지만, 내부에 꽥꽥이라는 메서드를 가지고 있으므로 고양이 객체를 오리인척하기 함수에 인수로 전달하여 호출하였더닌 고양이가 꽥꽥을 출력하였다.</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printPoint</span>(<span class="params">p: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;p.x&#125;</span>, <span class="subst">$&#123;p.y&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;12, 26&quot;를 출력합니다</span></span><br><span class="line"><span class="keyword">const</span> point = &#123; <span class="attr">x</span>: <span class="number">12</span>, <span class="attr">y</span>: <span class="number">26</span> &#125;;</span><br><span class="line"><span class="title function_">printPoint</span>(point);</span><br></pre></td></tr></table></figure>

<ul>
<li>point 변수에 Point type이 선언된 적이 없지만 같은 형태를 가지고 있어 정상적으로 동작하는 것을 볼 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>🐥 타마스 러버덕 1일차</title>
    <url>/2022/11/18/TypeScript/%F0%9F%90%A5%20%ED%83%80%EB%A7%88%EC%8A%A4%20%EB%9F%AC%EB%B2%84%EB%8D%95%201%EC%9D%BC%EC%B0%A8/</url>
    <content><![CDATA[<h1 id="📌-TypeScript와-JavaScript-관계"><a href="#📌-TypeScript와-JavaScript-관계" class="headerlink" title="📌 TypeScript와 JavaScript 관계"></a>📌 TypeScript와 JavaScript 관계</h1><p>모든 JavaScript는 TypeScript이지만, <red>모든 TypeScript가 JavaScript는 아니다.</red></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">capital</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">states</span>: <span class="title class_">State</span>[] = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">capital</span>: <span class="string">&quot;경기도&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>, <span class="attr">capitol</span>: <span class="string">&quot;서울&quot;</span> &#125;,</span><br><span class="line">]; <span class="comment">// Error</span></span><br><span class="line"><span class="comment">// Type &#x27;&#123; name: string; capitol: string; &#125;&#x27; is not assignable to type &#x27;State&#x27;.</span></span><br><span class="line"><span class="comment">//   Object literal may only specify known properties, but &#x27;capitol&#x27; does not exist in type &#x27;State&#x27;. Did you mean to write &#x27;capital&#x27;?</span></span><br></pre></td></tr></table></figure>

<p>위 예시를 설명하면, 앞서 말한 <code>모든 타입스크립트가 자바스크립트다</code> <red>라고 하는 말은 틀렸다.</red></p>
<span id="more"></span>

<p>우리는 타입에 맞도록 작성하기 위해 타입스크립트를 사용하려는 것이므로 타입에 맞게 코드를 작성할 때만 진정 타입스크립트 코드를 작성했다고 말할 수 있다.</p>
<p><strong><red>타입스크립트 프로그램 $\supset$ ( 자바스크립트 프로그램 $\cap$ 타입체커를 통과한 타입스크립트 )</red></strong></p>
<h1 id="📌-코드-생성과-타입은-관련이-없다"><a href="#📌-코드-생성과-타입은-관련이-없다" class="headerlink" title="📌 코드 생성과 타입은 관련이 없다."></a>📌 코드 생성과 타입은 관련이 없다.</h1><p>TypeScript로 작성한 코드가 컴파일 과정을 통해 JavaScript로 변환된다.</p>
<p>이 때, 타입 코드들은 사라지게된다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeScript</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">capital</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">states</span>: <span class="title class_">State</span>[] = [&#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">capital</span>: <span class="string">&quot;경기도&quot;</span> &#125;];</span><br></pre></td></tr></table></figure>

<p>위 코드를 JavaScript로 컴파일하면 다음과 같은 결과만 남는다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> states = [&#123; <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>, <span class="attr">capital</span>: <span class="string">&quot;경기도&quot;</span> &#125;];</span><br></pre></td></tr></table></figure>

<p>컴파일 이후 런타임 시점에 JavaScript 코드가 실행된다.</p>
<p>즉, 컴파일이 코드 생성을 말하는 것이고 <strong>런타임 시점에는 타입을 체크할 수 없을 뿐더러 당연히 타입스크립트 타입은 런타임 성능에 영향을 주지 않습니다.</strong></p>
<h1 id="📌-any-타입-지양하기"><a href="#📌-any-타입-지양하기" class="headerlink" title="📌 any 타입 지양하기"></a>📌 any 타입 지양하기</h1><ul>
<li>any 타입은 안전성이 없다.</li>
<li>함수 시그니처(contract: 계약)을 무시한다.</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcAge</span>(<span class="params">birthDate: <span class="built_in">Date</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">birthDate</span>: <span class="built_in">any</span> = <span class="string">&quot;1995-12-04&quot;</span>;</span><br><span class="line"><span class="title function_">calcAge</span>(birthDate); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure>

<ul>
<li>언어 서비스가 적용되지 않는다.(자동완성 및 도움말)</li>
<li>코드 설계를 예측할 수 없게 만들고 신뢰도를 떨어뜨린다.</li>
</ul>
<h1 id="⭐️⭐️⭐️⭐️⭐️-타입은-값들의-집합이다"><a href="#⭐️⭐️⭐️⭐️⭐️-타입은-값들의-집합이다" class="headerlink" title="⭐️⭐️⭐️⭐️⭐️ 타입은 값들의 집합이다."></a>⭐️⭐️⭐️⭐️⭐️ 타입은 값들의 집합이다.</h1><p>타입은 값들의 집합이다. 또한 이 집합은 타입의 범위라고 말한다. 이 개념을 알아둬야 타입에 대해 이해하기 용이하다.</p>
<p>TypeScript는 타입을 검사할 때, 선언된 타입에 <red>할당 가능한 지(assignable)</red>를 판단한다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">AB</span> = <span class="string">&quot;A&quot;</span> | <span class="string">&quot;B&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="variable constant_">AB</span> = <span class="string">&quot;C&quot;</span>; <span class="comment">// Error: Type &#x27;&quot;C&quot;&#x27; is not &quot;assignable&quot; to type &#x27;AB&#x27;.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>“C” 형식은 AB 형식에 할당할 수 없습니다.</li>
<li>“C” 형식은 AB 형식의 부분집합이 아니다.</li>
<li>“C” 형식은 AB 형식의 원소가 아니다.</li>
<li>“C” 형식은 AB 형식의 서브타입이 아니다.</li>
<li>“C” 형식은 AB 형식의 상속 받지 않는다.</li>
</ul>
<p>모두 같은 말이므로 염두하자.</p>
<h2 id="🕹-amp-연산자-교집합-intersection"><a href="#🕹-amp-연산자-교집합-intersection" class="headerlink" title="🕹 &amp; 연산자 (교집합, intersection)"></a>🕹 &amp; 연산자 (교집합, intersection)</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Lifespan</span> &#123;</span><br><span class="line">  <span class="attr">birth</span>: <span class="title class_">Date</span>;</span><br><span class="line">  death?: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonSpan</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Lifespan</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ps</span>: <span class="title class_">PersonSpan</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yiju&quot;</span>,</span><br><span class="line">  <span class="attr">birth</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;1995/12/04&quot;</span>),</span><br><span class="line">  <span class="attr">death</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2100/10/10&quot;</span>),</span><br><span class="line">&#125;; <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&amp; 연산자는 두 타입의 인터섹션(교집합)을 계산한다.</li>
</ul>
<p>언뜻 보면 교집합이라하면 공통으로 가지고 있는 요소만 확인한다고 생각이 들어 위 예시가 잘못되었다고 생각이 든다.</p>
<p>하지만, <red>타입 연산자는 인터페이스 속성이 아닌 타입의 범위(값의 집합)에 적용된다.</red> 해당 타입과 더불어 추가적인 값을 가지는 값도 PersonSpan 타입에 속한다.</p>
<p>즉, PersonSpan은 Person 이라는 속성을 포함하는 집합과 Lifespan 이라는 속성을 포함하는 집합의 교집합이 되기 위해서는 Person의 name 프로퍼티도 가져야 하고 Lifespan의 birth 속성을 가진 집합을 의미한다. (deate 속성은 optional하므로…)</p>
<p>헷갈린다면… <strong>extends 구문으로 선언할 수 있다.</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonSpan</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">birth</span>: <span class="title class_">Date</span>;</span><br><span class="line">  death?: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="유니온에서-amp-연산자"><a href="#유니온에서-amp-연산자" class="headerlink" title="유니온에서 &amp; 연산자"></a>유니온에서 &amp; 연산자</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> K = keyof (<span class="title class_">Person</span> | <span class="title class_">Lifespan</span>); <span class="comment">// type is &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>

<p>keyof 연산자는 객체의 키 값들을 숫자나 문자열 리터럴 유니언을 생성한다.</p>
<p>즉, Person의 key값 name, Lifespan의 key값 birth,death의 유니온인 name | birth 에 속하는 값은 어떠한 키도 없기 때문에 <code>never</code>가 된다.</p>
<p>명확히 사용하면 아래와 같다</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">keyof (A&amp;B) = (keyof A) | (keyof B); <span class="comment">// A의 key 값이거나 B의 key 값인 것</span></span><br><span class="line">keyof (A|B) = (keyof A) &amp; (keyof B); <span class="comment">// A의 key 값이면서 B의 key 값인 것</span></span><br></pre></td></tr></table></figure>

<h2 id="✈️-제네릭-상속"><a href="#✈️-제네릭-상속" class="headerlink" title="✈️ 제네릭 상속"></a>✈️ 제네릭 상속</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PointKeys</span> = keyof <span class="title class_">Point</span>; <span class="comment">// type is &quot;x&quot; | &quot;y&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sortBy&lt;K <span class="keyword">extends</span> keyof T, T&gt;(<span class="attr">vals</span>: T[], <span class="attr">key</span>: K): T[] &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">pts</span>: <span class="title class_">Point</span>[] = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="title function_">sortBy</span>(pts, <span class="string">&quot;x&quot;</span>); <span class="comment">// 정상 &#x27;x&#x27;는 &#x27;x&#x27;|&#x27;y&#x27;를 상속받는다.</span></span><br><span class="line"><span class="title function_">sortBy</span>(pts, <span class="string">&quot;y&quot;</span>); <span class="comment">// 정상 &#x27;y&#x27;는 &#x27;x&#x27;|&#x27;y&#x27;를 상속받는다.</span></span><br><span class="line"><span class="title function_">sortBy</span>(pts, <span class="string">&quot;z&quot;</span>); <span class="comment">// Error: Argument of type &#x27;&quot;z&quot;&#x27; is not assignable to parameter of type &#x27;keyof Point&#x27;.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>type K는 type T의 상속을 받는다.</li>
<li>위 함수에서 T가 곧 Point 이다.</li>
<li>그러므로 K는 keyof T이므로 ‘x’|’y’ 이다.</li>
<li><code>K extends keyof T</code>를 사용하여 제한된 타입을 구현하였다.</li>
</ul>
<h2 id="🦖-타입-공간과-값-공간-구분하기"><a href="#🦖-타입-공간과-값-공간-구분하기" class="headerlink" title="🦖 타입 공간과 값 공간 구분하기"></a>🦖 타입 공간과 값 공간 구분하기</h2><p>JavaScript의 symbol은 타입 공간이나 값 공간 중 한 곳에 존재한다. symbol은 이름이 같더라도 <strong>속하는 공간에 따라 나타내는 것이 다르다.</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="string">&quot;string literal&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="string">&quot;string literal&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>type 뒤의 심볼인 T1, T2는 타입 공간에 있으므로 타입을 나타낸다. 컴파일 과정에서 사라진다.</li>
</ul>
<h3 id="class와-enum은-상황에-따라-값-타입-두가지-모두-가능"><a href="#class와-enum은-상황에-따라-값-타입-두가지-모두-가능" class="headerlink" title="class와 enum은 상황에 따라 값, 타입 두가지 모두 가능"></a>class와 enum은 상황에 따라 값, 타입 두가지 모두 가능</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span> &#123;</span><br><span class="line">  radius = <span class="number">1</span>;</span><br><span class="line">  height = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcVolume</span>(<span class="params">shape: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> <span class="title class_">Cylinder</span>) &#123;</span><br><span class="line">    shape; <span class="comment">// 정상, 타입은 Cylinder</span></span><br><span class="line">    shape.<span class="property">radius</span>; <span class="comment">// 정상, 타입은 number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = <span class="keyword">typeof</span> <span class="title class_">Cylinder</span>; <span class="comment">// 값이 &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="keyword">typeof</span> <span class="title class_">Cylinder</span>; <span class="comment">// 타입이 typeof Cylinder</span></span><br></pre></td></tr></table></figure>

<ul>
<li>클래스가 값으로 쓰일 때는 생성자가 사용되지만 타입으로 사용될 때는 속성과 메서드가 사용된다.</li>
<li>여기서 중요한 것은 <red>Cylinder가 인스턴스의 타입이 아니라는 것이다.</red></li>
</ul>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>🚧 Literal type과 as const</title>
    <url>/2022/11/22/TypeScript/%F0%9F%9A%A7-Literal-type%EA%B3%BC-as-const/</url>
    <content><![CDATA[<h1 id="📌-Literal-Type"><a href="#📌-Literal-Type" class="headerlink" title="📌 Literal Type"></a>📌 Literal Type</h1><p>타입 지정시 string, number 같은 원시타입만 할당할 수 있는 것이 아니다.</p>
<p>개발자가 지정한 글자나 숫자 들을 타입으로 지정할 수 있다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">john</span>: <span class="string">&quot;Texas&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">kim</span>: <span class="number">33</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>이제 john에는 ‘Texas’라는 글자만 할당될 수 있고 kim에는 33이라는 숫자만 할당될 수 있다.</li>
</ul>
<span id="more"></span>

<h2 id="🔨-타입스크립트-const"><a href="#🔨-타입스크립트-const" class="headerlink" title="🔨 타입스크립트 const"></a>🔨 타입스크립트 const</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;kim&quot;</span> | <span class="string">&quot;loco&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>타입스크립트는 변할 수 있는 중요한 정보를 위와 같이 표현할 수 있다. 물론 자바스크립트에서는 불가능하다.</p>
<h2 id="❗️-Literal-Type-주의사항"><a href="#❗️-Literal-Type-주의사항" class="headerlink" title="❗️ Literal Type 주의사항"></a>❗️ Literal Type 주의사항</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a: <span class="string">&quot;kim&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(user.<span class="property">name</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>위 예시에서 오류가 발생하는 이유는 user 객체의 name 프로퍼티의 타입은 string인데 foo함수 매개변수 a의 타입은 Literal Type인 ‘kim’이기 때문에 오류가 난다.</li>
</ul>
<p>이러한 문제를 해결하기 위해선 <strong>object 만들 때 타입을 미리 제한하여</strong>만들거나 <red>as const</red>를 object 자료형에 붙혀서 사용한다.</p>
<h2 id="🦖-as-const"><a href="#🦖-as-const" class="headerlink" title="🦖 as const"></a>🦖 as const</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Lang</span> = <span class="string">&quot;JavaScript&quot;</span> | <span class="string">&quot;TypeScript&quot;</span> | <span class="string">&quot;Python&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setLang</span>(<span class="params">lang: Lang</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setLang</span>(<span class="string">&quot;JavaScript&quot;</span>); <span class="comment">// 정상</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> language = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="title function_">setLang</span>(language); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>변수에 할당하는 순간 language 식별자가 타입 추론을 <code>string</code>으로 하였다.</li>
</ul>
<p>이러한 문제를 해결하는 방법은</p>
<h3 id="1-타입-선언시-language의-가능한-값-제한"><a href="#1-타입-선언시-language의-가능한-값-제한" class="headerlink" title="1. 타입 선언시 language의 가능한 값 제한"></a>1. 타입 선언시 language의 가능한 값 제한</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">lang</span>: <span class="title class_">Lang</span> = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="title function_">setLang</span>(lang); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure>

<h3 id="2-const-키워드를-사용하여-상수로-표현"><a href="#2-const-키워드를-사용하여-상수로-표현" class="headerlink" title="2. const 키워드를 사용하여 상수로 표현"></a>2. const 키워드를 사용하여 상수로 표현</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lang = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="title function_">setLang</span>(lang); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure>

<ul>
<li>const 키워드를 사용하여 타입 체커에게 lang은 변경할 수 없다고 알려준다.</li>
<li>타입스크립트는 lang에 대해 더 정확한 타입인 ‘JavaScript’로 추론할 수 있다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">panTo</span>(<span class="params">where: [number, number]</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> loc = [<span class="number">10</span>, <span class="number">20</span>]; <span class="comment">// type is number[]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">panTo</span>(loc); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>튜플 사용 시 주의사항은 const로 선언하여도 타입스크립트가 길이를 알 수 없는 숫자의 배열로 추론한다.</li>
<li><code>const loc: [number, number] = [10, 20]</code> 로 의도를 정확히 파악할 수 있도록 타입 선언을 제공한다.</li>
</ul>
<h3 id="const-와-as-const-차이"><a href="#const-와-as-const-차이" class="headerlink" title="const 와 as const 차이"></a>const 와 as const 차이</h3><ul>
<li>const 는 단지 값이 가리키는 참조가 변하지 않는 얕은 상수이다.</li>
<li>as const(상수 문맥 제공)은 그 값이 내부까지 깊은 상수라는 사실을 타입스크립트에게 알려준다.<ul>
<li><code>const loc = [10, 20] as const</code> 타입이 <code>readonly [number ,number]</code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">panTo</span>(<span class="params">where: readonly [number, number]</span>) &#123;<span class="comment">/* ... */</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> loc = [<span class="number">10</span>,<span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="title function_">panTo</span>(loc); <span class="comment">// 정상</span></span><br></pre></td></tr></table></figure></li>
<li>한가지 단점으로는 만약 튜플에 세번째 요소 추가시 오류가 타입 정의가 아닌 호출되는 곳에서 발생한다.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>Software Development Life Cycle (SDLC)와 협업 모델</title>
    <url>/2022/10/18/git/Software%20Development%20Life%20Cycle%20(SDLC)%EC%99%80%20%ED%98%91%EC%97%85%20%EB%AA%A8%EB%8D%B8/</url>
    <content><![CDATA[<h1 id="1-Software-Development-Life-Cycle-SDLC"><a href="#1-Software-Development-Life-Cycle-SDLC" class="headerlink" title="1. Software Development Life Cycle (SDLC)"></a>1. Software Development Life Cycle (SDLC)</h1><p>소프트웨어 개발의 전체적인 라이프 사이클을 이해하여 개발 과정에서 발생하는 일을 정략적으로 관리하자.</p>
<p><strong>해야할 일</strong></p>
<ol>
<li><p>요구사항 분석</p>
</li>
<li><p>설계</p>
</li>
<li><p>구현</p>
</li>
<li><p>테스트</p>
</li>
<li><p>유지보수</p>
</li>
</ol>
<p>위 과정을 진행하기 위한 대표적인 모델은 다음과 같다.</p>
<h2 id="1-1-Waterfall"><a href="#1-1-Waterfall" class="headerlink" title="1.1. Waterfall"></a>1.1. Waterfall</h2><p>SDLC 일련의 단계를 모든 팀원들이 참여한다. 심각한 문제라면 다시 이전단계로 돌아가야하겠지만, 작은 문제라면 일단 다음 단계로 넘어간다.(작은 문제를 지금 고친다 하더라도 사이드 이펙트 발생까지 생각하기 어렵다.)</p>
<p><strong>장점</strong></p>
<ul>
<li><p>팀을 관리하기가 편하여 대규모 팀에 적합</p>
</li>
<li><p>어떤 단계가 마무리되면 결과가 뚜렷함</p>
</li>
</ul>
<h2 id="1-2-Agile"><a href="#1-2-Agile" class="headerlink" title="1.2. Agile"></a>1.2. Agile</h2><p>작은 기능들의 성공을 반복시켜서 프로젝트 완성, 너무 많은 플랜을 지양하고 요구사항에 맞는 코드를 작성한다.</p>
<p><strong>커뮤니케이션 중요(daily scrum, 코드리뷰, 회고)</strong></p>
<h2 id="Daily-scrum"><a href="#Daily-scrum" class="headerlink" title="Daily scrum"></a>Daily scrum</h2><p>매일 15분간 회의를 진행하여 본인이 진행할 기능, 수정사항에 대해 우선순위를 부여하고 순서대로 진행한다.</p>
<ul>
<li>Product Backlog: 제품 전체의 요구사항</li>
<li>Sprint Backlog : 프로덕트 기능 하나하나에 대해서 적어 놓음</li>
</ul>
<h2 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h2><p>Sprint는 2주 단위로 진행을 한다. 첫날에 planning meeting을 진행하여 2주간 일정을 세세하게 세운다.</p>
<p>ex) 10월 25일 HTML설계, 10월 26일 컴포넌트 구조 설계 …</p>
<h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><p>2주간의 Sprint가 끝나면 회고를 진행한다.</p>
<ul>
<li>3L 전략(Liked, Learned, Lacked)</li>
</ul>
<h2 id="Sprint-전-준비사항"><a href="#Sprint-전-준비사항" class="headerlink" title="Sprint 전 준비사항"></a>Sprint 전 준비사항</h2><ol>
<li>UseCase 작성하기</li>
</ol>
<p>UseCase는 flowchart와 다르니 flowchart화 되고 있다면 재고해봐야한다.</p>
<p>UseCase는 사용자가 어떤 행동을 할 수 있는지를 나열하고 이들간의 관계를 연결한 구조로 작성한다.</p>
<blockquote>
<p>flowchart가 아니므로 순서를 따를 필요가 없다.</p>
</blockquote>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>점점 막히는 부분도 많아지고 이전에 제대로 구조를 설계하지 않고 회피하고 구현에만 집중하다보니 리팩터링을 어떻게 시작해야할지 막막하다…</p>
<p>프로젝트 막바지에 다가오니 의욕도 떨어지는 것 같다. 재충전이 필요하다.</p>
<p>그래도 이틀남았으니 내일 하루는 리팩터링에 시간을 쏟고 목요일은 배포와 회고, 발표준비를 하면 프로젝트를 잘 마무리 할 수 있을 것 같다.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>SDLC</tag>
      </tags>
  </entry>
  <entry>
    <title>branch 전략이란?</title>
    <url>/2022/08/03/git/branch%20%EC%A0%84%EB%9E%B5%EC%9D%B4%EB%9E%80?/</url>
    <content><![CDATA[<h1 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h1><hr>
<h2 id="branch란"><a href="#branch란" class="headerlink" title="branch란?"></a>branch란?</h2><p>분기점을 생성하여 독립적으로 코드를 변경할 수 있도록 도와주는 모델</p>
<p>명령어</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> branch // 로컬 브랜치 확인</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> branch -r // 원격 브랜치 확인</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> branch -a // 둘다 확인</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> branch html-init // 브랜치명 입력하면 브랜치 생성</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> switch 브랜치명 // 브랜치 이동</span><br></pre></td></tr></table></figure>

<blockquote>
<p>로컬에서 브랜치 생성한 후 원격 저장소에 push를 해줘야만 github 저장소에 해당 브랜치가 생성된다.</p>
</blockquote>
<p><strong style="color:red">주의사항</strong></p>
<ul>
<li>처음 브랜치를 push 하는 경우에는 -u 플래그를 사용해줘야한다.<br>그 이유는 원격 저장소에게 새로만든 브랜치가 main 브랜치와 연관성이 있다라는 것을 의미하기 때문이다.</li>
<li>플래그는 맨 앞에 위치하는 것만 아니면 위치는 상관없다.</li>
</ul>
<h2 id="branch-사용-이유"><a href="#branch-사용-이유" class="headerlink" title="branch 사용 이유"></a>branch 사용 이유</h2><hr>
<p>개발을 할 때, main 브랜치를 두고 개발 브랜치로 소스 코드를 가져와서 원하는 개발을 시도하여도 메인 소스코드에 영향을 주지 않을 수 있어 자유로운 개발을 할 수 있다. <strong>협업에 필수적인 모델이다.</strong></p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><hr>
<p>개발 브랜치를 생성한 후 main 브랜치와 합치기 위해서는 merge 작업을 해줘야한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// main</span><br><span class="line"><span class="variable">$git</span> merge develop</span><br></pre></td></tr></table></figure>

<p>자신의 역할을 끝낸 즉, merge가 된 브랜치는 바로바로 삭제해준다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> branch -D develop</span><br></pre></td></tr></table></figure>

<h3 id="merge-conflict"><a href="#merge-conflict" class="headerlink" title="merge conflict"></a>merge conflict</h3><hr>
<p>만약 main 브랜치와 develop 브랜치에서 같은 파일의 같은 라인을 수정했다면, 컴퓨터는 어떤 것을 선택해야할지 알지 못하므로 그 선택을 우리에게 맡긴다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>git branch practice on branch main<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  =======</span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>homepage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This work on branch body-init<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  &gt;&gt;&gt;&gt;&gt;&gt;&gt; body-init</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>이럴 경우 원하는 부분을 선택하여 수정해주고 add, commit을 해주면 된다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> add index.html</span><br><span class="line"><span class="variable">$git</span> commit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>merge를 할 경우, merge commit이 제목과 내용으로 채워져있다.</p>
</blockquote>
<p><strong style="color:red">주의사항</strong></p>
<ul>
<li>commit은 항상 동작하는 단위 (최소단위)여야 한다.</li>
<li>-m 플래그는 사용하지 말자</li>
<li>merge conflict가 발생한 경우 commit 내용으로 어떻게 충돌을 해결했는지도 적어주자</li>
</ul>
<h1 id="gitflow-전략"><a href="#gitflow-전략" class="headerlink" title="gitflow 전략"></a>gitflow 전략</h1><hr>
<p><img src="/images/220803/gitflow.png" alt="gitflow"></p>
<ul>
<li><p>Master(Main): 사용자를 위한 배포용 소스코드용</p>
</li>
<li><p>Hotfix: 갑작스러운 버그를 수정하기 위한 브랜치</p>
</li>
<li><p>Develop: 개발용 브랜치로, feature 브랜치에서 작업한 것들을 이곳에서 모아서 확인한다.</p>
</li>
<li><p>Feature: 개발자의 작업 브랜치, add와 commit이 작은 단위로 일어나는 곳</p>
</li>
</ul>
<h2 id="gitflow-전략-사용"><a href="#gitflow-전략-사용" class="headerlink" title="gitflow 전략 사용"></a>gitflow 전략 사용</h2><hr>
<ol>
<li><p>github 저장소에 repository 생성한 다음 나의 로컬 폴더에 git clone 한다.</p>
</li>
<li><p>저장소와 로컬을 연결했다면 저장소를 초기화해준다.</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> flow init</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>feature 브랜치를 생성하고 이동하여 작업을 시작한다.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> flow feature start <span class="string">&quot;브랜치명&quot;</span></span><br></pre></td></tr></table></figure>

<p>기능이나 최소단위로 작업을 진행한다.</p>
<ol start="4">
<li>작업이 끝났다면 develop 브랜치와 merge한 뒤 feature 브랜치 삭제</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> flow feature finish <span class="string">&quot;브랜치명&quot;</span></span><br></pre></td></tr></table></figure>

<p>위 명령어로 merge,delete 까지 한번에 해줄 수 있다.</p>
<ol start="5">
<li>기능 개발 마무리되면 release 사용하여 배포 전 브랜치로 이동한다.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> flow release start <span class="string">&quot;버전&quot;</span> // ex) v0.1</span><br></pre></td></tr></table></figure>

<p>위 작업을 통해 버전 태그를 달아준다.</p>
<ol start="6">
<li>release 브랜치에서 github 저장소의 main 브랜치와 develop 브랜치, tags를 push 해준다.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> push origin main</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> push -u origin develop // develop브랜치는 처음 github에 올라가니 -u 플래그 사용</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> push --tags // 한번만 해주면 된다.</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>release 브랜치를 merge + delete 해준다.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> flow release finish <span class="string">&quot;버전&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>github 저장소에서 tag에 가서 release 해주면 된다.</li>
</ol>
<p><img src="/images/220803/release.png" alt="release"></p>
<p><img src="/images/220803/release2.png" alt="release"></p>
<p><img src="/images/220803/release3.png" alt="release"></p>
<h2 id="gitflow-전략을-통한-협업"><a href="#gitflow-전략을-통한-협업" class="headerlink" title="gitflow 전략을 통한 협업"></a>gitflow 전략을 통한 협업</h2><hr>
<ol>
<li><p>팀장 또는 단체의 repository에서 fork를 하여 복사본은 나의 github 저장소로 가져온다.<br><img src="/images/220803/fork.png" alt="fork"></p>
</li>
<li><p>앞서 사용한 feature 브랜치를 사용하여 개발을 한 후 fork한 사본 저장소에 push를 한다.</p>
</li>
<li><p>PR을 하기전 issue 탭에가서 내가 무슨 작업을 할 것 인지 알려주도록 한다.<br><img src="/images/220803/issue.png" alt="issue"></p>
</li>
<li><p>팀장 또는 단체의 repository에 가서 PR(Pull Request)를 한다.</p>
</li>
<li><p>팀장은 나의 PR을 확인하고 요청에 응답하거나 문제가 있다면 코드리뷰를 하며 PR을 보류한다.<br><img src="/images/220803/pr.png" alt="pullrequest"></p>
</li>
<li><p>PR이 열려있는 상태에서 나는 나의 develop 브랜치에 돌아가서 코드를 수정한 뒤 commit을 해주면 다시 팀장이 확인하고 끝내 merge를 한다.</p>
</li>
</ol>
<ul>
<li>이 후 팀장이 develop 브랜치와 main 브랜치를 merge하면 issue가 closed 된다.</li>
</ul>
<p><strong style="color:red">주의사항</strong></p>
<ul>
<li>PR할 때, 나의 develop 브랜치에서 팀장의 develop 브랜치로 PR을 보내야한다.</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><hr>
<p>gitflow 수업이 끝난 후 1시간 30분 동안 4명이서 소규모 팀프로젝트를 경험해보았는데, 아직 머릿속에서 내가 어떤 상태이고 무엇을 해야하는지 헷갈려서 조금 어수선한 감이 있었다.</p>
<p>그래도 피보나치킨 게임(?)을 만들어서 배포까지 해보니 gitflow 전략을 통한 협업의 장점을 느낄 수 있어서 재밌었다.</p>
<blockquote>
<p>튜토리얼처럼 단계별로 코드를 따라 치는 것이 아닌 내가 어떤 단계에 있고 어떤 행동을 해야하는지를 생각하며 개발을 해야한다.</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>degit 이란?</title>
    <url>/2022/11/07/git/degit-%EC%9D%B4%EB%9E%80/</url>
    <content><![CDATA[<h1 id="📌-degit-이란"><a href="#📌-degit-이란" class="headerlink" title="📌 degit 이란?"></a>📌 degit 이란?</h1><p>degit은 git 저장소의 복사본을 만드는 명령어이다.</p>
<h2 id="git-clone-vs-degit"><a href="#git-clone-vs-degit" class="headerlink" title="git clone vs degit"></a>git clone vs degit</h2><p>git clone의 경우 .git 파일까지 같이 가져오므로 <strong>파일 용량이 크고 복제하려는 대상이 git으로 관리되고 있다는 내용을 굳이 가져올 필요가 없는데 .git 파일을 가져온 다는 점은 불편하다.</strong></p>
<p>degit은 .git 파일을 다운로드 하지 않아 <red>git clone 보다 훨씬 빠르다는 장점이 있다.</red></p>
<p>즉, degit으로 복제를 할 경우 버젼관리 없는 새로운 프로젝트를 다운 받을 때 용이하다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx degit [프로젝트 url] [로컬 디렉토리명]</span><br></pre></td></tr></table></figure>

<p>위와 같이 npx 명령어로 degit을 설치하지 않고 사용할 수 있다.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>git fork 제대로 파헤치기</title>
    <url>/2022/10/29/git/git%20fork%20%EC%A0%9C%EB%8C%80%EB%A1%9C%20%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="📌-git-fork"><a href="#📌-git-fork" class="headerlink" title="📌 git fork"></a>📌 git fork</h1><p><img src="/images/fork/fork.png" alt="fork"></p>
<p>git fork는 위 사진 처럼 강사님의 원격 저장소의 레포지토리를 나의 원격 저장소로 복제해오는 것이다. 복제해오는 것이지 연결되는 것은 아니다.</p>
<h2 id="사용하는-이유"><a href="#사용하는-이유" class="headerlink" title="사용하는 이유"></a>사용하는 이유</h2><ol>
<li><p>프로젝트를 할 때, 팀장 원격 저장소를 두고 팀원들이 fork하여 각자의 원격 저장소에서 작업을 하여 분업화가 가능하다.</p>
</li>
<li><p>팀장의 원격 저장소는 배포와 밀접한 관련이 있으므로 직접적으로 팀장 원격 저장소로 코드를 push 하지 못하고 Pull Request를 통해 연결할 수 있으므로 안정적인 개발이 가능하다.</p>
</li>
</ol>
<h2 id="사용-방법-및-주의사항"><a href="#사용-방법-및-주의사항" class="headerlink" title="사용 방법 및 주의사항"></a>사용 방법 및 주의사항</h2><ol>
<li>팀장의 원격 저장소를 나의 원격 저장소로 fork 해온다.</li>
</ol>
<p><strong>이 때, main 브랜치만 복사해오는 옵션이 있는데, main만 가져오고 싶다면 체크하고 아니면 해제한다.</strong></p>
<ol start="2">
<li><p>fork한 나의 원격 저장소를 나의 로컬로 clone 해온다.</p>
</li>
<li><p>원격 저장소 목록에 팀장의 원격 저장소를 ‘Leader’라는 이름으로 저장하여 추가한다.</p>
</li>
</ol>
<p><code>git remote add Leader &lt;팀장의 원격 저장소 URL&gt;</code></p>
<blockquote>
<p>URL이지 git clone 링크와는 다르다.</p>
</blockquote>
<ol start="4">
<li>만약 팀장이 코드를 변경하고 push하여 팀장의 원격 저장소가 바뀌고 이를 나의 로컬로 가져오고 싶다면 ?</li>
</ol>
<p><code>git fetch Leader</code></p>
<p>이 때, 팀장의 모든 브랜치가 아닌 특정 브랜치만 가져오고 싶다면</p>
<p><code>git fetch Leader &lt;branch 명&gt;</code></p>
<ol start="5">
<li>가져온 코드를 내 로컬과 병합해줘야 한다면 ?</li>
</ol>
<p><code>git pull Leader &lt;branch 명&gt;</code></p>
<p>처음 팀장 원격 저장소 fork 해와서 나의 로컬의 main 브랜치는 팀장의 원격 저장소의 main 브랜치와 연결이 되어있다. <strong>정확히는 track 추적을 할 수 있다.</strong></p>
<p>하지만, 팀장의 원격 저장소에서 새로운 브랜치를 생성하였고 나의 로컬에서도 해당 브랜치를 가져오고 싶다면 추가적으로 track 명령어를 실행해줘야한다.</p>
<ol start="6">
<li>팀장이 브랜치 새로 파고 내 로컬에서 가져오고 싶다면?</li>
</ol>
<p><code>git fetch Leader &lt;branch 명&gt;</code></p>
<p>우선 fetch로 해당 branch를 가져온다.</p>
<p><code>git checkout -t Leader &lt;branch 명&gt;</code></p>
<p>내 로컬에서 해당 브랜치로 checkout 하여 브랜치를 옮길 때, -t or track 명령어로 추적한다.</p>
<p><code>git pull Leader &lt;branch 명&gt;</code></p>
<p>이제 pull을 받아오면 코드를 가져올 수 있다.</p>
<p>만약 추적을 안하고 가져오게 된다면 변경사항이 없는 상태인데도, pull 해올 때 마다 <strong>Merge commit을 하라는 문구가 뜨게될 것 이다…</strong></p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>수업 중에 강사님 원격 저장소와 연결했는데 문제가 생겼다. 처음 fork 할 때는 강사님 원격 저장소에는 main branch 밖에 없어서 내가 fork 해왔을 때, 연결된 branch는 main branch 뿐이었던 것을 몰랐다.</p>
<p>수업 중 강사님께서 브랜치를 새로 생성하셨고 나도 똑같이 fetch, checkout, pull을 하였는데, 다음과 같은 오류가 발생했다.</p>
<p><strong>“관계 없는 커밋 내역의 병합을 거부합니다”</strong></p>
<p>이러한 오류가 발생한 이유는 새로 생성한 branch를 fetch로 가져오기만 하고 강사님의 원격 저장소의 branch를 추적하지 않기 때문에 발생한 문제였다.</p>
<p><code>git branch -vv</code></p>
<p>위 명령어를 사용하면 현재 branch가 어떤 branch를 추적하고 있는지 알 수 있다. 그래서 이미 생성된 branch를 <code>git branch -D &lt;branch 명&gt;</code> 명령어로 삭제한 뒤 위의 방법대로 새롭게 생성한 뒤 추적을 해주었더니 문제가 해결되었다.</p>
<p>앞으로 git 사용하다가 오류가 나오면 무시하지 말고 어떤 오류인지 제대로 파악하고 해결하도록 해야겠다.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>올바른 리드미 작성법</title>
    <url>/2022/11/03/git/%EC%98%AC%EB%B0%94%EB%A5%B8-%EB%A6%AC%EB%93%9C%EB%AF%B8-%EC%9E%91%EC%84%B1%EB%B2%95/</url>
    <content><![CDATA[<h1 id="📌-리드미란"><a href="#📌-리드미란" class="headerlink" title="📌 리드미란?"></a>📌 리드미란?</h1><p>리드미란, 다른 사람에게 나의 프로젝트가 얼마나 유용한지를 설명하기 위한 소개글이다.</p>
<ul>
<li>이 프로젝트를 가지고 무엇을 할 수 있는지?</li>
<li>프로젝트를 어떻게 사용할 수 있는지?</li>
</ul>
<p>위 두가지를 목적으로 작성하는 것이 바로 리드미이다.</p>
<h2 id="💡-좋은-리드미-작성법"><a href="#💡-좋은-리드미-작성법" class="headerlink" title="💡 좋은 리드미 작성법"></a>💡 좋은 리드미 작성법</h2><p>기본만 잘 따라도 좋은 리드미처럼 보일 수 있다.</p>
<ol>
<li>프로젝트가 하는 일</li>
<li>프로젝트가 유용한 이유</li>
<li>프로젝트 시작하는 방법</li>
<li>프로젝트에 대한 도움을 받을 수 있는 곳</li>
<li>프로젝트를 유지하고 기여하는 사람</li>
</ol>
<p>위 5가지가 github에서 언급하는 리드미 작성에 포함되어야 할 정보이다.</p>
<h2 id="💼-오늘-할-일"><a href="#💼-오늘-할-일" class="headerlink" title="💼 오늘 할 일"></a>💼 오늘 할 일</h2><p>[x] 리드미 작성 기준에 맞게 리드미 작성하기</p>
<p><img src="/../images/readme/bad.png" alt="bad-readme-case"></p>
<p>위 예시는 내가 과제 제출을 위해 처음에 적었던 리드미이다. 이 리드미를 좋은 리드미 작성법에 맞게 개선해보자.</p>
<h3 id="1-프로젝트가-하는-일"><a href="#1-프로젝트가-하는-일" class="headerlink" title="1. 프로젝트가 하는 일"></a>1. 프로젝트가 하는 일</h3><p>이 프로젝트는 사용자가 다양한 상태의 업로드 버튼 UI가 필요할 때, 재사용 가능한 컴포넌트를 제공하는 프로젝트이다.</p>
<h3 id="2-프로젝트가-유용한-이유"><a href="#2-프로젝트가-유용한-이유" class="headerlink" title="2. 프로젝트가 유용한 이유"></a>2. 프로젝트가 유용한 이유</h3><ul>
<li>재사용이 가능한 업로드 버튼 UI를 사용할 수 있습니다.</li>
<li>기본 제공되는 버튼 UI가 훌륭합니다.</li>
</ul>
<h3 id="3-프로젝트-시작하는-방법"><a href="#3-프로젝트-시작하는-방법" class="headerlink" title="3. 프로젝트 시작하는 방법"></a>3. 프로젝트 시작하는 방법</h3><h4 id="UploadButton"><a href="#UploadButton" class="headerlink" title="UploadButton"></a>UploadButton</h4><p>기본적인 사용법은 다음과 같습니다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">UploadButton</span> type=<span class="string">&quot;idle&quot;</span>&gt;업로드&lt;/<span class="title class_">UploadButton</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="타입-설정"><a href="#타입-설정" class="headerlink" title="타입 설정"></a>타입 설정</h4><p>아래의 타입을 설정하면 다음과 같은 모양의 버튼 UI가 생성됩니다.</p>
<table>
<thead>
<tr>
<th>type</th>
<th>shape</th>
</tr>
</thead>
<tbody><tr>
<td>idle</td>
<td><img src="https://user-images.githubusercontent.com/98298711/199712421-9706a07e-1ccf-4791-9676-d38bc62de782.png" alt="status=idle"></td>
</tr>
<tr>
<td>pending</td>
<td><img src="https://user-images.githubusercontent.com/98298711/199712569-b7c6ce4e-2ac3-49cf-b415-93c4e8c64135.png" alt="status=pending"></td>
</tr>
<tr>
<td>resolved</td>
<td><img src="https://user-images.githubusercontent.com/98298711/199712616-84632587-61aa-4bf3-9c0c-1b526a86211e.png" alt="status=resolved"></td>
</tr>
<tr>
<td>rejected</td>
<td><img src="https://user-images.githubusercontent.com/98298711/199712758-cc85ccce-2b65-4428-9b3d-964e1a5c2d59.png" alt="status=rejected"></td>
</tr>
<tr>
<td>disabled</td>
<td><img src="https://user-images.githubusercontent.com/98298711/199712796-8fd706b9-292f-483c-9fcf-e3980427cf74.png" alt="status=disabled"></td>
</tr>
</tbody></table>
<h3 id="4-프로젝트에-대해-도움-받을-수-있는-곳"><a href="#4-프로젝트에-대해-도움-받을-수-있는-곳" class="headerlink" title="4. 프로젝트에 대해 도움 받을 수 있는 곳"></a>4. 프로젝트에 대해 도움 받을 수 있는 곳</h3><p>만약 프로젝트에 대해 도움이 필요하시다면 아래 이메일로 연락을 주세요!</p>
<p><a href="mailto:&#107;&#x6c;&#106;&#x39;&#x39;&#x33;&#57;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#107;&#x6c;&#106;&#x39;&#x39;&#x33;&#57;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>
<h3 id="5-프로젝트를-유지하고-기여하는-사람"><a href="#5-프로젝트를-유지하고-기여하는-사람" class="headerlink" title="5. 프로젝트를 유지하고 기여하는 사람"></a>5. 프로젝트를 유지하고 기여하는 사람</h3><table>
<thead>
<tr>
<th><a href="https://github.com/loco9939">https://github.com/loco9939</a></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://user-images.githubusercontent.com/98298711/199714598-ab7c50e3-9f03-48f8-b9bc-73edb5ba08d5.jpeg" alt="gitprofile" style="width:200px;"/></td>
</tr>
</tbody></table>
<h2 id="⭐️-결과"><a href="#⭐️-결과" class="headerlink" title="⭐️ 결과"></a>⭐️ 결과</h2><p><a href="https://github.com/loco9939/zero-base/tree/icon-upload-button/complete">https://github.com/loco9939/zero-base/tree/icon-upload-button/complete</a></p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>리드미란 처음 내 프로젝트를 다른 사람에게 알리는 첫 게시물이므로 사람들이 내 프로젝트를 어떻게 하면 편리하게 사용할 수 있을지, 또 사용하고 싶도록 만들지를 생각하면서 작성해야하는 것을 알게되었다.</p>
<p>이것을 정말 쉽지 않다. 게다가 내 프로젝트에 대해서 정리하여 남에게 설명하는 연습이 잘 되어있지 않아서 낯설고 힘들었지만 아직은 처음이니깐 앞으로 프로젝트를 하게된다면 오늘 배운 점을 고려하면서 작성하도록 노력할 것이다.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 10일차&gt; Align</title>
    <url>/2023/02/27/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-10%EC%9D%BC%EC%B0%A8-Align/</url>
    <content><![CDATA[<h1 id="align"><a href="#align" class="headerlink" title="align"></a>align</h1><p>div 와 같은 block 요소를 수평으로 가운데 배치하려면 <code>margin: auto;</code>를 사용하였다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>하지만 내부의 텍스트를 가운데 정렬하기 위해서는 <code>text-align: center;</code>를 사용한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="이미지-가운데-정렬"><a href="#이미지-가운데-정렬" class="headerlink" title="이미지 가운데 정렬"></a>이미지 가운데 정렬</h2><p>image를 가운데 정렬하기 위해서는 block 요소로 바꾸고 width를 설정해준 뒤 <code>margin:auto;</code> 속성을 사용한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="좌우-정렬-position-속성"><a href="#좌우-정렬-position-속성" class="headerlink" title="좌우 정렬 - position 속성"></a>좌우 정렬 - position 속성</h2><p>좌우 정렬을 위해서 <code>position:absolute;</code> 속성을 사용할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73ad21</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>position:absolute 속성은 기본 flow를 제거하므로 다른 요소에 오버랩 될 수 있다.</p>
</blockquote>
<h2 id="clearfix-팁"><a href="#clearfix-팁" class="headerlink" title="clearfix 팁"></a>clearfix 팁</h2><p>만약, 요소가 요소를 감싸는 컨테이닝 블록보다 길고 이것이 float 속성을 가졌다면, 해당 요소는 컨테이너의 외부로 넘칠 것이다. 이를 해결하기 위해서 clearfix 속성을 사용한다.</p>
<p><strong>해당 컨테이닝 블록에다가 다음 속성을 설정한다.</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/align/clearfix.png" alt="clearfix"></p>
<h2 id="수직-가운데-정렬-padding"><a href="#수직-가운데-정렬-padding" class="headerlink" title="수직 가운데 정렬 - padding"></a>수직 가운데 정렬 - padding</h2><p>padding을 상하로 주어서 수직 가운데 정렬을 해줄 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">70px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이를 <code>text-align:center;</code> 와 같이 쓰면 수평 수직 가운데 정렬이 가능하다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">70px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="수직-가운데-정렬-line-height"><a href="#수직-가운데-정렬-line-height" class="headerlink" title="수직 가운데 정렬 - line-height"></a>수직 가운데 정렬 - line-height</h2><p>line-height 속성을 사용하여 수직 가운데 정렬을 할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If the text has multiple lines, add the following: */</span></span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="수직-가운데-정렬-position-amp-transform"><a href="#수직-가운데-정렬-position-amp-transform" class="headerlink" title="수직 가운데 정렬 - position &amp; transform"></a>수직 가운데 정렬 - position &amp; transform</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="수직-가운데-정렬-flexbox"><a href="#수직-가운데-정렬-flexbox" class="headerlink" title="수직 가운데 정렬 - flexbox"></a>수직 가운데 정렬 - flexbox</h2><p>flexbox는 IE10나 이전버전에서는 지원되지 않는다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>align</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 11일차&gt; combinators(셀렉터 조합)</title>
    <url>/2023/02/27/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-11%EC%9D%BC%EC%B0%A8-combinators-%EC%85%80%EB%A0%89%ED%84%B0-%EC%A1%B0%ED%95%A9/</url>
    <content><![CDATA[<h1 id="combinators-셀렉터-조합"><a href="#combinators-셀렉터-조합" class="headerlink" title="combinators 셀렉터 조합"></a>combinators 셀렉터 조합</h1><p>4가지의 셀렉터 조합이 있다.</p>
<ul>
<li>자손(descendant) 셀렉터 (space)</li>
<li>자식(child) 셀렉터</li>
<li>인접한 형제 셀렉터 (+)</li>
<li>두루두루의 형제 셀렉터 (~)</li>
</ul>
<h2 id="descendant-셀렉터"><a href="#descendant-셀렉터" class="headerlink" title="descendant 셀렉터"></a>descendant 셀렉터</h2><p>특정 요소의 자손인 모든 요소와 매치되는 셀렉터이다.</p>
<p>아래 예시는 div 태그 내부의 모든 p 태그를 선택하는 예시이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="child-셀렉터"><a href="#child-셀렉터" class="headerlink" title="child 셀렉터"></a>child 셀렉터</h2><p>해당 요소의 모든 자식들을 선택하는 셀렉터이다.</p>
<p>아래 예시는 div 태그 내부의 모든 p 태그 자식들을 선택한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>child와 descendet의 차이는 descendent는 자신 내부의 모든 자식 손자 증손자 등 모든 자손을 포함하지만, child는 딱 1 level의 자식들만 선택한다.</p>
</blockquote>
<h2 id="인접한-형제-셀렉터"><a href="#인접한-형제-셀렉터" class="headerlink" title="인접한 형제 셀렉터 (+)"></a>인접한 형제 셀렉터 (+)</h2><p>다른 요소와 <strong>직접적으로 인접한 요소를</strong> 선택하기 위해 사용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="두루두루-형제-셀렉터"><a href="#두루두루-형제-셀렉터" class="headerlink" title="두루두루 형제 셀렉터 (~)"></a>두루두루 형제 셀렉터 (~)</h2><p>같은 레벨에 있는 형제 요소를 모두 선택한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>combinators</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 12일차&gt; pseudo-class와 pseudo-element</title>
    <url>/2023/03/01/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-12%EC%9D%BC%EC%B0%A8-pseudo-class%EC%99%80-pseudo-element/</url>
    <content><![CDATA[<h1 id="pseudo-class"><a href="#pseudo-class" class="headerlink" title="pseudo-class"></a>pseudo-class</h1><p>요소의 특정한 상태를 정의하기 위해 사용하는 CSS 속성이다.</p>
<ul>
<li>사용자가 마우스를 올렸을 때, 요소를 스타일링 하기</li>
<li>방문한 링크와 미방문 링크 스타일 구분하기</li>
<li>focus가 잡혔을 때, 요소 스타일 주기</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* unvisited link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* visited link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* mouse over link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff00ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* selected link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a:hover는 a:link, a:visited 속성 이후에 선언되어야한다. 또한 a:active 속성은 a:hover 속성 이후에 선언되어야 한다.</p>
</blockquote>
<h2 id="first-child-pseudo-class"><a href="#first-child-pseudo-class" class="headerlink" title=":first-child pseudo-class"></a>:first-child pseudo-class</h2><p>요소의 첫번째 자식을 선택하는 선택자이다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is first element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is second element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/pseudo/firstchild.png" alt="first-child"></p>
<p>이 외에도 많은 pseudo-class들이 있으니 필요하면 찾아서 사용하자.</p>
<h1 id="pseudo-element"><a href="#pseudo-element" class="headerlink" title="pseudo-element"></a>pseudo-element</h1><p>요소의 특정 부분을 스타일링 하기 위해 사용하는 CSS 속성이다.</p>
<ul>
<li>요소의 첫번째 줄이나 첫문자를 스타일링 하기</li>
<li>요소 content의 이전이나 이후에 content를 삽입하기</li>
</ul>
<h2 id="first-line"><a href="#first-line" class="headerlink" title="::first-line"></a>::first-line</h2><p>첫번째 줄의 특별한 스타일링을 추가하기 위해 사용한다.</p>
<ul>
<li>block level 요소에만 설정 가능하다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="first-letter"><a href="#first-letter" class="headerlink" title="::first-letter"></a>::first-letter</h2><p>첫번째 문자를 스타일링 하는데 사용된다.</p>
<ul>
<li>block level 요소에만 설정 가능하다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: xx-large;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="before"><a href="#before" class="headerlink" title="::before"></a>::before</h2><p>요소의 content 이전에 어떤 content를 삽입하기 위해 사용한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">smiley.gif</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/pseudo/before.png" alt="before"></p>
<h2 id="after"><a href="#after" class="headerlink" title="::after"></a>::after</h2><p>요소의 content 이후에 어떤 content를 삽입하기 위해 사용한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">smiley.gif</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h2><p>사용자에 의해 선택된 부분을 스타일링한다. 아래는 드래그하여 텍스트를 선택하였을 때의 상황이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/pseudo/selection.png" alt="selection"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>pseudo</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 13일차&gt; Opacity</title>
    <url>/2023/03/02/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-13%EC%9D%BC%EC%B0%A8-Opacity/</url>
    <content><![CDATA[<h1 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h1><p>요소의 투명도를 설정하는 속성이다.</p>
<p>0 ~ 1.0 사이의 값을 가질 수 있으며 기본값은 1이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/opacity/exam.png" alt="exam"></p>
<h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><p>내부의 자식 요소들에게도 상속이 된다. 그러므로 내부의 텍스트가 있다면 가독성이 떨어질 수 있으므로 조심해야한다.</p>
<p><strong>또한, RGBA를 사용하여 투명도를 설정할 수 있다.</strong></p>
<p><img src="/../../images/CSS/opacity/exam2.png" alt="exam2"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">76</span>, <span class="number">175</span>, <span class="number">80</span>, <span class="number">0.3</span>); <span class="comment">/* Green background with 30% opacity */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Opacity</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 14일차&gt; Navigation Bar</title>
    <url>/2023/03/06/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-14%EC%9D%BC%EC%B0%A8-Navigation-Bar/</url>
    <content><![CDATA[<h1 id="Navigation-Bar"><a href="#Navigation-Bar" class="headerlink" title="Navigation Bar"></a>Navigation Bar</h1><p>Navigation Bar는 link의 목록들이다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;default.asp&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;news.asp&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;contact.asp&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;about.asp&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>기본적인 list 스타일을 제거하기 위한 CSS는 다음과 같다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="수직-Navigation-Bar"><a href="#수직-Navigation-Bar" class="headerlink" title="수직 Navigation Bar"></a>수직 Navigation Bar</h2><h3 id="1-li-요소-내부의-a태그에-display-block-선언하기"><a href="#1-li-요소-내부의-a태그에-display-block-선언하기" class="headerlink" title="1. li 요소 내부의 a태그에 display:block 선언하기"></a>1. li 요소 내부의 a태그에 display:block 선언하기</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Change the link color on hover */</span></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>추가로 active 클래스를 추가하여 현재 선택된 link를 표시해줄 수 있다. JavaScript 사용해야한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#04aa6d</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* .active 클래스는 포함하지 않는 a태그 hover시 효과 */</span></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-고정된-세로-Navigation-Bar"><a href="#2-고정된-세로-Navigation-Bar" class="headerlink" title="2. 고정된 세로 Navigation Bar"></a>2. 고정된 세로 Navigation Bar</h3><p>sticky side 네비게이션 바를 만드는 방법이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/* Full height */</span></span><br><span class="line">  <span class="attribute">position</span>: fixed; <span class="comment">/* Make it stick, even on scroll */</span></span><br><span class="line">  <span class="attribute">overflow</span>: auto; <span class="comment">/* Enable scrolling if the sidenav has too much content */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="수평-Navigation-Bar"><a href="#수평-Navigation-Bar" class="headerlink" title="수평 Navigation Bar"></a>수평 Navigation Bar</h2><h3 id="1-li-요소를-display-inline-속성을-준다"><a href="#1-li-요소를-display-inline-속성을-준다" class="headerlink" title="1. li 요소를 display:inline 속성을 준다."></a>1. li 요소를 display:inline 속성을 준다.</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-floating-li"><a href="#2-floating-li" class="headerlink" title="2. floating li"></a>2. floating li</h3><p><img src="/../../images/CSS/navbar/float.png" alt="float"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-상단-고정된-Navigation-Bar"><a href="#3-상단-고정된-Navigation-Bar" class="headerlink" title="3. 상단 고정된 Navigation Bar"></a>3. 상단 고정된 Navigation Bar</h3><p><img src="/../../images/CSS/navbar/fixed.png" alt="fixedTop"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-sticky-Navigation-Bar"><a href="#4-sticky-Navigation-Bar" class="headerlink" title="4. sticky Navigation Bar"></a>4. sticky Navigation Bar</h3><p><img src="/../../images/CSS/navbar/sticky.png" alt="sticky"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>IE는 sticky를 지원하지 않는다. Safari는 -webkit- prefix가 필요하다. 또한 top, right, left, bottom 중 적어도 하나는 지정해줘야한다.</p>
</blockquote>
<h2 id="CSS만으로-Dropdown-Navigation-Bar-구현하기"><a href="#CSS만으로-Dropdown-Navigation-Bar-구현하기" class="headerlink" title="CSS만으로 Dropdown Navigation Bar 구현하기"></a>CSS만으로 Dropdown Navigation Bar 구현하기</h2><p><img src="/../../images/CSS/navbar/dropdown.png" alt="dropdown"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropbtn&quot;</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Dropdown Menu inside a Navigation Bar<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hover over the &quot;Dropdown&quot; link to see the dropdown menu.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#38444d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.dropbtn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropbtn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.dropdown</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-content</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown-content</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropdown-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dropdown-content는 기본 display 속성이 none이다.</li>
<li>dropdown 클래스가 있는 li에 hover 했을 때, dropdown-content에 display 속성은 block으로 바꿔주었다.</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Navigation</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 15일차&gt; Dropdown</title>
    <url>/2023/03/07/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-15%EC%9D%BC%EC%B0%A8-Dropdown/</url>
    <content><![CDATA[<h1 id="Dropdown"><a href="#Dropdown" class="headerlink" title="Dropdown"></a>Dropdown</h1><p>CSS만을 이용하여 dropdown을 구현해보자.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.dropdown</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.dropdown-content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropdown-content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Mouse over me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>우선 dropdown content를 열기 위한 span, button 요소를 사용한다.</p>
</li>
<li><p>dropdown content는 div같은 컨테이너 요소를 사용한다.</p>
</li>
<li><p>dropdown content를 CSS에 정확하게 배치하기 위해 1,2번을 div로 감싼다.</p>
</li>
<li><p>wrapper div에는 <code>position:relative </code>속성을 주어 기준이 되도록 하며 dropdown content에는 <code>position:absolute</code> 속성을 주어 dropdown button 바로 아래에 위치하도록 한다.</p>
</li>
<li><p>dropdown content는 hidden 속성이 기본값이다. 그리고 hover시 아래에 보이도록 한다. 그리고 min-width 속성을 줘서 width를 갖게 한다.</p>
</li>
</ol>
<blockquote>
<p>이때, dropdown button 만큼 넓게 width를 갖게 하고 싶다면 <code>width:100%</code>로 설정해라. 작은 화면에서 스크롤을 활성화 시키려면 <code>overflow:auto</code>를 설정하라.</p>
</blockquote>
<ol start="6">
<li><p>border를 설정하는 것 대신 box-shadow 속성으로 카드처럼 보이게 할 수 있다.</p>
</li>
<li><p>hover 속성은 dropdown menu를 보여줄 때 사용된다.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Dropdown</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 16일차&gt; Image Sprites</title>
    <url>/2023/03/08/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-16%EC%9D%BC%EC%B0%A8-Image-Sprites/</url>
    <content><![CDATA[<h1 id="image-sprites"><a href="#image-sprites" class="headerlink" title="image sprites"></a>image sprites</h1><p>이미지 스프라이트는 단일 이미지에 포함된 이미지 모음이다.</p>
<p>이미지가 많은 웹 페이지 로드하는데 많은 시간이 걸릴 수 있고 서버 요청도 여러번 발생할 수 있다.</p>
<p>이미지 스프라이트를 사용하면 서버 요청 수가 줄어들고 대역폭이 줄어든다.</p>
<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>3개의 이미지를 사용하는 대신, 하나의 이미지를 사용한다.</p>
<p>그리고 나서 CSS로 보여주고 싶은 부분만 보여준다.</p>
<p><img src="/../../images/CSS/imagesprites/img_navsprites.gif" alt="imageSprites"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img_trans.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img_trans.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>src 속성은 비워둘 수 없기 때문에 투명한 이미지를 넣어두었다.</li>
<li>보여주고 싶은 이미지의 부분을 width, height로 정의했다.</li>
<li>background 속성으로 배경이미지를 불러오고 left, top 속성으로 배치한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#home</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">46px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img_navsprites.gif</span>) <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#next</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">43px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img_navsprites.gif</span>) -<span class="number">91px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/imagesprites/homenext.png" alt="homeNext"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>imageSprites</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 17일차&gt; attribute selector</title>
    <url>/2023/03/09/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-17%EC%9D%BC%EC%B0%A8-attribute-selector/</url>
    <content><![CDATA[<h1 id="attribute"><a href="#attribute" class="headerlink" title="[attribute]"></a>[attribute]</h1><p>특정 attribute를 선택하기 위해 사용하는 선택자이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[target]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>a 태그의 target attribute가 선언된 요소를 선택한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[target=<span class="string">&quot;_blank&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>attribute 값에 해당하는 요소를 선택한다.</li>
</ul>
<h2 id="정확히-특정-단어-포함하는-attribute-선택"><a href="#정확히-특정-단어-포함하는-attribute-선택" class="headerlink" title="정확히 특정 단어 포함하는 attribute 선택"></a>정확히 특정 단어 포함하는 attribute 선택</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title~=<span class="string">&quot;flower&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>CSS [attribute~=&quot;value&quot;] Selector<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  All images with the title attribute containing the word &quot;flower&quot; get a yellow</span><br><span class="line">  border.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;klematis.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;klematis flower&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> <span class="attr">height</span>=<span class="string">&quot;113&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img_flwr.gif&quot;</span> <span class="attr">title</span>=<span class="string">&quot;flower f&quot;</span> <span class="attr">width</span>=<span class="string">&quot;224&quot;</span> <span class="attr">height</span>=<span class="string">&quot;162&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img_tree.gif&quot;</span> <span class="attr">title</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;358&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/attr/space.png"></p>
<ul>
<li>title 속성에 “flower” 단어가 포함된 요소를 선택한다.</li>
</ul>
<blockquote>
<p>띄어쓰기로 구분된 요소는 개별요소로 취급하짐나, 하이푼(-)으로 구분된 요소는 여기서 제외된다.</p>
</blockquote>
<h2 id="특정-단어를-포함하는-attribute-선택"><a href="#특정-단어를-포함하는-attribute-선택" class="headerlink" title="특정 단어를 포함하는 attribute 선택"></a>특정 단어를 포함하는 attribute 선택</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[class|=<span class="string">&quot;top&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>CSS [attribute|=&quot;value&quot;] Selector<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;top-header&quot;</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;top-text&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;topcontent&quot;</span>&gt;</span>Are you learning CSS?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/attr/exactValue.png" alt="include value"></p>
<ul>
<li>top이라는 단어가 포함된 요소만 선택하는 것을 확인할 수 있다. (-으로 구분할 수 있다.)</li>
</ul>
<h2 id="특정-단어로-시작하는-attribute-속성-선택"><a href="#특정-단어로-시작하는-attribute-속성-선택" class="headerlink" title="특정 단어로 시작하는 attribute 속성 선택"></a>특정 단어로 시작하는 attribute 속성 선택</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[class^=<span class="string">&quot;top&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>CSS [attribute|=&quot;value&quot;] Selector<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;top-header&quot;</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;top-text&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;topcontent&quot;</span>&gt;</span>Are you learning CSS?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/attr/startwith.png" alt="startwith"></p>
<h2 id="특정-단어로-끝나는-attribute-속성-선택"><a href="#특정-단어로-끝나는-attribute-속성-선택" class="headerlink" title="특정 단어로 끝나는 attribute 속성 선택"></a>특정 단어로 끝나는 attribute 속성 선택</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[class$=<span class="string">&quot;test&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="특정-값을-포함하는-attribute-속성을-선택"><a href="#특정-값을-포함하는-attribute-속성을-선택" class="headerlink" title="특정 값을 포함하는 attribute 속성을 선택"></a>특정 값을 포함하는 attribute 속성을 선택</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;te&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>attributeSelector</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 18일차&gt; form</title>
    <url>/2023/03/10/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-18%EC%9D%BC%EC%B0%A8-form/</url>
    <content><![CDATA[<p>기본적인 HTML구조와 CSS로 다음과 같은 form을 만들 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span></span><br><span class="line"><span class="language-css">    select &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Using CSS to style an HTML Form<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;Your name..&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lname&quot;</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;lname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;Your last name..&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;country&quot;</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;country&quot;</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;australia&quot;</span>&gt;</span>Australia<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;canada&quot;</span>&gt;</span>Canada<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/form/common.png" alt="commonForm"></p>
<h2 id="focused-Inputs"><a href="#focused-Inputs" class="headerlink" title="focused Inputs"></a>focused Inputs</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="icon-x2F-image-삽입하기"><a href="#icon-x2F-image-삽입하기" class="headerlink" title="icon&#x2F;image 삽입하기"></a>icon&#x2F;image 삽입하기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;searchicon.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">20px</span> <span class="number">12px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/form/icon.png" alt="icon"></p>
<h2 id="animated-Search-Input"><a href="#animated-Search-Input" class="headerlink" title="animated Search Input"></a>animated Search Input</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.4s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="textarea-사이즈-재조정-방지하기"><a href="#textarea-사이즈-재조정-방지하기" class="headerlink" title="textarea 사이즈 재조정 방지하기"></a>textarea 사이즈 재조정 방지하기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>resize</strong> 속성을 none으로 주어 사이즈 재조정을 막는다.</li>
</ul>
<h2 id="반응형-form-만들기"><a href="#반응형-form-만들기" class="headerlink" title="반응형 form 만들기"></a>반응형 form 만들기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">resize</span>: vertical;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">12px</span> <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#04aa6d</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-25</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-75</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Clear floats after the columns */</span></span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-25</span>,</span><br><span class="line">  <span class="selector-class">.col-75</span>,</span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Responsive Form<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Resize the browser window to see the effect. When the screen is less than</span><br><span class="line">  600px wide, make the two columns stack on top of each other instead of next to</span><br><span class="line">  each other.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-25&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-75&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;Your name..&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-25&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lname&quot;</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-75&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;lname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;Your last name..&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-25&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;country&quot;</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-75&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;country&quot;</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;australia&quot;</span>&gt;</span>Australia<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;canada&quot;</span>&gt;</span>Canada<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-25&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;subject&quot;</span>&gt;</span>Subject<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-75&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;subject&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;Write something..&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;height:200px&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 19일차&gt; Accordion</title>
    <url>/2023/03/17/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-19%EC%9D%BC%EC%B0%A8-Accordion/</url>
    <content><![CDATA[<h1 id="Accordion"><a href="#Accordion" class="headerlink" title="Accordion"></a>Accordion</h1><p><img src="/../../images/CSS/accordion/default.png" alt="default"></p>
<p><img src="/../../images/CSS/accordion/active.png" alt="active"></p>
<h2 id="1-HTML-마크업-설계"><a href="#1-HTML-마크업-설계" class="headerlink" title="1. HTML 마크업 설계"></a>1. HTML 마크업 설계</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span>Section 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span>Section 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span>Section 3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-CSS-스타일링"><a href="#2-CSS-스타일링" class="headerlink" title="2. CSS 스타일링"></a>2. CSS 스타일링</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.accordion</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */</span></span><br><span class="line"><span class="selector-class">.accordion</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Style the accordion panel. <span class="doctag">Note:</span> hidden by default */</span></span><br><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: max-height <span class="number">0.4s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-React-로직"><a href="#3-React-로직" class="headerlink" title="3. React 로직"></a>3. React 로직</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accordion.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles/main.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Accordion</span>(<span class="params">&#123; title, info &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showInfo, setShowInfo] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;accordion&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShowInfo(!showInfo)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">panel</span> $&#123;<span class="attr">showInfo</span> ? &quot;<span class="attr">active</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;info&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Accordion</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>accordion</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 1일차&gt; CSS 란?</title>
    <url>/2023/02/17/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-1%EC%9D%BC%EC%B0%A8-CSS-%EB%9E%80/</url>
    <content><![CDATA[<h1 id="공부-목표"><a href="#공부-목표" class="headerlink" title="공부 목표"></a>공부 목표</h1><p>&lt;오늘부터 CSS 마스터&gt; 챕터를 시작하게 된 이유는 평소 리액트로 상태관리에 대해서만 생각하다보니 CSS로 화면을 스타일링 하는 것이 쉽게 나오지 않게 되었다.</p>
<p>그래서 이를 개선하고자 매일 CSS 공부를 한개씩 익혀가도록 목표를 세웠습니다!</p>
<p>공부는 <a href="https://www.w3schools.com/css/default.asp">W3Cschool</a>) 사이트를 참조하면서 공부를 하거나 Youtube 강의를 보고 배울 수 도 있으며, 간단한 웹 사이트 스타일링을 클론해보는 방향으로 진행할 것입니다.</p>
<h1 id="CSS란"><a href="#CSS란" class="headerlink" title="CSS란?"></a>CSS란?</h1><ul>
<li>CSS는 Cascading Style sheet를 의미한다.</li>
</ul>
<p>말 그대로 폭포처럼 떨어져 내리는 스타일시트이다.</p>
<ul>
<li>CSS는 HTML 요소가 화면에 어떻게 나타날지를 묘사한다.</li>
</ul>
<h2 id="CSS를-왜-사용하나요"><a href="#CSS를-왜-사용하나요" class="headerlink" title="CSS를 왜 사용하나요?"></a>CSS를 왜 사용하나요?</h2><p>CSS는 디자인, 레이아웃, 변화등을 포함한 웹 페이지의 스타일을 다른 기기와 화면 크기에 따라 정의하기 위해 사용한다.</p>
<h2 id="CSS는-큰-문제를-해결한다"><a href="#CSS는-큰-문제를-해결한다" class="headerlink" title="CSS는 큰 문제를 해결한다!"></a>CSS는 큰 문제를 해결한다!</h2><p>HTML은 웹 페이지를 구성하기 위해 태그를 포함하도록 의도된 적이 없다!</p>
<p><font>나 색상 속성이 HTML 3.2에 추가되었을 때, 모든 페이지에 글꼴과 색상을 추가하는 것은 매우 비용이 많이 드는 작업이 되었다.</p>
<p>그래서 W3C가 CSS를 만들어 냈고 HTML 페이지에서 스타일 형식을 제거하였다.</p>
<h2 id="CSS-문법"><a href="#CSS-문법" class="headerlink" title="CSS 문법"></a>CSS 문법</h2><p><img src="https://www.w3schools.com/css/img_selector.gif" alt="CSS 문법"></p>
<h2 id="CSS-선택자"><a href="#CSS-선택자" class="headerlink" title="CSS 선택자"></a>CSS 선택자</h2><p>CSS 선택자는 스타일링하고 싶은 HTML 요소를 선택한다.</p>
<p>총 5가지의 항목이 있다.</p>
<ol>
<li>간단한 선택자<ul>
<li>name, id, class 기반으로 요소 선택하기</li>
</ul>
</li>
<li>조합 선택자<ul>
<li>둘 사이의 특정한 관계를 기반으로 요소 선택하기</li>
</ul>
</li>
<li>Pseudo-class 선택자<ul>
<li>특정 상태를 기반으로 요소 선택하기</li>
</ul>
</li>
<li>Pseudo-element 선택자<ul>
<li>요소의 일부분을 스타일링하고 선택하기</li>
</ul>
</li>
<li>Attribute 선택자<ul>
<li>attribute나 attribute 값을 기반으로 요소 선택하기</li>
</ul>
</li>
</ol>
<h3 id="center-class를-포함한-p태그-선택자"><a href="#center-class를-포함한-p태그-선택자" class="headerlink" title="center class를 포함한 p태그 선택자"></a>center class를 포함한 p태그 선택자</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>❗️ p태그와 .center 사이에 <span style="color:red;">띄어쓰기가 있으면 안된다!</span></p>
<h3 id="전체-선택자"><a href="#전체-선택자" class="headerlink" title="* 전체 선택자"></a>* 전체 선택자</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Group-선택자"><a href="#Group-선택자" class="headerlink" title="Group 선택자"></a>Group 선택자</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 같은 스타일이라면 쉼표로 구분하여 한줄로 작성 가능 */</span></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-추가하는-방법-3가지"><a href="#CSS-추가하는-방법-3가지" class="headerlink" title="CSS 추가하는 방법 3가지"></a>CSS 추가하는 방법 3가지</h2><ol>
<li>외부 CSS</li>
<li>내부 CSS</li>
<li>inline CSS</li>
</ol>
<h3 id="다중-CSS-우선순위"><a href="#다중-CSS-우선순위" class="headerlink" title="다중 CSS 우선순위"></a>다중 CSS 우선순위</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>만약 <code>mystyle.css</code>에서 h1을 blue로 하였더라도 CSS는 가장 나중에 읽은 CSS를 적용하기 때문에 h1의 color는 orange가 될 것이다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>만약 <code>mystyle.css</code>가 더 아래에 있어서 나중에 읽힌다면 h1은 <code>mystyle.css</code>에서 정의한 스타일로 적용될 것이다.</p>
<h4 id="Cascading-우선순위"><a href="#Cascading-우선순위" class="headerlink" title="Cascading 우선순위"></a>Cascading 우선순위</h4><ol>
<li>inline style</li>
<li><head> 태그에 있는 외부 CSS와 내부 CSS</li>
<li>브라우저 기본</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 2일차&gt; CSS background</title>
    <url>/2023/02/18/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-2%EC%9D%BC%EC%B0%A8-CSS-background/</url>
    <content><![CDATA[<h1 id="CSS-background"><a href="#CSS-background" class="headerlink" title="CSS background"></a>CSS background</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span></span><br><span class="line"><span class="attribute">background-image</span></span><br><span class="line"><span class="attribute">background-repeat</span></span><br><span class="line"><span class="attribute">background-attachment</span></span><br><span class="line"><span class="attribute">background-position</span></span><br><span class="line"><span class="attribute">background</span> (shorthand property)</span><br></pre></td></tr></table></figure>

<h2 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h2><p>컬러는 다음 3가지 값만 가능하다.</p>
<ol>
<li>유효한 컬러이름 ex) ‘red’, ‘green’ …</li>
<li>HEX 값 ex) ‘#ff0000’</li>
<li>RGB 값 ex) ‘rgb(255,0,0)’</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0.3</span>); <span class="comment">/* Green background with 30% opacity */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>opacity 속성을 줘서 배경을 흐리게 할 수 있다.</p>
<blockquote>
<p>❗️opacity 속성을 사용하게 될 경우 자식 요소까지 흐려지므로 가독성이 떨어질 수도 있다.</p>
</blockquote>
<h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><p>기본값으로 image는 반복되어서 전체 요소를 덮어준다.</p>
<p><strong>신기한 것은 p 태그에도 해당 속성을 설정할 수 있다는 점이다.</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;paper.gif&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="repeat-position-속성"><a href="#repeat-position-속성" class="headerlink" title="repeat, position 속성"></a>repeat, position 속성</h2><p>image를 가로, 세로 반복되게 설정하는 속성이다.</p>
<p>position은 요소내에서 image의 위치를 설정한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img_tree.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/background/backPosition.png"></p>
<p>해당 배경 이미지를 아래에 위치시킨다.</p>
<h2 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img_tree.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>fixed</code>로 설정하면 position fixed 처럼 배경이미지가 스크롤 하여도 해당 위치에 고정되어 있다.</p>
<p><code>scroll</code>로 설정하면 다른 페이지를 보려고 스크롤 할 때, 배경도 스크롤된다.</p>
<h2 id="단축표현"><a href="#단축표현" class="headerlink" title="단축표현"></a>단축표현</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span> <span class="built_in">url</span>(<span class="string">&quot;img_tree.png&quot;</span>) no-repeat right top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>한줄로 쓸 수 있는데, 순서는 다음과 같다.</p>
<ul>
<li>background-color</li>
<li>background-image</li>
<li>background-repeat</li>
<li>background-attachment</li>
<li>background-position</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>background</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 3일차&gt; Box model</title>
    <url>/2023/02/20/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-3%EC%9D%BC%EC%B0%A8-Box-model/</url>
    <content><![CDATA[<h1 id="CSS-Box-model"><a href="#CSS-Box-model" class="headerlink" title="CSS Box model"></a>CSS Box model</h1><p><img src="/../../images/CSS/boxmodel/boxmodel.png"></p>
<p>CSS Box model은 모든 HTML 요소를 감싸는 박스이다.</p>
<ul>
<li>content: 텍스트, 이미지가 나타날 박스</li>
<li>padding: 컨텐츠 주변의 투명한 공간</li>
<li>border: padding과 content 사이의 테두리</li>
<li>margin: border 바깥의 투명한 공간</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">15px</span> solid green;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="❗️-주의사항"><a href="#❗️-주의사항" class="headerlink" title="❗️ 주의사항"></a>❗️ 주의사항</h3><p>box model의 width, height를 설정하면, 이것은 content 부분의 width, height를 설정한 것이다.</p>
<p>전체 사이즈를 계산하기 위해서는 padding, border, margin을 모두 더해줘야한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid gray;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span style="color:red;">요소의 총 width</span> &#x3D; width + left padding + right padding + left border + right border + left margin + right margin</p>
<p><span style="color:red;">요소의 총 height</span> &#x3D; height + top padding + bottom padding + top border + bottom border + top margin + bottom margin</p>
<div> 요소의 총 width는 350px이다.

<h2 id="width와-height"><a href="#width와-height" class="headerlink" title="width와 height"></a>width와 height</h2><p>width와 heigth로 올 수 있는 값은 다음과 같다.</p>
<ul>
<li>auto: 기본값으로, 브라우저가 width와 height를 계산한다.</li>
<li>length: px, cm 등등</li>
<li>%: containing block의 퍼센트</li>
<li>initial: 기본값으로 설정</li>
<li>inherit: 부모 값으로 부터 상속 받은 값</li>
</ul>
<h3 id="max와-min"><a href="#max와-min" class="headerlink" title="max와 min"></a>max와 min</h3><p>max와 min은 length 값으로 설정할 수 있다.</p>
<p><strong>ex) px, cm, containing block의 %</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/boxmodel/scrollwidth.png"></p>
<p>위 <div>는 브라우저 width가 500px보다 작아지면 수평으로 스크롤이 생겨난다.</p>
<p>스크롤을 해결하기 위해서는 max-width를 사용하면 가능하다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/boxmodel/maxwidth.png"></p>
<blockquote>
<p>max-width와 width를 같은 요소에 사용할 때, width 속성이 max-width 속성보다 큰 경우 max-width 속성이 사용된다.</p>
</blockquote>
<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>만약, padding 값에 상관없이 width를 설정한 값을 content 그대로 사용하고 싶다면 box-sizing 속성을 설정한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 코드는 padding 값이 어떻든 content의 width는 300px로 설정된다.</p>
<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><h3 id="margin으로-가로로-가운데-정렬"><a href="#margin으로-가로로-가운데-정렬" class="headerlink" title="margin으로 가로로 가운데 정렬"></a>margin으로 가로로 가운데 정렬</h3><p>margin을 사용하면 컨테이너 내부의 요소를 수평으로 가운데에 위치하도록 설정할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="margin-collpase"><a href="#margin-collpase" class="headerlink" title="margin collpase"></a>margin collpase</h3><p>두개의 margin이 하나처럼 동작할 때가 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>h1의 bottom margin이 50px이고 h2의 top margin이 20px이다.</p>
<p>h1 아래에 h2가 위치해 있을 때, 예상대로라면 h1과 h2 사이에는 70px이라고 예상되지만 margin-collpase 현상으로 인해 둘 중 큰 margin만 적용된다.</p>
<blockquote>
<p>이는 오직 top, bottom에서만 발생한다. left, right margin에서는 발생하지 않는다.</p>
</blockquote>
<h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><p>margin과 padding과 달리 border는 style과 width, color를 설정할 수 있다.</p>
<p>또한 원하는 방향에 각각 스타일링을 해줄 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">6px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/boxmodel/borderleft.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">6px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/boxmodel/borderbottom.png"></p>
<h3 id="테두리-둥글게"><a href="#테두리-둥글게" class="headerlink" title="테두리 둥글게"></a>테두리 둥글게</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/boxmodel/borderradius.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>BoxModel</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 4일차&gt; outline</title>
    <url>/2023/02/21/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-4%EC%9D%BC%EC%B0%A8-outline/</url>
    <content><![CDATA[<h1 id="outline-이란"><a href="#outline-이란" class="headerlink" title="outline 이란?"></a>outline 이란?</h1><p>outline은 요소의 border 바깥쪽에 그려지는 선이다.</p>
<p><img src="/../../images/CSS/outline/outline.png" alt="outline"></p>
<blockquote>
<p>outline은 border와 다르다! border와 달리 outline은 요소의 border 외부에 그려지고 다른 content와 오버랩될 수 있다. 또한 요소의 너비와 높이에 영향을 주지 않는다.</p>
</blockquote>
<h2 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline-style</span></span><br><span class="line"><span class="attribute">outline-color</span></span><br><span class="line"><span class="attribute">outline-width</span></span><br><span class="line"><span class="attribute">outline-offset</span></span><br><span class="line"><span class="attribute">outline</span> <span class="comment">/* shorthand */</span></span><br></pre></td></tr></table></figure>

<p>다른 속성은 이미 다뤄봤으니 outline-offset 속성에 대해 알아보자</p>
<h3 id="outline-offset"><a href="#outline-offset" class="headerlink" title="outline-offset"></a>outline-offset</h3><p>outline-offset은 outline과 border 사이의 공간을 추가하는 속성이다. 이 공간은 투명하다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">outline-offset</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/outline/offset.png" alt="outline"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>outline</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 5일차&gt; text와 font</title>
    <url>/2023/02/22/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-5%EC%9D%BC%EC%B0%A8-text/</url>
    <content><![CDATA[<h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><p>CSS는 많은 텍스트 속성을 가지고 있다.</p>
<p>❗️ 여기서 중요한 것은 text의 색상과 배경색의 대비이다. 이는 시각적인 문제에 있어 매우 중요하므로 대비를 고려하여 스타일링 해야한다.</p>
<h2 id="text-alignment"><a href="#text-alignment" class="headerlink" title="text-alignment"></a>text-alignment</h2><h3 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h3><p>text-align 속성은 <strong>text</strong>의 가로 정렬을 위해 사용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center; // 가운데 정렬</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p>vertical-align 속성은 <strong>요소</strong>의 세로 정렬을 위해 사용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: text-top; // 텍스트 기준보다 위쪽으로 이미지요소 배치</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h2><p>text-decoration 속성은 text에 라인을 추가한다.</p>
<p>❗️ 다만, underline 속성은 a 태그와 헷갈릴 수 있으니 유의하도록 하자.</p>
<h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><p>a 태그는 기본값으로 underline 속성이다. 이것을 제거하고 싶다면 다음과 같이 한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h2><p>텍스트의 소문자, 대문자를 지정할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: lowercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="text-spacing"><a href="#text-spacing" class="headerlink" title="text-spacing"></a>text-spacing</h2><h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h3><p>첫줄의 들여쓰기 너비를 지정하는 속성이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="letter-spacing"><a href="#letter-spacing" class="headerlink" title="letter-spacing"></a>letter-spacing</h3><p>글자 간격을 설정하는 속성이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: -<span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>라인 사이의 공백을 설정하는데 사용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.small</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.big</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h2><p>글자의 그림자를 설정하는 속성이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>첫번째부터 가로길이, 세로길이, blur, 색상이다.</p>
<p><img src="/../../images/CSS/text/shadow.png" alt="shadow"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">2px</span> black, <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> blue, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> darkblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>여러가지 그림자를 설정할 수도 있다.</p>
<h1 id="font"><a href="#font" class="headerlink" title="font"></a>font</h1><p>🔥 font 선택은 매우 중요하다!</p>
<p>왜냐하면 폰트를 적절히 선택하면, 웹사이트 브랜드와 가독성에 큰 영향을 줄 수 있기 때문이다.</p>
<blockquote>
<p>computer 화면에서는 sans-serif 폰트가 serif 폰트보다 더 가독성이 좋다.</p>
</blockquote>
<h2 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h2><p>font-family 속성의 이름이 한 단어 이상이면, 따옴표로 감싸줘야한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p3</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Lucida Console&quot;</span>, <span class="string">&quot;Courier New&quot;</span>, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>모든 브라우저와 장치에 범용적으로 설치된 웹 폰트가 있다. 하지만 100% 모든 곳에 지원하는 웹 폰트는 없기 때문에 fallback 폰트를 지정해줘야한다.</p>
<p>위 예시에서도 첫번째 폰트가 없으면 다음 폰트를 보여주는 방식으로 fallback 폰트를 지정해줬다.</p>
<p>주로 사용되는 웹 폰트는 다음 5가지이다.</p>
<ul>
<li>serif</li>
<li>sans-serif</li>
<li>monospace</li>
<li>cursive</li>
<li>fantasy</li>
</ul>
<h2 id="font-style과-font-weight"><a href="#font-style과-font-weight" class="headerlink" title="font-style과 font-weight"></a>font-style과 font-weight</h2><p>font-style은 italic 텍스트를 사용할 때 설정한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.italic</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.oblique</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: oblique;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>font-weight 속성은 font의 두께를 설정한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h2><p>폰트 사이즈를 설정하는 속성이다. 절대크기이거나 상대크기 일 수 있다.</p>
<p>❗️ 주의사항</p>
<p>폰트 사이즈를 사용하여 제목을 단락처럼 보이게 하거나 단락을 제목처럼 보이게하면 안된다. 제목은 <code>h1</code> ~ <code>h6</code>, 단락은 <code>p</code> 태그와 같이 적절한 태그를 사용해야한다.</p>
<h3 id="절대-크기"><a href="#절대-크기" class="headerlink" title="절대 크기"></a>절대 크기</h3><ul>
<li>정확한 크기를 설정한다.</li>
<li>사용자가 글자 크기를 모든 브라우저에서 변경하는 것을 허락하지 않는다.(좋지 않는 접근성 이유 때문에)</li>
<li>절대 크기는 결과물의 <span style="color:red">물리적인 크기가 알려져있을 때 유용하다.</span></li>
</ul>
<h3 id="상대-크기"><a href="#상대-크기" class="headerlink" title="상대 크기"></a>상대 크기</h3><ul>
<li>주변 요소의 상대적인 크기를 설정한다.</li>
<li>브라우저에서 사용자가 글자 크기를 변경할 수 있도록 허락한다.</li>
</ul>
<h4 id="font-size를-em으로-설정하라"><a href="#font-size를-em으로-설정하라" class="headerlink" title="font-size를 em으로 설정하라."></a>font-size를 em으로 설정하라.</h4><p><strong>브라우저 메뉴에서 사용자가 글자를 재설정하는 것을 허락하기위해 pixel 대신 em을 사용한다.</strong></p>
<p>1em은 현재 폰트 크기와 동일하다. 브라우저에서 기본 폰트 사이즈는 16px이다. 즉, 1em &#x3D; 16px</p>
<p>pixel &#x2F; 16 &#x3D; em 이라는 공식으로 계산할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5em</span>; <span class="comment">/* 40px/16=2.5em */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.875em</span>; <span class="comment">/* 30px/16=1.875em */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875em</span>; <span class="comment">/* 14px/16=0.875em */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="와-em의-조합하여-사용하기"><a href="#와-em의-조합하여-사용하기" class="headerlink" title="%와 em의 조합하여 사용하기"></a>%와 em의 조합하여 사용하기</h3><p>모든 브라우저에 작동하는 해결책은 <code>body</code> 태그의 기본 폰트 크기를 %로 설정하는 것이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.875em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Google-fonts"><a href="#Google-fonts" class="headerlink" title="Google fonts"></a>Google fonts</h2><p>만약 HTML에서 기본적으로 제공하는 폰트가 싫다면 Google font를 사용해라.</p>
<h3 id="Google-fonts-사용법"><a href="#Google-fonts-사용법" class="headerlink" title="Google fonts 사용법"></a>Google fonts 사용법</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Sofia&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&quot;Sofia&quot;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="여러-폰트-사용하기"><a href="#여러-폰트-사용하기" class="headerlink" title="여러 폰트 사용하기"></a>여러 폰트 사용하기</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span><span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&quot;Audiowide&quot;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span><span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&quot;Sofia&quot;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span><span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&quot;Trirong&quot;</span>, serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>|</code> 로 구분하여 사용할 수 있다.</p>
<h4 id="font-효과-적용하기"><a href="#font-효과-적용하기" class="headerlink" title="font 효과 적용하기"></a>font 효과 적용하기</h4><p>구글 폰트는 기본적으로 font 효과를 제공한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Sofia&amp;effect=fire&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: <span class="string">&quot;Sofia&quot;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;font-effect-fire&quot;</span>&gt;</span>Sofia on Fire<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/text/fonteffect.png" alt="fonteffect"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>text</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 6일차&gt; Display</title>
    <url>/2023/02/23/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-6%EC%9D%BC%EC%B0%A8-Display/</url>
    <content><![CDATA[<h1 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h1><p>diplay 속성은 레이아웃을 조작하는데 매우 중요한 속성이다.</p>
<p>대부분 요소의 기본값은 <code>block</code> 또는 <code>inline</code>이다.</p>
<h2 id="Block-level-요소"><a href="#Block-level-요소" class="headerlink" title="Block-level 요소"></a>Block-level 요소</h2><p>block-level 요소는 새로운 줄에서 시작하고 가능한 최대 너비로 차지한다.</p>
<ul>
<li>div</li>
<li>h1 ~ h6</li>
<li>p</li>
<li>form</li>
<li>header</li>
<li>footer</li>
<li>section</li>
</ul>
<h2 id="inline-요소"><a href="#inline-요소" class="headerlink" title="inline 요소"></a>inline 요소</h2><p>inline 요소는 필요한 만큼의 너비를 가지고 새로운 줄에서 시작하지 않는다.</p>
<ul>
<li>span</li>
<li>a</li>
<li>img</li>
</ul>
<h2 id="display-none"><a href="#display-none" class="headerlink" title="display: none;"></a>display: none;</h2><p>위 속성은 요소를 제거하고 다시 만드는 것 대신 요소를 숨기고 나타내기 위해 JavaScript와 함께 사용하는 속성이다.</p>
<p>script 요소는 display:none 속성이 기본값이다.</p>
<h2 id="display-none과-visibility-hidden의-차이"><a href="#display-none과-visibility-hidden의-차이" class="headerlink" title="display:none과 visibility:hidden의 차이"></a>display:none과 visibility:hidden의 차이</h2><p><code>display:none</code>은 요소를 숨기고 페이지는 그곳에 해당 요소가 없는 것처럼 나타낸다.</p>
<p>하지만, <code>visibility:hidden</code>은 요소를 숨기지만 이전과 동일한 공간을 차지한다. 즉, 요소는 보이지 않지만 layout에는 영향을 미친다.</p>
<p><a href="https://www.w3schools.com/css/tryit.asp?filename=trycss_display">display:none과 visibility:hidden 비교</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>display</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 6일차&gt; Link</title>
    <url>/2023/02/23/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-6%EC%9D%BC%EC%B0%A8-Link/</url>
    <content><![CDATA[<h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>Link는 CSS 속성으로 스타일링 할 수 있다. 추가로 상태까지 다르게 스타일링 할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* unvisited link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* visited link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* mouse over link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* selected link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❗️주의사항"><a href="#❗️주의사항" class="headerlink" title="❗️주의사항"></a>❗️주의사항</h2><ul>
<li>a:hover는 무조건 a:link, a:visited 이후에 와야한다.</li>
<li>a:active는 무조건 a:hover 이후에 와야한다.</li>
</ul>
<h2 id="Link-Button"><a href="#Link-Button" class="headerlink" title="Link Button"></a>Link Button</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f44336</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/link/linkbutton.png" alt="linkbutton"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 6일차&gt; List</title>
    <url>/2023/02/23/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-6%EC%9D%BC%EC%B0%A8-List/</url>
    <content><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>list-style-type을 바꾸면 list item 마커를 변경할 수 있다.</p>
<p>추가로 list-style-image로 이미지를 삽입할 수도 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: circle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: square;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: upper-roman;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.d</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: lower-alpha;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">&quot;sqpurple.gif&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h2><p>list-item 마커를 list-item 내부 또는 외부로 위치를 이동시킬 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-position</span>: outside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-position</span>: inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="기본-셋팅-제거하기"><a href="#기본-셋팅-제거하기" class="headerlink" title="기본 셋팅 제거하기"></a>기본 셋팅 제거하기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 6일차&gt; icon</title>
    <url>/2023/02/23/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-6%EC%9D%BC%EC%B0%A8-icon/</url>
    <content><![CDATA[<h1 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a>Icons</h1><p>HTML에 아이콘을 넣는 가장 쉬운 방법은 Font Awesome 같은 라이브러리를 사용하는 것이다.</p>
<p>icon 클래스 이름을 i 태그나 span 태그에 inline 형태로 추가하라.</p>
<p>라이브러리 속 모든 아이콘은 CSS(크기, 색상, 그림자 등)로 사용자 정의할 수 있는 확장 가능한 벡터이다.</p>
<p>아래 예시에서는 Font Awesome 라이브러리를 예시로 들었지만, Bootstrap Icons, Google Icons 비슷하다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://kit.fontawesome.com/a076d05399.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cloud&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/css/icons/icon.png" alt="icons"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 7일차&gt; Position</title>
    <url>/2023/02/25/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-7%EC%9D%BC%EC%B0%A8-Position/</url>
    <content><![CDATA[<h1 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h1><p>position 속성은 요소에 사용된 포지셔닝 방법을 설정한다.</p>
<ul>
<li>static</li>
<li>relative</li>
<li>fixed</li>
<li>absolute</li>
<li>sticky</li>
</ul>
<h2 id="position-static"><a href="#position-static" class="headerlink" title="position: static;"></a>position: static;</h2><p>HTML 요소는 static 속성이 기본값으로 되어있다.</p>
<p><strong>static 속성은 top, bottom, left, right 속성에 영향을 받지 않는다.</strong></p>
<h2 id="positioin-relative"><a href="#positioin-relative" class="headerlink" title="positioin: relative;"></a>positioin: relative;</h2><p>relative 속성은 원래 위치의 상대으로 배치되는 속성이다.</p>
<p>relative 속성이 설정된 요소의 top, right, bottom, left 속성을 설정하는 것은 원래 위치로부터 조정될 수 있을 것이다.</p>
<p>다른 컨텐츠는 요소가 남긴 간격에 맞게 조정되지 않는다. <span style="color:red">마치 relative 속성이 설정된 요소가 붕 띄워진 것 처럼 작동한다.</span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73ad21</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="position-fixed"><a href="#position-fixed" class="headerlink" title="position: fixed;"></a>position: fixed;</h2><p>fixed 속성이 설정된 요소는 viewport에 상대적으로 위치한다.</p>
<p>이것은 page가 스크롤되더라도 항상 같은 위치에 머물러 있다는 것을 의미한다.</p>
<p>top,left,bottom,right 속성으로 요소의 위치를 조정할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73ad21</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="position-absolute"><a href="#position-absolute" class="headerlink" title="position:absolute;"></a>position:absolute;</h2><p>absolute 속성이 설정된 요소는 fixed 같이 viewport에 상대적인 위치를 갖는 것 대신, <strong>relative 속성을 가진 가장 가까운 부모 요소를 기준으로 위치한다.</strong></p>
<p>부모 요소에 relative 속성이 없더라도, absolute 속성을 가진 요소는 document body를 기준으로 움직인다.</p>
<p>absolute 속성을 가진 요소는 기존 flow에서 제거되어 요소들에게 오버랩 될 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73ad21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73ad21</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/position/absolute.png" alt="absolute"></p>
<h2 id="position-sticky"><a href="#position-sticky" class="headerlink" title="position:sticky;"></a>position:sticky;</h2><p>sticky 속성을 가진 요소는 사용자의 스크롤 위치를 기준으로 배치된다.</p>
<p>sticky 요소 스크롤 위치에 따라 relative와 fixed 속성을 왔다갔다 한다.</p>
<p>주어진 offset 위치가 viewport에서 충족되기 전까지는 relative로 배치된 다음, 조건이 충족되면 fixed로 고정된다.</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>position</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 8일차&gt; Overflow</title>
    <url>/2023/02/25/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-8%EC%9D%BC%EC%B0%A8-Overflow/</url>
    <content><![CDATA[<h1 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h1><p>overflow 속성은 컨텐츠가 너무 커서 영역에 맞지 않는 부분을 설정할 때 사용한다.</p>
<p>또한, overflow 속성은 <span style='color:red'>정확한 높이를 가진 block 요소에만 동작한다.</span></p>
<h2 id="overflow-visible"><a href="#overflow-visible" class="headerlink" title="overflow:visible"></a>overflow:visible</h2><p>visible이 기본값이다. 이는 잘리지 않고 요소 박스 바깥에도 렌더링된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">65px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: coral;</span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/overflow/visible.png" alt="visible"></p>
<h2 id="overflow-hidden"><a href="#overflow-hidden" class="headerlink" title="overflow:hidden"></a>overflow:hidden</h2><p>박스를 넘치는 컨텐츠는 숨긴다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/overflow/hidden.png" alt="visible"></p>
<h2 id="overflow-scroll"><a href="#overflow-scroll" class="headerlink" title="overflow:scroll"></a>overflow:scroll</h2><p>박스를 넘치는 컨텐츠를 스크롤을 통해서 보이게 한다. 이 때, overflow-x, overflow-y로 수평, 수직방향 스크롤을 각각 설정해줄 수 있다.</p>
<p>또한, overflow:auto; 속성은 scroll과 비슷하지만, 스크롤이 필요한 경우에만 스크롤바가 생성된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden; <span class="comment">/* Hide horizontal scrollbar */</span></span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll; <span class="comment">/* Add vertical scrollbar */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/overflow/scroll.png" alt="overflow"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 8일차&gt; Z-index</title>
    <url>/2023/02/25/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-8%EC%9D%BC%EC%B0%A8-Z-index/</url>
    <content><![CDATA[<h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><p>z-index 속성은 요소의 쌓는 순서를 설정한다.</p>
<p>z-index는 <span style="color:red">position 속성이 설정된 요소, flex의 직접적인 자식 요소</span>에서만 동작한다.</p>
<p>예를들어, position: absolute, position: relative, position: fixed, or position: sticky 그리고 display: flex가 설정된 요소의 직접적인 자식 요소</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.black-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gray-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>; <span class="comment">/* gray box will be above both green and black box */</span></span><br><span class="line">  <span class="attribute">background</span>: lightgray;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>; <span class="comment">/* green box will be above black box */</span></span><br><span class="line">  <span class="attribute">background</span>: lightgreen;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">270px</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/z-index/zindex.png" alt="z-index"></p>
<blockquote>
<p>만약 z-index 설정없이 두 요소가 오버랩되어 있다면, HTML 코드가 나중에 정의된 요소가 제일 위에 보여진다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>ZIndex</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 9일차&gt; inline-block</title>
    <url>/2023/02/26/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-9%EC%9D%BC%EC%B0%A8-float/</url>
    <content><![CDATA[<h1 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h1><p>display:inline-block 속성은 inline 속성과 block 속성을 함께 가진다.</p>
<ul>
<li>inline과 달리 상하 margin, padding이 적용된다.</li>
<li>block과 달리 요소 이후 줄바꿈이 되지 않는다. 다른 요소 옆에 배치된다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline; <span class="comment">/* the default for span */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/inlineblock/inlineblock.png" alt="inline-block"></p>
<h2 id="inline-block을-사용하여-Nav-Link-만들기"><a href="#inline-block을-사용하여-Nav-Link-만들기" class="headerlink" title="inline-block을 사용하여 Nav Link 만들기"></a>inline-block을 사용하여 Nav Link 만들기</h2><p>가장 일반적인 inline-block의 사용 예시는 수평으로 목록들을 배치할 때 사용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/inlineblock/navlinks.png" alt="navlink"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>inlineBlock</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-2525 오븐시계</title>
    <url>/2022/10/08/Algorithm/boj/boj-2525-%EC%98%A4%EB%B8%90%EC%8B%9C%EA%B3%84/</url>
    <content><![CDATA[<h1 id="boj-2525-오븐시계"><a href="#boj-2525-오븐시계" class="headerlink" title="boj 2525 오븐시계"></a>boj 2525 오븐시계</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = input[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> oven = +input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hour = +time[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> minute = +time[<span class="number">1</span>] + oven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minute &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  hour += <span class="title class_">Math</span>.<span class="title function_">floor</span>(minute / <span class="number">60</span>);</span><br><span class="line">  minute %= <span class="number">60</span>;</span><br><span class="line">  hour = hour &gt;= <span class="number">24</span> ? hour - <span class="number">24</span> : hour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hour + <span class="string">&quot; &quot;</span> + minute);</span><br></pre></td></tr></table></figure>

<p><strong>맞는데 왜 틀리지</strong> 를 10번 넘게 한 문제이다.</p>
<p>핵심은 oven 시간이 148분인 경우이다. 이 경우 시간이 2시간이 추가 되어야 하고 148 을 60으로 나눈 나머지를 minute에다가 더해주면 된다.</p>
<p>나는 1시간만 추가된 경우만 고려해줘서 틀렸다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
      </categories>
  </entry>
  <entry>
    <title>boj-1157 단어공부</title>
    <url>/2022/11/03/Algorithm/boj/boj-1157-%EB%8B%A8%EC%96%B4%EA%B3%B5%EB%B6%80/</url>
    <content><![CDATA[<h1 id="📌-문제"><a href="#📌-문제" class="headerlink" title="📌 문제"></a>📌 문제</h1><p>알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.</p>
<table>
<thead>
<tr>
<th>입력</th>
<th>출력</th>
</tr>
</thead>
<tbody><tr>
<td>Mississipi</td>
<td>?</td>
</tr>
<tr>
<td>zZa</td>
<td>Z</td>
</tr>
<tr>
<td>z</td>
<td>Z</td>
</tr>
<tr>
<td>baaa</td>
<td>A</td>
</tr>
</tbody></table>
<h1 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alphabets = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...input.<span class="title function_">toLowerCase</span>()])];</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> current = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">alphabets.<span class="title function_">forEach</span>(<span class="function">(<span class="params">alphabet,i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> regExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(alphabet, <span class="string">&#x27;ig&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> count = input.<span class="title function_">match</span>(regExp).<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; count) &#123;</span><br><span class="line">        max = count;</span><br><span class="line">        current = alphabet.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (max === count &amp;&amp; alphabet.<span class="title function_">toUpperCase</span>() !== current) current = <span class="string">&#x27;?&#x27;</span>; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(current)</span><br></pre></td></tr></table></figure>

<ol>
<li>입력값의 알파벳을 소문자로 만들고 중복을 제거해주었다.</li>
<li>해당 알파벳을 forEach 문으로 순회하면서 초기에 입력값으로 주어진 문자열을 정규표현식으로 확인한다.</li>
<li>정규표현식에 매치되는 요소의 갯수가 최대값으로 갱신해주고 그 때의 알파벳을 대문자로 저장해둔다.</li>
<li>만약 새로운 알파벳의 갯수가 최댓값과 같고 현재의 알파벳 대문자와 current에 할당된 알파벳이 같으면 current에 “?”를 할당한다.</li>
</ol>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>문자열을 풀 때, 정규표현식을 사용하면 반복문을 줄이고 코드를 깔끔하게 하여 가독성을 키우는 연습을 하는데 도움이 될 것 같다.</p>
<p>주어진 테스트 케이스를 다 만족했지만, 제출했을 때 오답이라고 나와서 당황했다. 어떻게 하면 내 제출이 만족 못시키는 케이스가 있을까하고 생각해보면서 여러가지 상황을 제시하면서 테스트 케이스를 찾아내었다.</p>
<p>그 결과 처음 정규표현식을 생성할 때, alphabets 배열을 순회하면서가 아닌 초기 입력값의 순회한 요소를 넣어주었기 때문에 제대로 된 결과가 나오지 않는다는 것을 깨닫고 수정하였다.</p>
<p>테스트 케이스를 어떻게 찾아내지라고 생각하면서 막막했었는데,</p>
<ol>
<li>주어진 문제에서 제한사항 중 내가 놓친 부분이 있는지를 확인한다.</li>
<li>조건을 만족시키는 다양한 상황을 만들어본다.</li>
</ol>
<p>위 두가지를 실행해보다보니 찾게되어서 기뻤다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
      </categories>
  </entry>
  <entry>
    <title>boj-2745 진법 변환(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/boj-2745-%EC%A7%84%EB%B2%95-%EB%B3%80%ED%99%98-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>B진법 수 N이 주어진다. 이 수를 10진법으로 바꿔 출력하는 프로그램을 작성하시오.</p>
<p>10진법을 넘어가는 진법은 숫자로 표시할 수 없는 자리가 있다. 이런 경우에는 다음과 같이 알파벳 대문자를 사용한다.</p>
<p>A: 10, B: 11, …, F: 15, …, Y: 34, Z: 35</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N과 B가 주어진다. (2 ≤ B ≤ 36)</p>
<p>B진법 수 N을 10진법으로 바꾸면, 항상 10억보다 작거나 같다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 B진법 수 N을 10진법으로 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZZZZZ 36</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60466175</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [N, B] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ALPHABET_CODE</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UPPER_A_CODE</span> = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">const</span> alphabets = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> alphabet = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="variable constant_">UPPER_A_CODE</span> + i);</span><br><span class="line">  alphabets[alphabet] = <span class="variable constant_">ALPHABET_CODE</span> + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> pow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (N.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newN = alphabets[N.<span class="title function_">slice</span>(N.<span class="property">length</span> - <span class="number">1</span>)]</span><br><span class="line">    ? +alphabets[N.<span class="title function_">slice</span>(N.<span class="property">length</span> - <span class="number">1</span>)]</span><br><span class="line">    : +N.<span class="title function_">slice</span>(N.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> d = B ** pow;</span><br><span class="line">  answer = d * newN + answer;</span><br><span class="line">  N = N.<span class="title function_">slice</span>(<span class="number">0</span>, N.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">  index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>

<ol>
<li>알파벳 객체를 만들고 이전 문제인 10진법을 36진법으로 바꾸는 로직을 역순으로 짜보았다.</li>
<li>첫번째 자릿수부터 $36^0*(1의 자리수)$, $36^1*(10의 자리수)$… 이런식으로 10진법의 숫자로 변환할 수 있다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 또 다른 해답</span></span><br><span class="line"><span class="keyword">let</span> [N, B] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> reversed = N.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (reversed[i] &gt;= <span class="string">&quot;A&quot;</span> &amp;&amp; reversed[i] &lt;= <span class="string">&quot;Z&quot;</span>) &#123;</span><br><span class="line">    reversed[i] = reversed[i].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="number">55</span>;</span><br><span class="line">    answer += reversed[i] * <span class="title class_">Math</span>.<span class="title function_">pow</span>(B, i);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    answer += reversed[i] * <span class="title class_">Math</span>.<span class="title function_">pow</span>(B, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>

<ul>
<li>알파벳 코드를 굳이 만들지 않고 부등호를 사용하여 구하여 코드가 간결해졌다.</li>
<li>지수를 계산할 때, Math.pow() 메서드를 사용하여 깔끔하다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
      </categories>
  </entry>
  <entry>
    <title>우테코 프리코스-🦖 포비와 크롱</title>
    <url>/2022/10/31/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94%20%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%A6%96%20%ED%8F%AC%EB%B9%84%EC%99%80%20%ED%81%AC%EB%A1%B1/</url>
    <content><![CDATA[<h1 id="📌-문제"><a href="#📌-문제" class="headerlink" title="📌 문제"></a>📌 문제</h1><p>포비와 크롱이 페이지 번호가 1부터 시작되는 400 페이지의 책을 주웠다. 책을 살펴보니 왼쪽 페이지는 홀수, 오른쪽 페이지는 짝수 번호이고 모든 페이지에는 번호가 적혀있었다. 책이 마음에 든 포비와 크롱은 페이지 번호 게임을 통해 게임에서 이긴 사람이 책을 갖기로 한다. 페이지 번호 게임의 규칙은 아래와 같다.</p>
<ol>
<li>책을 임의로 펼친다.</li>
<li>왼쪽 페이지 번호의 각 자리 숫자를 모두 더하거나, 모두 곱해 가장 큰 수를 구한다.</li>
<li>오른쪽 페이지 번호의 각 자리 숫자를 모두 더하거나, 모두 곱해 가장 큰 수를 구한다.</li>
<li>2~3 과정에서 가장 큰 수를 본인의 점수로 한다.</li>
<li>점수를 비교해 가장 높은 사람이 게임의 승자가 된다.</li>
<li>시작 면이나 마지막 면이 나오도록 책을 펼치지 않는다.</li>
<li>포비와 크롱이 펼친 페이지가 들어있는 배열 pobi와 crong이 주어질 때, 포비가 이긴다면 1, 크롱이 이긴다면 2, 무승부는 0, 예외사항은 -1로 return 하도록 solution 메서드를 완성하라.</li>
</ol>
<h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul>
<li>pobi와 crong의 길이는 2이다.</li>
<li>pobi와 crong에는 [왼쪽 페이지 번호, 오른쪽 페이지 번호]가 순서대로 들어있다.</li>
</ul>
<h2 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h2><p>pobi crong result<br>[97, 98] [197, 198] 0<br>[131, 132] [211, 212] 1<br>[99, 102] [211, 212] -1</p>
<h2 id="나의-해설"><a href="#나의-해설" class="headerlink" title="나의 해설"></a>나의 해설</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">problem1</span>(<span class="params">pobi, crong</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [pobiLeft, pobiRight] = pobi;</span><br><span class="line">  <span class="keyword">const</span> [crongLeft, crongRight] = crong;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pobiRight - pobiLeft !== <span class="number">1</span> || crongRight - crongLeft !== <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">str</span>) =&gt;</span><br><span class="line">    str</span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v)</span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">str</span>) =&gt;</span><br><span class="line">    str</span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v)</span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc * cur, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMax</span> = (<span class="params">left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> leftMax = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">sum</span>(<span class="title class_">String</span>(left)), <span class="title function_">multiply</span>(<span class="title class_">String</span>(left)));</span><br><span class="line">    <span class="keyword">const</span> rightMax = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">sum</span>(<span class="title class_">String</span>(right)), <span class="title function_">multiply</span>(<span class="title class_">String</span>(right)));</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftMax, rightMax);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pobiMax = <span class="title function_">getMax</span>(pobiLeft, pobiRight);</span><br><span class="line">  <span class="keyword">const</span> crongMax = <span class="title function_">getMax</span>(crongLeft, crongRight);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pobiMax &gt; crongMax ? <span class="number">1</span> : pobiMax &lt; crongMax ? <span class="number">2</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>우선 자주 사용될 것 같은 left 페이지 수와 right 페이지 수를 배열 구조분해 할당으로 변수에 할당해주었다.</p>
</li>
<li><p>이후 예외가 등장했을 때, 빠르게 결과를 내기 위해 바로 예외 처리를 해주었다.</p>
</li>
<li><p>각 페이지의 자릿수의 합과 곱을 구하는 함수를 생성해주었다.</p>
</li>
<li><p>left와 right의 결과값 중 높은 값을 구하는 함수를 생성하였다.</p>
</li>
<li><p>pobi의 최댓값과 crong의 최댓값을 비교하여 결과를 반환하였다.</p>
</li>
</ol>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>우아한 테크코스 프리코스 첫 문제를 받아보고 내가 이 문제를 푼 방법을 나열하며 정리해보았다. 논리의 흐름을 정리하니 다음번에 비슷한 문제가 나오면 더 빠른 시간 내에 풀고 다양한 시도를 해볼 수 있을 것 같다.</p>
<p>앞으로 4주간 프리코스가 진행될텐데 합격하든 불합격하든 나의 성장을 위해 모든 문제에 대한 풀이를 작성해보도록 할 것이다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코 프리코스 - ⚾️ 숫자 야구 게임</title>
    <url>/2022/11/08/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%E2%9A%BE%EF%B8%8F-%EC%88%AB%EC%9E%90-%EC%95%BC%EA%B5%AC-%EA%B2%8C%EC%9E%84/</url>
    <content><![CDATA[<h1 id="📌-문제-및-요구사항"><a href="#📌-문제-및-요구사항" class="headerlink" title="📌 문제 및 요구사항"></a>📌 문제 및 요구사항</h1><p><a href="url:https://github.com/loco9939/javascript-baseball">숫자 야구 게임 바로가기</a></p>
<h2 id="✏️-회고"><a href="#✏️-회고" class="headerlink" title="✏️ 회고"></a>✏️ 회고</h2><h3 id="❗️-클래스-필드를-사용할-것인가-constructor-안에서-정의할-것인가"><a href="#❗️-클래스-필드를-사용할-것인가-constructor-안에서-정의할-것인가" class="headerlink" title="❗️ 클래스 필드를 사용할 것인가? constructor() 안에서 정의할 것인가?"></a>❗️ 클래스 필드를 사용할 것인가? constructor() 안에서 정의할 것인가?</h3><ul>
<li>App이라는 클래스는 야구게임 App이다. 야구 게임의 룰을 변경하지 않는 이상 인스턴스를 생성할 때마다 초기화할 값이 없다. 그러므로 <red>초기화 하지 않는 프로퍼티 값들은 클래스 필드에 정의</red>해두었다.</li>
</ul>
<h3 id="❗️-요구사항-제대로-읽기"><a href="#❗️-요구사항-제대로-읽기" class="headerlink" title="❗️ 요구사항 제대로 읽기"></a>❗️ 요구사항 제대로 읽기</h3><ul>
<li><strong>요구사항 제대로 읽지 않아서</strong> 라이브러리 사용하여 랜덤값 구하면 되는데, 랜덤값 구하는 로직 직접 짜서 다시 처음부터 시작하게되었다.</li>
<li>또 제대로 안읽어서 특정 메서드 사용하여 구하라했는데 라이브러리에서 제공하는 다른 메서드로 구현하여 다시 작성했다…</li>
</ul>
<h3 id="❗️jest를-통한-테스트-케이스는-어떻게-확인할-수-있는지-알게되었다"><a href="#❗️jest를-통한-테스트-케이스는-어떻게-확인할-수-있는지-알게되었다" class="headerlink" title="❗️jest를 통한 테스트 케이스는 어떻게 확인할 수 있는지 알게되었다."></a>❗️jest를 통한 테스트 케이스는 어떻게 확인할 수 있는지 알게되었다.</h3><ul>
<li>주어진 라이브러리를 활용하여 1번은 테스트 하는 것을 알 수 있었다. 그런데 2번째 값을 얻기 위해서 내가 해주어야 하는 것이 무엇인지 모르겠다.</li>
</ul>
<p>내가 직접 <strong>예상되는 값을 생각하여 테스트에 입력값만 적어주고</strong> 소스코드에서는 <red>해당 입력값이 넘어왔다가 가정하고 그에 대한 처리</red>를 해주면 되는 것이라는 것을 알게되었다.</p>
<h3 id="❗️랜덤값-받은-것을-프로퍼티로-저장해두자"><a href="#❗️랜덤값-받은-것을-프로퍼티로-저장해두자" class="headerlink" title="❗️랜덤값 받은 것을 프로퍼티로 저장해두자"></a>❗️랜덤값 받은 것을 프로퍼티로 저장해두자</h3><p>함수형 프로그래밍을 하면서 함수를 호출하고 반환된 값을 다른 함수에게 전달하는 방식으로 랜덤값과 입력값을 비교하고 결과를 반환하는 방식으로 하였는데, 이 방법보다는 App 이라는 클래스가 랜덤값과 입력값을 가져 <strong>한곳에서 이 데이터를 가져다가 사용하는 것이 적절하다고 판단</strong>하여 위와 같이 프로퍼티로 저장해두었다.</p>
<h3 id="❗️형변환-확인하기"><a href="#❗️형변환-확인하기" class="headerlink" title="❗️형변환 확인하기"></a>❗️형변환 확인하기</h3><p>테스트 케이스를 작성할 때, <strong>answers 배열의 요소를 문자열로 넣어준 것을 제대로 확인하지 않아</strong> 왜 자꾸 문제가 발생하는지 제대로 파악하기 어려웠다. 아마도 Jest를 사용한 디버깅이 익숙하지 않은 탓이었다. 때문에 여기서 의외로 많은 시간을 보냈다. 단위 테스트를 자주 하면서 Jest 디버깅에도 익숙해지도록 노력해야겠다.</p>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>저번주에 이어 2주차에 접어들게 되었다. 학원이 끝나고 혹은 주말에 틈틈히 문제를 풀었는데도 익숙하지 않는 Jest 테스트 방법 때문에 해결방법도 모른체로 <strong>삽질(?)</strong> 을 많이했던 한주였다.</p>
<p>그래도 주변에 물어도보고 검색도 하면서 구현까지는 어찌저찌 완성하였다.</p>
<p>하지만 리팩터링에 시간을 많이 쏟지 못한 것이 아쉬웠다. 우테코 문제 푸는 것도 중요하지만 당장 리액트 수업도 복습해야하고, CS 공부도 해야하고 알고리즘 문제도 풀어야하고 해야할 일이 너무 많다.</p>
<p>하지만 꾸준히 계획을 세워서 해나갈 것이니 언젠간 좋은 날이 올 것이라고 믿는다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코-프리코스 🎱 로또</title>
    <url>/2022/11/15/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%8E%B1-%EB%A1%9C%EB%98%90/</url>
    <content><![CDATA[<h1 id="📌-미션-로또"><a href="#📌-미션-로또" class="headerlink" title="📌 미션 - 로또"></a>📌 미션 - 로또</h1><h2 id="🔍-진행-방식"><a href="#🔍-진행-방식" class="headerlink" title="🔍 진행 방식"></a>🔍 진행 방식</h2><ul>
<li>미션은 기능 요구 사항, 프로그래밍 요구 사항, 과제 진행 요구 사항 세 가지로 구성되어 있다.</li>
<li>세 개의 요구 사항을 만족하기 위해 노력한다. 특히 기능을 구현하기 전에 기능 목록을 만들고, 기능 단위로 커밋 하는 방식으로 진행한다.</li>
<li>기능 요구 사항에 기재되지 않은 내용은 스스로 판단하여 구현한다.</li>
</ul>
<h2 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h2><p>로또 게임 기능을 구현해야 한다. 로또 게임은 아래와 같은 규칙으로 진행된다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 로또 번호의 숫자 범위는 1~45까지이다.</span><br><span class="line">- 1개의 로또를 발행할 때 중복되지 않는 6개의 숫자를 뽑는다.</span><br><span class="line">- 당첨 번호 추첨 시 중복되지 않는 숫자 6개와 보너스 번호 1개를 뽑는다.</span><br><span class="line">- 당첨은 1등부터 5등까지 있다. 당첨 기준과 금액은 아래와 같다. - 1등: 6개 번호 일치 / 2,000,000,000원 - 2등: 5개 번호 + 보너스 번호 일치 / 30,000,000원 - 3등: 5개 번호 일치 / 1,500,000원 - 4등: 4개 번호 일치 / 50,000원 - 5등: 3개 번호 일치 / 5,000원</span><br></pre></td></tr></table></figure>

<ul>
<li>로또 구입 금액을 입력하면 구입 금액에 해당하는 만큼 로또를 발행해야 한다.</li>
<li>로또 1장의 가격은 1,000원이다.</li>
<li>당첨 번호와 보너스 번호를 입력받는다.</li>
<li>사용자가 구매한 로또 번호와 당첨 번호를 비교하여 당첨 내역 및 수익률을 출력하고 로또 게임을 종료한다.</li>
<li>사용자가 잘못된 값을 입력할 경우 throw문을 사용해 예외를 발생시키고, “[ERROR]”로 시작하는 에러 메시지를 출력 후 종료한다.</li>
</ul>
<h2 id="입출력-요구-사항"><a href="#입출력-요구-사항" class="headerlink" title="입출력 요구 사항"></a>입출력 요구 사항</h2><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><ul>
<li>로또 구입 금액을 입력 받는다. 구입 금액은 1,000원 단위로 입력 받으며 1,000원으로 나누어 떨어지지 않는 경우 예외 처리한다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14000</span><br></pre></td></tr></table></figure>

<ul>
<li>당첨 번호를 입력 받는다. 번호는 쉼표(,)를 기준으로 구분한다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,2,3,4,5,6</span><br></pre></td></tr></table></figure>

<ul>
<li>보너스 번호를 입력 받는다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><ul>
<li>발행한 로또 수량 및 번호를 출력한다. 로또 번호는 오름차순으로 정렬하여 보여준다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8개를 구매했습니다.</span><br><span class="line">[8, 21, 23, 41, 42, 43]</span><br><span class="line">[3, 5, 11, 16, 32, 38]</span><br><span class="line">[7, 11, 16, 35, 36, 44]</span><br><span class="line">[1, 8, 11, 31, 41, 42]</span><br><span class="line">[13, 14, 16, 38, 42, 45]</span><br><span class="line">[7, 11, 30, 40, 42, 43]</span><br><span class="line">[2, 13, 22, 32, 38, 45]</span><br><span class="line">[1, 3, 5, 14, 22, 45]</span><br></pre></td></tr></table></figure>

<ul>
<li>당첨 내역을 출력한다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3개 일치 (5,000원) - 1개</span><br><span class="line">4개 일치 (50,000원) - 0개</span><br><span class="line">5개 일치 (1,500,000원) - 0개</span><br><span class="line">5개 일치, 보너스 볼 일치 (30,000,000원) - 0개</span><br><span class="line">6개 일치 (2,000,000,000원) - 0개</span><br></pre></td></tr></table></figure>

<ul>
<li>수익률은 소수점 둘째 자리에서 반올림한다. (ex. 100.0%, 51.5%, 1,000,000.0%)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">총 수익률은 62.5%입니다.</span><br></pre></td></tr></table></figure>

<ul>
<li>예외 상황 시 에러 문구를 출력해야 한다. 단, 에러 문구는 “[ERROR]”로 시작해야 한다.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ERROR] 로또 번호는 1부터 45 사이의 숫자여야 합니다.</span><br></pre></td></tr></table></figure>

<h3 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">구입금액을 입력해 주세요.</span><br><span class="line">8000</span><br><span class="line"></span><br><span class="line">8개를 구매했습니다.</span><br><span class="line">[8, 21, 23, 41, 42, 43]</span><br><span class="line">[3, 5, 11, 16, 32, 38]</span><br><span class="line">[7, 11, 16, 35, 36, 44]</span><br><span class="line">[1, 8, 11, 31, 41, 42]</span><br><span class="line">[13, 14, 16, 38, 42, 45]</span><br><span class="line">[7, 11, 30, 40, 42, 43]</span><br><span class="line">[2, 13, 22, 32, 38, 45]</span><br><span class="line">[1, 3, 5, 14, 22, 45]</span><br><span class="line"></span><br><span class="line">당첨 번호를 입력해 주세요.</span><br><span class="line">1,2,3,4,5,6</span><br><span class="line"></span><br><span class="line">보너스 번호를 입력해 주세요.</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">당첨 통계</span><br><span class="line"></span><br><span class="line">3개 일치 (5,000원) - 1개</span><br><span class="line">4개 일치 (50,000원) - 0개</span><br><span class="line">5개 일치 (1,500,000원) - 0개</span><br><span class="line">5개 일치, 보너스 볼 일치 (30,000,000원) - 0개</span><br><span class="line">6개 일치 (2,000,000,000원) - 0개</span><br><span class="line">총 수익률은 62.5%입니다.</span><br></pre></td></tr></table></figure>

<h2 id="🎯-프로그래밍-요구-사항"><a href="#🎯-프로그래밍-요구-사항" class="headerlink" title="🎯 프로그래밍 요구 사항"></a>🎯 프로그래밍 요구 사항</h2><ul>
<li>Node.js 14 버전에서 실행 가능해야 한다. Node.js 14에서 정상적으로 동작하지 않을 경우 0점 처리한다.</li>
<li>프로그램 실행의 시작점은 App.js의 play 메서드이다. 아래와 같이 프로그램을 실행시킬 수 있어야 한다.</li>
</ul>
<h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line">app.<span class="title function_">play</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>package.json을 변경할 수 없고 외부 라이브러리(jQuery, Lodash 등)를 사용하지 않는다. 순수 Vanilla JS로만 구현한다.</li>
<li>JavaScript 코드 컨벤션을 지키면서 프로그래밍 한다</li>
<li>프로그램 종료 시 process.exit()를 호출하지 않는다.</li>
<li>프로그램 구현이 완료되면 ApplicationTest의 모든 테스트가 성공해야 한다. 테스트가 실패할 경우 0점 처리한다.</li>
<li>프로그래밍 요구 사항에서 달리 명시하지 않는 한 파일, 패키지 이름을 수정하거나 이동하지 않는다.</li>
<li>indent(인덴트, 들여쓰기) depth를 3이 넘지 않도록 구현한다. 2까지만 허용한다.<ul>
<li>예를 들어 while문 안에 if문이 있으면 들여쓰기는 2이다.</li>
<li>힌트: indent(인덴트, 들여쓰기) depth를 줄이는 좋은 방법은 함수(또는 메서드)를 분리하면 된다.</li>
</ul>
</li>
<li>함수(또는 메서드)가 한 가지 일만 하도록 최대한 작게 만들어라.</li>
<li>Jest를 이용하여 본인이 정리한 기능 목록이 정상 동작함을 테스트 코드로 확인한다.</li>
</ul>
<h3 id="추가된-요구-사항"><a href="#추가된-요구-사항" class="headerlink" title="추가된 요구 사항"></a>추가된 요구 사항</h3><ul>
<li>함수(또는 메서드)의 길이가 15라인을 넘어가지 않도록 구현한다.<ul>
<li>함수(또는 메서드)가 한 가지 일만 잘 하도록 구현한다.</li>
</ul>
</li>
<li>else를 지양한다.<ul>
<li>힌트: if 조건절에서 값을 return하는 방식으로 구현하면 else를 사용하지 않아도 된다.</li>
<li>때로는 if&#x2F;else, switch문을 사용하는 것이 더 깔끔해 보일 수 있다. 어느 경우에 쓰는 것이 적절할지 스스로 고민해 본다.</li>
</ul>
</li>
<li>도메인 로직에 단위 테스트를 구현해야 한다. 단, UI(Console.readLine, Console.print) 로직에 대한 단위 테스트는 제외한다.<ul>
<li>핵심 로직을 구현하는 코드와 UI를 담당하는 로직을 구분한다.</li>
<li>단위 테스트 작성이 익숙하지 않다면 <strong>tests</strong>&#x2F;LottoTest.js를 참고하여 학습한 후 테스트를 구현한다.</li>
</ul>
</li>
</ul>
<h3 id="라이브러리"><a href="#라이브러리" class="headerlink" title="라이브러리"></a>라이브러리</h3><ul>
<li>MissionUtils 라이브러리에서 제공하는 Random 및 Console API를 사용하여 구현해야 한다.<ul>
<li>Random 값 추출은 MissionUtils 라이브러리의 Random.pickUniqueNumbersInRange()를 활용한다.</li>
<li>사용자의 값을 입력 받고 출력하기 위해서는 MissionUtils 라이브러리에서 제공하는 Console.readLine, Console.print를 활용한다.</li>
</ul>
</li>
</ul>
<h3 id="사용-예시"><a href="#사용-예시" class="headerlink" title="사용 예시"></a>사용 예시</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = <span class="title class_">MissionUtils</span>.<span class="property">Random</span>.<span class="title function_">pickUniqueNumbersInRange</span>(<span class="number">1</span>, <span class="number">45</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Lotto-클래스"><a href="#Lotto-클래스" class="headerlink" title="Lotto 클래스"></a>Lotto 클래스</h3><ul>
<li>제공된 Lotto 클래스를 활용해 구현해야 한다.</li>
<li>numbers의 # prefix를 변경할 수 없다.</li>
<li>Lotto에 필드를 추가할 수 없다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lotto</span> &#123;</span><br><span class="line">  #numbers;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">validate</span>(numbers);</span><br><span class="line">    <span class="variable language_">this</span>.#numbers = numbers;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">validate</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers.<span class="property">length</span> !== <span class="number">6</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 추가 기능 구현</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h1><h2 id="🐥-당첨-번호-및-로또-번호-예외-처리"><a href="#🐥-당첨-번호-및-로또-번호-예외-처리" class="headerlink" title="🐥 당첨 번호 및 로또 번호 예외 처리"></a>🐥 당첨 번호 및 로또 번호 예외 처리</h2><ul>
<li>당첨번호 에러 처리할 때 중복검사 뿐만 아니라 범위도 확인해줘야 한다. 게다가 보너스 번호는 당첨번호와 중복 검사도 추가로 해줘야 한다.</li>
</ul>
<h2 id="🦉-typeof-NaN-x3D-x3D-x3D-‘number’"><a href="#🦉-typeof-NaN-x3D-x3D-x3D-‘number’" class="headerlink" title="🦉 typeof NaN &#x3D;&#x3D;&#x3D; ‘number’"></a>🦉 typeof NaN &#x3D;&#x3D;&#x3D; ‘number’</h2><ul>
<li>“4r”이라는 문자열을 숫자로 형변환 해주면 NaN 값이 나오게된다. 에러처리를 할 때 type이 ‘number’인지를 확인해주도록 하였는데, NaN은 number 타입을 가지고 있으므로 이에 대한 처리를 추가해줘야했다.</li>
</ul>
<h2 id="🦆-하드코딩-vs-소프트코딩"><a href="#🦆-하드코딩-vs-소프트코딩" class="headerlink" title="🦆 하드코딩 vs 소프트코딩"></a>🦆 하드코딩 vs 소프트코딩</h2><ul>
<li><p>score 객체에 3등 4등 5등 의 키 값은 숫자로만 주었는데, bonus 등수는 문자열로 주어서 출력시 5등 4등 3등 2등 1등 Bonus등수가 출력되어서 이를 해결하기 위해 score의 key 값을 문자열로 변경하였다.</p>
</li>
<li><p>lotto 배열의 요소도 [1, 2, 3, 4, 5, 6] 이런 형태의 배열인데, print 결과물이 “[1, 2, 3, 4, 5, 6]” 이렇게 나와야 하므로 이에 대한 처리를 해주었다.</p>
</li>
</ul>
<ol>
<li>백틱만 사용</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">Lotto</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">lotto</span>) =&gt;</span> <span class="title class_">MissionUtils</span>.<span class="property">Console</span>.<span class="title function_">print</span>(<span class="string">`<span class="subst">$&#123;lotto&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>

<p><img src="/../../../images/lotto/error1.png" alt="Error1"></p>
<ol start="2">
<li>문자열에 [ ] 삽입</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">Lotto</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">lotto</span>) =&gt;</span> <span class="title class_">MissionUtils</span>.<span class="property">Console</span>.<span class="title function_">print</span>(<span class="string">`[<span class="subst">$&#123;lotto&#125;</span>]`</span>));</span><br></pre></td></tr></table></figure>

<p><img src="/../../../images/lotto/error2.png" alt="Error2"></p>
<ol start="3">
<li>문자열 배열처럼 처리</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">Lotto</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">lotto</span>) =&gt;</span></span><br><span class="line">  <span class="title class_">MissionUtils</span>.<span class="property">Console</span>.<span class="title function_">print</span>(<span class="string">`[<span class="subst">$&#123;lotto.join(<span class="string">&quot;, &quot;</span>)&#125;</span>]`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/../../../images/lotto/error3.png" alt="Error3"></p>
<h2 id="🐒-숫자를-천-단위-콤마찍은-문자열로-변환하기"><a href="#🐒-숫자를-천-단위-콤마찍은-문자열로-변환하기" class="headerlink" title="🐒 숫자를 천 단위 콤마찍은 문자열로 변환하기"></a>🐒 숫자를 천 단위 콤마찍은 문자열로 변환하기</h2><ul>
<li><code>Number.prototype.toLocaleString()</code> 메서드를 사용하면 천단위에 ,를 찍은 문자열로 변환한다.</li>
</ul>
<h2 id="✏️-피드백-22-11-17-추가"><a href="#✏️-피드백-22-11-17-추가" class="headerlink" title="✏️ 피드백 (22.11.17 추가)"></a>✏️ 피드백 (22.11.17 추가)</h2><h3 id="비즈니스-로직과-UI로직-구분"><a href="#비즈니스-로직과-UI로직-구분" class="headerlink" title="비즈니스 로직과 UI로직 구분"></a>비즈니스 로직과 UI로직 구분</h3><ul>
<li>한 클래스에서 담당하지 않고 <strong>구분하여야 한다.</strong></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lotto</span> &#123;</span><br><span class="line">   #numbers</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 로또 숫자가 포함되어 있는지 확인하는 비즈니스 로직</span></span><br><span class="line">   <span class="title function_">contains</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// UI 로직</span></span><br><span class="line">   <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="객체의-상태-접근-제한"><a href="#객체의-상태-접근-제한" class="headerlink" title="객체의 상태 접근 제한"></a>객체의 상태 접근 제한</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 내 코드</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">LottoCount</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Lotto</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">winNum</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bonusNum</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = &#123; <span class="string">&quot;3개&quot;</span>: <span class="number">0</span>, <span class="string">&quot;4개&quot;</span>: <span class="number">0</span>, <span class="string">&quot;5개&quot;</span>: <span class="number">0</span>, bonus개: <span class="number">0</span>, <span class="string">&quot;6개&quot;</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prize</span> = &#123;</span><br><span class="line">      <span class="string">&quot;3개&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">      <span class="string">&quot;4개&quot;</span>: <span class="number">50000</span>,</span><br><span class="line">      <span class="string">&quot;5개&quot;</span>: <span class="number">1500000</span>,</span><br><span class="line">      bonus개: <span class="number">30000000</span>,</span><br><span class="line">      <span class="string">&quot;6개&quot;</span>: <span class="number">2000000000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">totalMoney</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>위 와 같은 경우 객체의 데이터를 외부에서 접근 가능하므로 이는 디버깅과 유지보수를 어렵게하므로 <strong>접근 제한자를 설정하고 선택된 메서드만으로 데이터를 참조하거나 변경할 수 있도록 개선한다.</strong></li>
</ul>
<h3 id="객체는-객체답게-사용"><a href="#객체는-객체답게-사용" class="headerlink" title="객체는 객체답게 사용"></a>객체는 객체답게 사용</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lotto</span> &#123;</span><br><span class="line">   #numbers</span><br><span class="line"></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.#numbers = numbers</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">getNumbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.#numbers</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LottoGame</span> &#123;</span><br><span class="line">   <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> lotto = <span class="keyword">new</span> <span class="title class_">Lotto</span>(...)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 숫자가 포함되어 있는지 확인한다.</span></span><br><span class="line">			lotto.<span class="title function_">getNumbers</span>().<span class="title function_">contains</span>(number)</span><br><span class="line">			 <span class="comment">// 당첨 번호와 몇 개가 일치하는지 확인한다.</span></span><br><span class="line">			lotto.<span class="title function_">getNumbers</span>().<span class="title function_">stream</span>()...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>로또 클래스는 로또 숫자를 가져오는 역할만 한다.</li>
<li>로또게임 클래스는 play() 메서드를 호출 하였을 경우 이와 관련된 로직으로 구성한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lotto</span> &#123;</span><br><span class="line">   #numbers</span><br><span class="line"></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.#numbers = numbers</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">contains</span>(<span class="params">number</span>) &#123;</span><br><span class="line">       <span class="comment">// 숫자가 포함되어 있는지 확인한다.</span></span><br><span class="line">       <span class="keyword">return</span> ...</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">matchCount</span>(<span class="params">other</span>) &#123;</span><br><span class="line">       <span class="comment">// 당첨 번호와 몇 개가 일치하는지 확인한다.</span></span><br><span class="line">       <span class="keyword">return</span> ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LottoGame</span> &#123;</span><br><span class="line">   <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> lotto = <span class="keyword">new</span> <span class="title class_">Lotto</span>(...)</span><br><span class="line"></span><br><span class="line">       lotto.<span class="title function_">contains</span>(number)</span><br><span class="line">       lotto.<span class="title function_">matchCount</span>(...)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>getter를 사용하여 값을 꺼내 사용하는 대신 다른 객체에 메시지를 건네주자. <strong>객체가 스스로 일하도록 하는 객체 지향 프로그래밍 기법을 사용하자.</strong></li>
<li>출력을 위한 값, 순수 값 프로퍼티를 가져오기 위해서라면 getter를 허용한다.</li>
</ul>
<h3 id="필드-수를-줄이도록-하자"><a href="#필드-수를-줄이도록-하자" class="headerlink" title="필드 수를 줄이도록 하자"></a>필드 수를 줄이도록 하자</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩터링 전</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LottoResult</span> &#123;</span><br><span class="line">   #result = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">   #profitRate</span><br><span class="line">   #totalPrize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LottoResult</span> &#123;</span><br><span class="line">   #result = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">   <span class="title function_">calculateProfitRate</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">calculateTotalPrize</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>위 객체의 profitRate와 totalPrize는 등수 별 당첨 내역(result)만 있어도 모두 구할 수 있는 값이다. 따라서 위 객체는 다음과 같이 하나의 필드만으로 구현할 수 있다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>2주차때 클래스구조와 테스트에 대해서 조금은 익숙해져서 3주차 미션을 받았을 때 구조가 비슷하여 조금 마음이 놓였다.</p>
<ul>
<li><code>jest expect</code> 함수와 <code>matcher</code> 함수를 찾아보면서 단위 테스트 기능에 대해 공부해볼 수 있는 기회여서 좋았다.</li>
<li>로또 클래스와 비즈니스 로직 클래스를 구분하여 테스트를 진행하고 관심사를 분리하면서 개발을 하니 유지보수가 편리하다는 것을 느낄 수 있었다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코 프리코스 - 🐶 중복 문자 제거</title>
    <url>/2022/11/01/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%90%B6-%EC%A4%91%EB%B3%B5-%EB%AC%B8%EC%9E%90-%EC%A0%9C%EA%B1%B0.md/</url>
    <content><![CDATA[<h1 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h1><p>암호문을 좋아하는 괴짜 개발자 브라운이 이번에는 중복 문자를 이용한 새로운 암호를 만들었다. 예를 들어 “browoanoommnaon”이라는 암호문은 다음과 같은 순서로 해독할 수 있다.</p>
<ol>
<li>“browoanoommnaon”</li>
<li>“browoannaon”</li>
<li>“browoaaon”</li>
<li>“browoon”</li>
<li>“brown”</li>
</ol>
<p>임의의 문자열 cryptogram이 매개변수로 주어질 때, 연속하는 중복 문자들을 삭제한 결과를 return 하도록 solution 메서드를 완성하라.</p>
<h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a><strong>제한사항</strong></h2><ul>
<li>cryptogram은 길이가 1 이상 1000 이하인 문자열이다.</li>
<li>cryptogram은 알파벳 소문자로만 이루어져 있다.</li>
</ul>
<h2 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a><strong>실행 결과 예시</strong></h2><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">problem2</span>(<span class="params">cryptogram</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (cryptogram !== cryptogram.<span class="title function_">toLowerCase</span>()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;매개변수는 소문자만 입력할 수 있습니다.&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!cryptogram.<span class="property">length</span> || cryptogram.<span class="property">length</span> &gt; <span class="number">1000</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;매개변수는 1자 이상 1000자 이하만 입력할 수 있습니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> strArr = [...cryptogram];</span><br><span class="line">  <span class="keyword">let</span> duplicatedStrPosition = [];</span><br><span class="line">  <span class="keyword">let</span> hasDuplicatedStr = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(hasDuplicatedStr) &#123;</span><br><span class="line">    strArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">_, i, init</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (init[i] === init[i+<span class="number">1</span>]) duplicatedStrPosition = [i, ...duplicatedStrPosition];</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    hasDuplicatedStr = !duplicatedStrPosition.<span class="property">length</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    duplicatedStrPosition = duplicatedStrPosition.<span class="title function_">filter</span>(<span class="function"><span class="params">elem</span> =&gt;</span> &#123;</span><br><span class="line">      strArr = [...strArr.<span class="title function_">slice</span>(<span class="number">0</span>, elem), ...strArr.<span class="title function_">slice</span>(elem + <span class="number">2</span>)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> strArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>strArr로 문자열을 배열로 관리</li>
<li>strArr 배열이 더 이상 중복이 없을 때 까지 반복해야하고, 문자열의 순회하며 중복을 확인해야 하므로 시간 복잡도 $n^2$</li>
<li>Spread문법으로 원본 배열의 변형을 최소화하는 방향으로 배열을 관리</li>
<li>for문 대신 배열 메서드 forEach문 사용</li>
<li>원본 배열을 변형시키는 splice 메서드 대신 slice 메서드 사용</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><ul>
<li>내가 코드를 처음 보는 사람의 입장으로 변수명부터 잘 이해할 수 있는지 고려하여 리팩터링을 하였다.</li>
<li>처음에는 while 조건식을 단순히 true라고 하였는데, 의미를 부여하여 코드의 가독성을 높이기 위해 변수에 할당해주었다.</li>
<li>배열을 다루기 때문에 for문 대신 forEach문을 사용하였다.</li>
<li>splice 메서드 같이 원본을 변형시키는 메서드 대신 spread 문법과 slice 메서드를 사용하였다.</li>
<li>리팩터링 전에는 duplicatedStrPosition 배열을 직접 빈 배열로 초기화해주었지만, 리팩터링을 하면서 filter 메서드를 사용하여 좀 더 배열을 다루는 의미를 부여하였다.</li>
</ul>
<p>하나 걸리는 부분은 제한사항을 에러처리를 해주어야 하나 고민을 하였다. 사용자가 제한사항에 벗어나는 입력을 할 수도 있으므로 이에 대한 에러를 발생시켜주는 것이 사용성에 더 옳다고 생각하여 if 조건문을 통해 에러처리를 해주었습니다.</p>
<p>에러처리에 대해서는 깊게 생각해보지 못했는데, 제한사항에 대해 한번 더 깊이 생각해보면서 에러처리의 필요성을 느낄 수 있었던 문제여서 즐거웠다.</p>
<p>또한 stack 자료구조를 생각하면서 문제를 해석하면 지금의 코드보다 훨씬 더 간결하고 가독성있는 코드를 구현할 수 있다는 것을 오늘 코드리뷰를 통해 깨닫게 되었다. stack으로 구현해보는 것은 다음 시간에 해보도록 하자.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코 프리코스 - 🐸 청개구리 사전</title>
    <url>/2022/11/04/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%90%B8-%EC%B2%AD%EA%B0%9C%EA%B5%AC%EB%A6%AC-%EC%82%AC%EC%A0%84/</url>
    <content><![CDATA[<h1 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h1><p>어느 연못에 엄마 말씀을 좀처럼 듣지 않는 청개구리가 살고 있었다. 청개구리는 엄마가 하는 말은 무엇이든 반대로 말하였다.</p>
<p>엄마 말씀 word가 매개변수로 주어질 때, 아래 청개구리 사전을 참고해 반대로 변환하여 return 하도록 solution 메서드를 완성하라.</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>H</th>
<th>I</th>
<th>J</th>
<th>K</th>
<th>L</th>
<th>M</th>
<th>N</th>
<th>O</th>
<th>P</th>
<th>Q</th>
<th>R</th>
<th>S</th>
<th>T</th>
<th>U</th>
<th>V</th>
<th>W</th>
<th>X</th>
<th>Y</th>
<th>Z</th>
</tr>
</thead>
<tbody><tr>
<td>Z</td>
<td>Y</td>
<td>X</td>
<td>W</td>
<td>V</td>
<td>U</td>
<td>T</td>
<td>S</td>
<td>R</td>
<td>Q</td>
<td>P</td>
<td>O</td>
<td>N</td>
<td>M</td>
<td>L</td>
<td>K</td>
<td>J</td>
<td>I</td>
<td>H</td>
<td>G</td>
<td>F</td>
<td>E</td>
<td>D</td>
<td>C</td>
<td>B</td>
<td>A</td>
</tr>
</tbody></table>
<h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul>
<li>word는 길이가 1 이상 1,000 이하인 문자열이다.</li>
<li>알파벳 외의 문자는 변환하지 않는다.</li>
<li>알파벳 대문자는 알파벳 대문자로, 알파벳 소문자는 알파벳 소문자로 변환한다.</li>
</ul>
<h2 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h2><table>
<thead>
<tr>
<th>word</th>
<th>result</th>
</tr>
</thead>
<tbody><tr>
<td>“I love you”</td>
<td>“R olev blf”</td>
</tr>
</tbody></table>
<h1 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">problem4</span>(<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> word !== <span class="string">&#x27;string&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;매개변수는 문자열 타입이여야 합니다.&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!word.<span class="property">length</span> || word.<span class="property">length</span> &gt; <span class="number">1000</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;매개변수는 1 이상 1,000 이하의 문자열이여야 합니다.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ALPHABET_LENGTH</span> = <span class="number">26</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ASCII_NUMBER_CODE_UPPER_A</span> = <span class="number">65</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ASCII_NUMBER_CODE_UPPER__Z</span> = <span class="number">90</span> ;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ASCII_NUMBER_CODE_LOWER_A</span> = <span class="number">97</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ASCII_NUMBER_CODE_LOWER__Z</span> = <span class="number">122</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> splitWords = [...word];</span><br><span class="line">  <span class="keyword">const</span> uppers = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;<span class="attr">length</span>:<span class="variable constant_">ALPHABET_LENGTH</span>&#125;, <span class="function">(<span class="params">_,i</span>) =&gt;</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="variable constant_">ASCII_NUMBER_CODE_UPPER_A</span>+i));</span><br><span class="line">  <span class="keyword">const</span> lowers = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;<span class="attr">length</span>:<span class="variable constant_">ALPHABET_LENGTH</span>&#125;, <span class="function">(<span class="params">_,i</span>) =&gt;</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="variable constant_">ASCII_NUMBER_CODE_LOWER_A</span>+i));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeOppositeStr</span> = str =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> codePosition = str.<span class="title function_">charCodeAt</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (codePosition &gt;= <span class="variable constant_">ASCII_NUMBER_CODE_UPPER_A</span> &amp;&amp; codePosition &lt;= <span class="variable constant_">ASCII_NUMBER_CODE_UPPER__Z</span></span><br><span class="line">      ? [...uppers].<span class="title function_">reverse</span>()[uppers.<span class="title function_">indexOf</span>(str)]</span><br><span class="line">      : codePosition &gt;= <span class="variable constant_">ASCII_NUMBER_CODE_LOWER_A</span> &amp;&amp; codePosition &lt;= <span class="variable constant_">ASCII_NUMBER_CODE_LOWER__Z</span> </span><br><span class="line">      ? [...lowers].<span class="title function_">reverse</span>()[lowers.<span class="title function_">indexOf</span>(str)]</span><br><span class="line">      : str);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> splitWords.<span class="title function_">map</span>(<span class="function"><span class="params">splitedWord</span> =&gt;</span> <span class="title function_">changeOppositeStr</span>(splitedWord)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ASCII 코드를 활용하여 A<del>Z, a</del>z 를 담은 배열을 생성하였다.</li>
<li>map 메서드를 사용하여 각 요소를 반대편 문자열로 바꿔주었다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><ul>
<li>리팩터링을 하기 전 코드는 ASCII 코드를 상수에 할당하지 않고 그대로 비즈니스 로직에 가져다가 사용하지 해당 숫자가 무엇을 의미하는지 파악하기 힘들어 상수에 할당하니 가독성이 높아졌다.</li>
<li>changeOppositeStr() 함수 내부에서 reverse()[] 이 부분이 중복되어 함수로 추출하려 했지만, 짧은 코드에 너무 많은 함수가 오히려 더 가독성을 해친다고 판단하여 그대로 두었다.</li>
<li>로직을 ASCII 코드 대신 정규표현식으로 구현하였다면 비즈니스 로직이 훨씬 더 간결해질 것 같기에 다음에 문자열 문제가 나온다면 정규표현식으로도 도전해봐야겠다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코 프리코스 - 👏🏻 3,6,9 박수 횟수 세</title>
    <url>/2022/11/04/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%91%8F%F0%9F%8F%BB-3-6-9-%EB%B0%95%EC%88%98-%ED%9A%9F%EC%88%98-%EC%84%B8/</url>
    <content><![CDATA[<h1 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h1><p>배달이가 좋아하는 369게임을 하고자 한다. 놀이법은 1부터 숫자를 하나씩 대면서, 3, 6, 9가 들어가는 숫자는 숫자를 말하는 대신 3, 6, 9의 개수만큼 손뼉을 쳐야 한다.</p>
<p>숫자 number가 매개변수로 주어질 때, 1부터 number까지 손뼉을 몇 번 쳐야 하는지 횟수를 return 하도록 solution 메서드를 완성하라.</p>
<h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul>
<li>number는 1 이상 10,000 이하인 자연수이다.</li>
</ul>
<h2 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h2><table>
<thead>
<tr>
<th>number</th>
<th>result</th>
</tr>
</thead>
<tbody><tr>
<td>13</td>
<td>4</td>
</tr>
<tr>
<td>33</td>
<td>14</td>
</tr>
</tbody></table>
<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">problem3</span>(<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">0</span> || number &gt; <span class="number">10000</span> || number !== <span class="built_in">parseInt</span>(number)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;매개변수는 1이상 10,000 이하의 자연수만 입력 가능합니다.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> clapCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; number + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> splitStr = [...<span class="title class_">String</span>(i)];</span><br><span class="line"></span><br><span class="line">    splitStr.<span class="title function_">forEach</span>(<span class="function"><span class="params">elem</span> =&gt;</span> clapCount = elem === <span class="string">&#x27;3&#x27;</span> || elem === <span class="string">&#x27;6&#x27;</span> || elem === <span class="string">&#x27;9&#x27;</span> ? clapCount + <span class="number">1</span> : clapCount);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> clapCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>매개변수만큼 반복문을 돌면서 숫자 1부터 문자열로 변환한 다음 문자열에 3,6,9가 있으면 clapCount를 1 증가시켜주는 코드를 작성하였다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><ul>
<li><code>parseInt()</code> 메서드 대신 <code>+number</code>를 사용하여 형변환을 시켰으면 어떨까하는 아쉬움이 남는다. 왜냐하면 <code>parseInt()</code> 메서드는 특정 진수법에 해당하는 정수로 반환하는 역할을 하기에 단순히 숫자로 형변환을 위함이 목적이라면 의미가 벗어난다고 생각했다. 마찬가지로 <code>String()</code> 메서드 대신 <code>(i + ‘’)</code>로 형변환 시켜야겠다.</li>
<li>수강생들과 코드리뷰를 하면서 느낀점은 문자열을 다룰 때, 정규표현식을 사용할 수 있다면 좀 더 가독성이 좋은 코드를 작성할 수 있을 것 이라는 생각이 들었다. 지금부터라도 문자열 문제가 나온다면 정규표현식으로 풀어보는 연습을 해야겠다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코-프리코스-💵 지갑의 지폐 교환하기</title>
    <url>/2022/11/05/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%92%B5-%EC%A7%80%EA%B0%91%EC%9D%98-%EC%A7%80%ED%8F%90-%EA%B5%90%ED%99%98%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h2><p>계좌에 들어있는 돈 일부를 은행에서 출금하고자 한다. 돈 담을 지갑이 최대한 가볍도록 큰 금액의 화폐 위주로 받는다.</p>
<p>돈의 액수 money가 매개변수로 주어질 때, 오만 원권, 만 원권, 오천 원권, 천 원권, 오백원 동전, 백원 동전, 오십원 동전, 십원 동전, 일원 동전 각 몇 개로 변환되는지 금액이 큰 순서대로 배열에 담아 return 하도록 solution 메서드를 완성하라.</p>
<h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul>
<li>money는 1 이상 1,000,000 이하인 자연수이다.</li>
</ul>
<h3 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h3><table>
<thead>
<tr>
<th>money</th>
<th>result</th>
</tr>
</thead>
<tbody><tr>
<td>50237</td>
<td>[1, 0, 0, 0, 0, 2, 0, 3, 7]</td>
</tr>
<tr>
<td>15000</td>
<td>[0, 1, 1, 0, 0, 0, 0, 0, 0]</td>
</tr>
</tbody></table>
<h1 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">problem5</span>(<span class="params">money</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!money || money &gt; <span class="number">1000000</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(</span><br><span class="line">      <span class="string">&quot;매개변수는 1 이상 1,000,000 이하의 자연수여야 합니다.&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> papers = [<span class="number">50000</span>, <span class="number">10000</span>, <span class="number">5000</span>, <span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">let</span> paperCount = [];</span><br><span class="line"></span><br><span class="line">  papers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">paper</span>) =&gt;</span> &#123;</span><br><span class="line">    paperCount = [...paperCount, <span class="title class_">Math</span>.<span class="title function_">floor</span>(money / paper)];</span><br><span class="line">    money %= paper;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> paperCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>나머지와 몫을 이용해 반복문을 통해 구현하였다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><ul>
<li>map 메서드는 배열의 요소에 콜백함수를 호출하여 그 반환값으로 새로운 배열을 만드는 메서드라고만 생각하고 처음에 papers 배열을 map 메서드를 사용하여 map 메서드 내부에서 money를 변형시켜 비순수한 함수로 구현하였다. 하지만 함수는 외부 변수를 변경하지 않고 순수하도록 작성해야하므로 이를 forEach 메서드로 변경하였다.</li>
<li>여기서는 <code>parseInt</code> 대신에 <code>Math.floor()</code> 메서드를 사용하여 정수로 변형시켜주었다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코-프리코스-😎 추천 친구 점수 정렬</title>
    <url>/2022/11/05/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%98%8E%20%EC%B6%94%EC%B2%9C%20%EC%B9%9C%EA%B5%AC%20%EC%A0%90%EC%88%98%20%EC%A0%95%EB%A0%AC/</url>
    <content><![CDATA[<h2 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h2><p>레벨 2의 팀 프로젝트 미션으로 SNS(Social Networking Service)를 만들고자 하는 팀이 있다. 팀에 속한 크루 중 평소 알고리즘에 관심이 많은 미스터코는 친구 추천 알고리즘을 구현하고자 아래와 같은 규칙을 세웠다.</p>
<ul>
<li>사용자와 함께 아는 친구의 수 &#x3D; 10점</li>
<li>사용자의 타임 라인에 방문한 횟수 &#x3D; 1점</li>
</ul>
<p>사용자 아이디 user와 친구 관계를 담은 이차원 배열 friends, 사용자 타임 라인 방문 기록 visitors가 매개변수로 주어질 때, 미스터코의 친구 추천 규칙에 따라 점수가 가장 높은 순으로 정렬하여 최대 5명을 return 하도록 solution 메서드를 완성하라. 이때 추천 점수가 0점인 경우 추천하지 않으며, 추천 점수가 같은 경우는 이름순으로 정렬한다.</p>
<h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul>
<li>user는 길이가 1 이상 30 이하인 문자열이다.</li>
<li>friends는 길이가 1 이상 10,000 이하인 배열이다.</li>
<li>friends의 각 원소는 길이가 2인 배열로 [아이디 A, 아이디 B] 순으로 들어있다.<ul>
<li>A와 B는 친구라는 의미이다.</li>
<li>아이디는 길이가 1 이상 30 이하인 문자열이다.</li>
</ul>
</li>
<li>visitors는 길이가 0 이상 10,000 이하인 배열이다.</li>
<li>사용자 아이디는 알파벳 소문자로만 이루어져 있다.</li>
<li>동일한 친구 관계가 중복해서 주어지지 않는다.</li>
<li>추천할 친구가 없는 경우는 주어지지 않는다.</li>
</ul>
<h3 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h3><table>
<thead>
<tr>
<th>user</th>
<th>friends</th>
<th>visitors</th>
<th>result</th>
</tr>
</thead>
<tbody><tr>
<td>“mrko”</td>
<td>[ [“donut”, “andole”], [“donut”, “jun”], [“donut”, “mrko”], [“shakevan”, “andole”], [“shakevan”, “jun”], [“shakevan”, “mrko”] ]</td>
<td>[“bedi”, “bedi”, “donut”, “bedi”, “shakevan”]</td>
<td>[“andole”, “jun”, “bedi”]</td>
</tr>
</tbody></table>
<h1 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">problem7</span>(<span class="params">user, friends, visitors</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> user !== <span class="string">&quot;string&quot;</span> ||</span><br><span class="line">    !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(friends) ||</span><br><span class="line">    !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(visitors)</span><br><span class="line">  )</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">      <span class="string">&quot;user는 문자열, friends는 배열, visitors는 배열이여야 합니다.&quot;</span></span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">if</span> (!user.<span class="property">length</span> || user.<span class="property">length</span> &gt; <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&quot;user는 길이가 1 이상 30 이하인 문자열이여야 합니다.&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!friends.<span class="property">length</span> || friends.<span class="property">length</span> &gt; <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(</span><br><span class="line">      <span class="string">&quot;friends는 길이가 1 이상 10,000 이하인 배열이여야 합니다.&quot;</span></span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">if</span> (visitors.<span class="property">length</span> &lt; <span class="number">0</span> || visitors.<span class="property">length</span> &gt; <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(</span><br><span class="line">      <span class="string">&quot;visitors는 길이가 0 이상 10,000 이하인 배열이여야 합니다.&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 유저의 친구들</span></span><br><span class="line">  <span class="keyword">let</span> userFriends = [];</span><br><span class="line">  friends.<span class="title function_">forEach</span>(<span class="function">(<span class="params">friend</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (friend.<span class="title function_">includes</span>(user)) userFriends = [...userFriends, ...friend];</span><br><span class="line">  &#125;);</span><br><span class="line">  userFriends = userFriends.<span class="title function_">filter</span>(<span class="function">(<span class="params">friend</span>) =&gt;</span> friend !== user);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 유저 친구의 친구들 =&gt; 알 수도 있는 친구들</span></span><br><span class="line">  <span class="keyword">let</span> mayKnowUsers = [];</span><br><span class="line">  friends.<span class="title function_">forEach</span>(<span class="function">(<span class="params">friend</span>) =&gt;</span> &#123;</span><br><span class="line">    userFriends.<span class="title function_">forEach</span>(<span class="function">(<span class="params">userFriend</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (friend.<span class="title function_">includes</span>(userFriend))</span><br><span class="line">        mayKnowUsers = [...mayKnowUsers, ...friend];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  mayKnowUsers = mayKnowUsers.<span class="title function_">filter</span>(<span class="function">(<span class="params">mayKnowUser</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mayKnowUser !== user &amp;&amp; !userFriends.<span class="title function_">includes</span>(mayKnowUser);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 유저 점수 계산</span></span><br><span class="line">  <span class="keyword">const</span> userCount = &#123;&#125;;</span><br><span class="line">  mayKnowUsers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mayKnowUser</span>) =&gt;</span> &#123;</span><br><span class="line">    userCount[mayKnowUser] = (userCount[mayKnowUser] ?? <span class="number">0</span>) + <span class="number">10</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  visitors.<span class="title function_">forEach</span>(<span class="function">(<span class="params">visitor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (visitor === user || userFriends.<span class="title function_">includes</span>(visitor)) <span class="keyword">return</span>;</span><br><span class="line">    userCount[visitor] = (userCount[visitor] ?? <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 점수 기준 내림차순 정렬</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">sortFunc</span> = (<span class="params">userA, userB</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numA = userCount[userA];</span><br><span class="line">    <span class="keyword">const</span> numB = userCount[userB];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numA - numB &gt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (numA - numB &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> userA &lt; userB ? -<span class="number">1</span> : userA === userB ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userId = <span class="title class_">Object</span>.<span class="title function_">keys</span>(userCount);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> userId.<span class="title function_">sort</span>(<span class="function">(<span class="params">userA, userB</span>) =&gt;</span> <span class="title function_">sortFunc</span>(userA, userB)).<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>유저의 친구들을 구하였다.</li>
<li>유저의 친구들의 친구들을 구하였다. ⇒ 10점을 매기기 위해</li>
<li>방문객과 유저의 친구의 친구들을 순회하면서 점수를 매겼다.</li>
<li>점수를 기준으로 내림차순 정렬과 동일 점수일 때 알파벳 순으로 정렬을 해주었다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>이 문제는 처음에 한국말을 이해하기 어려워서 오랫동안 고전했던 문제이다. 친구에게 문제를 차근히 설명해보면서 요구사항에 대해 파악할 수 있었다.</p>
<ul>
<li>시간이 부족하여 6번문제와 7번문제는 리팩터링을 많이 못한 것이 아쉬웠다.</li>
<li>이전까지 sort() 메서드는 단순히 오름차순, 내림차순 정렬에만 사용되는 것이라고 생각했는데, 이번 기회에 sort() 메서드는 두개의 인자를 받아서 -1, 0, 1 값을 return 하는 것을 기준으로 배열의 index를 직접 변경하는 메서드이라는 것을 제대로 알게되었다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>우테코-프리코스-🛤 중복 닉네임 유저의 이메일 정렬하기</title>
    <url>/2022/11/05/Algorithm/woowa/%EC%9A%B0%ED%85%8C%EC%BD%94-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%F0%9F%9B%A4-%EC%A4%91%EB%B3%B5-%EB%8B%89%EB%84%A4%EC%9E%84-%EC%9C%A0%EC%A0%80%EC%9D%98-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="🚀-기능-요구-사항"><a href="#🚀-기능-요구-사항" class="headerlink" title="🚀 기능 요구 사항"></a>🚀 기능 요구 사항</h2><p>우아한테크코스에서는 교육생(이하 크루) 간 소통 시 닉네임을 사용한다. 간혹 비슷한 닉네임을 정하는 경우가 있는데, 이러할 경우 소통할 때 혼란을 불러일으킬 수 있다.</p>
<p>혼란을 막기 위해 크루들의 닉네임 중 <strong>같은 글자가 연속적으로 포함</strong> 될 경우 해당 닉네임 사용을 제한하려 한다. 이를 위해 같은 글자가 연속적으로 포함되는 닉네임을 신청한 크루들에게 알려주는 시스템을 만들려고 한다.</p>
<p>신청받은 닉네임 중 <strong>같은 글자가 연속적으로 포함</strong> 되는 닉네임을 작성한 지원자의 이메일 목록을 return 하도록 solution 메서드를 완성하라.</p>
<h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul>
<li>두 글자 이상의 문자가 연속적으로 순서에 맞추어 포함되어 있는 경우 중복으로 간주한다.</li>
<li>크루는 1명 이상 10,000명 이하이다.</li>
<li>이메일은 이메일 형식에 부합하며, 전체 길이는 11자 이상 20자 미만이다.</li>
<li>신청할 수 있는 이메일은 <code>email.com</code> 도메인으로만 제한한다.</li>
<li>닉네임은 한글만 가능하고 전체 길이는 1자 이상 20자 미만이다.</li>
<li>result는 이메일에 해당하는 부분의 문자열을 오름차순으로 정렬하고 중복은 제거한다.</li>
</ul>
<h3 id="실행-결과-예시"><a href="#실행-결과-예시" class="headerlink" title="실행 결과 예시"></a>실행 결과 예시</h3><table>
<thead>
<tr>
<th>forms</th>
<th>result</th>
</tr>
</thead>
<tbody><tr>
<td>[ [“<a href="mailto:&#106;&#x6d;&#x40;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#106;&#x6d;&#x40;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a>“, “제이엠”], [“<a href="mailto:&#106;&#x61;&#115;&#111;&#x6e;&#64;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#106;&#x61;&#115;&#111;&#x6e;&#64;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;</a>“, “제이슨”], [“<a href="mailto:&#x77;&#111;&#x6e;&#x69;&#101;&#101;&#64;&#x65;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#x77;&#111;&#x6e;&#x69;&#101;&#101;&#64;&#x65;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a>“, “워니”], [“<a href="mailto:&#x6d;&#106;&#x40;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x6d;&#106;&#x40;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>“, “엠제이”], [“<a href="mailto:&#x6e;&#x6f;&#119;&#x6d;&#64;&#x65;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#x6e;&#x6f;&#119;&#x6d;&#64;&#x65;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a>“, “이제엠”] ]</td>
<td>[“<a href="mailto:&#x6a;&#x61;&#x73;&#111;&#x6e;&#64;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#x6a;&#x61;&#x73;&#111;&#x6e;&#64;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;</a>“, “<a href="mailto:&#106;&#109;&#x40;&#x65;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;">&#106;&#109;&#x40;&#x65;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a>“, “<a href="mailto:&#109;&#x6a;&#64;&#101;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#109;&#x6a;&#64;&#101;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>“]</td>
</tr>
</tbody></table>
<h1 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getPartialStr</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> limit = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (limit &lt;= str.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> output = [];</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> seperated = [...str].<span class="title function_">slice</span>(index, index + limit).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (limit &gt; seperated.<span class="property">length</span>) <span class="keyword">break</span>;</span><br><span class="line">      output.<span class="title function_">push</span>(seperated);</span><br><span class="line">    &#125;</span><br><span class="line">    limit += <span class="number">1</span>;</span><br><span class="line">    res.<span class="title function_">push</span>(...output);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDuplicatedUser</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> position = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">while</span> (index !== arr.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([...arr[index], ...arr[position]]);</span><br><span class="line">    <span class="keyword">if</span> (set.<span class="property">size</span> !== arr[index].<span class="property">length</span> + arr[position].<span class="property">length</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(...arr[index].<span class="title function_">slice</span>(-<span class="number">1</span>), ...arr[position].<span class="title function_">slice</span>(-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    position += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (position === arr.<span class="property">length</span>) &#123;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      position = index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(res)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">problem6</span>(<span class="params">forms</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!forms.<span class="property">length</span> || forms.<span class="property">length</span> &gt; <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&quot;크루는 1명 이상 10,000명 이하이여야 합니다.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> users = &#123;&#125;;</span><br><span class="line">  forms.<span class="title function_">forEach</span>(<span class="function">(<span class="params">form</span>) =&gt;</span> &#123;</span><br><span class="line">    users[form[<span class="number">1</span>]] = form[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> nicknames = forms.<span class="title function_">map</span>(<span class="function">(<span class="params">nickname</span>) =&gt;</span> nickname[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">const</span> partialStrs = nicknames.<span class="title function_">map</span>(<span class="function">(<span class="params">nickname</span>) =&gt;</span> <span class="title function_">getPartialStr</span>(nickname));</span><br><span class="line">  <span class="keyword">const</span> selectedUsers = <span class="title function_">getDuplicatedUser</span>(partialStrs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> selectedUsers.<span class="title function_">map</span>(<span class="function">(<span class="params">selectedUser</span>) =&gt;</span> users[selectedUser]).<span class="title function_">sort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>닉네임의 첫번째 글자부터 2글자 이상으로 만들 수 있는 모든 부분 문자열을 구하였다.</li>
<li>각 닉네임의 부분 문자열 배열을 비교하여 중복요소가 하나라도 있으면 중복 문자 포함 유저 배열에 등록하였다.</li>
<li>해당 유저의 이메일을 오름차순으로 정렬한 배열을 반환하였다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>우선 이 문제를 풀면서 가장 큰 성장을 이뤄냈다고 자축하고 싶었다. 왜냐하면 이와 비슷한 부분 문자열 문제를 못풀어서 스트레스를 받았던 적이 있는데 이번 기회에 나름의 방법(?)을 찾아서 구현에 성공하여 기분이 좋았다.</p>
<ul>
<li>2글자 이상으로 만들 수 있는 부분 문자열을 모두 구했기 때문에 코드가 매우 복잡해졌다. 하지만 2글자 부분 문자열만 구하여 서로 비교하여도 충분히 문제가 없을 상황이기 때문에 이 부분이 좀 아쉬웠다.</li>
<li>while 문을 사용할 경우와 for 문을 사용할 경우가 애매했었는데, 이번에 코드리뷰를 진행하면서 while 문은 특정 조건이 변경되는 상황이라면 사용하도록 하고 for 문은 일정 횟수를 반복해야 하는 상황에서 사용하도록 한다는 것을 알게 되어 상황에 맞게 적절히 사용할 수 있을 것 같다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>woowa</category>
      </categories>
  </entry>
  <entry>
    <title>API란 무엇인가요?</title>
    <url>/2023/03/02/CS/%EA%B8%B0%EC%B4%88%20%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/API%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>API란, 둘 이상의 컴퓨터 프로그램이 서로 통신하는 방법이자 컴퓨터 사이에 있는 중계 계층을 의미한다.</p>
<p>API는 어떻게 통신할 것인지, 어떤 데이터를 주고 받을 것인지 등에 대한 방법(HTTP, HTTPS 프로토콜 중 어떤 거 사용할지, GET인지 POST인지 등)이 정의된 중계 계층이다.</p>
<h2 id="API-특징"><a href="#API-특징" class="headerlink" title="API 특징"></a>API 특징</h2><ul>
<li>제공자는 본인이 원하는 부분만 드러낼 수 있다.</li>
<li>사용자는 해당 서비스가 어떻게 구현되는지 알 필요없이 필요한 정보만 받을 수 있다.</li>
<li>OPEN API의 경우 애플리케이션 개발 과정을 단순화 시켜주어 개발 시간과 비용을 절약할 수 있다.</li>
<li>API를 만들고 나서 내부 프로세스가 수정될 때마다 매번 API를 수정해줄 필요가 없다.</li>
<li>제공자는 데이터를 한곳에 모을 수 있다. 예를 들어 방문자 수, 클릭수 등을 집계하고 싶을 때 해당 API를 만들고 이벤트가 발생할 때 해당 API를 호출하여 데이터를 한 곳에 모을 수 있다.</li>
<li>제공자의 경우 API를 이용해 제 3자가 만든 앱을 통해 데이터를 수집하여 해당 서비스 확장할 수도 있고 홍보에도 도움이 된다.</li>
</ul>
<h2 id="API-종류"><a href="#API-종류" class="headerlink" title="API 종류"></a>API 종류</h2><ul>
<li>private: 내부적으로 사용. 주고 해쉬키를 기반으로 서버와 서버간 통신에 사용된다.</li>
<li>public: 모든 사람이 사용. 많은 트래픽 방지하기 위해 하루 요청 수 제한.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>기초 개발 지식</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON과 XML은 무엇인가요?</title>
    <url>/2023/03/02/CS/%EA%B8%B0%EC%B4%88%20%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/JSON%EA%B3%BC-XML%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JavaScript 객체 문법으로 구조화된 데이터를 표현하기 위한 표준 포맷이다.</p>
<p>모든 서비스와 애플리케이션은 데이터를 기반으로 그것을 보여주거나 뒤에서 다루면서 데이터를 많이 사용하게된다.</p>
<p>세상의 모든 정형화된 데이터만 있다면 편리하겠지만, 그렇지 않은 복잡한 데이터도 많다.</p>
<p>예를 들어, 아래와 같은 내용을 데이터로 표현하려면 복잡하다.</p>
<p>Wix</p>
<ul>
<li>나이: 29</li>
<li>좋아하는 것: 자전거타기(로드), 노래부르기(발라드)</li>
</ul>
<p>이런 데이터를 컴퓨터도, 사람도 이해하기 쉽게 표현한 것이 바로 JSON이다.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Wix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Likes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Riding Bike&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Road&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sing a song&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ballad&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul>
<li>key:value 형태</li>
<li>{} 중괄호로 감싼다.</li>
<li>key, value에 “”만 사용가능하다.</li>
<li>자바스크립트와 호환이 좋다.</li>
<li>각 객체가 다른 타입이어도 괜찮다.</li>
<li><span style="color:red">value에 메서드와 undefined가 올 수 없다.</span> 이외의 수, 문자열, 불리언, 배열, 객체, null 값은 올 수 있다.</li>
<li>프로그래밍 언어나 플랫폼에 독립적이기 때문에 서로 다른 시스템 간의 데이터 교환시 유용하다. ex) API, config 파일</li>
</ul>
<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>JSON과 비교하면 중괄호 대신 열린 태그와 닫힌 태그 구조로 이루어진 데이터 포맷이 XML이다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> <span class="comment">&lt;!-- 프롤로그 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Wix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>29<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Likes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Like</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Riding Bike<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">type</span>&gt;</span>Road<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Like</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Like</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Sing a song<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">type</span>&gt;</span>Ballad<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Like</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Likes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Wix</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul>
<li>최상위 태그는 하나만 사용해야한다.</li>
<li>JSON에 비해 무겁다. JSON에 비해 닫힌 태그까지 들어가서 2번씩 들어간다.</li>
</ul>
<h2 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h2><p>XML의 대표적인 예시로는 SEO에 사용되는 <code>sitemap.xml</code>이 있다.</p>
<p>사이트가 매우 크거나 서로 링크가 종속적으로 연결되어 있지 않다면 크롤러가 일부 페이지를 누락하는 일이 발생하는데 이를 방지하기 위해 <code>sitemap.xml</code>를 사용한다.</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>기초 개발 지식</category>
      </categories>
      <tags>
        <tag>JSON</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js란 무엇인가요?</title>
    <url>/2023/03/02/CS/%EA%B8%B0%EC%B4%88%20%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/node-js%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</url>
    <content><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><p>node.js란 비동기적 이벤트 주도 방식, 논블로킹 I&#x2F;O 모델을 사용하는 구글의 V8 엔진을 장착한 자바스크립트 런타임이다.</p>
<p>런타임이란, 프로그램이 실행될 때 그 프로그램이 머무는 공간을 의미한다. 때문에 브라우저는 자바스크립트 런타임이라고도 한다.</p>
<p>이와 동일하게 node.js 또한 자바스크립트 런타임이므로 자바스크립트로 만든 프로그램을 실행할 수 있다.</p>
<p>이번에는 node.js로 서버를 만들어서 API를 구현해보는 예시를 해보자.</p>
<h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><ol>
<li><p>nodejs를 설치한다.</p>
</li>
<li><p>json 파일과 서버파일을 생성한다.</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wix&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;178&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> f = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;a.json&quot;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;));</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: f.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">tall</span>: f.<span class="property">tall</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  res.<span class="title function_">send</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`http://127.0.0.1:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>express 모듈 설치</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<p>express는 node.js에서 동작하는 웹 프레임워크이다. 라우팅, 미들웨어, 정적자원서버 설정이 쉬운 장점이 있다.</p>
<ol start="4">
<li>터미널로 node 프로그램을 실행해본다.</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node b.js</span><br></pre></td></tr></table></figure>

<p>get() 메서드에 설정한 경로 &#x2F;로 get 요청이 보내졌고 서버에서는 name, tall이 담긴 자바스크립트 객체 데이터가 응답으로 전송되었다.</p>
<p>앞서 API의 특징을 설명할 때, 파일 내부가 변경되더라도 API를 변경되지 않도록 설계할 수 있다고 하였다.</p>
<p><strong>a.json 파일 내용을 바꾸더라도 API를 바꿔줄 필요가 없다.</strong></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>기초 개발 지식</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker, Container</title>
    <url>/2023/03/07/CS/%EA%B8%B0%EC%B4%88%20%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88/</url>
    <content><![CDATA[<p>앞서 IaaS와 PaaS의 장점만 결합시킨 것이 도커이다. IaaS의 이식성과 PaaS의 운영비 장점을 갖춘 도커에 대해 알아보자.</p>
<p>서사를 위해서 전통적인 배포는 어떠했을지 살펴보자.</p>
<p><img src="/../../../images/CS/docker/deploy.png" alt="deploy"></p>
<h2 id="전통적-배포"><a href="#전통적-배포" class="headerlink" title="전통적 배포"></a>전통적 배포</h2><p>물리적 컴퓨터 한 대에 하나의 OS를 깔고 여러 프로그램을 설치하는 방식이었다. 이 때, 어떤 프로그램 설치하게되면 다른 앱에 영향을 미친다.</p>
<p>예를 들어, 예전에 보안 앱을 깔았더니 인터넷이나 어떤 애플리케이션이 제대로 동작하지 않았던 경험이 있다.</p>
<h2 id="가상화-배포"><a href="#가상화-배포" class="headerlink" title="가상화 배포"></a>가상화 배포</h2><p>전통적 배포에서 발전이 되어 가상머신을 기반으로 배포하는 가상화 배포가 등장하였다.</p>
<p>Hypervisor는 하나의 시스템상에서 가상 컴퓨터 여러 개를 구동할 수 있도록 중간계층 역할을 한다.</p>
<p>결과적으로 컴퓨터 한 대로 여러 앱을 독립적으로 실행하여 다른 앱에 영향을 끼치지 않는다.</p>
<p>단, OS도 독립적이기 때문에 비용이 많이든다.</p>
<blockquote>
<p>가상머신: 컴퓨터 모든 부품을(HardWare) 소프트웨어적으로 구현한 것</p>
</blockquote>
<h2 id="컨테이너-배포"><a href="#컨테이너-배포" class="headerlink" title="컨테이너 배포"></a>컨테이너 배포</h2><p><img src="/../../../images/CS/docker/container.png" alt="container"></p>
<p><strong>컨테이너는 코드와 모든 종속성(Node.js, 라이브러리 등)을 패키징하는 소프트웨어 표준 단위이다.</strong></p>
<p>컨테이너는 VM(Virtual Machine)과 유사하지만, 운영체재(OS)만 공유하고 애플리케이션은 독립적 컴퓨터로 구분되어 있다.</p>
<p>때문에 애플리케이션끼리 영향을 미치지 않고 비용도 가상화 배포보다 저렴하고 빠르다.</p>
<blockquote>
<p>다만 OS는 공유하기 때문에 애플리케이션의 문제가 OS에 영향을 미치면 구동 중인 전체 컨테이너에 문제가 될 수 있다.</p>
</blockquote>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>그래서 도커는 앞서 설명한 컨테이너라는 단위로 애플리케이션을 실행하는 기능을 제공하는 플랫폼이다.</p>
<p>여러 컴퓨터 간에 공유된 규격으로 리소스를 공유할 수 있어 유지보수성이 좋다.</p>
<p>또한 IaaS의 이식성과 PaaS의 운영비 장점을 갖추었다.</p>
<blockquote>
<p>기존의 종속성 라이브러리나 파일 등 기존 시스템에 대한 설치 절차를 Dockerfile 스크립트에 작성하고 배포 관련 사항을 도커스웜이나 쿠버네티스에 맞춰 작성해주기만 하면 된다. 그래서 보통 도커 + 쿠버네티스 또는 도커 + 도커 스웜으로 구축된다.</p>
</blockquote>
<h2 id="Docker-컨테이너-빌드-과정"><a href="#Docker-컨테이너-빌드-과정" class="headerlink" title="Docker 컨테이너 빌드 과정"></a>Docker 컨테이너 빌드 과정</h2><p><img src="/../../../images/CS/docker/docker.png" alt="docker"></p>
<ol>
<li>도커파일이 빌드</li>
<li>도커 이미지 생성 및 실행</li>
<li>도커 컨테이너 실행</li>
</ol>
<ul>
<li>도커파일(Dockerfile): 컨테이너에 설치해야하는 패키지, 환경 변수설정 등을 기록한 하나의 파일</li>
<li>도커이미지: 도커가 도커파일의 단계에 따라 컴퓨터의 상태를 “스냅샷”으로 저장한 것</li>
<li>컨테이너: 도커가 이미지를 불러와 실행할 때 생성되며, 실행중인 컨테이너는 이미지에 지정된 프로그램과 데이터를 사용해 일반적인 실제 컴퓨터와 연결되어 사용가능</li>
</ul>
<h3 id="Docker는-IaaS인가-PaaS인가"><a href="#Docker는-IaaS인가-PaaS인가" class="headerlink" title="Docker는 IaaS인가? PaaS인가?"></a>Docker는 IaaS인가? PaaS인가?</h3><p>엄밀히 말하면 둘 다 아니고 “클라우드 가상화기술”이지만 굳이 따지면 PaaS의 일부라고 보면된다.</p>
<p>컨테이너의 가상화는 가상 머신의 가상화가 일어나는 곳에서 한 추상화 계층 높은 곳에서 일어난다.</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>기초 개발 지식</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>클라우드, SaaS, IaaS, Paas</title>
    <url>/2023/03/07/CS/%EA%B8%B0%EC%B4%88%20%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-SaaS-IaaS-Paas/</url>
    <content><![CDATA[<h1 id="클라우드"><a href="#클라우드" class="headerlink" title="클라우드"></a>클라우드</h1><p>클라우드란, 인터넷을 통해 접근할 수 있는 서버와 그 안에서 구동되는 소프트웨어, DB를 의미한다.</p>
<p>직접적으로 컴퓨터 장비를 구매하지 않고 온라인에 분산되어 존재하는 데이터 센터(클라우드)에게 작업을 맡겨 수행하는 것이다.</p>
<p>이를 <strong>오프프레미스(off-premise)방식</strong>이라고 한다.</p>
<p>반면 기업이나 개인이 자체 시설을 보유하고 직접 유지관리하는 데이터 센터(IDC)fmf 온프레미스(on-premise)방식이라고 한다.</p>
<h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ul>
<li>서버컴퓨터, 네트워크, 방화벽, 전력 등에 대한 고려를 하지 않고 서비스 운영에만 집중할 수 있다.</li>
</ul>
<h2 id="SaaS-Software-as-a-Service"><a href="#SaaS-Software-as-a-Service" class="headerlink" title="SaaS(Software as a Service)"></a>SaaS(Software as a Service)</h2><p>인터넷을 통해 소프트웨어(완제품)을 제공하는 방법이다. 구글 드라이브, N드라이브, 구글 DOCS 등.</p>
<p>예를 들어, 구글 DOCS처럼 다른 컴퓨터에서도 쉽게 작업을 하며 다른사람과 실시간 공유작업도 가능하다.</p>
<h2 id="IaaS-Infrastructure-as-a-Service"><a href="#IaaS-Infrastructure-as-a-Service" class="headerlink" title="IaaS(Infrastructure as a Service)"></a>IaaS(Infrastructure as a Service)</h2><p>인터넷을 통해 인프라를 제공(서버와 저장소)한다. 빈 방을 준다고 생각하면 된다.</p>
<p>특정 클라우드에 종속되지 않는 대신 운영비가 상승한다. 또한 이식성이 좋다.</p>
<p>ex) AWS의 EC2, NCP 등이 있다.</p>
<h2 id="PaaS-Platform-as-a-Service"><a href="#PaaS-Platform-as-a-Service" class="headerlink" title="PaaS(Platform as a Service)"></a>PaaS(Platform as a Service)</h2><p>인터넷을 통해 플랫폼을 제공한다. 빌트인 방을 제공한다. 운영비 절감할 수 있고 모니터링, CI&#x2F;CD 제공된다.</p>
<p>하지만, 하나의 서버에 여러가지 서비스를 설치할 수 없어서 IaaS보다는 유연하지 않고 플랫폼에 종속된다.</p>
<p>ex) heroku: 자유롭게 클릭 몇번으로 여러가지 서비스 설치 가능</p>
<h3 id="PaaS-vs-IaaS"><a href="#PaaS-vs-IaaS" class="headerlink" title="PaaS vs IaaS"></a>PaaS vs IaaS</h3><h4 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h4><ul>
<li>유연하지 않고 플랫폼에 종속된다.</li>
<li>설치가 쉽다.</li>
<li>이식성이 낮다.<ul>
<li>각 서비스가 각자의 서버에서 동작하고 각각의 서버를 따로 연결해줘야하기 때문에…</li>
</ul>
</li>
<li>운영비 효율 좋다.</li>
</ul>
<h4 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h4><ul>
<li>유연하고 플랫폼에 종속되지 않는다.</li>
<li>설치가 어렵다.</li>
<li>이식성이 높다.<ul>
<li>반면 IaaS는 빈 방(서버)를 그대로 이식하면 되기에 이식성이 높다.</li>
</ul>
</li>
<li>운영비 효율 낮다.</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>기초 개발 지식</category>
      </categories>
      <tags>
        <tag>클라우드</tag>
        <tag>SaaS</tag>
        <tag>IaaS</tag>
        <tag>PaaS</tag>
      </tags>
  </entry>
  <entry>
    <title>정적 타입 시스템의 필요성</title>
    <url>/2023/03/10/CS/%EA%B8%B0%EC%B4%88%20%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/%EC%A0%95%EC%A0%81-%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1/</url>
    <content><![CDATA[<p>개발자는 사용자에게 안정적인 서비스를 제공하기 위해 여러가지 방법을 사용한다.</p>
<p>정적 타입 시스템도 그 중 하나다.</p>
<h2 id="타입-시스템"><a href="#타입-시스템" class="headerlink" title="타입 시스템"></a>타입 시스템</h2><p>타입 시스템은 개발자가 정의한 타입을 기반으로 해당 타입을 언어와 연관시키는 메커니즘이다.</p>
<ul>
<li>동등: 두 타입이 동일할 때 적용 (number:number)</li>
<li>호환: 두가지 타입이 정확히 일치하지 않더라도 어느정도 호환이 되는지를 나타내는 규칙(any: number)</li>
<li>추론: 타입이 정의되어 있지 않지만 주변 문맥에 따라 타입이 결정되는 규칙(a&#x3D;3 일 때, a는 number)</li>
</ul>
<p>모든 언어는 타입시스템이 존재하고 동적 타입과 정적 타입으로 나뉜다.</p>
<h2 id="동적-타입과-정적-타입-차이"><a href="#동적-타입과-정적-타입-차이" class="headerlink" title="동적 타입과 정적 타입 차이"></a>동적 타입과 정적 타입 차이</h2><h3 id="동적-타입"><a href="#동적-타입" class="headerlink" title="동적 타입"></a>동적 타입</h3><p>런타임에 모든 변수의 유형을 결정한다. 잘못된 경우 예외 발생시킨다.</p>
<p>ex) PHP, JS, Python</p>
<h3 id="정적-타입"><a href="#정적-타입" class="headerlink" title="정적 타입"></a>정적 타입</h3><p>컴파일 타임에 모든 변수의 유형을 결정한다. 잘못된 경우 예외 발생시킨다.</p>
<p>ex) C, C++, Java</p>
<h2 id="정적-타입-시스템의-필요성"><a href="#정적-타입-시스템의-필요성" class="headerlink" title="정적 타입 시스템의 필요성"></a>정적 타입 시스템의 필요성</h2><ol>
<li><p>타입을 명시하여 나중에 다른 개발자가 보더라도 어떤 매개변수를 넣고 이 함수가 어떤 값을 반환하는지 명시적으로 파악 가능</p>
</li>
<li><p>어떤 함수 또는 API에 대해 여러가지의 타입으로 이루어진 값이 발생될 수 있는데, 해당 값들에 대한 대처를 “미리” 할 수 있다.</p>
</li>
<li><p>매개변수 잘못입력하거나 등의 개발자 잔실수 줄여준다.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
        <category>기초 개발 지식</category>
      </categories>
  </entry>
  <entry>
    <title>시간복잡도 연습하기</title>
    <url>/2023/03/10/CS/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-%EC%97%B0%EC%8A%B5%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="반복문-시간-복잡도"><a href="#반복문-시간-복잡도" class="headerlink" title="반복문 시간 복잡도"></a>반복문 시간 복잡도</h1><p>다음 코드의 시간 복잡도를 구해보자.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">            a += i+j;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; cnt : &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>처음에는 하나씩 콘솔을 찍어보면서 계산해보자.</p>
<ol>
<li>i &#x3D; 0, j는 무시;</li>
<li>i &#x3D; 1, j &#x3D; 0</li>
<li>i &#x3D; 2, j &#x3D; 0,1</li>
<li>i &#x3D; 3, j &#x3D; 0,1,2</li>
</ol>
<p>정사각형의 한 변의 길이가 n일 때, 정사각형의 넓이는 n^2이다.</p>
<p>이와 마찬가지로 시간복잡도도 해당 도형의 넓이로 구할 수 있다.</p>
<p>위 식을 넓이로 나타내면 j는 i를 포함하지 않고 있기 때문에 <code>n * (n - 1) % 2</code>로 나타낼 수 있다.</p>
<h1 id="재귀함수-시간-복잡도"><a href="#재귀함수-시간-복잡도" class="headerlink" title="재귀함수 시간 복잡도"></a>재귀함수 시간 복잡도</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[<span class="number">1004</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">go</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> a[l];</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="built_in">go</span>(l, mid) + <span class="built_in">go</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        a[i - <span class="number">1</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="built_in">go</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;cnt: &#x27;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>시간복잡도는 어떤 로직이 몇 번 반복되었는지를 식으로 만들고 빅오표기법으로 표현하는 것이다.</strong></p>
<p>좀 더 자세히 말하면 <code>재귀함수의 메인로직 * 몇번 호출</code>되는지이다.</p>
<p>그래서 해당 go 함수가 몇번 호출되는지 직접 손코딩으로 그려보며 세어보았다.</p>
<p>n &#x3D; 5일 때, 9가 나오고 n &#x3D; 10일 때, 19, n &#x3D; 20일 때, 39가 나오는 것을 보고 아 시간 복잡도가 <code>2n - 1</code>이구나라는 것을 알게되었다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="type">int</span> N, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> N)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(N == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">solve</span>(N - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="built_in">solve</span>(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>예를 들어 n &#x3D; 3일 때, 처음 1회 실행되고 함수가 3번씩 호출되는데 만약 N이 0이아니면 또 3번씩 호출되므로 공비가 3인 등비수열로 생각할 수 있다.</p>
<p>따라서 등비수열의 합식이 성립한다.</p>
<p><img src="/../../../images/CS/DataStructure/BiOQuiz/time.png" alt="time complexity"></p>
<h3 id="📌-Tip"><a href="#📌-Tip" class="headerlink" title="📌 Tip"></a>📌 Tip</h3><p>함수 하나가 호출될 때 이 함수가 4번 호출된다면 &#x3D;&gt; <code>4^n</code></p>
<p>함수 하나가 호출될 때, 이 함수가 2번 호출된다면 &#x3D;&gt; <code>2^n</code></p>
<h1 id="로그-지수-역함수의-시간-복잡도"><a href="#로그-지수-역함수의-시간-복잡도" class="headerlink" title="로그 지수 역함수의 시간 복잡도"></a>로그 지수 역함수의 시간 복잡도</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, i = N;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        a += i;</span><br><span class="line">        i /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="built_in">solve</span>(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 식에서 while문은 <code>log N + 1</code>의 시간복잡도를 가지고 빅오표기법으로 나타내면 <code>log N</code>이다.</p>
<blockquote>
<p><code>log N</code>은 2를 몇번 곱해서 N의 값이 될 수 있는지를 나타낸 수이다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
        <category>자료구조</category>
      </categories>
  </entry>
  <entry>
    <title>자료구조의 기본(C++)</title>
    <url>/2023/03/02/CS/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%B3%B8-C/</url>
    <content><![CDATA[<h1 id="자료구조"><a href="#자료구조" class="headerlink" title="자료구조"></a>자료구조</h1><p>자료구조는 효율적으로 데이터를 관리하고 수정, 삭제, 탐색, 저장할 수 있는 데이터 집합이다.</p>
<p>어떤 비즈니스 로직을 처리할 때 가장 효과적인 자료구조를 찾아서 쓰는 것이 중요하기 때문에 자료구조를 명확하게 알아야한다.</p>
<p>자료구조를 설명하기 위해 C++은 이해하기 쉬운 언어이기 때문에 자료구조 공부는 C++로 할 것이다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">// 1</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">// 2</span></span><br><span class="line">string a; <span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; <span class="comment">// 4</span></span><br><span class="line">    cin &gt;&gt; a; <span class="comment">// 5</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>헤더 파일. import할 때 사용한다. bits&#x2F;stdc++.h 는 모든 표준 라이브러리를 의미한다.</p>
</li>
<li><p>std라는 네임스페이스 사용하겠다. cin, cout 사용할 때 원래는 std::cin처럼 네임스페이스 달아서 사용해야하는데 이를 기본으로 설정한다는 뜻이다.</p>
</li>
<li><p>문자열 선언. &lt;타입&gt; &lt;변수명&gt; 이런식으로 선언한다. 예를들어 <code>string a = &#39;Wix&#39;</code> 이렇게 선언했다면, a는 lvalue, Wix는 rvalue라고 한다. lvalue는 추후 다시 사용될 수 있는 변수이고 rvalue는 한 번 쓰고 다시 사용되지 않는 변수이다.</p>
</li>
<li><p>입력. 대표적으로 cin, scanf가 있다.</p>
</li>
<li><p>출력. 대표적으로 cout, printf가 있다.</p>
</li>
<li><p>return 0은 프로세스가 정상적으로 마무리 됨을 뜻한다.</p>
</li>
</ol>
<blockquote>
<p>int는 4바이트 정수를 사용할 때 사용되는 타입이다. 표현범위는 -2,147,483,648 ~ 2,147,483,647 입니다.</p>
</blockquote>
<h1 id="시간복잡도"><a href="#시간복잡도" class="headerlink" title="시간복잡도"></a>시간복잡도</h1><p>시간복잡도란, 입력 크기에 대해 어떤 알고리즘이 실행되는데 걸리는 시간이다. 직접적인 시간을 측정하는 것이 아닌 주요 로직의 반복횟수를 중점으로 측정된다.</p>
<p>왜냐하면 직접적인 시간은 여러가지 요인에 따라 변경될 수 있기 때문이다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">true</span>) cout &lt;&lt; k &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>위 코드에서 시간 복잡도는 <code>10n^2+n</code>이다.</p>
<h1 id="빅오표기법-Big-O"><a href="#빅오표기법-Big-O" class="headerlink" title="빅오표기법(Big - O)"></a>빅오표기법(Big - O)</h1><p>빅오표기법은 복잡도에 영향을 가장 많이 끼치는 항의 상수인자를 제거하고 나머지 항을 없애서 복잡도를 표기하는 표기법이다.</p>
<p>앞선 예시를 빅오표기법으로 나타내면 <code>O(n^2)</code>이다.</p>
<p>여기서 영향을 가장 많이 끼친다는 의미는 입력 크기가 커질수록 증가속도가 가장 큰 것을 의미한다.</p>
<p>예를 들어 n^2은 1,4,9,16,25 이런식으로 증가하는데, n은 1,2,3,4,5 이런식을로 증가하기 때문에 영향이 가장 큰 n^2 항의 상수 인자를 제거하여 빅오표기법으로 나타낸 것이다.</p>
<p><strong>빅오표기법 차트는 외워두자!</strong></p>
<p>n! &gt; 2^n &gt; n^2 &gt; nlogn &gt; n &gt; logn &gt; 1 순입니다.</p>
<p><img src="/../../../images/CS/DataStructure/BigO/BigO-Chart.png" alt="Big-O chart"></p>
<h2 id="상수시간-시간복잡도-O-1"><a href="#상수시간-시간복잡도-O-1" class="headerlink" title="상수시간 시간복잡도 O(1)"></a>상수시간 시간복잡도 O(1)</h2><p>상수시간 시간 복잡도는 입력 크기와 상관없이 일정한 시간복잡도를 가지는 것을 말한다.</p>
<ol>
<li>입력과 출력</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cin, cout, scanf, printf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>곱하기</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>] *= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>간단한 비교 if 문</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 로직</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>배열 인덱스 참조</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> b = a[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
        <category>자료구조</category>
      </categories>
  </entry>
  <entry>
    <title>carousel Tip</title>
    <url>/2022/09/15/PairProgramming/level%201/carousel%20Tip/</url>
    <content><![CDATA[<h1 id="CarouselSlider-구현-중-느낀점"><a href="#CarouselSlider-구현-중-느낀점" class="headerlink" title="CarouselSlider 구현 중 느낀점"></a>CarouselSlider 구현 중 느낀점</h1><h2 id="1-이미지가-로드되는-시점과-동적-HTML-생성-시점이-다르다"><a href="#1-이미지가-로드되는-시점과-동적-HTML-생성-시점이-다르다" class="headerlink" title="1. 이미지가 로드되는 시점과 동적 HTML 생성 시점이 다르다."></a>1. 이미지가 로드되는 시점과 동적 HTML 생성 시점이 다르다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM이 로드되고 동적으로 HTML 생성(렌더링)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, render);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이미지 로드 후 width 및 opacity 할당</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $container.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">document</span>.querySelector(<span class="string">&quot;img&quot;</span>).clientWidth&#125;</span>px`</span>;</span><br><span class="line">  $container.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">1</span>;</span><br><span class="line">  $container.<span class="property">firstElementChild</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--duration&quot;</span>, <span class="number">400</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>동적으로 HTML을 렌더링해주는데 DOMContentLoaded가 될 때, 이미지의 width를 가져오고 싶었지만 동적 HTML이 생성되고 약간의 시간 후에 이미지가 로드되어 동적 HTML 생성될 때, 이미지태그의 너비를 가져올 수가 없었다.</p>
</li>
<li><p><code>--duration</code>은 요구 사항에 맞게 초기 렌더링 때 설정해준다.</p>
</li>
</ul>
<h2 id="2-CSS-inline-style이-아닌-external-CSS-값-가져오기"><a href="#2-CSS-inline-style이-아닌-external-CSS-값-가져오기" class="headerlink" title="2. CSS inline style이 아닌 external CSS 값 가져오기"></a>2. CSS inline style이 아닌 external CSS 값 가져오기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$container.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. prev || next return</span></span><br><span class="line">  <span class="comment">// 2. if (prev) / if (next)</span></span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.carousel-control&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">  e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.prev&quot;</span>)</span><br><span class="line">    ? $container.<span class="property">firstElementChild</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(</span><br><span class="line">        <span class="string">&quot;--currentSlide&quot;</span>,</span><br><span class="line">        +<span class="title function_">getComputedStyle</span>($container.<span class="property">firstElementChild</span>).<span class="title function_">getPropertyValue</span>(</span><br><span class="line">          <span class="string">&quot;--currentSlide&quot;</span></span><br><span class="line">        ) - <span class="number">1</span></span><br><span class="line">      )</span><br><span class="line">    : e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.next&quot;</span>)</span><br><span class="line">    ? $container.<span class="property">firstElementChild</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(</span><br><span class="line">        <span class="string">&quot;--currentSlide&quot;</span>,</span><br><span class="line">        +<span class="title function_">getComputedStyle</span>($container.<span class="property">firstElementChild</span>).<span class="title function_">getPropertyValue</span>(</span><br><span class="line">          <span class="string">&quot;--currentSlide&quot;</span></span><br><span class="line">        ) + <span class="number">1</span></span><br><span class="line">      )</span><br><span class="line">    : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>document.querySelector(‘div’).style.getPropertyValue() 메서드는 해당 노드의 인라인 스타일의 속성값을 가져올 수 있다.</p>
</li>
<li><p>getComputedStyle(document.querySelector(‘div’)).getPropertyValue() 메서드는 해당 노드의 렌더링을 마친 CSS 속성값을 가져올 수 있다. 즉, 외부 CSS 파일의 속성값을 가져올 수 있다.</p>
</li>
</ul>
<h2 id="3-document-querySelector-‘img’-요소가-가진-width-종류"><a href="#3-document-querySelector-‘img’-요소가-가진-width-종류" class="headerlink" title="3. document.querySelector(‘img’) 요소가 가진 width 종류"></a>3. document.querySelector(‘img’) 요소가 가진 width 종류</h2><ul>
<li>cssWidth : 컨텐츠의 너비를 말한다.</li>
<li>clientWidth : padding을 포함한 너비를 말한다.</li>
<li>offsetWidth : border까지 포함한 너비를 말한다.</li>
</ul>
<p>처음에 이미지 태그의 너비를 자바스크립트로 가져와야하는데, 이미지 태그가 가진 너비 요소가 여러가지라서 각 너비의 특징에 대해 알게 되었다.</p>
<p>앞으로 해당 요소 노드를 console 창에 찍어보면서 어떤 프로퍼티를 포함하고 있는지 확인해보면서 내게 필요한 프로퍼티가 무엇인지 찾아보는 팁을 얻었다.</p>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>darkmode, modal, stopwatch Tip</title>
    <url>/2022/09/19/PairProgramming/level%201/darkmode,%20modal,%20stopwatch%20Tip/</url>
    <content><![CDATA[<h1 id="darkMode-리팩터링-중-느낀점"><a href="#darkMode-리팩터링-중-느낀점" class="headerlink" title="darkMode 리팩터링 중 느낀점"></a>darkMode 리팩터링 중 느낀점</h1><h2 id="1-setDarkMode-함수의-응집도를-높이고-관심사를-구분하자"><a href="#1-setDarkMode-함수의-응집도를-높이고-관심사를-구분하자" class="headerlink" title="1. setDarkMode 함수의 응집도를 높이고 관심사를 구분하자."></a>1. setDarkMode 함수의 응집도를 높이고 관심사를 구분하자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> setDarkMode = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userTheme = <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="property">matches</span>;</span><br><span class="line">  <span class="keyword">const</span> transitionDuration =</span><br><span class="line">    +<span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>).<span class="title function_">getPropertyValue</span>(</span><br><span class="line">      <span class="string">&quot;--transition-duration&quot;</span></span><br><span class="line">    ) * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCurrentMode</span> = (<span class="params"></span>) =&gt; <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isDark&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleMode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    $body.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;dark&quot;</span>, <span class="title function_">getCurrentMode</span>());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setCurrentMode</span> = (<span class="params">selectedMode</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isDark&quot;</span>, selectedMode);</span><br><span class="line">    <span class="title function_">toggleMode</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setCurrentMode</span>(!<span class="title function_">getCurrentMode</span>());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isDark&quot;</span>) === <span class="literal">null</span></span><br><span class="line">        ? <span class="title function_">setCurrentMode</span>(userTheme)</span><br><span class="line">        : <span class="title function_">toggleMode</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">preventBlink</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        $body.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">      &#125;, transitionDuration);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&quot;.toggle-button&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setDarkMode.<span class="property">toggle</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, setDarkMode.<span class="property">init</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, setDarkMode.<span class="property">preventBlink</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>setDarkMode 함수와 관련된 변수와 함수를 한곳에 모아 응집도를 높이고 즉시실행함수로 감싸고 클로저를 구현하였다.</p>
</li>
<li><p>즉시실행함수의 반환값인 toggle, init, preventBlink 함수는 자유변수를 참조하고 외부함수보다 생명주기가 긴 클로저이다.</p>
</li>
<li><p>preventBlink 함수와 init 함수는 결국 렌더링과 관련된 함수여서 하나로 합칠까 생각했지만, 그 경우, 이미지 파일이 많은 프로그램인 경우 이미지가 로드되기 전에 darkMode를 동작이 제대로 되지 않을 수 있다고 판단하여 다른 함수로 구분하였다.</p>
</li>
<li><p>addEventListener는 가능한 한줄로 쓰자는 팀원과의 컨벤션을 지키기 위해 위와같이 작성하였고 이벤트 핸들러가 많아지게 되면서 복잡해지더라도 한줄로 있으면 가독성을 높일 수 있을 것이라 생각했다.</p>
</li>
</ul>
<h1 id="popupModal-리팩터링-중-느낀점"><a href="#popupModal-리팩터링-중-느낀점" class="headerlink" title="popupModal 리팩터링 중 느낀점"></a>popupModal 리팩터링 중 느낀점</h1><h2 id="1-변수를-사용한-이유"><a href="#1-변수를-사용한-이유" class="headerlink" title="1. 변수를 사용한 이유"></a>1. 변수를 사용한 이유</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $modalContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal-container&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $modal = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $popupMessage = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.popup-message&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>위의 document.querySelector() DOM API는 처음에 한번만 요소를 가져와 변수에 할당해주면 된다. 굳이 이벤트 핸들러 함수 내부에 적어서 함수가 호출될 때마다 DOM API까지 같이 호출될 필요가 없으므로 변수에 값을 저장해서 사용하였다.</li>
</ul>
<h2 id="2-누군가가-코드를-읽을-때-한번-더-생각하게-하지-않도록-작성하자"><a href="#2-누군가가-코드를-읽을-때-한번-더-생각하게-하지-않도록-작성하자" class="headerlink" title="2. 누군가가 코드를 읽을 때, 한번 더 생각하게 하지 않도록 작성하자."></a>2. 누군가가 코드를 읽을 때, 한번 더 생각하게 하지 않도록 작성하자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1번</span></span><br><span class="line">    <span class="title function_">toggle</span>(<span class="params">method</span>) &#123;</span><br><span class="line">      $modal.<span class="property">classList</span>[method](<span class="string">&#x27;is-open&#x27;</span>);</span><br><span class="line">      $modalContainer.<span class="property">classList</span>[method](<span class="string">&#x27;background-gray&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번</span></span><br><span class="line">    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">      $modal.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;is-open&#x27;</span>);</span><br><span class="line">      $modalContainer.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;background-gray&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">remove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      $modal.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;is-open&#x27;</span>);</span><br><span class="line">      $modalContainer.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;background-gray&#x27;</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>처음에 중복을 줄이기 위해 1번으로 구현했었는데, 오히려 직접 사용해보니 2번의 경우가 가독성이 더 낫다고 판단했다. 그 이유는 이벤트 핸들러에서 toggle(‘remove’) 이런식으로 사용하는 것보다 toggle, remove를 사용하는 것이 더 깔끔하기 때문이다.</li>
</ul>
<h2 id="3-이벤트-핸들러-축약표현-알아두기"><a href="#3-이벤트-핸들러-축약표현-알아두기" class="headerlink" title="3. 이벤트 핸들러 축약표현 알아두기"></a>3. 이벤트 핸들러 축약표현 알아두기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  $popupMessage.<span class="property">textContent</span> = <span class="string">`from popup : <span class="subst">$&#123;e.target.firstElementChild.value&#125;</span>`</span>;</span><br><span class="line">  popupModal.<span class="title function_">toggle</span>(<span class="string">&#x27;remove&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.popup-form&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, render);</span><br></pre></td></tr></table></figure>

<ul>
<li>render 함수를 이벤트 핸들러로 등록할 때, event 객체를 받아서 e.preventDefault() 메서드를 실행하는데, 이벤트 핸들러에서는 인수를 전달해주지 않아도 축약표현으로 인식하여 event 객체를 해당 위치에 전달해준다.</li>
</ul>
<h1 id="stopWatch-리팩터링-중-느낀점"><a href="#stopWatch-리팩터링-중-느낀점" class="headerlink" title="stopWatch 리팩터링 중 느낀점"></a>stopWatch 리팩터링 중 느낀점</h1><h2 id="1-배열-디스트럭처링-사용"><a href="#1-배열-디스트럭처링-사용" class="headerlink" title="1. 배열 디스트럭처링 사용"></a>1. 배열 디스트럭처링 사용</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [$leftButton, $rightButton] = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.control&quot;</span>)];</span><br></pre></td></tr></table></figure>

<ul>
<li>leftButton, rightButton &#x2F; laps, title은 동일한 클래스를 가져 querySelectAll로 불러와서 인덱스 값으로 접근하는 것이 아닌 배열 디스트럭처링 할당으로 식별자를 할당해주었습니다.</li>
</ul>
<h2 id="2-버튼-요소의-textContent-값으로-조건문을-구분하는-것은-좋지-않다"><a href="#2-버튼-요소의-textContent-값으로-조건문을-구분하는-것은-좋지-않다" class="headerlink" title="2. 버튼 요소의 textContent 값으로 조건문을 구분하는 것은 좋지 않다."></a>2. 버튼 요소의 textContent 값으로 조건문을 구분하는 것은 좋지 않다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1번</span></span><br><span class="line"><span class="keyword">if</span> ($leftButton.<span class="property">textContent</span> === <span class="string">&quot;Stop&quot;</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번</span></span><br><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">isStarted</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">isStarted</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1번 처럼 textContent로 조건문을 사용하게되면 나중에 textContent를 수정하게되면 유지보수가 어려워지므로 상태로서 관리하는 것을 추천한다.</li>
</ul>
<h2 id="3-함수는-각자의-역할에-맞는-코드를-포함하도록-작성해야한다"><a href="#3-함수는-각자의-역할에-맞는-코드를-포함하도록-작성해야한다" class="headerlink" title="3. 함수는 각자의 역할에 맞는 코드를 포함하도록 작성해야한다."></a>3. 함수는 각자의 역할에 맞는 코드를 포함하도록 작성해야한다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">isStarted</span>) &#123;</span><br><span class="line">    $leftButton.<span class="property">textContent</span> = <span class="string">&quot;Stop&quot;</span>;</span><br><span class="line">    $rightButton.<span class="property">textContent</span> = <span class="string">&quot;Lap&quot;</span>;</span><br><span class="line">    $rightButton.<span class="title function_">removeAttribute</span>(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line"></span><br><span class="line">    $laps.<span class="property">innerHTML</span> = <span class="string">`Laps</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;state.laps.map((_, index) =&gt; <span class="string">`&lt;div&gt;<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&lt;/div&gt;`</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">    $time.<span class="property">innerHTML</span> = <span class="string">`Time</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;state.laps.map((lap) =&gt; <span class="string">`&lt;div&gt;<span class="subst">$&#123;lap&#125;</span>&lt;/div&gt;`</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $leftButton.<span class="property">textContent</span> = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">    $rightButton.<span class="property">textContent</span> = <span class="string">&quot;Reset&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">newState</span>) =&gt; &#123;</span><br><span class="line">  state = &#123; ...state, ...newState &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toggleStarted</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">isStarted</span>: !state.<span class="property">isStarted</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateTime</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addLap</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newLap = $display.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">laps</span>: [...state.<span class="property">laps</span>, newLap] &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>render 함수는 leftButton, rightButton을 클릭했을 때, 화면에 글자가 바꾸는 일을 해준다.</p>
</li>
<li><p>setState 함수는 데이터를 변경하고 그 데이터를 가지고 화면에 render 하는 함수를 호출하는 역할을 한다.</p>
</li>
<li><p>toggleStarted 함수는 isStarted 데이터를 변경시키고 시간을 갱신하는 역할을 한다.</p>
</li>
<li><p>addLap 함수는 $display의 textContent값으로 laps 데이터를 변경시키는 역할을 한다.</p>
</li>
</ul>
<blockquote>
<p>스톱워치에 아직 리팩터링 중인데, 버튼은 2개인데 가정해야할 상황이 4가지여서 어떻게 짜면 좋을지 고민중이다…</p>
</blockquote>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>form validation Tip</title>
    <url>/2022/09/21/PairProgramming/level%201/form%20validation%20Tip/</url>
    <content><![CDATA[<h1 id="Form-Validation-구현-중-느낀점"><a href="#Form-Validation-구현-중-느낀점" class="headerlink" title="Form Validation 구현 중 느낀점"></a>Form Validation 구현 중 느낀점</h1><h2 id="1-모든-코드를-setState로-틀을-고정하여-생각하지-말자"><a href="#1-모든-코드를-setState로-틀을-고정하여-생각하지-말자" class="headerlink" title="1. 모든 코드를 setState로 틀을 고정하여 생각하지 말자."></a>1. 모든 코드를 setState로 틀을 고정하여 생각하지 말자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">  <span class="attr">pw</span>: <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [$idSuccessIcon, $pwSuccessIcon] = [</span><br><span class="line">  ...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.icon-success&quot;</span>),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> [$idErrorIcon, $pwErrorIcon] = [</span><br><span class="line">  ...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.icon-error&quot;</span>),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> [$idErrorMessage, $pwErrorMessage] = [</span><br><span class="line">  ...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.error&quot;</span>),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> $signinButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.button&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  $idSuccessIcon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, state.<span class="property">id</span> !== <span class="string">&quot;success&quot;</span>);</span><br><span class="line">  $idErrorIcon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, state.<span class="property">id</span> !== <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $pwSuccessIcon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, state.<span class="property">pw</span> !== <span class="string">&quot;success&quot;</span>);</span><br><span class="line">  $pwErrorIcon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, state.<span class="property">pw</span> !== <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $idErrorMessage.<span class="property">textContent</span> =</span><br><span class="line">    state.<span class="property">id</span> === <span class="string">&quot;error&quot;</span> ? <span class="string">&quot;이메일 형식에 맞게 입력해 주세요.&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  $pwErrorMessage.<span class="property">textContent</span> =</span><br><span class="line">    state.<span class="property">pw</span> === <span class="string">&quot;error&quot;</span> ? <span class="string">&quot;영문 또는 숫자를 6~12자 입력하세요.&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">id</span> === <span class="string">&quot;success&quot;</span> &amp;&amp; state.<span class="property">pw</span> === <span class="string">&quot;success&quot;</span>)</span><br><span class="line">    $signinButton.<span class="title function_">removeAttribute</span>(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> $signinButton.<span class="title function_">setAttribute</span>(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">newState</span>) =&gt; &#123;</span><br><span class="line">  state = &#123; ...state, ...newState &#125;;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkIdValidation</span> = (<span class="params">input</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (input === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123; <span class="attr">id</span>: <span class="string">&quot;pending&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> regExp =</span><br><span class="line">    <span class="regexp">/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">id</span>: regExp.<span class="title function_">test</span>(input) ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;error&quot;</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $signIdInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#signin-userid&quot;</span>);</span><br><span class="line"></span><br><span class="line">$signIdInput.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;keyup&quot;</span>,</span><br><span class="line">  _.<span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">checkIdValidation</span>($signIdInput.<span class="property">value</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>위 코드는 만약 인풋에 입력해야할 값이 늘어 유효성 검사 항목이 늘어나게 된다면 유지보수가 어려워진다. 또한, DOM API에 의존적인 코드이므로 HTML 코드가 변경될 시 유지보수가 어려워질 수 있다.</p>
</li>
<li><p>위 코드는 처음부터 구조를 setState로 잡고 데이터를 변경하는 함수는 setState가 도맡아 하고 render는 화면에 보여주는 역할을 모은 함수 이런 식으로 코드를 작성하였다.</p>
</li>
</ul>
<p>하지만 위와 같이 틀을 미리 잡고 코드를 작성하는 것은 <span style='color:red'>별로 좋지 않는 습관이다.</span></p>
<p>왜냐하면, state를 사용해야하는 상황이 아님에도 setState를 사용하여 그 구조에 억지로 끼워맞추게 되고 그렇게 되면 코드의 가독성과 이해도가 떨어질 수 있고 발전이 없는 코드를 작성하게 된다.</p>
<p>그러므로 코드를 작성할 때는, 우선 구현이 되도록 작성을 하되, 생각을 하면서 그 때 그 때 상황에 맞게 코드를 개선해나가야 한다.</p>
<p>위 코드를 리팩터링한 결과는 다음과 같다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> signinSchema = &#123;</span><br><span class="line">  <span class="attr">userid</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">valid</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$/</span>.<span class="title function_">test</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;이메일 형식에 맞게 입력해 주세요.&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">valid</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/\w&#123;6,12&#125;$/</span>.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;영문 또는 숫자를 6~12자 입력하세요.&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">valid</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userid</span>.<span class="property">valid</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">password</span>.<span class="property">valid</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkValidation</span> = (<span class="params">target</span>) =&gt; &#123;</span><br><span class="line">  signinSchema[target.<span class="property">name</span>].<span class="property">value</span> = target.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (signinSchema[target.<span class="property">name</span>].<span class="property">value</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span></span><br><span class="line">      .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-success`</span>)</span><br><span class="line">      .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">document</span></span><br><span class="line">      .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-error`</span>)</span><br><span class="line">      .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .error`</span>).<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span></span><br><span class="line">    .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-success`</span>)</span><br><span class="line">    .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, !signinSchema[target.<span class="property">name</span>].<span class="property">valid</span>);</span><br><span class="line">  <span class="variable language_">document</span></span><br><span class="line">    .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-error`</span>)</span><br><span class="line">    .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, signinSchema[target.<span class="property">name</span>].<span class="property">valid</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .error`</span>).<span class="property">textContent</span> = !signinSchema[</span><br><span class="line">    target.<span class="property">name</span></span><br><span class="line">  ].<span class="property">valid</span></span><br><span class="line">    ? signinSchema[target.<span class="property">name</span>].<span class="property">message</span></span><br><span class="line">    : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.signin&quot;</span>).<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;input&quot;</span>,</span><br><span class="line">  _.<span class="title function_">debounce</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">checkValidation</span>(e.<span class="property">target</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>리팩터링한 코드는 우선 setState로 틀을 구성하지 않았다. 굳이 처음부터 setState 함수로 데이터를 변경하고 렌더링까지 해주는 구조를 가질 필요가 없다.</li>
</ul>
<blockquote>
<p>마치 setState로 정해놓고 코드를 작성하는 것은 아이가 어른 흉내를 내는 듯한 느낌이 든다.</p>
</blockquote>
<ul>
<li><p>email과 password의 input에 관련이 있는 데이터를 객체로 관리하고 있다.</p>
</li>
<li><p>input에 이벤트가 발생할 때 마다 input의 value 값을 객체의 데이터에 변경해줘야한다.</p>
</li>
<li><p>접근자 프로퍼티를 사용하여 접근자 프로퍼티를 참조하면 input.value 값과 정규 표현식이 같은지 확인하여 유효성 검사를 결과를 반환한다. 접근자 프로퍼티를 사용한 이유는 해당 접근자 프로퍼티를 참조할 때마다 갱신된 해당 프로퍼티의 유효성 검사 결과를 얻기 위해서 get을 붙여 접근자 프로퍼티로 만들었다.</p>
</li>
</ul>
<blockquote>
<p>각 객체에 필요한 데이터를 한곳에서 관리하고 이들을 이용하여 요구사항을 어떻게 충족시킬지 생각해보자.</p>
</blockquote>
<h2 id="2-DOM-API-사용을-줄이자"><a href="#2-DOM-API-사용을-줄이자" class="headerlink" title="2. DOM API 사용을 줄이자."></a>2. DOM API 사용을 줄이자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">checkValidation</span> = (<span class="params">target</span>) =&gt; &#123;</span><br><span class="line">  signinSchema[target.<span class="property">name</span>].<span class="property">value</span> = target.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (signinSchema[target.<span class="property">name</span>].<span class="property">value</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span></span><br><span class="line">      .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-success`</span>)</span><br><span class="line">      .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">document</span></span><br><span class="line">      .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-error`</span>)</span><br><span class="line">      .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .error`</span>).<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span></span><br><span class="line">    .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-success`</span>)</span><br><span class="line">    .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, !signinSchema[target.<span class="property">name</span>].<span class="property">valid</span>);</span><br><span class="line">  <span class="variable language_">document</span></span><br><span class="line">    .<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .icon-error`</span>)</span><br><span class="line">    .<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>, signinSchema[target.<span class="property">name</span>].<span class="property">valid</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span> ~ .error`</span>).<span class="property">textContent</span> = !signinSchema[</span><br><span class="line">    target.<span class="property">name</span></span><br><span class="line">  ].<span class="property">valid</span></span><br><span class="line">    ? signinSchema[target.<span class="property">name</span>].<span class="property">message</span></span><br><span class="line">    : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>최대한 DOM API를 적게 사용하기 위해 해당 이벤트 핸들러의 이벤트 객체를 통해서 다른 요소에 접근할 수 있도록 코드를 작성하였다.</p>
</li>
<li><p><code>document.querySelector(`#$&#123;target.id&#125; ~ .icon-success`)</code> 의 의미는 이벤트가 발생한 요소의 id값을 선택자로 가져와서 해당 선택자의 일반 형제 요소 중 클래스가 icon-success인 요소를 선택하라는 뜻이다.</p>
</li>
</ul>
<blockquote>
<p>DOM API로 요소를 선택할 때 마다 시간이 오래 걸리고 어려운 작업이므로, 이러한 과정을 줄이도록 생각하며 코드를 작성한다.</p>
</blockquote>
<h2 id="3-input-이벤트-타입"><a href="#3-input-이벤트-타입" class="headerlink" title="3. input 이벤트 타입"></a>3. input 이벤트 타입</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.signin&quot;</span>).<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;input&quot;</span>,</span><br><span class="line">  _.<span class="title function_">debounce</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">checkValidation</span>(e.<span class="property">target</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>리팩터링 이전 코드에서는 keyup 이벤트를 사용하여 email과 password의 input에서 발생하는 이벤트를 이벤트 핸들러로 각각 등록해주었다.</p>
</li>
<li><p>리팩터링한 코드에서는 이벤트 위임을 통해서 이벤트를 다뤄주었다.</p>
</li>
<li><p>또한, 인수로 이벤트가 발생한 객체를 전달해주고 이벤트 핸들러 함수 내부에서는 target 매개변수를 해당 인수를 받아 배치해주었다.</p>
</li>
<li><p>e.target.name은 HTML 문서에서 name 어트리뷰트를 가리킨다. 이러한 점을 알게되어 HTML이 매우 중요하다는 것을 깨달았다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>modal, stopwatch, tab, toaster, autocomplete Tip</title>
    <url>/2022/09/14/PairProgramming/level%201/modal,%20stopwatch,%20tab,%20toaster,%20autocomplete%20Tip/</url>
    <content><![CDATA[<h1 id="modal-창-구현-중-느낀점"><a href="#modal-창-구현-중-느낀점" class="headerlink" title="modal 창 구현 중 느낀점"></a>modal 창 구현 중 느낀점</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>희준이주화이팅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;popup-form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;popup-input&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;popup-ok&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;popup-cancel is-close&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;popup-close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bx bx-x is-close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> $modal = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> $modalContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal-container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.popup-button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      $modal.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;is-open&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      $modalContainer.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;background-gray&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>body 태그 안에 modal div 박스 하나만 만드는 것이 아닌 다음과 같이 modal container로 감싸주는 것이 편하다.</li>
</ul>
<blockquote>
<p>그렇지 않으면 modal 배경색을 입히기가 까다로워진다.</p>
</blockquote>
<h1 id="stopwatch-구현-중-느낀점"><a href="#stopwatch-구현-중-느낀점" class="headerlink" title="stopwatch 구현 중 느낀점"></a>stopwatch 구현 중 느낀점</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timeId;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  timeId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime);</span><br><span class="line">    <span class="keyword">const</span> milliseconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>(date.<span class="title function_">getMilliseconds</span>() / <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> seconds = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">    <span class="keyword">const</span> minutes = date.<span class="title function_">getMinutes</span>();</span><br><span class="line"></span><br><span class="line">    $display.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;minutes &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;minutes&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;minutes&#125;</span>`</span>&#125;</span>:<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      seconds &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;seconds&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;seconds&#125;</span>`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span>:<span class="subst">$&#123;milliseconds &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;milliseconds&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;milliseconds&#125;</span>`</span>&#125;</span>`</span>;</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>시간을 수정하는 로직을 함수로 구분하여 역할을 나눠보려 하였다.</li>
</ul>
<blockquote>
<p>Model, Controller, View 생각하면서 리팩토링 해보자.</p>
</blockquote>
<h1 id="Tab-구현-중-느낀점"><a href="#Tab-구현-중-느낀점" class="headerlink" title="Tab 구현 중 느낀점"></a>Tab 구현 중 느낀점</h1><h2 id="1-비동기-코드로-전달받은-데이터-다루기"><a href="#1-비동기-코드로-전달받은-데이터-다루기" class="headerlink" title="1. 비동기 코드로 전달받은 데이터 다루기"></a>1. 비동기 코드로 전달받은 데이터 다루기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">datas</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fetchTabsData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">tabDatas</span>) =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">datas</span> = tabDatas;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>fetchTabsData() 함수가 프로미스르 반환하는데, 프로미스 콜백함수가 1초 뒤에 데이터를 resolve 인자로 전달해준다. 그러므로 비동기로 받아온 데이터를 state로 관리해주도록 하였다.</li>
</ul>
<h2 id="2-CSS-사용자-정의-변수-변경-또는-값-취득하기"><a href="#2-CSS-사용자-정의-변수-변경-또는-값-취득하기" class="headerlink" title="2. CSS 사용자 정의 변수 변경 또는 값 취득하기"></a>2. CSS 사용자 정의 변수 변경 또는 값 취득하기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $tabs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.tabs&quot;</span>);</span><br><span class="line"></span><br><span class="line">$tabs.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--tabs-length&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>Js를 사용하여 CSS에서 설정한 사용자 정의 변수를 가져올 수도 있고 위처럼 직접 값을 설정해줄 수도 있다.</li>
</ul>
<h2 id="3-비동기로-데이터를-가져오니-화면에서-데이터를-렌더링-해주기-전에-대기시간을-주자"><a href="#3-비동기로-데이터를-가져오니-화면에서-데이터를-렌더링-해주기-전에-대기시간을-주자" class="headerlink" title="3. 비동기로 데이터를 가져오니 화면에서 데이터를 렌더링 해주기 전에 대기시간을 주자"></a>3. 비동기로 데이터를 가져오니 화면에서 데이터를 렌더링 해주기 전에 대기시간을 주자</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; datas &#125; = state;</span><br><span class="line"></span><br><span class="line">  $tabs.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--tabs-length&quot;</span>, datas.<span class="property">length</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.spinner&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">  $tabs.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;nav&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;datas</span></span></span><br><span class="line"><span class="subst"><span class="string">    .map(</span></span></span><br><span class="line"><span class="subst"><span class="string">      (data, index) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">`&lt;div class=&quot;tab&quot; data-index=&quot;<span class="subst">$&#123;index&#125;</span>&quot;&gt;<span class="subst">$&#123;data.title&#125;</span>&lt;/div&gt;`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )</span></span></span><br><span class="line"><span class="subst"><span class="string">    .join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;span class=&quot;glider&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">  &lt;/nav&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;datas</span></span></span><br><span class="line"><span class="subst"><span class="string">    .map(</span></span></span><br><span class="line"><span class="subst"><span class="string">      (data, index) =&gt; <span class="string">`&lt;div class=&quot;tab-content <span class="subst">$&#123;index === <span class="number">0</span> ? <span class="string">&quot;active&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span>&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      <span class="subst">$&#123;data.content&#125;</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;/div&gt;`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )</span></span></span><br><span class="line"><span class="subst"><span class="string">    .join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>위 코드는 리팩토링을 하면서 조금더 역할을 나눠서 수정해봐야겠다.</li>
</ul>
<h2 id="4-template-literal로-연산을-하려면-다음과-같이-해야한다"><a href="#4-template-literal로-연산을-하려면-다음과-같이-해야한다" class="headerlink" title="4. template literal로 연산을 하려면 다음과 같이 해야한다."></a>4. template literal로 연산을 하려면 다음과 같이 해야한다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$tabs.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.tab&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.glider&quot;</span>).<span class="property">style</span>.<span class="property">transform</span> =</span><br><span class="line">    <span class="string">&quot;translateX(&quot;</span> + e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">index</span> * <span class="number">200</span> + <span class="string">&quot;px)&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.glider&quot;</span>).<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    e.target.dataset.index * <span class="number">200</span></span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>px)`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>처음에 연산결과를 ${}안에 넣지 않고 <code>document.querySelector(&#39;.glider&#39;).style.transform = $&#123;e.target.dataset.index&#125; 200 px</code> 이런식으로 했는데 이렇게 하면 안되고 위처럼 해야한다.</li>
</ul>
<h1 id="Toaster-구현-중-느낀점"><a href="#Toaster-구현-중-느낀점" class="headerlink" title="Toaster 구현 중 느낀점"></a>Toaster 구현 중 느낀점</h1><h2 id="1-toastBox-재사용을-위해-함수로-만들었다"><a href="#1-toastBox-재사용을-위해-함수로-만들었다" class="headerlink" title="1. toastBox 재사용을 위해 함수로 만들었다."></a>1. toastBox 재사용을 위해 함수로 만들었다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">newToastBox</span> = (<span class="params">type, title, Message</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> $div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;toast&quot;</span>, type);</span><br><span class="line">  $div.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h4 class=&quot;toast-title&quot;&gt;<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    [...<span class="variable language_">document</span>.querySelectorAll(<span class="string">&quot;body .toast&quot;</span>)].length</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>&lt;/h4&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;toast-message&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;svg width=&quot;24&quot; height=&quot;24&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;use xlink:href=&quot;#<span class="subst">$&#123;type&#125;</span>&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/svg&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;Message&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;a class=&quot;toast-close&quot;&gt;&amp;times;&lt;/a&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  $div.<span class="property">style</span>.<span class="property">bottom</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> $div;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>ToastBox 를 재사용하기 위해 함수를 사용하는 것을 적절했으나, 함수가 너무 많은 역할을 하고 있다. 렌더링부터 div 생성과 반환을 함께 하고 있어 리팩토링이 필요하다.</li>
</ul>
<h2 id="2-render-함수는-화면에-rendering-해주는-역할을-한다"><a href="#2-render-함수는-화면에-rendering-해주는-역할을-한다" class="headerlink" title="2. render 함수는 화면에 rendering 해주는 역할을 한다."></a>2. render 함수는 화면에 rendering 해주는 역할을 한다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;body .toast&quot;</span>)].<span class="title function_">forEach</span>(<span class="function">(<span class="params">toast, index</span>) =&gt;</span> &#123;</span><br><span class="line">    toast.<span class="property">style</span>.<span class="property">bottom</span> =</span><br><span class="line">      ([...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;body .toast&quot;</span>)].<span class="property">length</span> - index - <span class="number">1</span>) * <span class="number">100</span> +</span><br><span class="line">      <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>위 render 함수는 토스트 요소에 bottom style 값을 할당해주는 역할을 하고 있으므로, 리팩토링이 필요하다.</li>
</ul>
<h1 id="Autocomplete-구현-중-느낀점"><a href="#Autocomplete-구현-중-느낀점" class="headerlink" title="Autocomplete 구현 중 느낀점"></a>Autocomplete 구현 중 느낀점</h1><h2 id="1-e-target-matches-vs-e-target-closest"><a href="#1-e-target-matches-vs-e-target-closest" class="headerlink" title="1. e.target.matches() vs e.target.closest()"></a>1. e.target.matches() vs e.target.closest()</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;body&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.autocomplete&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.autocomplete-suggester&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>해당 요소 바깥쪽을 클릭하였을 때 .autocomplete-suggester에 hide 클래스를 추가해주는 로직이다.</p>
</li>
<li><p>e.target.closest(‘.autocomplete’)는 이벤트 발생한 요소의 상위 요소를 찾아가면서 인자로 넘겨준 요소를 찾고 반환한다.<br>만약 없다면 null 값을 반환한다.</p>
</li>
<li><p>하지만, e.target.matches(‘.autocomplete’)는 이벤트 발생한 요소가 인자로 넘겨준 요소를 가지고 있는지 판단하여 불리언값을 반환한다.</p>
</li>
</ul>
<blockquote>
<p>matches()의 경우 이벤트 전파를 캐치하기가 어려우므로 상황에 따라 적절하게 사용하자.</p>
</blockquote>
<ol start="2">
<li>방향키로 포커스 이동시 스크롤 이상하게 내려오는 현상</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$suggestList.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;ArrowDown&quot;</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">nextElementSibling</span> === <span class="literal">null</span></span><br><span class="line">      ? $suggestList.<span class="property">firstElementChild</span>.<span class="title function_">focus</span>()</span><br><span class="line">      : e.<span class="property">target</span>.<span class="property">nextElementSibling</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;ArrowUp&quot;</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">previousElementSibling</span> === <span class="literal">null</span> <span class="comment">// prettier-ignore</span></span><br><span class="line">      ? $suggestList.<span class="property">lastElementChild</span>.<span class="title function_">focus</span>()</span><br><span class="line">      : e.<span class="property">target</span>.<span class="property">previousElementSibling</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>방향키로 포커스 이동시 한번 이동할 때 마다 스크롤도 같이 내려와서 어색하게 동작하는 것을 방지하지 위해 방향키 값이 “ArrowDown”, “ArrowUp” 일 때만 <code>e.preventDefault();</code> 를 해주었다.</p>
</li>
<li><p>focus() 메서드를 사용하여 선택 요소에 포커스를 선택해주었다.</p>
</li>
</ul>
<h2 id="3-lodash로-debounce-구현-제대로-하기"><a href="#3-lodash로-debounce-구현-제대로-하기" class="headerlink" title="3. lodash로 debounce 구현 제대로 하기"></a>3. lodash로 debounce 구현 제대로 하기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$searchInput.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;keyup&quot;</span>,</span><br><span class="line">  _.<span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123; <span class="attr">inputValue</span>: $searchInput.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>위와 같이 “keyup” 이벤트 발생 시 lodash debounce 메서드를 이벤트 핸들러로 등록해줘야한다.</p>
</li>
<li><p>또한, debounce의 콜백함수에 실행할 코드를 입력해줄 때, setState함수가 인수를 받는다면 위와같이 써줘야한다.</p>
</li>
</ul>
<blockquote>
<p>단, 인수를 받지 않는다면 _.debounce(setState,500) 이런식으로 사용할 수 있다.</p>
</blockquote>
<h2 id="4-사용자가-입력한-값과-countryCode를-state로-관리하였다"><a href="#4-사용자가-입력한-값과-countryCode를-state로-관리하였다" class="headerlink" title="4. 사용자가 입력한 값과 countryCode를 state로 관리하였다."></a>4. 사용자가 입력한 값과 countryCode를 state로 관리하였다.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">inputValue</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">countryCode</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">newState</span>) =&gt; &#123;</span><br><span class="line">  state = &#123; ...state, ...newState &#125;;</span><br><span class="line">  <span class="keyword">const</span> regExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`<span class="subst">$&#123;state.inputValue&#125;</span>`</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">  state.<span class="property">countryCode</span> = countryCode.<span class="title function_">filter</span>(<span class="function">(<span class="params">country</span>) =&gt;</span> country[<span class="number">1</span>].<span class="title function_">match</span>(regExp));</span><br><span class="line">  state.<span class="property">countryCode</span> = state.<span class="property">countryCode</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">country</span>) =&gt;</span> [</span><br><span class="line">    country[<span class="number">0</span>],</span><br><span class="line">    country[<span class="number">1</span>].<span class="title function_">replace</span>(regExp, <span class="string">`&lt;strong&gt;<span class="subst">$&#123;country[<span class="number">1</span>].match(regExp)&#125;</span>&lt;/strong&gt;`</span>),</span><br><span class="line">  ]);</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>사용자가 입력한 값을 state로 관리하여 그 값과 countryCode의 1번째 요소인 나라이름과 일치하는 부분을 찾아 strong 태그로 감싼 값으로 바꿔주었다.</p>
</li>
<li><p>strong 태그 대신 b 태그를 사용하면 안된다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>scroll 이벤트, counter, isPalindrome, darkmode, modal, stopwatch Tip</title>
    <url>/2022/09/22/PairProgramming/level%201/scroll%20%EC%9D%B4%EB%B2%A4%ED%8A%B8,%20counter,%20isPalindrome,%20darkmode,%20modal,%20stopwatch%20Tip/</url>
    <content><![CDATA[<h1 id="2번째-리팩터링-하면서-느낀점"><a href="#2번째-리팩터링-하면서-느낀점" class="headerlink" title="2번째 리팩터링 하면서 느낀점"></a>2번째 리팩터링 하면서 느낀점</h1><h1 id="scrollGotoTop"><a href="#scrollGotoTop" class="headerlink" title="scrollGotoTop"></a>scrollGotoTop</h1><ul>
<li>스크롤 깊이와 스로틀 딜레이와 같은 정해진 숫자는 상수이므로, 가독성을 높이기 위해 대문자로 네이밍해주었다.<ul>
<li>은닉해야할 정보가 없기 때문에 클로저로 만들어줄 필요가 없다.</li>
</ul>
</li>
</ul>
<h1 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h1><ul>
<li>리팩터링 전 코드에서는 생성자 함수로 만들어서 인스턴스를 생성하여 클로저를 구현하였다<ul>
<li>하지만 이 방식은 불필요한 인스턴스 생성을 한다는 생각이 들었다.</li>
<li>리팩토링한 코드는 즉시 실행 함수로 감싸서 변수 할당 같이 한번만 실행해도 되는 것들은 한 번만 실행되도록 만들어주었고, 내부의 데이터에 유일하게 접근할 수 있는 해당 함수를 return 해주어 데이터를 은닉해주었다.</li>
<li>counter에 관련된(해당 기능에만 사용되는) 데이터들과 함수들을 한데 묶어줘 응집도를 높여주었다</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//document.body.addEventListener(&#x27;click&#x27;, e =&gt; &#123;</span></span><br><span class="line"><span class="comment">//  if (!e.target.matches(&#x27;button&#x27;)) return;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  e.target.matches(&#x27;.increase&#x27;) ? counter.increase() : counter.decrease();</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.increase&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, counter.<span class="property">increase</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.decrease&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, counter.<span class="property">decrease</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>증가, 감소 버튼을 이벤트 위임으로 작성해보았다. 이럴 경우 이벤트 핸들러 등록 갯수가 줄어들어 증감 버튼에 대한 로직을 한곳에서 관리할 수 있고 각각의 이벤트 마다 이벤트 핸들러를 등록하지 않아도 된다는 장점이 있다고 생각했다.<ul>
<li>하지만, 이벤트 위임의 경우 각 버튼이 다른 기능을 해야하는 경우라면 이벤트가 발생한 요소에 대한 조건문이 많아지고 그에 따라 코드가 복잡해질 수 있으므로 이벤트 위임 대신 각 요소에 이벤트 핸들러를 등록하는 방법으로 선택하였다.</li>
</ul>
</li>
</ul>
<h1 id="isPalindrome"><a href="#isPalindrome" class="headerlink" title="isPalindrome"></a>isPalindrome</h1><ul>
<li>문자열을 배열로 만들어 주는 경우 <code>str.split(&#39;&#39;)</code> 를 사용하는 것보단 문자열이 이터러블 요소인 것을 감안하여 스프레드 문법(<code>[…string]</code>)을 사용하였다.<ul>
<li>메서드를 사용하기위해 알아야 할 것들이 많은데 스프레드 문법은 알아야할 정보가 적어 코드의 이해성을 높일 수 있다.</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$result.textContent = isPalindrome(value) ? `&quot;$&#123;value&#125;&quot; is a palindrome` : `&quot;$&#123;value&#125;&quot; is not a palindrome`</span></span><br><span class="line"></span><br><span class="line">$result.<span class="property">textContent</span> = <span class="string">`&quot;<span class="subst">$&#123;value&#125;</span>&quot; is <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">  isPalindrome(value) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;not&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;</span> a palindrome`</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>중복이 아닌 부분만 삼항 연산자를 이용하여 중복을 줄였다.</li>
<li>innerHTML 대신 textContent를 사용한 이유는 해당 요소에 할당한 값이 text 요소로만 이루어져 있기 때문이다.<ul>
<li>innerText는 숨겨진 텍스트는 무시하고 사용자에게 보여지는 text만 가져올 수 있기 때문에 원하지 않는 오류가 발생할 수 있다. 내부에 특별히 스타일 적용이 없는 문자열을 할당할 때는 성능상 적합하지 않다.</li>
</ul>
</li>
</ul>
<h1 id="DarkMode"><a href="#DarkMode" class="headerlink" title="DarkMode"></a>DarkMode</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// +getComputedStyle(document.querySelector(&#x27;:root&#x27;)).getPropertyValue(&#x27;--transition-duration&#x27;)</span></span><br><span class="line"></span><br><span class="line">+<span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>).<span class="title function_">getPropertyValue</span>(</span><br><span class="line">  <span class="string">&quot;--transition-duration&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>:root 에 존재하는 사용자 정의 변수를 가지고 올 경우에는 document.documentElement로 접근해야 한다.<ul>
<li><code>document.querySelector(&#39;:root&#39;)</code> 도 가능하지만 querySelector 메서드를 사용하는 것보다 프로퍼티를 접근하는 것이 더 효율적이므로 판단하여 사용하자.</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getCurrentMode</span> = (<span class="params"></span>) =&gt; <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isDark&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>로컬스토리지에 정보를 저장할 때 문자열로 저장되기 때문에 이를 getter 함수로 가져올 때 문자열 ‘true’ 값을 boolean 값으로 받기 위해 JSON.parse() 메서드를 사용하였다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const setCurrentMode = selectedMode =&gt; &#123;</span></span><br><span class="line"><span class="comment">//    localStorage.setItem(&#x27;isDark&#x27;, selectedMode);</span></span><br><span class="line"><span class="comment">//    toggleMode();</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// localStorage.getItem(&#x27;isDark&#x27;) === null ? setCurrentMode(userTheme) : toggleMode();</span></span><br><span class="line">   <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;isDark&#x27;</span>) ?? userTheme);</span><br><span class="line">   <span class="title function_">toggleMode</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, !<span class="title function_">getCurrentMode</span>());</span><br><span class="line">   <span class="title function_">toggleMode</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>기존에는 삼항연산자를 사용하였지만, 초기값이 없는 null 상태일 때 null 병합 연산자를 사용하여 초기값을 할당함으로써 함수를 줄일 수 있었다. 또한, setCurrentMode 함수가 필요없으므로 함수를 제거하여 코드의 이해성과 가독성을 높였다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, setDarkMode.<span class="property">init</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, setDarkMode.<span class="property">preventBlink</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>렌더링 되는 시점이 다르면 다른 역할을 하는 함수로 판단한다.</li>
</ul>
<h1 id="popupModal"><a href="#popupModal" class="headerlink" title="popupModal"></a>popupModal</h1><ul>
<li>변수를 사용한 이유는 단지 코드의 중복때문만이 아니라 이벤트가 발생할 때마다 호출될 필요가 없는 함수의 반환값을 변수에 저장하여 사용하기 위함이다.</li>
<li>특정 목적을 위해서 밀접하게 연관된 기능들을 한데 모아 관리하면 해당 함수에 대한 이해도가 증가하게 되고 이는 유지보수성을 높이는데 도움이 된다. 또한 코드의 재사용성도 증가하는 장점도 있어 응집도를 높이는 구조로 코드를 설계하였습니다. 응집도를 높인 코드를 짜면서 정보를 안전하게 다룰 수 있도록 클로저를 구현하였습니다.</li>
<li>요구사항에 맞게 Enter키 입력과 OK버튼 클릭시 중복을 줄이는 코드를 작성하기 위해서 이들을 form 태그로 감싸주었고 ‘submit’ 이벤트 타입으로 이벤트 핸들러를 등록하였습니다. cancel 버튼도 연관성을 위해 form 태그 안에 추가하였는데, cancel 버튼은 기본타입을 버튼으로 변경하여 submit 이벤트가 발생하지 않도록 하였습니다.</li>
<li>is-open 클래스를 이용하여 모달창을 보여주고 사라지도록 구현하였습니다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> popupModal = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $modalContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal-container&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> $modal = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> $popupMessage = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.popup-message&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">      $modal.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;is-open&quot;</span>);</span><br><span class="line">      $modalContainer.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;background-gray&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//    remove() &#123;</span></span><br><span class="line">    <span class="comment">//      $modal.classList.remove(&#x27;is-open&#x27;);</span></span><br><span class="line">    <span class="comment">//      $modalContainer.classList.remove(&#x27;background-gray&#x27;);</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">      $popupMessage.<span class="property">textContent</span> = <span class="string">`from popup : <span class="subst">$&#123;e.target.firstElementChild.value&#125;</span>`</span>;</span><br><span class="line">      popupModal.<span class="title function_">toggle</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&quot;.popup-form&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, popupModal.<span class="property">render</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.is-close&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// popupModal.remove()</span></span><br><span class="line">  popupModal.<span class="title function_">toggle</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.modal-container&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.modal-container&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// popupModal.remove()</span></span><br><span class="line">  popupModal.<span class="title function_">toggle</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>e ⇒ &#123;popupModal.render(e)&#125; === popupModal</code> 인수 전달안해줘도 event 객체 첫번째 인수로 넘어간다. <strong>축약형</strong></li>
<li>toggle 메서드를 사용하여 remove 메서드가 필요없어지므로 제거하였다.</li>
</ul>
<h1 id="stopWatch"><a href="#stopWatch" class="headerlink" title="stopWatch"></a>stopWatch</h1><ul>
<li>동일한 버튼을 구분할 때 textContent가 Start인지 Stop인지로 판단하는 것은 매우 좋지 않은 방식이므로, isStarted라는 현재 상태(시작&#x2F;정지)를 판단하는 변수를 사용하였습니다.</li>
<li>leftButton &#x2F; rightButton , laps&#x2F; title은 동일한 클래스를 가져 querySelectAll로 불러와서 인덱스 값으로 접근하는 것이 아닌 배열 디스트럭처링 할당으로 식별자를 할당해주었습니다.<ul>
<li>리팩터링 이후 이벤트 핸들러를 위한 leftButton, rightButton만 querySelectorAll로 받아오고 lap,title은 내부적으로 해결하였다.</li>
</ul>
</li>
<li>스톱워치내에서 관리해야할 데이터(isStarted, elapsedTime, timerId)를 하나의 객체에 담았다.<ul>
<li>isStarted : 스톱워치가 시작되었는지 여부 (true &#x2F; false)</li>
<li>elapsedTime : Start 버튼을 누르고 경과된 시간<br>(setInterval의 delay마다 값이 증가하며, 이를 convertTime 함수를 통해 display에 표시한다.)</li>
<li>timerId : setInterval 함수의 리턴값을 가지며 clearInterval 함수와 함께 stop 기능을 구현하였다.</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">convertTime</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> minutes =</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(time / <span class="number">6000</span>) &lt; <span class="number">10</span></span><br><span class="line">      ? <span class="string">`0<span class="subst">$&#123;<span class="built_in">Math</span>.floor(time / <span class="number">6000</span>)&#125;</span>`</span></span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(time / <span class="number">6000</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> seconds =</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>((time % <span class="number">6000</span>) / <span class="number">100</span>) &lt; <span class="number">10</span></span><br><span class="line">      ? <span class="string">`0<span class="subst">$&#123;<span class="built_in">Math</span>.floor((time % <span class="number">6000</span>) / <span class="number">100</span>)&#125;</span>`</span></span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor((time % <span class="number">6000</span>) / <span class="number">100</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> ms =</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(time % <span class="number">6000</span>) % <span class="number">100</span> &lt; <span class="number">10</span></span><br><span class="line">      ? <span class="string">`0<span class="subst">$&#123;<span class="built_in">Math</span>.floor(time % <span class="number">6000</span>) % <span class="number">100</span>&#125;</span>`</span></span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(time % <span class="number">6000</span>) % <span class="number">100</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>:<span class="subst">$&#123;ms&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>convert 함수는 display에 보여질 시간으로 변환하고 그 값을 문자열로 리턴한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $laps.children.length</span></span><br><span class="line">$laps.<span class="property">childElementCount</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>리팩터링 전에는 자식노드의 갯수를 알기 위해서 자식노드(children)로 접근한 다음 길이(length)로 접근하여 값을 얻었지만, childElementCount라는 프로퍼티를 이용하여 한 번에 값을 얻을 수 있었다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$laps.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>, newLap);</span><br></pre></td></tr></table></figure>

<ul>
<li>리팩터링 전에는 laps를 배열로 관리하여 이를 innerHTML으로 하나가 추가되더라도 모든 부분을 렌더링하였지만, 리팩터링 후에는 insertAdjacentHTML 메서드를 사용하여 HTML을 동적으로 추가해주어 추가된 부분만 렌더링 되도록 해주었다. (참고 : 여기서 beforeend 는 해당 요소의 자식노드 마지막에 삽입하는 것을 의미한다)</li>
<li>reset 함수에서도 insertAdjacentHTML처럼 추가된 부분만 삭제해주고 싶었지만, 고려해야할 조건들이 많아져 가독성을 위해 기존의 innerHTML을 사용하였다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  toggle,</span><br><span class="line">  <span class="title function_">lapAndReset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    !data.<span class="property">isStarted</span> ? <span class="title function_">addLap</span>() : <span class="title function_">reset</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$rightButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, stopWatch.<span class="property">lapAndReset</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>이벤트 핸들러에서 data.isStarted를 이용하여 조건에 따라 함수를 실행해주려 하였으나 클로저로 구현하였기 때문에 클로저 바깥에서 data.isStarted 값을 참조할 수 없기 때문에 클로저 내부에서 data.isStarted를 참조하여 조건에 맞게 해당 함수를 실행하는 함수를 return하였다.</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>toaster, autocomplete, carousel Tip</title>
    <url>/2022/09/20/PairProgramming/level%201/toaster,%20autocomplete,%20carousel%20Tip/</url>
    <content><![CDATA[<h1 id="Toaster-리팩터링-중-느낀점"><a href="#Toaster-리팩터링-중-느낀점" class="headerlink" title="Toaster 리팩터링 중 느낀점"></a>Toaster 리팩터링 중 느낀점</h1><h2 id="1-함수의-인수는-3개를-넘지-말자"><a href="#1-함수의-인수는-3개를-넘지-말자" class="headerlink" title="1. 함수의 인수는 3개를 넘지 말자."></a>1. 함수의 인수는 3개를 넘지 말자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">generateToast</span> = (<span class="params">messageType</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [type, title, message] = messageType;</span><br><span class="line">  <span class="keyword">const</span> $newToast = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  $newToast.<span class="property">style</span>.<span class="property">bottom</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  $newToast.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;toast&quot;</span>, type);</span><br><span class="line"></span><br><span class="line">  $newToast.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h4 class=&quot;toast-title&quot;&gt;<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    [...<span class="variable language_">document</span>.querySelectorAll(<span class="string">&quot;body .toast&quot;</span>)].length</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;toast-message&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;svg width=&quot;24&quot; height=&quot;24&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;use xlink:href=&quot;#<span class="subst">$&#123;type&#125;</span>&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/svg&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;<span class="subst">$&#123;message&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;toast-close&quot;&gt;&amp;times;&lt;/a&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $newToast;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>배열 스트럭처링으로 매개변수를 함수 내부에서 나눠서 배치하였다.</li>
</ul>
<h2 id="2-함수를-사용하는-이유를-고민하자"><a href="#2-함수를-사용하는-이유를-고민하자" class="headerlink" title="2. 함수를 사용하는 이유를 고민하자."></a>2. 함수를 사용하는 이유를 고민하자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addToast</span> = (<span class="params">messageType</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> $newToast = <span class="title function_">generateToast</span>(messageType);</span><br><span class="line"></span><br><span class="line">  $body.<span class="title function_">appendChild</span>($newToast);</span><br><span class="line">  <span class="title function_">lineUpToast</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    $newToast.<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">lineUpToast</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>setTimeout 함수를 따로 함수로 빼서 사용해보면 어떨까 생각해보았지만, 만약 함수로 들어가게 된다면 오히려 그 함수를 이해하기 위해 더 큰 노력을 쏟아야 할 수 있으므로 가치 판단을 하여 함수로 넣을지 말지를 고민하자.</li>
</ul>
<h1 id="Autocomplete-리팩터링-중-느낀점"><a href="#Autocomplete-리팩터링-중-느낀점" class="headerlink" title="Autocomplete 리팩터링 중 느낀점"></a>Autocomplete 리팩터링 중 느낀점</h1><h2 id="1-setState-함수는-함수-내부의-데이터를-변경만-하는-함수"><a href="#1-setState-함수는-함수-내부의-데이터를-변경만-하는-함수" class="headerlink" title="1. setState 함수는 함수 내부의 데이터를 변경만 하는 함수"></a>1. setState 함수는 함수 내부의 데이터를 변경만 하는 함수</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">countryCode</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">newState</span>) =&gt; &#123;</span><br><span class="line">  state = &#123; ...state, ...newState &#125;;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setState</span>(&#123; countryCode &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&quot;.autocomplete-toggle-button&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    $suggester.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">    $searchInput.<span class="title function_">focus</span>();</span><br><span class="line"></span><br><span class="line">    autocomplete.<span class="title function_">init</span>();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>이벤트 핸들러는 모델에서 return 해준 함수만 사용할 수 있도록 하여 관심사를 분리해준다.</p>
</li>
<li><p>또한, 이벤트 핸들러가 setState 함수를 사용하여 데이터를 직접 변경하는 것은 옳지 않다. 위와 같이 init 함수를 통해서 사용하는 것으로 한다. 왜냐하면 setState 함수는 데이터 변경에만 관여하는 함수이지 다른 기능을 하는 함수가 아니기 때문이다.</p>
</li>
</ul>
<h2 id="2-함수-역할의-분리"><a href="#2-함수-역할의-분리" class="headerlink" title="2. 함수 역할의 분리"></a>2. 함수 역할의 분리</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">findCountry</span> = (<span class="params">inputValue</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> regExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(inputValue, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newCountryCode = countryCode</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">[, country]</span>) =&gt;</span> country.<span class="title function_">match</span>(regExp))</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">[code, country]</span>) =&gt;</span> [</span><br><span class="line">      code,</span><br><span class="line">      country.<span class="title function_">replace</span>(regExp, <span class="string">`&lt;strong&gt;<span class="subst">$&#123;country.match(regExp)&#125;</span>&lt;/strong&gt;`</span>),</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">countryCode</span>: newCountryCode &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>이전 코드에서는 findCountry 함수가 하는 역할을 setState 함수내에 있어 이를 역할에 맞게 구분해주었다.</p>
</li>
<li><p>또한, 배열 디스트럭처링을 사용하여 가독성을 높였다.</p>
</li>
</ul>
<blockquote>
<p>([, country]) 처럼 매개변수로 배열 디스트럭처링 사용할 때, 앞의 매개변수를 사용하지 않는다면, 빈칸으로 두어도 된다.</p>
</blockquote>
<h2 id="3-함수의-가독성을-높이자"><a href="#3-함수의-가독성을-높이자" class="headerlink" title="3. 함수의 가독성을 높이자."></a>3. 함수의 가독성을 높이자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">selectCountry</span> = (<span class="params">target</span>) =&gt; &#123;</span><br><span class="line">  $toggleButtonSpan.<span class="property">innerHTML</span> = target.<span class="property">firstElementChild</span>.<span class="property">innerHTML</span>;</span><br><span class="line">  $toggleButtonSpan.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;country&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>selectCountry 함수의 매개변수가 이벤트가 발생한 요소를 전달해주도록 코드를 작성하여 더욱 직관적으로 작성했다.</li>
</ul>
<h1 id="Carousel-리팩터링-중-느낀점"><a href="#Carousel-리팩터링-중-느낀점" class="headerlink" title="Carousel 리팩터링 중 느낀점"></a>Carousel 리팩터링 중 느낀점</h1><h2 id="1-state로-관리해야하는-데이터와-그렇지-않은-데이터"><a href="#1-state로-관리해야하는-데이터와-그렇지-않은-데이터" class="headerlink" title="1. state로 관리해야하는 데이터와 그렇지 않은 데이터"></a>1. state로 관리해야하는 데이터와 그렇지 않은 데이터</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">currentSlide</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isTransitioned = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DURATION</span> = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> newImages = [images[images.<span class="property">length</span> - <span class="number">1</span>], ...images, images[<span class="number">0</span>]];</span><br></pre></td></tr></table></figure>

<ul>
<li>이번 과제를 하면서 어떤 데이터를 state로 관리해야할지 결정하는 것이 힘들었다. 짝 코딩을 하면서 나름 이유와 컨벤션을 정하였다.</li>
</ul>
<h3 id="state로-관리해야하는-데이터"><a href="#state로-관리해야하는-데이터" class="headerlink" title="state로 관리해야하는 데이터"></a>state로 관리해야하는 데이터</h3><ol>
<li><p>사용자의 액션에 의해서 변경되는 데이터</p>
</li>
<li><p>실제 화면의 렌더링에 영향을 끼치는 데이터</p>
</li>
<li><p>서버에 저장해야할 필요가 있는 데이터</p>
</li>
</ol>
<p>위 3가지 항목에 해당된다면 해당 데이터를 state로 관리하는 것이 옳다고 판단하였다.</p>
<p>그에 대한 근거는 다음 예시를 통해 알아보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">completeTransition</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setState</span>(&#123; <span class="attr">isTransitioned</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">completeTransition</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isTransitioned = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>모델안의 completeTransition 함수는 state 데이터를 수정하고 렌더링을 해주는 코드였다. 하지만 위 데이터는 화면에 보여지는 데이터도 아니고, 사용자의 액션에 의해 직접적으로 변경되었다기 보다는 사용자가 액션을 발생 시켰을 때 개발자가 눈속임으로 화면을 보여주기 위함이기 때문이다.</li>
</ul>
<p>즉, completeTransition 데이터를 사용자에게 직접적으로 보여주지도 않고 서버에 전송해야할 데이터도 아니고 실제 화면에 렌더링에 영향을 끼치는 데이터가 아니기 때문에 state로 관리 하지 않았다.</p>
<h2 id="2-Model과-Controller-패턴의-사용"><a href="#2-Model과-Controller-패턴의-사용" class="headerlink" title="2. Model과 Controller 패턴의 사용"></a>2. Model과 Controller 패턴의 사용</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">carousel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> carouselSlider = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      init,</span><br><span class="line">      setStyle,</span><br><span class="line">      prev,</span><br><span class="line">      next,</span><br><span class="line">      completeTransition,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, carouselSlider.<span class="property">init</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">carousel</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.carousel&#x27;</span>), [images...])</span><br></pre></td></tr></table></figure>

<ul>
<li>addEventListener가 사용할 수 있는 데이터는 Model에서 반환해준 함수만 사용할 수 있다. 이러한 구조를 만듦으로서 사용자는 자신이 어떤 함수를 사용해야하는지 명시적으로 알 수 있고 다른 함수에 대한 고민을 하지 않아 코드의 이해도를 높일 수 있다.</li>
</ul>
<h2 id="3-DOMContentLoaded와-load-이벤트-핸들러"><a href="#3-DOMContentLoaded와-load-이벤트-핸들러" class="headerlink" title="3. DOMContentLoaded와 load 이벤트 핸들러"></a>3. DOMContentLoaded와 load 이벤트 핸들러</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, carouselSlider.<span class="property">init</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, carouselSlider.<span class="property">setStyle</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>이미지가 로드된 다음에 이미지의 width 값과 속성을을 설정해줘야지만 제대로 동작하므로 위와 같이 로드되는 시점에 따라 코드를 구분하였다.</p>
</li>
<li><p>또한 요구사항에서 이미지가 로드되어 carousel의 width가 정해진 후 opacity를 1로 바꿔줘야 하므로 로드 시점에 따라 이벤트 핸들러를 구분하는 것이 옳다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>transition 이벤트, counter, isPalindrome Tip</title>
    <url>/2022/09/16/PairProgramming/level%201/transition%20%EC%9D%B4%EB%B2%A4%ED%8A%B8,%20counter,%20isPalindrome%20Tip/</url>
    <content><![CDATA[<h1 id="CarouselSlider-구현중-느낀점"><a href="#CarouselSlider-구현중-느낀점" class="headerlink" title="CarouselSlider 구현중 느낀점"></a>CarouselSlider 구현중 느낀점</h1><h2 id="1-구현-중-필요한-상수-또는-변수는-따로-구분해주자"><a href="#1-구현-중-필요한-상수-또는-변수는-따로-구분해주자" class="headerlink" title="1. 구현 중 필요한 상수 또는 변수는 따로 구분해주자."></a>1. 구현 중 필요한 상수 또는 변수는 따로 구분해주자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Data</span></span><br><span class="line"><span class="keyword">const</span> duration = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> direction = &#123;</span><br><span class="line">  <span class="attr">prev</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">next</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newImages = [images[images.<span class="property">length</span> - <span class="number">1</span>], ...images, images[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentSlide = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> transitionComplete = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>로직 중간에 재할당이 발생하지 않은 요소는 const 키워드로 선언하여 의도치 않은 재할당을 방지한다.</p>
</li>
<li><p>currentSlide는 DOM API를 사용하여 필요할 때마다 가져왔는데, 값을 데이터 부분에서 한번만 가져와서 그 값을 가지고 사용하는 방법으로 하면 DOM API를 자주 사용하여 발생하는 코드의 복잡성을 해결할 수 있다.</p>
</li>
</ul>
<h2 id="2-transitionend-이벤트와-transitioncancel-이벤트"><a href="#2-transitionend-이벤트와-transitioncancel-이벤트" class="headerlink" title="2. transitionend 이벤트와 transitioncancel 이벤트"></a>2. transitionend 이벤트와 transitioncancel 이벤트</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">setTransitionCompleteTrue</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  transitionComplete = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$container.<span class="title function_">addEventListener</span>(<span class="string">&quot;transitionend&quot;</span>, setTransitionCompleteTrue);</span><br><span class="line">$container.<span class="title function_">addEventListener</span>(<span class="string">&quot;transitioncancel&quot;</span>, setTransitionCompleteTrue);</span><br><span class="line"></span><br><span class="line">$container.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.carousel-control&quot;</span>) || !transitionComplete) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&#x27;.prev&#x27;</span>) <span class="comment">// prettier-ignore</span></span><br><span class="line">    ? <span class="title function_">slideImage</span>(direction.<span class="property">prev</span>, <span class="number">0</span>, newImages.<span class="property">length</span> - <span class="number">2</span>)</span><br><span class="line">    : <span class="title function_">slideImage</span>(direction.<span class="property">next</span>, newImages.<span class="property">length</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>transitionend 이벤트는 요소 노드의 trnasition 이벤트가 완료될 때, 이벤트 핸들러가 호출된다.</p>
</li>
<li><p>transitioncancel 이벤트는 요소 노드의 trnasition 이벤트가 취소될 때, 이벤트 핸들러가 호출된다.</p>
</li>
</ul>
<p>처음에 캐러셀을 구현할 때, 1-4번 사진에서 next 버튼 클릭시 transition-delay가 유지되면서 다음 사진으로 이동했는데, 연타로 클릭하니 transition-delay가 유지되지 않고 다음 사진으로 이동하여 이를 어떻게 구현할 지 생각해보고 구글링을 하다가 transition 이벤트를 알게되어 사용하였다.</p>
<p>transition이 완료될 때, transitionComplete를 true로 할당하고 클릭 이벤트가 발생하였을 때는 위와 같이 이미지를 슬라이드 해주는 함수를 구현하였다.</p>
<p>slideImage 함수 내부의 로직은 위 부분에서 알 필요가 없고 위 부분에서는 단지 클릭 이벤트가 일어났을 때, 이미지를 슬라이드 해주는 <span style="color:red">관심사</span>가 중요하기 때문에 다른 것은 알 필요가 없도록 코드를 구현하는 것이 바로 <span style="color:red">관심사</span>의 구분이다.</p>
<h3 id="transitionend-이벤트가-가끔-사라지는-경우"><a href="#transitionend-이벤트가-가끔-사라지는-경우" class="headerlink" title="transitionend 이벤트가 가끔 사라지는 경우"></a>transitionend 이벤트가 가끔 사라지는 경우</h3><p><img src="/images/220916/transitioncancel.gif" alt="transitioncancel"></p>
<p>next 버튼, prev 버튼을 연타해서 클릭하거나 예상치 못한 경우에 transition이벤트가 완료되지 않고 갑자기 사라지는 경우가 발생하였다.</p>
<p>위와 같이 갑자기 클릭을 계속하여도 transitionend 이벤트가 동작하지 않아 transitionComplete값이 true로 할당되지 않으므로 정상동작하지 않는 것을 볼 수 있다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$container.<span class="title function_">addEventListener</span>(<span class="string">&quot;transitioncancel&quot;</span>, setTransitionCompleteTrue);</span><br></pre></td></tr></table></figure>

<p>이러한 예외경우를 위해서 transitioncancel이벤트로 이벤트 핸들러로 다뤄주면 예외 처리가 가능하다.</p>
<h2 id="3-마지막-캐러셀이-슬라이드-되고-난-후-다시-처음-슬라이드로-이동시키기-눈속임"><a href="#3-마지막-캐러셀이-슬라이드-되고-난-후-다시-처음-슬라이드로-이동시키기-눈속임" class="headerlink" title="3. 마지막 캐러셀이 슬라이드 되고 난 후 다시 처음 슬라이드로 이동시키기 (눈속임)"></a>3. 마지막 캐러셀이 슬라이드 되고 난 후 다시 처음 슬라이드로 이동시키기 (눈속임)</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">slideImage</span> = (<span class="params">direction, <span class="keyword">from</span>, to</span>) =&gt; &#123;</span><br><span class="line">  transitionComplete = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  currentSlide += direction;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setSlidesProperty</span>(<span class="string">&quot;--duration&quot;</span>, duration);</span><br><span class="line">  <span class="title function_">setSlidesProperty</span>(<span class="string">&quot;--currentSlide&quot;</span>, currentSlide);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentSlide === <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      currentSlide = to;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setSlidesProperty</span>(<span class="string">&quot;--duration&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="title function_">setSlidesProperty</span>(<span class="string">&quot;--currentSlide&quot;</span>, currentSlide);</span><br><span class="line">    &#125;, duration);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>코드를 해석하자면 다음과 같다.</p>
<ol>
<li><p>transitionend 이벤트가 발생하면 transitionComplete가 true로 할당이 된다. 즉, transition이벤트가 끝나면 currentSlide를 해당 방향으로 한칸 이동시킨다.</p>
</li>
<li><p>만약 현재 슬라이드가 마지막(from)이라면, transition-delay가 완료되는 시간인 duration 후에 currentSlide에 처음 슬라이드 번호를 할당하고 duration 속성을 0으로 초기화하여 transition 이벤트가 발생하지 않도록 한 후 현재 보이는 슬라이드를 처음 슬라이드 번호로 바뀐 값으로 설정해준다.</p>
</li>
</ol>
<p>이렇게 되면 사용자는 마지막 슬라이드로 이동했을 때, 다시 처음 슬라이드로 돌아온 것으로 무한 루프를 구현한 것처럼 느끼게 된다.</p>
<h1 id="Counter-리팩토링하면서-느낀점"><a href="#Counter-리팩토링하면서-느낀점" class="headerlink" title="Counter 리팩토링하면서 느낀점"></a>Counter 리팩토링하면서 느낀점</h1><h2 id="1-이벤트-핸들러-부분과-함수의-역할에-따라-구분해주자"><a href="#1-이벤트-핸들러-부분과-함수의-역할에-따라-구분해주자" class="headerlink" title="1. 이벤트 핸들러 부분과 함수의 역할에 따라 구분해주자."></a>1. 이벤트 핸들러 부분과 함수의 역할에 따라 구분해주자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩토링 전</span></span><br><span class="line"><span class="keyword">const</span> counter = (<span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">helper</span>) &#123;</span><br><span class="line">    counter = <span class="title function_">helper</span>(counter);</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increaseCount</span> = (<span class="params">counter</span>) =&gt; &#123;</span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">decreaseCount</span> = (<span class="params">counter</span>) =&gt; &#123;</span><br><span class="line">  counter = counter &gt; <span class="number">0</span> ? counter - <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $counter = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.counter&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.increase&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $counter.<span class="property">textContent</span> = <span class="title function_">counter</span>(increaseCount);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.decrease&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $counter.<span class="property">textContent</span> = <span class="title function_">counter</span>(decreaseCount);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>리팩토링 전에는 헬퍼함수라는 콜백함수를 받아 클로저를 구현해서 increaseCount, decreaseCount 함수가 counter 함수에서만 사용하는데 전역코드에 존재하므로 다른 곳에서도 사용할 수 있는 함수로 오해할 수 있으므로 이들 함수간의 응집도를 눂혀줘야한다.</p>
</li>
<li><p>또한, 이벤트 핸들러 함수가 렌더링을 해주고 있는데 이보다 렌더링 해주는 함수, 카운트 증가시키는 함수, 카운트 감소시키는 함수 등으로 역할에 따라 구분하는 것이 적절하다.</p>
</li>
</ul>
<p>위 두가지 개선사항을 반영하여 나온 코드가 아래 코드이다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩토링 후</span></span><br><span class="line"><span class="keyword">const</span> counter = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> $counter = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.counter&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    $counter.<span class="property">textContent</span> = count;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">render</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) count -= <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">render</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.increase&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, counter.<span class="property">increase</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.decrease&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, counter.<span class="property">decrease</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>counter 식별자에 즉시실행함수의 반환값(객체)를 할당하여 처음 Js 파일이 로드되었을 때, 한번만 호출되거나 실행되는 부분과 여러번 호출되는 부분을 구분하였다.</p>
</li>
<li><p>이벤트 핸들러가 직관적으로 클릭하면 무슨일을 하는 지 알 수 있다.</p>
</li>
</ul>
<blockquote>
<p>더 나아가 위 코드를 각 역할에 맞도록 모듈로 구분할 수도 있다.</p>
</blockquote>
<h1 id="isPalindrome-리팩토링-중-느낀점"><a href="#isPalindrome-리팩토링-중-느낀점" class="headerlink" title="isPalindrome 리팩토링 중 느낀점"></a>isPalindrome 리팩토링 중 느낀점</h1><h2 id="1-응집도-높이기"><a href="#1-응집도-높이기" class="headerlink" title="1. 응집도 높이기"></a>1. 응집도 높이기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩토링 전</span></span><br><span class="line"><span class="keyword">const</span> $input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.palindrome-input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isPalindrome</span> = (<span class="params">string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newString = string.<span class="title function_">toUpperCase</span>().<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9가-힣]/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (newString === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reversedString = newString.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> newString === reversedString;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&quot;.palindrome-checker&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">const</span> value = $input.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.palindrome-result&quot;</span>).<span class="property">textContent</span> = <span class="title function_">isPalindrome</span>(</span><br><span class="line">      value</span><br><span class="line">    )</span><br><span class="line">      ? <span class="string">`&quot;<span class="subst">$&#123;value&#125;</span>&quot; is a palindrome`</span></span><br><span class="line">      : <span class="string">`&quot;<span class="subst">$&#123;value&#125;</span>&quot; is not a palindrome`</span>;</span><br><span class="line"></span><br><span class="line">    $input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>isPalindrome함수는 아래 이벤트 핸들러함수 안에서만 사용될 것인데 전역 코드에 있으므로 응집도를 높혀줘야한다.</p>
</li>
<li><p>split을 사용하여 배열화 하는 것보다 스프레드 문법을 사용하자.</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩토링 후</span></span><br><span class="line"><span class="keyword">const</span> checkPalindrome = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.palindrome-input&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> $result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.palindrome-result&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isPalindrome</span> = (<span class="params">string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newString = string.<span class="title function_">toUpperCase</span>().<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9가-힣]/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (newString === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reversedString = [...newString].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> newString === reversedString;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = $input.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    $result.<span class="property">textContent</span> = <span class="string">`&quot;<span class="subst">$&#123;value&#125;</span>&quot; is <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      isPalindrome(value) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;not&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span> a palindrome`</span>;</span><br><span class="line"></span><br><span class="line">    $input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&quot;.palindrome-checker&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, checkPalindrome);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>isPalindrome 함수와 이벤트 핸들러 함수의 응집도를 높히기 위해 즉시실행함수로 감싸주었다.</p>
</li>
<li><p>즉시실행함수는 이벤트 객체를 인수로 받는 함수를 반환한다. 이 함수에다가 리팩토링 전에 이벤트 핸들러 안에 있던 코드들을 담아주었다. 즉시실행함수가 반환하는 함수는 외부함수의 식별자를 참조하고 있고 외부함수보다 생명주기가 더 길어서 <span style='color:red'>클로저</span>이다.</p>
</li>
<li><p>문자열을 렌더링해주는 부분에서 조건에 따라 ‘not’이 있고 없고 차이가 있으므로 바꿔주었다.</p>
</li>
<li><p>이터러블 요소에는 스프레드 문법을 사용할 수 있다. 문자열은 이터러블하므로 split() 대신에 spread 문법을 사용하여 배열화 해주었다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>페어프로그래밍 level 1 기술적 회고</title>
    <url>/2022/09/26/PairProgramming/level%201/%ED%8E%98%EC%96%B4%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20level%201%20%EA%B8%B0%EC%88%A0%EC%A0%81%20%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="stopWatch-회고"><a href="#stopWatch-회고" class="headerlink" title="stopWatch 회고"></a>stopWatch 회고</h1><h2 id="1-복잡한-삼항-연산자를-메서드로-간단하게"><a href="#1-복잡한-삼항-연산자를-메서드로-간단하게" class="headerlink" title="1. 복잡한 삼항 연산자를 메서드로 간단하게"></a>1. 복잡한 삼항 연산자를 메서드로 간단하게</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formatElapsedTime = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1 =&gt; &#x27;01&#x27;, 10 =&gt; &#x27;10&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">format</span> = (<span class="params">n</span>) =&gt; (n + <span class="string">&quot;&quot;</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// const format = n =&gt; (n &lt; 10 ? &#x27;0&#x27; + n : n + &#x27;&#x27;);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; mm, ss, ms &#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;format(mm)&#125;</span>:<span class="subst">$&#123;format(ss)&#125;</span>:<span class="subst">$&#123;format(ms)&#125;</span>`</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li>삼항 연산자로 조건에 따라 문자열을 직접 넣어서 구현하였는데 padStart 메서드를 사용하면 가독성을 키웠다.</li>
<li>리팩터링 전에는 minutes, seconds 같은 변수를 사용했는데, format 함수를 사용하여 중복을 제거해주었다.</li>
</ul>
<h2 id="2-일관성있는-코드를-작성하자"><a href="#2-일관성있는-코드를-작성하자" class="headerlink" title="2. 일관성있는 코드를 작성하자"></a>2. 일관성있는 코드를 작성하자</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> renderLaps = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $laps = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stopwatch &gt; .laps&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 랩 타임을 생성하고 DOM에 반영한다.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">createLapElement</span> = (<span class="params">newLap, index</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> $fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $index = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    $index.<span class="property">textContent</span> = index;</span><br><span class="line">    $fragment.<span class="title function_">appendChild</span>($index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $newLab = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    $newLab.<span class="property">textContent</span> = <span class="title function_">formatElapsedTime</span>(newLap);</span><br><span class="line">    $fragment.<span class="title function_">appendChild</span>($newLab);</span><br><span class="line"></span><br><span class="line">    $laps.<span class="title function_">appendChild</span>($fragment);</span><br><span class="line"></span><br><span class="line">    $laps.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;grid&#x27;</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>리팩터링 전에는 addLap 함수에서 insertAdjacentHTML 메서드 사용하고 reset 함수에서는 innerHTML을 사용하여 일관성이 떨어졌다.</p>
</li>
<li><p>위 코드는 fragment 라는 서브 DOM을 구성하여 기존 DOM을 추가하는 용도로 사용하여 일관성을 갖췄다.</p>
</li>
</ul>
<h2 id="3-템플릿-건드리지-말라면-건드리지-말기"><a href="#3-템플릿-건드리지-말라면-건드리지-말기" class="headerlink" title="3. 템플릿 건드리지 말라면 건드리지 말기"></a>3. 템플릿 건드리지 말라면 건드리지 말기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩터링 전</span></span><br><span class="line">$laps.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;lap-title&quot;&gt;Laps&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;lap-title&quot;&gt;Time&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeAllLapElement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">document</span></span><br><span class="line">    .<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.laps &gt; div:not(.lap-title)&quot;</span>)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">$lap</span>) =&gt;</span> $lap.<span class="title function_">remove</span>());</span><br><span class="line">  $laps.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>요구사항에 맞게 템플릿을 건드리지 않아야한다면 템플릿을 건드리지 않아야 하므로 innerHTML로 새로운 값을 할당하는 대신, 자식 노드에 반복문을 사용하였다.</li>
</ul>
<h1 id="Tabs-회고"><a href="#Tabs-회고" class="headerlink" title="Tabs 회고"></a>Tabs 회고</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩터링 전</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, init);</span><br><span class="line"></span><br><span class="line">$tabs.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $navItems = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.tab-content&quot;</span>)];</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.tab&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">activateTab</span>(e, $navItems);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;nav&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;tab&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  currentTabIndex = +e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">index</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.glider&quot;</span>).<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate3D(<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    currentTabIndex * <span class="number">100</span></span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>%, 0, 0)`</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.tab-content&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">$tabContent, i</span>) =&gt;</span> &#123;</span><br><span class="line">    $tabContent.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;active&quot;</span>, i === currentTabIndex);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>async init 함수 내부에서 $tabs 이벤트 핸들러 등록까지 함께 해줘서 응집도 높은 코드를 설계할 수 있다.</li>
</ul>
<h1 id="autocomplete-회고"><a href="#autocomplete-회고" class="headerlink" title="autocomplete 회고"></a>autocomplete 회고</h1><h2 id="1-정규표현식에-콜백함수-사용"><a href="#1-정규표현식에-콜백함수-사용" class="headerlink" title="1. 정규표현식에 콜백함수 사용"></a>1. 정규표현식에 콜백함수 사용</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩터링 전</span></span><br><span class="line">country.<span class="title function_">replace</span>(regExp, <span class="string">`&lt;strong&gt;<span class="subst">$&#123;country.match(regExp)&#125;</span>&lt;/strong&gt;`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line">name.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(<span class="subst">$&#123;searchString&#125;</span>)`</span>, <span class="string">&quot;i&quot;</span>),</span><br><span class="line">  <span class="function">(<span class="params">matched</span>) =&gt;</span> <span class="string">`&lt;strong&gt;<span class="subst">$&#123;matched&#125;</span>&lt;/strong&gt;`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="2-요구사항을-잘-읽고-적합하게-설계하자"><a href="#2-요구사항을-잘-읽고-적합하게-설계하자" class="headerlink" title="2. 요구사항을 잘 읽고 적합하게 설계하자."></a>2. 요구사항을 잘 읽고 적합하게 설계하자.</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">selectSuggestItem</span> = (<span class="params">$selectedItem</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// prettier-ignore</span></span><br><span class="line">  $toggleButton.<span class="property">innerHTML</span> = ($selectedItem</span><br><span class="line">    ? $selectedItem.<span class="property">innerHTML</span></span><br><span class="line">    : <span class="string">`&lt;span&gt;</span></span><br><span class="line"><span class="string">        &lt;i class=&quot;bx bx-search&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;autocomplete-title&quot;&gt;Select a country&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/span&gt;`</span></span><br><span class="line">  ) + <span class="string">`&lt;i class=&quot;bx bx-caret-down&quot;&gt;&lt;/i&gt;`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>리팩터링 이전 코드는 li 요소 안의 span 요소를 클릭하면 제대로 동작하지 않았다. 그래서 위와 같이 로직을 수정을 해줬어야 했다. 그러므로 꼭 요구사항을 적절히 읽고 그에 적절한 코드를 작성하는 습관을 기르자.</li>
</ul>
<h1 id="Carousel-회고"><a href="#Carousel-회고" class="headerlink" title="Carousel 회고"></a>Carousel 회고</h1><h2 id="1-transitionend-이벤트가-발생했다-안하는-현상"><a href="#1-transitionend-이벤트가-발생했다-안하는-현상" class="headerlink" title="1. transitionend 이벤트가 발생했다 안하는 현상"></a>1. transitionend 이벤트가 발생했다 안하는 현상</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$container.<span class="title function_">addEventListener</span>(<span class="string">&quot;transitionend&quot;</span>, carouselSlider.<span class="property">completeTransition</span>);</span><br><span class="line"></span><br><span class="line">$container.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;transitioncancel&quot;</span>,</span><br><span class="line">  carouselSlider.<span class="property">completeTransition</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>transition 이벤트가 완료 되었을 때, 이벤트 핸들러를 호출하도록 코드를 작성하였다.<br>그런데 transitionend 이벤트가 발생하기 전 즉, <strong>transition이 완료되기 전에 transition-property가 제거되거나 display:none 으로 설정이 변경되면 <span style='color:red'>이벤트가 생성되지 않는다.</span></strong></li>
</ul>
<p>그래서 보통은 안전하게 CSS 속성 변화가 되었을 때, transitionend 이벤트를 사용하기 위해 라이브러리를 사용하는데, 요구사항에서 라이브러리를 사용하지 말라고 하였으므로, transitioncancel 이벤트를 사용하였다.</p>
<p>transitionend이벤트와 transitioncancel이벤트는 양방향으로 발생한다. 즉, transitionend 이벤트가 발생하면 transitioncancel 이벤트는 발생하지 않는다.</p>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>페어프로그래밍 level 1 회고</title>
    <url>/2022/09/23/PairProgramming/level%201/%ED%8E%98%EC%96%B4%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20level%201%20%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="2주간의-페어-프로그래밍-회고"><a href="#2주간의-페어-프로그래밍-회고" class="headerlink" title="2주간의 페어 프로그래밍 회고"></a>2주간의 페어 프로그래밍 회고</h1><h1 id="1-무지성-코딩을-하지-말자"><a href="#1-무지성-코딩을-하지-말자" class="headerlink" title="1. 무지성 코딩을 하지 말자."></a>1. 무지성 코딩을 하지 말자.</h1><p>생각 없이 코드를 짜면 내가 이 코드를 다른사람에게 설명해야하는 순간이 올 때, 말문이 턱 ! 막혀버리게 된다.</p>
<p>“여기서 왜 이 메서드를 사용했나요?”</p>
<p>“왜 이 변수는 이곳에 위치해야하나요?”</p>
<p>“이 함수의 이름으로 봐선 이러이러한 함수같은데 그게 맞나요?”</p>
<ul>
<li>위와 같은 질문들을 받았을 때, 나의 기준과 코드를 작성하는 신념을 세워 코드를 짜야지만 앞으로도 계속해서 발전하는 코드를 작성할 수 있다.</li>
</ul>
<h2 id="무지성-코딩을-하지-않기-위한-팁"><a href="#무지성-코딩을-하지-않기-위한-팁" class="headerlink" title="무지성 코딩을 하지 않기 위한 팁"></a><span style="color:red">무지성 코딩을 하지 않기</span> 위한 팁</h2><ol>
<li>상대방에게 말로 설명하면서 코딩을 하자</li>
</ol>
<p>상대방에게 말로 설명하면서 코딩을 하다보면 논리에 맞지 않는 코드를 짤 수 없게 된다.</p>
<p>상대방이 이해하지 못하면 이해시킨 뒤 코딩을 이어간다.</p>
<h1 id="2-틀에-잡힌-생각을-버려라"><a href="#2-틀에-잡힌-생각을-버려라" class="headerlink" title="2. 틀에 잡힌 생각을 버려라"></a>2. 틀에 잡힌 생각을 버려라</h1><p>처음부터 MVC 패턴을 머릿속에 담아두고 그 틀대로 코드를 짜려고 하지 말자. 틀을 가지고 코드를 짜게되면 하나의 패턴에 국한되어 생각하는 힘을 기르는 것을 막는다.</p>
<p>수업 때 배운 state와 setState를 사용한 MVC 패턴은 분명 좋은 패턴이지만, 모든 기능 구현에 필요하진 않다. 그러므로 처음부터 틀에 밖힌 사고를 하지 말고 차근차근 짜보면서 필요한 것들이 생긴다면 추가하도록 한다.</p>
<h1 id="3-성능과-가독성의-딜레마"><a href="#3-성능과-가독성의-딜레마" class="headerlink" title="3. 성능과 가독성의 딜레마"></a>3. 성능과 가독성의 딜레마</h1><p>성능을 생각하면 코드의 가독성이 떨어지고,</p>
<p>코드의 가독성을 생각하면 성능이 떨어지는 경우가 다반사이다.</p>
<p>성능이 미비한 차이이니 무조건 가독성만 챙기는 것은 옳지 않다. 각각의 상황에 맞게 성능과 가독성 중 하나의 우선순위를 택했다면, 선택받지 못한 것을 사용하였을 때, 장점도 알아두고 넘어가자.</p>
<h1 id="4-되는-이유와-되지-않는-이유"><a href="#4-되는-이유와-되지-않는-이유" class="headerlink" title="4. 되는 이유와 되지 않는 이유"></a>4. 되는 이유와 되지 않는 이유</h1><p>코드를 작성하다보면 막히는 부분이 분명있을 것이다. 그럴 때 마다 우선 어떤 부분에서 문제가 발생하는지를 파악하는 것이 우선이다.</p>
<p>그리고 그 문제를 해결하기 위해 구글링을 하거나 시도를 해보는데, 그 때마다 코드가 작동해서 좋아할 것이 아니고, 왜 코드가 작동하고, 왜 코드가 작동하지 않는지를 명확히 파악하고 진행해야 한다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>처음 페어 프로그래밍을 시작했을 때는 코드에 대한 두려움은 없었다. 일단 요구사항에서 언급한 기능을 구현하기 위해 코드를 작성해 나갔는데, 그렇게 의식의 흐름대로 따라가다 보니 어느 순간 막히는 부분이 분명 생겼다. 그 때 마다 <span style="font-size:1rem; color:red">발생한 문제를 직면하고 파악하려 하지 않고</span> 어떻게 하면 작동하게 될지에 집중하였다. 하지만 이렇게 작동에만 집중하다보니 <span style="color:red">내가 무엇을 모르고 무엇을 아는 것인지 메타인지가 떨어지게</span> 되어 학습에 별로 도움이 되지 않았다.</p>
<p>내가 어떤 기능을 구현하기 위한 방법을 모르는 것과 문제가 발생했을 때, 문제를 직면하지 않고 구현에만 집착하는 것은 완전히 별개의 문제이다.</p>
<p>전자는 처음에는 당연히 모를 수 밖에 없는 부분으로 개발을 해나가면서 구글링을 통해 지식을 습득해나가면 되는 부분이지만, 후자는 다음에 똑같은 문제가 발생했을 때 같은 실수를 반복하고 발전이 있는 코드를 작성할 수 없게 된다.</p>
<p>그러므로, 어떤 문제가 발생하면 <span style="font-size:1rem">왜 그런 문제가 발생했는지 근본적인 원인을 파악하고 현재 상황에서 해당 문제의 원인을 해결하기 위해 어떤 방법이 있는지를 찾아보고</span> 시도해보면서 성공하게 되면 이것보다 더 좋은 방법은 없는지를 생각해보는 방향으로 코딩을 해야한다는 것을 느꼈다.</p>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 1</category>
      </categories>
  </entry>
  <entry>
    <title>CBD Library Tip</title>
    <url>/2022/09/29/PairProgramming/level%202/CBD%20Library%20Tip/</url>
    <content><![CDATA[<h1 id="9-CBD"><a href="#9-CBD" class="headerlink" title="9. CBD"></a>9. CBD</h1><h2 id="로직"><a href="#로직" class="headerlink" title="로직"></a>로직</h2><ol>
<li>처음 DOMContentLoaded 이벤트가 발생하였을 때, 초기 state 값 설정 및 render 함수를 실행한다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createState</span>(&#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&quot;Javascript&quot;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&quot;CSS&quot;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&quot;HTML&quot;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">todoFilter</span>: [<span class="string">&quot;All&quot;</span>, <span class="string">&quot;Completed&quot;</span>, <span class="string">&quot;Active&quot;</span>],</span><br><span class="line">    <span class="attr">currentTodoFilterId</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>render가 실행되면 App 클래스의 인스턴스를 생성하고 생성된 인스턴스를 domStr 프로토타입 메서드를 사용하여 문자열로 반환하고 이 문자열을 <strong>node(virtual DOM)로 반환</strong>해주었다. 생성된 Virtual DOM과 기존 index.html에 있는 root가 생성한 Real DOM을 비교하는 diff 함수를 실행한다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(app);</span><br><span class="line">  <span class="title function_">diff</span>(app.<span class="title function_">newDOM</span>(), $root);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li>App 클래스에서는 todoInput, todoList, todoFilter 라는 인스턴스 프로퍼티에 각각 클래스형 컴포넌트의 인스턴스를 할당해주었다. 이 프로퍼티(컴포넌트)를 components 배열에서 관리를 해준다. 또한, 각 컴포넌트에서 데이터가 변경되어 재렌더링이 발생하면 2번 과정이 발생한다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> components = []; <span class="comment">// App 인스턴스 여러개 만들면 구분해주기 위해 전역에서 선언</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    components.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="title function_">unmount</span>());</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoInput</span> = <span class="keyword">new</span> <span class="title class_">TodoInput</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoList</span> = <span class="keyword">new</span> <span class="title class_">TodoList</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todoFilter</span> = <span class="keyword">new</span> <span class="title class_">TodoFilter</span>();</span><br><span class="line"></span><br><span class="line">    components = [<span class="variable language_">this</span>.<span class="property">todoInput</span>, <span class="variable language_">this</span>.<span class="property">todoList</span>, <span class="variable language_">this</span>.<span class="property">todoFilter</span>];</span><br><span class="line"></span><br><span class="line">    components.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="title function_">mount</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">domStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;<span class="variable language_">this</span>.todoInput.domStr()&#125;</span></span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;<span class="variable language_">this</span>.todoList.domStr()&#125;</span></span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;<span class="variable language_">this</span>.todoFilter.domStr()&#125;</span></span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">newDOM</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">domStrToNode</span>(<span class="variable language_">this</span>.<span class="title function_">domStr</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>이렇게 생성된 컴포넌트에 이벤트 핸들러를 등록시켜주기 위해서는 App 클래스의 인스턴스가 생성될 때, 즉 데이터가 변경되어 렌더링이 될 때 마다 기존 컴포넌트 목록들에게 unmount(이벤트 제거)를 실행하고 다시 컴포넌트를 등록하고 mount(이벤트 등록)을 실행한다.</li>
<li>이벤트를 등록하고 제거해주어 <strong>컴포넌트의 생명주기를 관리</strong>해주는 이유는 이벤트 위임으로 window에게 이벤트를 등록만 하고 제거해주지 않는다면 <strong>재렌더링 발생하여 컴포넌트가 새로 생성되면 그 때 다시 또 이벤트를 등록해주므로 불필요한 이벤트 등록과 성능상 문제가 발생</strong>할 수 있기 때문에 재렌더링이 발생할 때 꼭 이전 컴포넌트의 이벤트를 제거해줘야한다.</li>
</ul>
<ol>
<li>각 컴포넌트에서는 이벤트 핸들러를 작성해주고 mount 함수 안에 이벤트 리스너를 등록하고 unmount 함수안에 이벤트를 제거해준다. domStr 함수는 해당 컴포넌트를 HTML 구조를 문자열로 반환해준다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> todos = [...state.<span class="property">todos</span>];</span><br><span class="line">    <span class="keyword">if</span> (state.<span class="property">currentTodoFilterId</span> === <span class="number">1</span>)</span><br><span class="line">      todos = state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">completed</span>);</span><br><span class="line">    <span class="keyword">if</span> (state.<span class="property">currentTodoFilterId</span> === <span class="number">2</span>)</span><br><span class="line">      todos = state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> !todo.<span class="property">completed</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = todos.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">TodoItem</span>(id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">mount</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">unmount</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">domStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;ul class=&quot;todo-list&quot;&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="variable language_">this</span>.items.map((item) =&gt; item.domStr()).join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>todoList 경우는 App 에서 todoList, todoInput, todoFilter 컴포넌트를 관리해주는 것처럼 todoItem 컴포넌트를 관리해준다. App 에서 mount 함수를 실행하여 각 컴포넌트의 mount, unmount를 통해 생명주기를 관리해준 것 처럼 todoList의 mount 에서는 todoItem 컴포넌트의 mount, unmount를 관리해준다.</li>
<li>this.items 에는 각 id에 해당하는 TodoItem의 컴포넌트들로 구성된 배열이 할당된다. 그리고 domStr 함수에서 TodoItem 컴포넌트들을 map 고차함수로 돌면서 각 컴포넌트들의 domStr 함수로 호출하여 문자열로 반환한다.</li>
<li>TodoFilter에서 domStr 부분에서 id가 꼭 필요한가?<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">domStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul class=&#x27;todo-filter&#x27;&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;state.todoFilter</span></span></span><br><span class="line"><span class="subst"><span class="string">        .map(</span></span></span><br><span class="line"><span class="subst"><span class="string">          (filter, i) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">            <span class="string">`&lt;li class=&quot; filter <span class="subst">$&#123;i === state.currentTodoFilterId ? <span class="string">&#x27;active&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&quot; id=&quot;<span class="subst">$&#123;i&#125;</span>&quot;&gt;<span class="subst">$&#123;filter&#125;</span>&lt;/li&gt;`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">        )</span></span></span><br><span class="line"><span class="subst"><span class="string">        .join(<span class="string">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>all, completed, active 에 id가 굳이 필요한가??</li>
</ul>
</li>
</ul>
<ol>
<li>각 컴포넌트에서 state로 관리하는 부분이 변경될 때, 상태가 바뀌는 부분만 재렌더링이 일어나도록 구현하였으므로 todoInput에서는 재렌더링이 일어날 부분이 없으므로 autofocus 기능이 사라지지 않는다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TodoInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addTodo</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span> || e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      state.<span class="property">todos</span> = [</span><br><span class="line">        ...state.<span class="property">todos</span>,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="title function_">getNextId</span>(), <span class="attr">content</span>: e.<span class="property">target</span>.<span class="property">value</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      ];</span><br><span class="line">      e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">addTodo</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">addTodo</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">domStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;input class=&#x27;todo-input&#x27; autofocus/&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><ul>
<li>checkbox 클릭하면 checked가 생성되고 사라지는 렌더링은 잘 되지만, 화면에서는 바뀌지 않는 문제가 발생하였다.<ul>
<li>attribute와 property의 차이때문에 발생하는 문제점이라고 생각되었다.</li>
<li>setAttribute대신에 요소를 replaceChild()로 자식노드를 교체해주었다.</li>
</ul>
</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><ul>
<li>혼자서 공식문서들여다 보는 것 보다 확실히 옆에서 같이 이야기 하고 생각을 공유하면서 코드를 작성해나가다 보니 diff 알고리즘도 완성할 수 있어서 기뻤다.</li>
<li>node.children 은 텍스트 노드를 제외한 자식 노드들을 반환</li>
<li>node.childNodes는 모든 자식 노드를 반환한다.</li>
<li>attribute와 property의 차이점에 대해 한번 더 생각해볼 수 있는 시간이 있어서 좋았다. attribute는 HTML에 있는 속성으로 rendering이 되면 attribute는 DOM property로 변환된다. 하지만 1:1 매칭이 되지는 않는다는 점을 주의하자.<ul>
<li>attribute : 변하지 않는 초기 default 값 전달</li>
<li>property : 사용자의 행동으로 변할 수 있다.</li>
<li>diff 구현할 때, removeAttribute는 제대로 동작했는데, setAttribute할 때는 checkbox값이 삭제했을 때, 다음 todo에 이전되는 문제가 발생하였는데 이는 따로 정리해둬야겠다.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>diff Algorithm Tip</title>
    <url>/2022/09/30/PairProgramming/level%202/diff%20Algorithm%20Tip/</url>
    <content><![CDATA[<h1 id="diffing-구현"><a href="#diffing-구현" class="headerlink" title="diffing 구현"></a>diffing 구현</h1><p>React에서는 화면에서 바뀐 부분만 부분적으로 렌더링 해주기 위해 diffing 알고리즘을 구현하였다.</p>
<p>virtualDOM과 realDOM을 비교해주기 위해 리액트 홈페이지에서 설명한 방법으로 vanilla JS로 diffing 알고리즘을 구현해보자.</p>
<h1 id="0-두-요소의-길이부터-비교한다"><a href="#0-두-요소의-길이부터-비교한다" class="headerlink" title="0. 두 요소의 길이부터 비교한다."></a>0. 두 요소의 길이부터 비교한다.</h1><p>우리가 작업하고 있는 요소를 $old, 새롭게 생성된 요소를 $new 요소라고 하자. 우리는 $new를 기준으로 $old의 요소들을 일치 시켜주는 행위를 하면 된다.</p>
<p>$new의 노드길이가 $old의 노드 길이보다 길다면, $old에서 추가해주면 되지만, $new가 $old보다 길이가 짧다면, $old의 나머지 부분을 제거해줘야한다.</p>
<h2 id="0-1-길이가-짧은-경우"><a href="#0-1-길이가-짧은-경우" class="headerlink" title="0.1. 길이가 짧은 경우"></a>0.1. 길이가 짧은 경우</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">diff</span> = (<span class="params">$new, $old</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newNodes = [...$new.<span class="property">childNodes</span>];</span><br><span class="line">  <span class="keyword">const</span> oldNodes = [...$old.<span class="property">childNodes</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldNodes.<span class="property">length</span> &gt; newNodes.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldNodes.<span class="property">length</span> - newNodes.<span class="property">length</span>; i++)</span><br><span class="line">      $old.<span class="title function_">removeChild</span>($old.<span class="property">lastChild</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="0-2-길이가-긴-경우"><a href="#0-2-길이가-긴-경우" class="headerlink" title="0.2. 길이가 긴 경우"></a>0.2. 길이가 긴 경우</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">newNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">$n, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $o = oldNodes[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($o === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    $old.<span class="title function_">appendChild</span>($n.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>이전 요소에 새로운 요소가 가진 자식 노드가 없다면 이전 요소에 추가해준다.</li>
</ul>
<blockquote>
<p>cloneNode(true)는 해당 요소의 자식노드들 까지 모두 복제해주기 위한 옵션이다.</p>
</blockquote>
<h1 id="1-두-요소의-루트-노드부터-비교한다"><a href="#1-두-요소의-루트-노드부터-비교한다" class="headerlink" title="1. 두 요소의 루트 노드부터 비교한다."></a>1. 두 요소의 루트 노드부터 비교한다.</h1><p>먼저 두 루트 요소의 타입이 다르면 $old 요소에서 제거하고 새로운 트리를 구축한다.</p>
<p>ex) <a>에서 <div>로, <Article>에서 <Comment>로 바뀌는 경우</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">newNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">$n, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $o = oldNodes[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($o.<span class="property">tagName</span> !== $n.<span class="property">tagName</span>) &#123;</span><br><span class="line">    $old.<span class="title function_">replaceChild</span>($n.<span class="title function_">cloneNode</span>(<span class="literal">true</span>), $o);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>이전 요소의 자식노드과 새로운 요소의 자식노드를 1:1로 tagName을 비교하여 서로 다르면 교체를 해주었다.</li>
</ul>
<h1 id="2-textNode-commentNode-들은-textContent를-비교한-뒤-교체해준다"><a href="#2-textNode-commentNode-들은-textContent를-비교한-뒤-교체해준다" class="headerlink" title="2. textNode, commentNode 들은 textContent를 비교한 뒤 교체해준다."></a>2. textNode, commentNode 들은 textContent를 비교한 뒤 교체해준다.</h1><p>앞서 tagName으로 비교하여 같지 않을 때, 자식노드까지 비교해주었는데, textNode와 commentNode는 서로 tagName이 같으므로 이들의 textContent로 비교해주어야 한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">newNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">$n, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $o = oldNodes[i];</span><br><span class="line">  <span class="comment">// textNode:3, commentNode:8</span></span><br><span class="line">  <span class="keyword">if</span> ($n.<span class="property">nodeType</span> === <span class="number">3</span> || $n.<span class="property">nodeType</span> === <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($n.<span class="property">textContent</span> !== $o.<span class="property">textContent</span>)</span><br><span class="line">      $old.<span class="title function_">replaceChild</span>($n.<span class="title function_">cloneNode</span>(<span class="literal">true</span>), $o);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="3-이제-각-노드의-attribute-노드를-비교한다"><a href="#3-이제-각-노드의-attribute-노드를-비교한다" class="headerlink" title="3. 이제 각 노드의 attribute 노드를 비교한다."></a>3. 이제 각 노드의 attribute 노드를 비교한다.</h1><p>2번까지의 과정으로 $old 요소의 자식노드와 $new 요소의 자식노드들의 비교가 끝났고 일치까지 시켜줬다. 그러므로 이제는 자식 노드가 가지고 있는 attribute(class, inline-style, checked, disabled…)를 비교해줘야 한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">newNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">$n, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $o = oldNodes[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newAttrs = [...$n.<span class="property">attributes</span>];</span><br><span class="line">  <span class="keyword">const</span> oldAttrs = [...$o.<span class="property">attributes</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> $nAttr <span class="keyword">of</span> newAttrs) &#123;</span><br><span class="line">    <span class="keyword">const</span> $sameAttr = oldAttrs.<span class="title function_">find</span>(<span class="function">(<span class="params">$oAttr</span>) =&gt;</span> $oAttr.<span class="property">name</span> === $nAttr.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($sameAttr === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      $old.<span class="title function_">replaceChild</span>($n.<span class="title function_">cloneNode</span>(<span class="literal">true</span>), $o);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($sameAttr.<span class="property">value</span> !== $nAttr.<span class="property">value</span>) $sameAttr.<span class="property">value</span> = $nAttr.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  oldAttrs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">$oAttr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!newAttrs.<span class="title function_">find</span>(<span class="function">(<span class="params">$nAttr</span>) =&gt;</span> $nAttr.<span class="property">name</span> === $oAttr.<span class="property">name</span>))</span><br><span class="line">      $o.<span class="title function_">removeAttribute</span>($oAttr.<span class="property">name</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">diff</span>($n, $o);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>새로운 노드의 attritube 중 이전 노드의 attribute와 같은 attribute가 없다면, 이전 요소 노드의 attribute를 새로운 노드의 attribute로 추가해준다.</p>
</li>
<li><p>이전 노드의 attribute 값과 새로운 노드의 attribute 값이 다르면 이전 노드 attribute에 값을 할당해준다.</p>
</li>
<li><p>만약 이전 노드의 attribute 중 새로운 노드의 attribute가 없다면 이전 노드의 해당 attribute를 제거해준다.</p>
</li>
</ul>
<p>그리고 마지막으로 자식 노드들을 재귀적으로 diff 함수를 호출해주면 자식 노드까지 바뀐 부분만 확인해줄 수 있다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><ul>
<li><p>diff 알고리즘을 경현님과 같이 이야기 하면서 작성하다보니 완성할 수 있어서 기뻤다.</p>
</li>
<li><p>이전 노드의 attribute와 새로운 노드의 attribute가 다를 때, attribute를 추가해주기 위해 setAttribute()를 사용하였는데, attribute는 HTML 구조의 초기값을 설정해주는 것이므로, 사용자의 화면에 변화되는 것이 반영되지 않고 todo를 삭제할 때, 삭제한 다음 요소에 삭제 요소의 attribute가 남아있는 것처럼 보이는 문제가 발생하여 attribute를 추가하는 경우에는 replaceChild() 메서드를 사용하여 해당 요소의 노드를 바꿔주는 방식을 사용하였다.</p>
</li>
</ul>
<p>때문에 attribute를 추가하는 경우에는 li 요소가 전부 렌더링 되는 모습을 보이고 attribute를 제거할 때는 input에 있는 checked attribute만 제거되므로 li 요소가 아닌 li 자식 요소의 input과 input의 다음 형제 요소들만 렌더링 되는 모습을 볼 수 있었다.</p>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
      <tags>
        <tag>diff</tag>
        <tag>virtualDOM</tag>
        <tag>realDOM</tag>
      </tags>
  </entry>
  <entry>
    <title>drag이벤트 상태관리</title>
    <url>/2022/10/05/PairProgramming/level%202/drag%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC/</url>
    <content><![CDATA[<h1 id="1-drag-상태-관리"><a href="#1-drag-상태-관리" class="headerlink" title="1. drag 상태 관리"></a>1. drag 상태 관리</h1><p>dragstart의 origin과 drop의 target 노드를 전역 상태에서 관리하면 setState로 변경될 때마다 리렌더링 발생한다. 요구사항에서는 DOM 변경만 하고 drop 했을 때 상태를 변경하라고 하였으니 전역 상태로 관리해주면 안된다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$origin</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$target</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;dragstart&quot;</span>,</span><br><span class="line">        <span class="attr">selector</span>: <span class="string">&quot;.list-container&quot;</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$origin</span> = e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.list-container&quot;</span>);</span><br><span class="line">          e.<span class="property">dataTransfer</span>.<span class="property">effectAllowed</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;dragenter&quot;</span>,</span><br><span class="line">        <span class="attr">selector</span>: <span class="string">&quot;.list-container&quot;</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$origin</span> !== e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.list-container&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$target</span> = e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.list-container&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">$origin</span>, <span class="variable language_">this</span>.<span class="property">$target</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>drag &amp; drop이 발생하는 컴포넌트에서 지역 변수로서 관리해주면 된다.</li>
</ul>
<h1 id="2-이벤트-등록-조건-수정"><a href="#2-이벤트-등록-조건-수정" class="headerlink" title="2. 이벤트 등록 조건 수정"></a>2. 이벤트 등록 조건 수정</h1><p>각자의 컴포넌트들을 window에 등록해줄 때, 이벤트 위임이므로 걸러주기 위해 matches를 사용하였는데, 이 경우 이벤트가 발생한 요소만 해당되고 이벤트 발생한 부모 요소를 찾을 수 없어 list 요소에 drag 이벤트가 발생하지 않는 문제가 발생하였다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="title function_">checkEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">addEvent</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addEvent</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; type, selector, handler &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (events.<span class="title function_">find</span>(<span class="function"><span class="params">event</span> =&gt;</span> event.<span class="property">type</span> === type &amp;&amp; event.<span class="property">selector</span> === selector)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selector === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(type, <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">handler</span>(e));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(type, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(selector) &amp;&amp; !e.<span class="property">target</span>.<span class="title function_">closest</span>(selector)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="title function_">handler</span>(e);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        events = [...events, &#123; type, selector, handler &#125;];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>자신을 포함한 부모쪽에서 selector를 찾을 수 있기 때문에 closest도 추가해준다.</li>
</ul>
<h1 id="3-DOM만-변경하고-상태는-변경시키지-않는-경우"><a href="#3-DOM만-변경하고-상태는-변경시키지-않는-경우" class="headerlink" title="3. DOM만 변경하고 상태는 변경시키지 않는 경우"></a>3. DOM만 변경하고 상태는 변경시키지 않는 경우</h1><p>list 드래그 시 dragenter가 발생할 때, DOM을 직접 변경하여 화면에 list가 서로 바뀐 것처럼 보이도록 구현하였다. 하지만, drop을 발생시켰을 때, 1번 list에서 2번 리스트로 dragenter 되었다가 다시 1번 list로 드래그 한체로 돌아와서 drop을 하면 DOM 상에서 바뀌지 않았는데, 상태가 바뀐 것으로 감지하여 상태 lists의 순서를 변경하는 문제가 발생하였다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrangeList</span> = (<span class="params">idOrder</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">  <span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">lists</span>: state.<span class="property">lists</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> aOrder = idOrder.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> id === a.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">const</span> bOrder = idOrder.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> id === b.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">return</span> aOrder &lt; bOrder ? -<span class="number">1</span> : aOrder &gt; bOrder ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;drop&#x27;</span>,</span><br><span class="line">        <span class="attr">selector</span>: <span class="string">&#x27;.list-container&#x27;</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">          <span class="title function_">arrangeList</span>([...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.list-container&#x27;</span>)].<span class="title function_">map</span>($c =&gt; +$c.<span class="property">id</span>));</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>dragenter 이벤트 핸들러에서 DOM을 직접 변경해주었기 때문에, DOM이 변경되었는지 확인하기 위해서는 DOM API를 사용할 수 밖에 없었다.</p>
</li>
<li><p>DOM에 직접 접근하여 drop 이벤트가 발생하였을 때, DOM의 list-container 요소들을 가져와서 id로 배열을 반환하여 인수로 전달해주었다. 이 때 전달한 인수는 화면에 나타난 list의 순서를 의미한다.</p>
</li>
</ul>
<h1 id="페어프로그래밍2의-목적"><a href="#페어프로그래밍2의-목적" class="headerlink" title="페어프로그래밍2의 목적"></a>페어프로그래밍2의 목적</h1><p>이번 페어프로그래밍2의 목적은 리액트 프레임워크를 배우기 전에 컴포넌트가 무엇인지 제대로 알고 가기 위함이였다.</p>
<h2 id="컴포넌트란"><a href="#컴포넌트란" class="headerlink" title="컴포넌트란?"></a>컴포넌트란?</h2><p><strong>모든 컴포넌트는 자신이 어디에 그려질지 알면 안된다.</strong></p>
<p>→ <strong>render가 알아야 한다.</strong></p>
<ul>
<li>컴포넌트는 어떤 모습으로 그려질 것인가에 대한 정보를 가지고 있다.</li>
<li>render가 그 정보들을 가지고 그려주는 역할을 한다.</li>
<li>App 컴포넌트가 자식 컴포넌트까지도 알아야 그려줄 수 있다.</li>
<li>부모 컴포넌트가 자식컴포넌트를 알고 있으면 새롭게 그려질 정보와 이전의 그려진 정보를 비교하여 효율적인 렌더링이 가능하다.</li>
</ul>
<blockquote>
<p>컴포넌트가 부모요소의 컨테이너를 받아서 그곳에 innerHTML로 그리면 이는 부모가 그린 HTML에 종속되는 것이므로 컴포넌트를 독립적으로 사용할 수 없게되므로 컴포넌트 개념을 벗어난다.</p>
</blockquote>
<h2 id="효율적인-렌더링을-위해서…"><a href="#효율적인-렌더링을-위해서…" class="headerlink" title="효율적인 렌더링을 위해서…"></a>효율적인 렌더링을 위해서…</h2><p>효율적인 렌더링을 위해서는 diff 알고리즘을 구현하였었다. 만약 App 컴포넌트가 일부분을 그리고 나머지 부분을 다른 컴포넌트가 받아서 그리는 하향식 구조로 설계를 하게된다면 diff 알고리즘이 하향식으로 비교해나가는데 이는 어디가 최하단인지 판별해주기가 까다로워진다.</p>
<p>그러므로 재조정은 App 컴포넌트가 해야한다. App 컴포넌트는 다른 컴포넌트에게 그들을 그리기 위한 정보를 전달받아 이것들을 모아서 render 함수로 보내서 화면에 렌더링을 시켜준다. render 함수는 그려주는 역할을 하고 App 컴포넌트는 그려지기위한 정보를 모두 가지고 있어야한다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><ul>
<li>코드 작성에 대해 어떤 생각을 가지고 구현했는지 명확하게 얘기할 수 있으면 Ok<ul>
<li>되는대로 짜는 것이 아니라 명확한 이유가 가지고 짜면 위의 문제가 해결</li>
</ul>
</li>
<li>내가 작성한 코드는 나만 잘 알고 있다. 상대방에게 설명할 때, 상대방이 어느정도 알고 있을 것이라는 생각은 접어두자.</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>newsViewer, CBD Library Tip</title>
    <url>/2022/09/28/PairProgramming/level%202/newsViewer,%20CBD%20Library%20Tip/</url>
    <content><![CDATA[<h1 id="8-news-viewer"><a href="#8-news-viewer" class="headerlink" title="8. news viewer"></a>8. news viewer</h1><ol>
<li>전체적인 구조를 설명하면, Nav, NewsList는 컴포넌트로 관리하여 독립적인 요소로 관리하고 root 요소에 appendChild 해주었다.</li>
<li>Nav 요소가 클릭되면 state 상태 데이터를 클릭한 요소의 id와 변경해준다. ⇒ Nav 요소는 상태를 변경 시키지만 리렌더링은 일어나지 않는다.</li>
<li>state 상태 데이터가 변경이 일어나면 NewsList가 리렌더링이 발생한다.</li>
</ol>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123; <span class="attr">category</span>: <span class="string">&quot;all&quot;</span> &#125;, <span class="comment">// state 객체에 key,value로 들어가게된다.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">obj, key, value</span>) =&gt;</span> &#123;</span><br><span class="line">      obj[key] = value;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&quot;statechange&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">detail</span>: obj,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// setter 는 성공했음을 나타내기 위해 true를 반환해줘야 한다.</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">state[category] = <span class="string">&quot;business&quot;</span>; <span class="comment">// handler 객체의 setter 접근자 프로퍼티가 실행된다.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>프록시 객체를 생성하여 state(상태)가 변경, 할당이 발생하면 proxy의 handler에서 먼저 로직을 실행</li>
<li>setter 접근자 프로퍼티가 실행된다는 의미는 state(상태)에 변경이 일어난 경우이므로 이 때, window에게 custom event의 이벤트 객체를 보낸다.</li>
</ul>
<h2 id="Observer-Intersection-Observer-API"><a href="#Observer-Intersection-Observer-API" class="headerlink" title="Observer(Intersection Observer API)"></a>Observer(Intersection Observer API)</h2><p>옵저버 패턴은 이벤트를 발생 시킨 객체(subject)에 옵저버나 리스너를 등록하여서 이들이 subject를 관찰하면서 구독 혹은 구독 취소 같은 행위를 할 수 있도록 하는 패턴을 말한다.</p>
<ul>
<li>상태가 변경되면 옵저버에게 notify() 메서드로 알림을 보낸다</li>
<li>옵저버(handler)는 subject가 변경될 때, 호출할 함수들이다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">    <span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">          currentNews = [...currentNews, ...<span class="title function_">getCategoryData</span>(currentCategory)];</span><br><span class="line">          <span class="title function_">render</span>(currentNews);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  observer.<span class="title function_">observe</span>($newsList.<span class="title function_">querySelector</span>(<span class="string">&#x27;.scroll-observer&#x27;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>spinner(’.scroll-obeserver’)</code> 가 viewport에 지정한 임계점(threshold) 이상 나타났을 때, if문 안의 코드를 실행시킨다.</li>
<li>entries forEach로 조건식 entry.isIntersecting이 true 이면 처음 스크롤을 내려서 보였을 때 실행하고 false면 다시 스크롤을 올렸을 때는 코드를 실행하지 말라는 의미이다. (양방향으로 일어나기 때문에 관리해줘야한다.)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  observer.<span class="title function_">subscribe</span>(render);</span><br><span class="line">  intersectionObserver = <span class="title function_">createObserver</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">render</span>();</span><br><span class="line">  intersectionObserver.<span class="title function_">observe</span>($container.<span class="title function_">querySelector</span>(<span class="string">&quot;.scroll-observer&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>observe() 메서드를 사용하여 옵저버 타겟을 설정할 수 있다.<ul>
<li>이 코드는 DOMContentLoaded 이벤트가 발생했을 때, 한번만 발생하면 된다. 리팩터링 이전 코드는 render 할 때마다 spinner 요소를 재생성하여 위 메서드를 사용하여 target으로 지정하기 위해서 꼭 render 함수 내부에 있어야 했는데, 이는 불필요한 함수 호출과 리렌더링이므로 이를 해결하기 위해 렌더링이 불필요한 템플릿들은 App.js에서 $container innerHTML로 미리 할당해준다.</li>
<li>위와 같이 await로 렌더가 될 때 까지 기다렸다가 <code>‘.scroll-observer’</code> 요소가 생성된게 보장이 되면 옵저버 타겟을 등록한다.</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addNews</span> = (<span class="params">category, nextNews</span>) =&gt; &#123;</span><br><span class="line">  news = &#123;</span><br><span class="line">    ...news,</span><br><span class="line">    [category]: &#123;</span><br><span class="line">      ...news[category],</span><br><span class="line">      <span class="attr">articles</span>: [...news[category].<span class="property">articles</span>, ...nextNews],</span><br><span class="line">      <span class="attr">page</span>: news[category].<span class="property">page</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>기존에 있던 news 객체에 새로운 news 객체를 스프레드 문법으로 추가해줘야하는데, 추가해줄 때, <strong>기존의 값을 스프레드 문법으로 풀어준 뒤 새로운 객체를 추가해줘야지 아니면 새로운 값만 할당된다.</strong></li>
</ul>
<h1 id="9-CBD"><a href="#9-CBD" class="headerlink" title="9. CBD"></a>9. CBD</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">$container</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$container</span> = $container;</span><br><span class="line">    observer.<span class="title function_">subscribe</span>(<span class="variable language_">this</span>.<span class="property">render</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>this.render는 handler 내부에 있는 함수이름으로 호출하면 이는 일반함수로 호출되므로 this가 전역객체에 바인딩된다. 그래서 this가 불일치하는 현상이 발생한다. 이 때 bind 메서드를 사용하여 Component로 this를 바인딩한 새로운 함수를 전달해주므로 this를 일치시켜준다.</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><ul>
<li>객체의 깊이가 길어지고 대괄호 표기법과 마침표 표기법 사용시점을 확실히 알지 못한다.</li>
<li>구조분해 해줄 수 있는 것들은 구조분해 해줘서 간단하게 작성하자.</li>
<li>클래스 new 연산자로 생성했을 때, 인스턴스의 구조가 어떤지 모른다. + super()</li>
<li>8번 옵저버 패턴 구조 설명을 제대로 못한다.</li>
<li>$container를 잘못이해하고있다. 클래스 구조에서 받은 $container 매개변수를 컴포넌트로 단위로 구성할 것이다. InnerHTML과 혼동하고 있다. 컴포넌트로 사용할 컨테이너를 매개변수로 받는다.</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>observer</tag>
        <tag>CBD</tag>
      </tags>
  </entry>
  <entry>
    <title>sidebar, tictactoe, acordion Tip</title>
    <url>/2022/09/27/PairProgramming/level%202/sidebar,%20tictactoe,%20acordion%20Tip/</url>
    <content><![CDATA[<h1 id="1-ToggleSideNav"><a href="#1-ToggleSideNav" class="headerlink" title="1. ToggleSideNav"></a>1. ToggleSideNav</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isOpen = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">local</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isOpen&quot;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">local</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isOpen&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>접근자 프로퍼티 사용하면 함수를 사용하지 않아도 응집도를 높힐 수 있다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isOpen.<span class="property">local</span> === <span class="literal">null</span>) isOpen.<span class="property">local</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  $nav.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;active&quot;</span>, isOpen.<span class="property">local</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&quot;visible&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;preload&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>DOMContentLoaded 에서 CSS 속성을 설정해준 뒤 load 이벤트가 발생했을 때, body의 preload 클래스를 제거해줘야 요구사항대로 깜빡임 없이 작동한다. 왜냐하면 preload 클래스가 있으면 모든 자식요소의 transition 이벤트가 무효화된다.</li>
</ul>
<h1 id="2-tictactoe"><a href="#2-tictactoe" class="headerlink" title="2. tictactoe"></a>2. tictactoe</h1><ul>
<li>즉시실행함수로 클로저를 구현한다. ⇒ 정보은닉가능, 응집도 높이고, 관심사 분리</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  <span class="attr">a</span>: [],</span><br><span class="line">  <span class="attr">b</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 승자를 가려내는 로직</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(people).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">  winning.<span class="title function_">some</span>(<span class="function">(<span class="params">w</span>) =&gt;</span></span><br><span class="line">    w.<span class="title function_">every</span>(<span class="function">(<span class="params">v, index</span>) =&gt;</span> v === value.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)[index])</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 승자를 가려내는 함수</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getWinner</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> winning = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; winning.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = winning[i];</span><br><span class="line">    <span class="keyword">if</span> (items[a] &amp;&amp; items[a] === items[b] &amp;&amp; items[a] === items[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> items[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>people 객체 안에서 플레이어가 선택한 요소를 배열로 관리하니깐 depth가 깊어져서 가독성도 떨어지고 유지보수가 좋지 않다.<ul>
<li>요소를 클릭할 때 마다 getWinner() 함수 조건문을 판단한다. 그래서 items 배열에 0번째 인덱스부터 차례대로 player “O” or “X”가 삽입된다. 그런 다음에 승리의 경우의 수를 담은 winning 2차원 배열을 순회하면서 items 배열이 winning 배열과 같은지 비교해주고 있다.<br>예를 들면, 처음에 X가 시작하면 X가 누른 요소의 data-id가 items의 index에 ‘X’가 할당되고 그 다음 ‘O’가 누른 요소의 data-id가 items의 index에 ‘O’가 할당된다. 그 때마다 반복문 돌면서 items 배열에 winning 배열의 인덱스에 모두 같은 player가 있는지 확인하여 승리 여부를 확인한다.</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩터링 전</span></span><br><span class="line"><span class="keyword">let</span> current = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  <span class="attr">O</span>: [],</span><br><span class="line">  <span class="attr">X</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> isWin = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> winner = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">player</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">  <span class="attr">people</span>: &#123;</span><br><span class="line">    <span class="attr">O</span>: [],</span><br><span class="line">    <span class="attr">X</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">isWin</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> winning = [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">      [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">      [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">      [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">      [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">      [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getCombinations</span>(<span class="variable language_">this</span>.<span class="property">people</span>[<span class="variable language_">this</span>.<span class="property">player</span>], <span class="number">3</span>).<span class="title function_">some</span>(<span class="function"><span class="params">c</span> =&gt;</span> winning.<span class="title function_">some</span>(<span class="function"><span class="params">w</span> =&gt;</span> w.<span class="title function_">every</span>(<span class="function">(<span class="params">v, index</span>) =&gt;</span> v === c.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)[index])));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">winner</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isWin</span> ? <span class="variable language_">this</span>.<span class="property">player</span> : <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">people</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, c</span>) =&gt;</span> a + c.<span class="property">length</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번째 리팩터링 후</span></span><br><span class="line"><span class="keyword">let</span> player = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> items = <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getWinner</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPlayer</span> = nextPlayer =&gt; &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>관리해야할 상태가 많아지면 부수효과 발생할 가능성이 높아지므로, 상태 최소화를 해주었다.<ul>
<li>리팩터링 후 상태값은 줄고 접근자 프로퍼티를 사용하여 로직의 기준을 설정해주었다. 함수를 사용하는 것 대신 접근자 프로퍼티를 쓰게되면 매개변수에 대한 고민이 줄어들어 사용하였다.</li>
<li>하지만 접근자 프로퍼티를 사용하기 위해서는 데이터를 객체안에서 보관해야 하고 그에 따라 접근 방식이 마침표 표기법과 대괄호 표기법으로 depth가 길어져 가독성이 떨어지는 것을 느꼈고 굳이 state로 관리해줄 필요가 없다고 판단하여 state를 제거하여 변수로 나타내고 접근자 프로퍼티는 함수로 나타내었다.</li>
</ul>
</li>
</ul>
<h1 id="3-Acordion"><a href="#3-Acordion" class="headerlink" title="3. Acordion"></a>3. Acordion</h1><ul>
<li>$container &#x3D; document.querySelector(’.acordian1’) 이다. querySelector가 꼭 document, window에만 붙을 수 있는 것이 아니라 node에 사용 가능한 메서드이다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 리팩터링 전</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getHeight</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> $item = $container.<span class="title function_">querySelector</span>(<span class="string">&quot;.active &gt; ul &gt; li&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> height = <span class="title function_">getComputedStyle</span>($item).<span class="title function_">getPropertyValue</span>(<span class="string">&quot;height&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> count = e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.active&quot;</span>).<span class="title function_">querySelector</span>(<span class="string">&quot;ul &gt; li&quot;</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> +height.<span class="title function_">replace</span>(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>) * count + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩터링 후</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getHeight</span> = (<span class="params">$article = $container.querySelector(<span class="string">&quot;article&quot;</span>)</span>) =&gt;</span><br><span class="line">  $article.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>).<span class="property">scrollHeight</span> + <span class="string">&quot;px&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>ul 요소의 scrollHeight 값을 구하면 overflow : hidden 처리된 요소까지 포함한 높이를 구할 수 있으므로 간결하게 사용할 수 있다.</li>
</ul>
<h1 id="오늘-배운-점"><a href="#오늘-배운-점" class="headerlink" title="오늘 배운 점"></a>오늘 배운 점</h1><ol>
<li>접근자 프로퍼티를 사용하여 객체의 응집도를 높이고 가독성을 키울 수 있다는 것을 배웠다.</li>
<li>Array.fill() vs Array.from() 의 차이를 알게 되었다.</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value[, start[, end]])</span><br><span class="line"></span><br><span class="line"><span class="comment">// EX)</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">fill</span>(<span class="number">4</span>);               <span class="comment">// [4, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">fill</span>(<span class="number">4</span>, <span class="number">1</span>);            <span class="comment">// [1, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">fill</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>);         <span class="comment">// [1, 4, 3]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Array.fill()은 ()안의 요소를 배열에 시작부터 끝 인덱스까지 채운다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike[, mapFn[, thisArg]])</span><br><span class="line"></span><br><span class="line">mapFn : 배열의 모든 요소에 대해 호출할 맵핑 함수</span><br><span class="line"></span><br><span class="line"><span class="comment">// EX)</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Array.from()은 배열로 변환하고자 하는 유사배열 객체 또는 Iterable 객체를 얕게 복사하여 새로운 Array 객체를 만든다.</li>
<li>주로 이중배열을 작성할 때 사용한다.</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>tictactoe, drag 이벤트 Tip</title>
    <url>/2022/10/02/PairProgramming/level%202/tictactoe,%20drag%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20Tip/</url>
    <content><![CDATA[<h1 id="2-tictactoe"><a href="#2-tictactoe" class="headerlink" title="2. tictactoe"></a>2. tictactoe</h1><ol>
<li>재렌더링 일어나는 부부은 game-status, game-grid-items 이 부분만 인데, innerHTML로 game 안을 전부 변경하려고 하니 재렌더링 필요 없는 부분인 game-reset 까지 재렌더링 해줘야하는 문제가 생겼다.<ol>
<li>일단은 재렌더링 일어나도록 구현하였다.</li>
</ol>
</li>
<li>isOver라는 상태를 두는 것이 맞는지? 이벤트 핸들러 안에서 isOver 값을 가지고 얼리리턴으로 더이상 게임을 못하게 막는것이 맞는지…<ol>
<li>일단 위와같이 하였다.</li>
</ol>
</li>
</ol>
<h1 id="4-drag"><a href="#4-drag" class="headerlink" title="4. drag"></a>4. drag</h1><ol>
<li>swapLang 할 때, 왜 새로운 변수에다가 langs 값을 복사해서 다루는 것인가?<ol>
<li>lang을 변경할 수 있는 역할을 하는 함수가 setLang 함수이기 때문에 lang 데이터 변경은 반드시 setLang 함수로만 해야하기 때문이다.</li>
</ol>
</li>
<li>render에서 lang 변수를 받는 이유는 ??<ol>
<li>함수를 순수함수로 만들어주기 위함이다. 매개변수로 받은 인자를 가지고만 코드를 실행하도록 짜서 순수함수가 되도록 한다.</li>
</ol>
</li>
<li>dragenter 이벤트로 드롭할 요소로 드래그 했을 때, p태그, i태그 등 div안의 다른 요소에 드래그한 체로 이동하면 dragleave이벤트랑 겹침 현상이 발생하여 이를 해결하기 위해서는 얼리 리턴으로 조건을 달아줘야하는데, 복잡한 구조로 되어있는 경우 매우 어려워진다. 그러므로 dragover를 사용하여 이벤트가 많이 발생하는 것은 디바운스로 해결해주자.</li>
</ol>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>혼자서 짜보려고 하니 같이 짜는 것보다 스스로 생각해보고 문제를 해결해나가는 능력이 길러진 것 같다. 같이 짜면 상대방에게 의존할 수 있는 경우가 있는데 혼자서는 그런 것 없이 혼자 다 이겨내야하므로 어렵지만 더 기억에 오래 남을 것 같다. 앞으로도 내가 직접 해본것이 아니라면 반드시 내 손으로 다시 직접 해보면서 해결방안을 직접 터득하면서 나아가야겠다.</p>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>trello Tip</title>
    <url>/2022/10/04/PairProgramming/level%202/trello%20Tip/</url>
    <content><![CDATA[<h1 id="1-trello-상태관리"><a href="#1-trello-상태관리" class="headerlink" title="1. trello 상태관리"></a>1. trello 상태관리</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">lists</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;Frameworks&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&quot;OS&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">cards</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&quot;React&quot;</span>,</span><br><span class="line">      <span class="attr">boardId</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">      <span class="attr">boardId</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">      <span class="attr">boardId</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&quot;MacOS&quot;</span>,</span><br><span class="line">      <span class="attr">boardId</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>처음에는 위와 같은 방식으로 상태를 관리해주려 하였다.trello cards를 드래그하여 다른 list로 옮겼을 경우도 있기 때문에, trello list에 cards가 종속되어 있지 않다고 생각했기 때문이다.</p>
</li>
<li><p>하지만 리스트 내의 cards가 순서대로 등록되기 때문에 list 별로 cards를 배열로 관리하는 것이 좋다고 판단하여 다음과 같이 상태를 변경해주었다.</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">listOriginId</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">isListMakerOpen</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">lists</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Frameworks&quot;</span>,</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">cards</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;React&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;OS&quot;</span>,</span><br><span class="line">      <span class="attr">isOpen</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">cards</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;MacOS&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>추가로 렌더링에 영향을 끼치는 데이터는 모두 상태로 관리해주는 것이 DOM API를 적게 사용하고 동적 HTML에 선언적으로 style을 주거나 데이터를 바인딩해줄 수 있어 훨씬 가독성이 높아진다.</li>
</ul>
<p>때문에, <strong>DOM API 사용을 자제하고 만약 DOM API를 사용해야 하는 경우라면 꼭 한번 고민해보고 사용</strong>하도록 하자.</p>
<h1 id="2-diff-알고리즘은-프로퍼티까지-비교해줘야한다"><a href="#2-diff-알고리즘은-프로퍼티까지-비교해줘야한다" class="headerlink" title="2. diff 알고리즘은 프로퍼티까지 비교해줘야한다."></a>2. diff 알고리즘은 프로퍼티까지 비교해줘야한다.</h1><p>이전에 diff 알고리즘을 구현하였을 때, attribute 값만 서로 비교해주고 property 값은 비교해주지 않았다. textarea의 value 값을 빈값으로 바꿔주고 싶어서 이를 상태로 관리해야하나? 생각이 들어 상태로 관리해보려했다.</p>
<p>하지만, textarea의 attribute인 value는 처음부터 빈값이였고 input 이벤트가 발생하고 이 때의 value값(property 값)을 상태에 등록해주더라도 diff 알고리즘이 attribute만 비교해주기 때문에 처음과 input이벤트 발생한 후의 textarea는 변한게 없는 것으로 간주하였다.</p>
<p>그러므로 diff 알고리즘에서 property까지 비교하여 바뀐 부분이 렌더링 되도록 알고리즘을 개선해주었다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// property 비교 추가</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">diff</span> = (<span class="params">$new, $old</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newNodes = [...$new.<span class="property">childNodes</span>];</span><br><span class="line">  <span class="keyword">const</span> oldNodes = [...$old.<span class="property">childNodes</span>];</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  newNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">$n, i</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 원래는 프로퍼티를 전부 비교해줘야하지만, 사정상 value, checked만 확인해주겠다.</span></span><br><span class="line">    <span class="keyword">const</span> $o = oldNodes[i];</span><br><span class="line">    <span class="keyword">if</span> ($n.<span class="property">value</span> !== $o.<span class="property">value</span>) &#123;</span><br><span class="line">      $o.<span class="property">value</span> = $n.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($n.<span class="property">checked</span> !== $o.<span class="property">checked</span>) &#123;</span><br><span class="line">      $o.<span class="property">checked</span> = $n.<span class="property">checked</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>그 결과 textarea가 변경될 때마다 textarea의 value property가 변경되므로 재렌더링이 발생하므로 요구사항에 맞게 구현할 수 있다.</li>
</ul>
<h1 id="3-drag-amp-drop-기능-완벽하게-이해하기"><a href="#3-drag-amp-drop-기능-완벽하게-이해하기" class="headerlink" title="3. drag &amp; drop 기능 완벽하게 이해하기"></a>3. drag &amp; drop 기능 완벽하게 이해하기</h1><p>요구사항에서 drag한 list를 드래그 한체로 다른 list 위로 올렸을 때, 상태가 변경되지 않고 DOM을 직접 변경하여 list가 서로 swap 되도록 하고 drop한 이후에 state를 변경하라고 적혀있다.</p>
<p>각자의 이벤트 핸들러는 서로의 event target을 알 수 없으므로 상태로 관리해줘야만 한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">listOriginId</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">targetId</span>:<span class="literal">null</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragstart&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">listOriginId</span> = <span class="string">&quot;drag 시작한 list의 id&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragenter&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">targetId</span> = <span class="string">&quot;dragenter 발생한 list의 id&quot;</span></span><br><span class="line">  <span class="title function_">swapList</span>(e.<span class="property">target</span>.<span class="property">id</span>) <span class="comment">// DOM 직접 변경하여 dragstart 이벤트 발생한 노드와 dragenter 이벤트 발생한 노드를 변경</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragend&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setState</span>(&#123;...&#125;) <span class="comment">// listOriginId, targetId를 가지고 lists의 배열 요소 위치를 서로 바꿔준다.</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// drop 이벤트 발생시키기 위해서 dragover 이벤트 핸들러에 e.preventDefault()</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragover&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>사실 drop 이벤트를 발생시키기 위해서 dragover 이벤트에서 e.preventDefault()를 호출하였는데, drop 이벤트를 사용하지 않아도 구현이 가능하여서 제거해도 될까 했지만, 제거하게 되면 dragend가 발생했을 때, dragstart한 요소가 제자리로 돌아오는 트랜지션(?)이 제거되지 않으므로 남겨두었다.</p>
</li>
<li><p>drop 이벤트를 사용하지 않은 이유는 drop 이벤트는 draggable인 요소에서만 drop 이벤트가 발생한다. 즉, dragenter로 새로운 list랑 이전 list의 DOM을 변경해주었는데, drop을 list 요소 바깥에서 발생시키면 drop 이벤트가 발생하지 않는 문제점이 있어서 drop 이벤트 대신에 dragend 이벤트를 사용하였다.</p>
</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><ul>
<li><p>if문은 어렵다. input 값이 빈칸일 때, a조건 또는 b조건 만족해야지 실행하는 예제를 한줄로 줄여보려 했지만 복잡해서 일단 따로 사용했다.</p>
</li>
<li><p>state는 객체이고 그 안에 여러 상태 데이터를 관리하는데, lists를 배열로 관리해주고 있고, lists 배열의 요소를 list라고 한다면 list는 객체로 관리되고 list 안에 또 cards라는 배열이 있고 cards 배열의 요소는 card라는 객체이다. 이런 복잡한 구조의 state를 가지고 고차함수를 사용하는데 어려움이 있었다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>페어프로그래밍 level 2 기술적 회고</title>
    <url>/2022/10/06/PairProgramming/level%202/%ED%8E%98%EC%96%B4%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20level%202%20%EA%B8%B0%EC%88%A0%EC%A0%81%20%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="1-scrollSide"><a href="#1-scrollSide" class="headerlink" title="1. scrollSide"></a>1. scrollSide</h1><h2 id="불필요한-서버-요청을-최소화-하자"><a href="#불필요한-서버-요청을-최소화-하자" class="headerlink" title="불필요한 서버 요청을 최소화 하자."></a>불필요한 서버 요청을 최소화 하자.</h2><ul>
<li>토글이 될 때마다 로컬스토리지에 저장되는 것은 서버에 불필요한 요청이므로 사용자가 브라우저를 종료할 때, 로컬에 저장되도록 한다. 이와 마찬가지로 서버에 데이터를 가져올 때도 가져온 데이터를 변수에 담아서 그 변수를 사용한다.<ul>
<li><span style='color:red'>서버에 요청을 최소화하자!</span></li>
<li>서버 요청을 최소화하기 위해 localStorage에서 값을 가져올 때는 DOMContentLoaded 이벤트가 발생할 때 가져온다.</li>
<li>localStorage에 값을 저장할 때는 페이지를 나가거나 새로고침했을 때 발생하면 되므로 <code>beforeunload 이벤트 핸들러</code>를 사용하였다.</li>
</ul>
</li>
</ul>
<h1 id="2-tictactoe"><a href="#2-tictactoe" class="headerlink" title="2. tictactoe"></a>2. tictactoe</h1><h2 id="얕은-복사를-하게-되면-접근자-프로퍼티가-제대로-복사되지-않는다"><a href="#얕은-복사를-하게-되면-접근자-프로퍼티가-제대로-복사되지-않는다" class="headerlink" title="얕은 복사를 하게 되면 접근자 프로퍼티가 제대로 복사되지 않는다."></a>얕은 복사를 하게 되면 접근자 프로퍼티가 제대로 복사되지 않는다.</h2><ul>
<li><p>getWinner 함수는 상태값을 가지고 winner가 있는지? 있다면 누구인지를 반환해준다. state에서만 사용되는 함수이므로 접근자 프로퍼티로 사용하여 응집도를 높이는 것이 좋다고 판단하였다.</p>
<ul>
<li>하지만, setState에서 newState로 재할당이 이루어지면서 접근자 프로퍼티가 제대로 복사되지 않는 문제가 발생하였기 때문에 다시 원래대로 돌려놓았다.</li>
<li>아니면 재할당을 할 때, 접근자 프로퍼티를 제외한 즉, key,value 쌍이 있는 값만 재할당을 해주는 방법도 있다.</li>
</ul>
</li>
<li><p>즉시실행함수로 감싸서 정보은닉을 하려고 하였지만 정보 은닉만을 위해서 tictactoe를 전부 즉시실행함수로 만드는 것은 어색하다. 왜냐하면 즉시실행함수가 root 컨테이너를 참조하고 있기 때문에 독립적이라고 할 수 없는데 응집시켜놓은 것으로 보여지기 때문이다.</p>
<ul>
<li>tictactoe에 Container를 건네주고 컴포넌트로 만들었다.</li>
</ul>
</li>
</ul>
<h1 id="3-accordion"><a href="#3-accordion" class="headerlink" title="3. accordion"></a>3. accordion</h1><ul>
<li>toggle 함수에서 옵션을 주는 경우와 기본값인 경우를 리팩토링으로 나눠보려고 하였는데 더 나은 방법이 떠오르지 않아 그냥 두었다.</li>
</ul>
<h1 id="4-drag-amp-drop"><a href="#4-drag-amp-drop" class="headerlink" title="4. drag &amp; drop"></a>4. drag &amp; drop</h1><ul>
<li>dragleave 이벤트와 dragenter 이벤트가 거의 동시에 발생하는데, draggable 요소의 자식 요소에 마우스 포인터가 될 때도 두 이벤트가 발생하여 over 클래스가 붙혔다 떨어져 깜빡이는 현상 발생<ul>
<li>dragleave 이벤트를 제거하고 dragenter 이벤트에 toggle을 달아주어 <code>querySelectorAll(’li’)</code>로 개선하였다.</li>
<li>dropzone 바깥에서 drop을했을 때 over 클래스가 제거되지 않는 문제가 발생하였는데 dragleave 이벤트를 제거했기 때문이다. dragend 이벤트로 대신 구현하였다.</li>
<li>dragleave 와 dragenter 발생시 toggle 메서드로 달아주는 방법도 있다.</li>
</ul>
</li>
</ul>
<h1 id="5-analog-clock"><a href="#5-analog-clock" class="headerlink" title="5. analog clock"></a>5. analog clock</h1><ul>
<li>숫자배열 하드 코딩하는 것 보다 array.from 을 사용하면 각 요소에게 콜백함수를 줘서 map 함수 사용을 제거할 수 있다.</li>
<li>timeToDeg 함수의 return 값을 객체형태로 바꿈<ul>
<li>인자가 많아지면서, 구조분해 할당 할 시 더 안정적임</li>
</ul>
</li>
</ul>
<h1 id="6-star-rating"><a href="#6-star-rating" class="headerlink" title="6. star rating"></a>6. star rating</h1><ul>
<li>querySelectorAll을 변수에 미리 담아줌<ul>
<li>렌더링이 한번만 되고 이벤트 발생시마다 DOM API를 호출할 필요가 없기 때문</li>
</ul>
</li>
<li>array.from 콜백처리하여 map을 제거</li>
</ul>
<h1 id="7-calendar"><a href="#7-calendar" class="headerlink" title="7. calendar"></a>7. calendar</h1><ul>
<li>background 클릭시 모든 캘린더를 hidden 하는 역할은 input이나 calendar에 종속된 역할이 아님</li>
<li>상태들을 state 객체로 묶어서 관리<ul>
<li>state 변경 함수를 거치지 않고 수정하는등의 부수효과를 막기위해</li>
</ul>
</li>
<li>이벤트 핸들러 내의 내용을 함수로 추출함<ul>
<li>이벤트 핸들러는 간단히 흐름을 파악할 수 있게 해주고, 자세한 동작은 함수에 정의하는 것이 가독성이 좋다고 생각함.</li>
</ul>
</li>
</ul>
<h1 id="8-newsviewer"><a href="#8-newsviewer" class="headerlink" title="8. newsviewer"></a>8. newsviewer</h1><ul>
<li>viewport를 줄여서 observer-target이 한 화면에 보이면 intersectionObserver API에 문제를 발생한다. scrolling해도 데이터를 가져오지 못한다.<ul>
<li>뷰포트 크기를 계산하여 <code>window.innerHeight</code>와 observer-target의 Y를 계산하여 나눈 값만큼 데이터를 fetch 시켜줘서 화면 비율이 크든 작든 뷰포트에 맞게 데이터를 가져와야한다. 즉, viewport가 확대된 상태면 <code>Math.floor(window.innerHeight / observer-tagetY)</code> 갯수만큼 fetch를 시켜줘서 화면크기에 맞게 초기 렌더링을 해줘야 한다.</li>
<li><code>element.getBoundingClientRect()</code> 로 element의 뷰포트 위치를 구할 수 있다.</li>
</ul>
</li>
</ul>
<h1 id="나의-부족한-점"><a href="#나의-부족한-점" class="headerlink" title="나의 부족한 점"></a>나의 부족한 점</h1><ul>
<li>어떤 문제가 발생했을 때, 문제의 원인을 찾지 못한다.<ul>
<li>해당 문제가 발생한 원인을 제대로 알지 못하여 어떤 부분을 수정해야할지 찾기 어렵다.</li>
</ul>
</li>
<li>가치판단이 잘 서지 않는다. A, B가 있을 때 어떤 방법이 더 나은 것인지 선택하기 어렵다. 기준이 나의 생각이라고는 하는데, 남의 얘기를 들어보면 그것도 맞는 것 같다.</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>내일이면 페어프로그래밍2도 끝난다. 페어1을 할 때보단 그래도 조금 실력이 늘었다고 생각하지만, 아직 전체적인 틀을 생각하는 연습이 필요하다고 생각했다. 또한, 주어진 요구사항에 맞는 한가지일을 구현하려고 하지 않고 다른 환경까지 고려하는 행동때문에 코드 작성하기를 망설이는 행동도 조금 나아져서 다행이다.</p>
<p>나보다 훨씬 잘하는 짝과 함께 해서 진도도 빠르게 나가고 배운 것이 많아서 좋았다. 서로 의견을 편하게 말하면서 코딩을 하다보니 재미도 경험도 더 많이 쌓을 수 있어서 좋은 경험이라고 생각한다. 다만 내가 새로운 지식을 얻기 위해서는 내가 가진 지식을 100% 이해하고 다른 사람에게 설명할 수 있을 정도로 알고 있어야 하므로, 내가 배운 지식을 기록만 하지말고 최대한 다른 사람과 의견을 공유하는 방향으로도 나가봐야겠다고 생각이 들었다.</p>
<p>나중에 회사에 취업하게 되어도 이런 개발 환경이 갖춰진 회사에서 열심히 배워서 역량을 키워보고 싶다!</p>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>페어프로그래밍 level 2 회고</title>
    <url>/2022/10/07/PairProgramming/level%202/%ED%8E%98%EC%96%B4%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20level%202%20%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="페어프로그래밍-2-최종-회고"><a href="#페어프로그래밍-2-최종-회고" class="headerlink" title="페어프로그래밍 2 최종 회고"></a>페어프로그래밍 2 최종 회고</h1><h2 id="코드의-가독성"><a href="#코드의-가독성" class="headerlink" title="코드의 가독성"></a>코드의 가독성</h2><ul>
<li><p>코드가 간단하거나 짧다고 가독성이 무조건 좋은 것은 아니다. 중복되는 코드가 있더라도 가독성이 좋을 수 있다.</p>
</li>
<li><p>클린 코드란 것은 없다. 다만 좋은 코드란, 맥락을 모르는 다른 사람이 쉽게 읽을 수 있도록 코드를 작성하는 것이 중요하다.</p>
</li>
<li><p>가독성이 좋아지려면 <strong>같은 역할을 하는 것들 끼리 모아두는 것이 가독성을 높인다.</strong></p>
</li>
<li><p>현업에 가게되면 지금처럼 코드에 대한 퀄리티를 생각할 여건이 조성되지 않을 수 있다. 그러니 지금부터라도 좋은 습관을 가지는 것이 중요하다.</p>
</li>
</ul>
<h2 id="큰-일을-해결하면-작은-일은-알아서-해결되리라"><a href="#큰-일을-해결하면-작은-일은-알아서-해결되리라" class="headerlink" title="큰 일을 해결하면 작은 일은 알아서 해결되리라"></a>큰 일을 해결하면 작은 일은 알아서 해결되리라</h2><ul>
<li><p>작은 부분에 몰두하여 그것을 해결하려 하지 말고 요구사항을 보고 큰 부분부터 해결해나가자.</p>
</li>
<li><p>전체의 구조를 한곳에서 모아서 생각하지 말고 각자의 역할을 생각하며 코딩을 하자.</p>
</li>
</ul>
<p>ex) 데이터를 변경하면 setState 함수가 실행된다 -&gt; setState 함수가 실행되면 render가 실행된다….</p>
<h2 id="Test의-중요성"><a href="#Test의-중요성" class="headerlink" title="Test의 중요성"></a>Test의 중요성</h2><ul>
<li><p>리팩터링을 할 때는 test를 꼭 같이 하면서 진행해야한다.</p>
</li>
<li><p>리액트를 배우고 나면 꼭 같이 배워보자!</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Pair Programming</category>
        <category>level 2</category>
      </categories>
  </entry>
  <entry>
    <title>CBD 구조 이벤트 등록 문제, JWT, .env</title>
    <url>/2022/10/14/Project/holymoly/CBD%20%EA%B5%AC%EC%A1%B0%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EB%93%B1%EB%A1%9D%20%EB%AC%B8%EC%A0%9C,%20JWT,%20.env/</url>
    <content><![CDATA[<h1 id="1-CBD-구조의-이벤트-등록-문제"><a href="#1-CBD-구조의-이벤트-등록-문제" class="headerlink" title="1. CBD 구조의 이벤트 등록 문제"></a>1. CBD 구조의 이벤트 등록 문제</h1><p>현재 CBD의 구조 상 이벤트를 component를 호출할 때마다 이벤트 목록을 확인하여 이미 등록된 이벤트는 중복 등록되지 않도록 하고 있다.</p>
<p>그래서 효율적이라고 생각했다. 하지만 하위 컴포넌트에서 이벤트를 등록해주고 이벤트 핸들러 안에서 this.prop로 상태를 참조할 때, 이벤트가 등록될 시점을 참조하고 있어서 setState로 전역 상태를 변경시켜줘도 <strong>변경된 state를 이벤트 핸들러 내부에서 참조할 수 없는 문제점이 발생하였다.</strong></p>
<p>이러한 문제점을 해결하기 위해 구조를 바꿔보려는 시도를 하였지만, 프로젝트 시간 상 이는 감당하기 어려워 포기하였다.</p>
<h2 id="컴포넌트-호출-시마다-이벤트-제거와-새로-등록"><a href="#컴포넌트-호출-시마다-이벤트-제거와-새로-등록" class="headerlink" title="컴포넌트 호출 시마다 이벤트 제거와 새로 등록"></a>컴포넌트 호출 시마다 이벤트 제거와 새로 등록</h2><p>위 문제를 해결하기 위한 방법으로 컴포넌트를 호출할 때마다 등록된 이벤트를 제거하고 새로 이벤트를 등록하는 방법이 있다.</p>
<p>하지만 이벤트 핸들러를 **익명함수(() &#x3D;&gt; {})**를 통해 등록해주고 있었기 때문에 이를 전부 기명함수로 변경해줘야지만 <code>removeEventListener()</code> 메서드를 사용하여 등록된 이벤트를 제거할 수 있었다.</p>
<p>하지만, 기명함수로 바꿔서 <code>addEventListener()</code> 메서드로 등록을 해줘도 제대로 동작하지 않았고 이부분에서 많은 시간을 할애하였다. 지금 내가 해결하려는 문제가 작은 부분에 몰두해있는 것 같고 시간이 부족하여 방법을 바꾸기로 하였다.</p>
<p>그래서 현 구조에서 하위 컴포넌트의 상태를 관리해주기 위해 <strong>App 컴포넌트에 상태를 등록하여 전역 상태로 관리해주기로 결정</strong>하였다.</p>
<h2 id="전역-상태로-하위-컴포넌트-상태-관리"><a href="#전역-상태로-하위-컴포넌트-상태-관리" class="headerlink" title="전역 상태로 하위 컴포넌트 상태 관리"></a>전역 상태로 하위 컴포넌트 상태 관리</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> openCard = [];</span><br><span class="line"><span class="keyword">let</span> matchedCard = [];</span><br><span class="line"><span class="keyword">let</span> isStarted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> convertedTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchingCards</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">        <span class="attr">selector</span>: <span class="string">&quot;.start-button&quot;</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">start</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">        <span class="attr">selector</span>: <span class="string">&quot;.card-front&quot;</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (openCard.<span class="property">length</span> === <span class="number">2</span> || !isStarted) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">checkCard</span>(+e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.cards&quot;</span>).<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">          <span class="keyword">if</span> (openCard.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">shuffledNum</span>[openCard[<span class="number">0</span>] - <span class="number">1</span>] ===</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">shuffledNum</span>[openCard[<span class="number">1</span>] - <span class="number">1</span>]</span><br><span class="line">            ) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HOLYMOLY&quot;</span>);</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">matchCard</span>(openCard);</span><br><span class="line">              matchedCard = [...matchedCard, ...openCard];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">resetOpenedCard</span>();</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">        <span class="attr">selector</span>: <span class="string">&quot;.reset-button&quot;</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          openCard = [];</span><br><span class="line">          matchedCard = [];</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">resetGame</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">domStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    openCard = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">openCard</span>;</span><br><span class="line">    isStarted = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">isStarted</span>;</span><br><span class="line">    convertedTime = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">convertedTime</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h1 class=&quot;game-title&quot;&gt;MATCHING CARDS&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;card-container&quot;&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="variable language_">this</span>.props.shuffledNum</span></span></span><br><span class="line"><span class="subst"><span class="string">          .map(</span></span></span><br><span class="line"><span class="subst"><span class="string">            (num, index) =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">          &lt;div class=&quot;cards <span class="subst">$&#123;</span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="subst"><span class="string">            openCard.includes(index + <span class="number">1</span>) || matchedCard.includes(index + <span class="number">1</span>)</span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="subst"><span class="string">              ? <span class="string">&quot;opened&quot;</span></span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="subst"><span class="string">              : <span class="string">&quot;&quot;</span></span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="subst"><span class="string">          &#125;</span>&quot; data-id=&quot;<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            &lt;div class=&quot;card-inner&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              &lt;div class=&quot;card-front&quot;&gt;?&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              &lt;div class=&quot;card-back&quot;&gt;<span class="subst">$&#123;num&#125;</span>&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">          &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">          `</span></span></span></span><br><span class="line"><span class="subst"><span class="string">          )</span></span></span><br><span class="line"><span class="subst"><span class="string">          .join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;result-message <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        matchedCard.length === <span class="number">18</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;hidden&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>&quot;&gt;Congratulations!&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;display&quot;&gt;<span class="subst">$&#123;convertedTime&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;active-button-container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;start-button&quot;&gt;Start&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button class=&quot;reset-button&quot;&gt;RESET&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>전역 상태를 domStr()을 호출할 때 지역 변수에 할당하여 지역 변수를 가지고 이벤트 핸들러 내부에서 로직을 구현하였다.</p>
</li>
<li><p>이로 인한 문제점이 게임의 진행을 위해서는 렌더링을 해주기 위해서는 전역 상태를 setState로 변경해줘야 하고 지역 변수를 변경도 이벤트 핸들러 내부에서 따로 해줘야 하므로 같은 로직을 구현하는 상태를 2번 관리해줘야 하는 불편함이 생겼다.</p>
</li>
<li><p>이는 다음주에 리팩토링이 필요할 것으로 보인다.</p>
</li>
</ul>
<h1 id="2-로그인-기능-및-서버-구현"><a href="#2-로그인-기능-및-서버-구현" class="headerlink" title="2. 로그인 기능 및 서버 구현"></a>2. 로그인 기능 및 서버 구현</h1><h2 id="클라이언트-사이드"><a href="#클라이언트-사이드" class="headerlink" title="클라이언트 사이드"></a>클라이언트 사이드</h2><p>먼저 클라이언트는 로그인 페이지에서 input 값으로 요청을 보낸다. 이 때, 서버에 대한 요청을 <code>e.preventDefault()</code>로 막아주고 payload에다가 input 값을 담아서 axios로 post 요청을 보내주었다.(서버의 응답이 도착할 때 까지 await해주었다.)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Signin.js</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;.signin_info&#x27;</span>,</span><br><span class="line">  <span class="attr">handler</span>: <span class="keyword">async</span> e =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> payload = [...<span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.signin_info&#x27;</span>))].<span class="title function_">reduce</span>(</span><br><span class="line">      <span class="function">(<span class="params">obj, [key, value]</span>) =&gt;</span> ((obj[key] = value), obj),</span><br><span class="line">      &#123;&#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">data</span>: user &#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/signin&#x27;</span>, payload);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😀 LOGIN SUCCESS!&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (user) <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">navigate</span>(<span class="string">&#x27;/&#x27;</span>, user);</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😱 LOGIN FAILURE..&#x27;</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.error&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hidden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// App.js</span></span><br><span class="line"><span class="title function_">navigate</span>(<span class="params">path, user = <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span> === path) <span class="keyword">return</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, path);</span><br><span class="line">  <span class="keyword">if</span> (user) <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; path, user &#125;);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; path &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>서버에서 응답이 오면 navigate 함수에 메인페이지의 path와 응답으로 받은 데이터를 인자로 넘겨주었다. navigate 함수에서는 user가 있으면 user 상태를 변경하여 렌더링을 해주고 user가 없으면 path에 따라서만 라우터 변경과 렌더링을 해준다.</p>
<h2 id="서버-사이드"><a href="#서버-사이드" class="headerlink" title="서버 사이드"></a>서버 사이드</h2><p>서버에서는 해당 url로 post 요청이 왔을 때, 서버의 데이터에 해당 유저의 id, password를 비교하여 존재하는 유저인지 확인하여 JWT 토큰을 발행하여 쿠키에 담고 이 쿠키와 함께 유저의 닉네임을 응답으로 전달해주었다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/signin&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userid, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="comment">// userid 가 없거나, password가 없으면 띄워주는 에러메세지</span></span><br><span class="line">  <span class="keyword">if</span> (!userid || !password)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">      .<span class="title function_">status</span>(<span class="number">401</span>)</span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;사용자 아이디 또는 패스워드가 전달되지 않았습니다.&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// users배열에 userid와 password가 일치하는 user있는지 find 해서 user에 담아준다.</span></span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(</span><br><span class="line">    <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">userid</span> === userid &amp;&amp; user.<span class="property">password</span> === password</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 만약 위 검색에서 user가 담기지 않았다면 띄워주는 에러메세지</span></span><br><span class="line">  <span class="keyword">if</span> (!user)</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;등록되지 않은 사용자입니다.&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 로그인 성공 시 user 가 있다면 jwt 토큰을 발급해서 response의 헤더에 쿠키에 담아서 보내줘야함.</span></span><br><span class="line">  <span class="keyword">const</span> accessToken = jwt.<span class="title function_">sign</span>(&#123; userid &#125;, process.<span class="property">env</span>.<span class="property">JWT_SECRET_KEY</span>, &#123;</span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="string">&quot;1d&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;accessToken&quot;</span>, accessToken, &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>, <span class="comment">// 7d</span></span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(user.<span class="property">nickname</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="JWT-JSON-Web-Token-이란"><a href="#JWT-JSON-Web-Token-이란" class="headerlink" title="JWT(JSON Web Token)이란?"></a>JWT(JSON Web Token)이란?</h3><p>Access token을 이용한 서버 인증 방식 중 하나이다.</p>
<p>서버에 로그인 요청이 오면 사용자를 확인한 다음 JWT을 발행한다. 생성한 토큰을 클라이언트에게 쿠키를 통해 전달해주고 클라이언트는 쿠키에 이 토큰을 저장한다.</p>
<blockquote>
<p>토큰은 암호화되어있고 클라이언트에서는 암호화를 해석한 코드를 가지게 하면 안되며 암호를 해석하는 일은 서버에서만 해야한다.</p>
</blockquote>
<p>이제 토큰이 있는 사용자는 권한이 필요한 요청을 할 때마다 토큰을 header에 실어 서버에 보낸다.</p>
<p>서버는 토큰을 해석하여 로그인한 사용자인지를 판단하여 성공 및 실패 응답을 보내준다.</p>
<h3 id="env-이란"><a href="#env-이란" class="headerlink" title=".env 이란?"></a>.env 이란?</h3><p>.env 파일에는 개발을 하면서 중요한 정보들 특히, DB 관련 정보와 API_KEY 등의 정보를 보관하는 용도의 파일이다.</p>
<p>이러한 파일들은 git에 올리면 안되므로 gitignore를 해줘야한다.</p>
<ul>
<li>사용방법</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install dotenv  //다운로드</span><br><span class="line"></span><br><span class="line">require(&quot;dotenv&quot;).config(); //js 파일 상단에 적어주기</span><br></pre></td></tr></table></figure>

<ul>
<li>.env 파일은 최상위 루트에 생성해야한다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .env</span></span><br><span class="line"><span class="variable constant_">PORT</span> = <span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>이러한 방식으로 사용한다.</li>
</ul>
<h1 id="3-로그인한-유저에게-인가"><a href="#3-로그인한-유저에게-인가" class="headerlink" title="3. 로그인한 유저에게 인가"></a>3. 로그인한 유저에게 인가</h1><p>로그인한 유저는 JWT를 쿠키에 가지고 있으므로 권한이 필요한 요청을 할 때, 즉 로그인한 사용자만 접근 가능한 페이지에 접근 요청을 서버에 보내면 서버는 JWT를 해석하여 로그인한 사용자인지 아닌지를 판단하여 그에 알맞은 응답을 보낸다.</p>
<p>그에 대한 로직은 다음과 같다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">auth</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 토큰이 리퀘스트의 Authorization 헤더를 통해 전달되면 req.headers.authorization으로 전달받고</span></span><br><span class="line"><span class="comment">     * 토큰이 쿠키를 통해 전달되면 req.cookies.accessToken으로 전달받는다.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> accessToken = req.<span class="property">headers</span>.<span class="property">authorization</span> || req.<span class="property">cookies</span>.<span class="property">accessToken</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(accessToken, process.<span class="property">env</span>.<span class="property">JWT_SECRET_KEY</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`😀 사용자 인증 성공`</span>, decoded);</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;😱 사용자 인증 실패..&#x27;</span>, e);</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;등록되지 않은 사용자입니다.&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/rank&#x27;</span>, auth, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;로그인된 사용자입니다.&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>&#x2F;rank url로 요청이 오면 auth 함수를 실행한다.</p>
</li>
<li><p>auth 함수에서는 요청의 header나 쿠키에 권한이나 access token이 있는지를 확인하여 이를 해석하고 로그인 성공 실패 유무를 판단하여 응답을 보내준다.</p>
</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>프로젝트를 시작하기 전에 기술적인 기획이 매우 중요하다는 것을 깨닫게 되었다. 하위 컴포넌트에서 지역 상태를 관리할 수 없을 것이라는 것을 구조를 보고 알 수 있었더라면, 그에 따라 구조를 개선한 후 프로젝트에 임할 수 있었을 텐데 중간에 큰 문제에 봉착하게 되니 머리가 텅 비워지는 상황을 경험하였다. 결국 시간을 고려하여 회피를 하게되는 문제점이 발생하게 되었다.</p>
<p>팀원 중 한명이 몸이 안좋아 2명이서 프로젝트를 진행하게 되었다. 3명이서 같이 나눠서 공부하고 공유하면 더욱 좋았을텐데 이점은 조금 아쉽다. 건강상의 이유로 참여하지 못한 팀원도 안쓰러웠다. 다음주에 쾌유해서 돌아오면 그동안 공부했던 것을 공유해주면서 배웠던 지식을 다시 정리해봐야겠다.</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
      <tags>
        <tag>JWT</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>CBD 기반 라우터 구현</title>
    <url>/2022/10/13/Project/holymoly/CBD%20%EA%B8%B0%EB%B0%98%20%EB%9D%BC%EC%9A%B0%ED%84%B0%20%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<h1 id="1-CBD-기반-라우터-구현"><a href="#1-CBD-기반-라우터-구현" class="headerlink" title="1. CBD 기반 라우터 구현"></a>1. CBD 기반 라우터 구현</h1><p>CBD 라이브러리에서 컴포넌트가 바뀌었을 때, 라우터와 렌더링을 구현해주었다. 각 컴포넌트에서 click 이벤트가 발생하면 그 때의 a 태그의 href 값을 구하여 pushState 메서드로 history를 등록해주고 상태로도 할당해주어 렌더링을 발생시켰다.</p>
<p>즉, signin 클릭해서 click 이벤트 발생하면 history등록, setState로 상태 갱신을 해주었다.</p>
<p>그리고 App 컴포넌트에서는 popstate 이벤트를 등록하여 브라우저의 뒤로가기, 다음 버튼을 클릭했을 때, 해당 path 상태를 window.location.pathname으로 변경시켜줘서 라우터가 변경되면 렌더링 발생하는 기능도 구현하였다.</p>
<p>문제점은 구현을 하다가 작은 부분에서 막혀서 그 작은 부분을 해결하려고 몰두해있었던 점이 문제라고 생각한다. 작은 문제는 근본적인 문제가 아닌 경우가 많은 것 같다. 큰 문제를 해결하면 작은 문제는 알아서 해결될 수 있으니 큰 틀에서 생각하려고 해야겠다.</p>
<h2 id="1-click-이벤트-발생-시-gt-pushState-메서드로-history-관리-setState-메서드로-화면-재렌더링-발생"><a href="#1-click-이벤트-발생-시-gt-pushState-메서드로-history-관리-setState-메서드로-화면-재렌더링-발생" class="headerlink" title="1. click 이벤트 발생 시 -&gt; pushState 메서드로 history 관리 + setState 메서드로 화면 재렌더링 발생"></a>1. click 이벤트 발생 시 -&gt; pushState 메서드로 history 관리 + setState 메서드로 화면 재렌더링 발생</h2><h2 id="2-history-API-사용-시-gt-popstate-이벤트-핸들러-등록하여-setState-메서드로-path-상태를-window-location-pathname로-갱신"><a href="#2-history-API-사용-시-gt-popstate-이벤트-핸들러-등록하여-setState-메서드로-path-상태를-window-location-pathname로-갱신" class="headerlink" title="2. history API 사용 시 -&gt; popstate 이벤트 핸들러 등록하여 setState 메서드로 path 상태를 window.location.pathname로 갱신"></a>2. history API 사용 시 -&gt; popstate 이벤트 핸들러 등록하여 setState 메서드로 path 상태를 window.location.pathname로 갱신</h2><blockquote>
<p>popState 시 navigate() 함수 안에서 pushState() 해주고 있어서 더 이상 history API가 제대로 동작하지 않으므로.. 이를 확인하자.</p>
</blockquote>
<p>위 두가지 로직이 전부이다.</p>
<h1 id="2-MatchingCards-CBD-상태-관리"><a href="#2-MatchingCards-CBD-상태-관리" class="headerlink" title="2. MatchingCards CBD 상태 관리"></a>2. MatchingCards CBD 상태 관리</h1><p>매칭 카드 알고리즘 구현한 것을 CBD 구조에 맞게 상태로 관리해주었다. CBD 구조가 setState로 상태가 변경되서 렌더링 될 때, App 컴포넌트는 한번만 호출되지만, App 컴포넌트에서 다른 컴포넌트를 그려주는 역할을 하는 domStr() 메서드가 반복 호출 되므로, 이 때, 다른 컴포넌트(클래스)가 new 연산자로 호출되므로 컴포넌트가 새롭게 생성되어 지역 컴포넌트의 상태를 관리해주기가 까다로웠다.</p>
<p>이러한 문제를 해결하기 위해서는 CBD 구조를 개편해야만 했다. 하지만 프로젝트 시간동안에는 힘들것 같아서 상태관리를 App에서만 해주기로 하였다.</p>
<p>App 컴포넌트에서 상태를 등록하고 다른 컴포넌트로 보내줄 때, 아래와 같이 전달해준다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="keyword">new</span> <span class="title class_">Page</span>(&#123;</span><br><span class="line">  ...<span class="variable language_">this</span>.<span class="property">state</span>,</span><br><span class="line">  <span class="attr">navigate</span>: <span class="variable language_">this</span>.<span class="property">navigate</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line">  <span class="attr">checkCard</span>: <span class="variable language_">this</span>.<span class="property">checkCard</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line">&#125;).<span class="title function_">domStr</span>()&#125;</span><br></pre></td></tr></table></figure>

<p>상태를 받는 컴포넌트에서는 아래와 같이 props를 통해 받는다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">shuffledNum</span></span><br><span class="line">.<span class="title function_">map</span>(</span><br><span class="line">  <span class="function">(<span class="params">num, index</span>) =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div class=&quot;cards <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="variable language_">this</span>.props.openCard[<span class="number">0</span>] === index + <span class="number">1</span> || <span class="variable language_">this</span>.props.openCard[<span class="number">1</span>] === index + <span class="number">1</span> ? <span class="string">&#x27;opened&#x27;</span> : <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;</span>&quot; data-id=&quot;<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<p>단, props에서 받을 때, 메서드를 받게 된다면 this가 꼬일 수 있기 때문에 bind(this)를 사용하여 this를 일치시켜서 보내줘야 한다.</p>
<blockquote>
<p>만약 함수정의를 보내주는 것이 아닌 함수 호출값을 보내주고 싶다면 call(this, 인자) 이렇게 전달해줄 수 도 있다.</p>
</blockquote>
<h1 id="3-form-형식으로-서버에게-데이터-전송에-대해-알게된-점"><a href="#3-form-형식으로-서버에게-데이터-전송에-대해-알게된-점" class="headerlink" title="3. form 형식으로 서버에게 데이터 전송에 대해 알게된 점"></a>3. form 형식으로 서버에게 데이터 전송에 대해 알게된 점</h1><p>서버는 express를 사용하여 구현하였다.</p>
<p>로그인 기능 구현을 위해 form 형식의 input 값을 서버에 axios를 사용하여 보내주었다.</p>
<p>기본적으로 form 형식은 <code>x-www-form-urlencoded</code> 이런 형식의 데이터로 전달된다. 서버는 이런 데이터를 해석하기 위해 파싱을 <code>express.urlencoded(&#123;extended:true&#125;)</code> 메서드를 사용한다.</p>
<p>하지만 axios를 사용하면 클라이언트에서 데이터 요청을 json 형식으로 서버에 요청하기 때문에 서로 다른 형식으로 주고 받기 때문에 제대로 된 요청과 응답이 먹히지 않게 되었다.</p>
<p>이러한 문제를 해결하기 위해서 서버에서 <code>express.json()</code>메서드를 사용하여 json 형식의 데이터를 받아 파싱해주도록 하였다.</p>
<p>또한, 서버에서 request를 확인해보면 <code>&#39;content-type&#39;: &#39;application/json&#39;</code>인 것을 확인할 수 있었다.</p>
<p>심지어 axios 홈페이지에서도 json으로 직렬화된 데이터로 요청한다고 나와있다!</p>
<p>이런 부분은 눈으로 읽기는 읽었지만 그 배경에 대해 제대로 이해하지 못한 체로 읽었기 때문이다. 이렇게 하나 하나 배워가다 보면 배경지식도 넓게 쌓여서 새로운 지식을 배울 때에도 두려움이 적어질 것 같다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>이전에 라우터를 구현했던 방법은 상태를 관리하지 않고 했었기 때문에 쉬웠고 상태를 관리하면서 라우터를 구현하는 것은 머리가 복잡해지고 의욕이 떨어졌다.. 그래도 동기들에게 물어보면서 이번 기회에 제대로 알게 된 것 같아 기쁘다.</p>
<p>로그인 구현과 서버에 대해 스스로가 두려움을 느끼고 있는 것 같아 더 머리가 안돌아가는 것 같다.</p>
<p>최대한 이번기회에 로그인 회원가입에 대한 로직과 친숙해져서 다음 프로젝트 때에는 막힘없이 도전해보고 싶다!</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
      <tags>
        <tag>historyAPI</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>holymoly 프로젝트 기획단계</title>
    <url>/2022/10/11/Project/holymoly/holymoly%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B8%B0%ED%9A%8D%EB%8B%A8%EA%B3%84/</url>
    <content><![CDATA[<h1 id="오늘-배운-것"><a href="#오늘-배운-것" class="headerlink" title="오늘 배운 것"></a>오늘 배운 것</h1><h1 id="1-git-organization-과-git-flow-전략"><a href="#1-git-organization-과-git-flow-전략" class="headerlink" title="1. git organization 과 git flow 전략"></a>1. git organization 과 git flow 전략</h1><p>git organization을 만들어서 팀원들과 git flow 전략을 사용하기로 결정하였다. git flow 전략에 대해서 한번 수업을 듣고 배운 적이 있었는데 그 때 기록해둔 notion 자료가 유용하였다.</p>
<p>git organization을 만들고 팀원들을 초대하고 이 organization 안에서 repository를 생성하고 clone을 받아서 git flow init을 해주면 main, develop 브랜치가 생성된다.</p>
<ul>
<li><p>main 브랜치는 배포를 위한 브랜치이다.</p>
</li>
<li><p>develop 브랜치는 개발을 위한 브랜치이다. feature를 생성하여 commit 단위 별로 feature 브랜치를 생성하고 삭제하며 작업을 이행하였다.</p>
</li>
</ul>
<p>각 feature에서 commit을 하고 develop 브랜치에 push를 하여 팀원들의 코드를 develop 브랜치에서 합쳐서 헙업을 진행할 수 있었다.</p>
<h1 id="2-노션-칸반-보드"><a href="#2-노션-칸반-보드" class="headerlink" title="2. 노션 칸반 보드"></a>2. 노션 칸반 보드</h1><p>지난 페어프로그래밍때 만든 CBD Library를 사용하여 컴포넌트 단위로 HTML, CSS를 완성하고 나니 갑자기 다음에 무엇을 해야할지 바로 생각이 나질 않았다.</p>
<p>이런 문제점을 해결하기 위해서는 칸반 보드를 작성하여 나와 내 팀원들이 지금 무슨 작업을 하고 있고 현재 작업이 완료되면 어떤 작업을 하게 될지 notion에 정리해두었다.</p>
<p>매일 저녁 9시에는 그날 작업을 하면서 배우거나 느꼈던 점을 서로 공유하는 Daily scrum 시간을 갖고 내일 할일을 정리하는 시간도 가지니 막힘없이 진행할 수 있을 것 같다.</p>
<h1 id="3-기획서-피드백"><a href="#3-기획서-피드백" class="headerlink" title="3. 기획서 피드백"></a>3. 기획서 피드백</h1><p>어제 하루종일 기획서를 작성하기 위해 회의도 오래 하고 figma 시안에 많은 시간을 쏟아부었다. 하지만 오늘 기획서 발표에 대한 피드백은 참담했다…</p>
<p>디자인은 어떻게 하고, 무슨 기능을 구현하고, 어떻게 협업을 진행할지 정하는 것 까진 좋았다. 하지만 제일 중요한 부분이 빠졌다.</p>
<p>바로 이번 프로젝트에서 구현해야할 로그인, 회원가입 기능 구현 방법과 라우터 기능 구현 방법에 대해서 자세하게 정해보지 않았다.</p>
<p><strong>말그대로 빛좋은 개살구가 되는 기획서가 되버린 것이다.</strong> 내가 만약 이런 상태로 회사에 입사하여 기획자라 <strong>이거이거 해주실 수 있나요?</strong> 라는 질문을 받게 된다면, 아마 기능 구현에 대한 방법을 제대로 생각해보지 않고 겉으로 보기에 쉬워보이니 된다고 했을 것 같다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>이번 프로젝트는 포트폴리오일까? 이력서에 제출할 포트폴리오는 매우 신중해야한다. 면접관은 지원자의 포트폴리오를 보고 100%를 다 직접 구현하진 못했더라도 어느정도 자신이 구현하지 않은 부분에서도 이해하고 설명할 수 있을 것이라 생각한다.</p>
<p>이번 프로젝트도 오늘 기획서 발표대로 하게된다면 프로젝트 구현에만 급급해서 프로젝트가 끝나도 아무것도 남는게 없을 것이다…</p>
<p>그러므로 이번 프로젝트의 목표는 팀원들과 실전 프로젝트를 기획부터 개발, 배포까지 경험해보면서 어떤 부분이 어려웠는지를 직접 경험하고 여기에서 배움이 있어야 한다.</p>
<p>남에게 보여질 빛좋은 개살구 같은 프로젝트는 필요없다. 내가 진득하게 이번 프로젝트를 위해 어떤 부분을 배웠고 어떤 부분을 경험하면서 어려워했는지를 하나하나 기록하고 팀원들과 그날 배운 것을 공유하면서 공부하는 것에 초점을 맞춰야겠다.</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>holymoly 프로젝트 첫 회의</title>
    <url>/2022/10/10/Project/holymoly/holymoly%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EC%B2%AB%20%ED%9A%8C%EC%9D%98/</url>
    <content><![CDATA[<h1 id="HolyMoly-프로젝트"><a href="#HolyMoly-프로젝트" class="headerlink" title="HolyMoly 프로젝트"></a>HolyMoly 프로젝트</h1><p>오늘부터 약 2주간 자바스크립트 프로젝트가 시작된다.</p>
<p>그동안 페어프로그래밍을 통해 배운 내용을 실전 프로젝트에 적용해보고, 게임까지 직접 만들어보면서 재미까지 더불어 챙길 수 있는 프로젝트이다.</p>
<p>주요 기능은 로그인과 회원가입 기능을 구현해야하며, 라우터 기능을 구현해야한다.</p>
<p>우리팀은 3명의 팀원으로 구성되어있고 각자 1개의 미니게임을 구현하고 싶어한다.</p>
<h2 id="메인페이지"><a href="#메인페이지" class="headerlink" title="메인페이지"></a>메인페이지</h2><p>메인 페이지에는 캐러셀 기능으로 게임 설명을 보여줄 것이다. 캐러셀 기능은 페어프로그래밍 1 때 기능 구현을 경험해본 바 있다.</p>
<p><strong>그 때, transitionend가 애먹었던 기억이 아직도 잊혀지지 않는다.</strong></p>
<h2 id="로그인-및-회원가입-페이지"><a href="#로그인-및-회원가입-페이지" class="headerlink" title="로그인 및 회원가입 페이지"></a>로그인 및 회원가입 페이지</h2><p>주요 기능인 로그인 및 회원가입 페이지 구현은 페어프로그래밍 1에서 구현해보았다. 하지만 시간이 부족하여 제대로 리팩터링을 경험하지 못한체로 끝냈었다.</p>
<p>이번 기회에 그 때 하지 못한 리팩터링까지 같이 해볼 수 있는 기회가 생긴 것 같다.</p>
<h2 id="미니게임-구현"><a href="#미니게임-구현" class="headerlink" title="미니게임 구현"></a>미니게임 구현</h2><p>내가 구현할 미니게임의 제목은 “Close to Zero” 게임이다.</p>
<p>말 그대로 0에 가장 근접할 때 버튼을 클릭해서 그 숫자가 가장 0에 근접한 사람이 승리하는 게임이다.</p>
<p>게임 구현은 간단할 것 같다. 하지만 이번 프로젝트는 지난 페어프로그래밍 2편 9번 문제에서 CBD Library를 제작한 것을 활용하여 구조를 가져갈 것이기 때문에 컴포넌트에 대한 이해가 필요하다.</p>
<h2 id="라우터-기능-구현"><a href="#라우터-기능-구현" class="headerlink" title="라우터 기능 구현"></a>라우터 기능 구현</h2><p>이번 프로젝트는 앞서 말했듯이 컴포넌트 단위로 HTML 동적으로 생성하는 SPA를 구현할 것이다. SPA는 화면이 전환되어도 URL이 변경되지 않아 SEO에 취약하다는 문제점이 있다.</p>
<p>또한, 이번 프로젝트의 최소 요구사항인 라우터 기능을 구현하기 위해서는 URL이 필요한데, 과연 URL이 없는 SPA에서 어떻게 라우터를 구현할 수 있을까?</p>
<p>그 해답은 컴포넌트와 라우터를 1:1 매핑관계로 두어 URL 뒤의 Path가 변경되면 컴포넌트를 바꿔주면 된다.</p>
<p>이에 대한 자세한 방법은 다음 시간에 알아보자.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>팀원들과 같이 줌으로 회의를 하면서 아이디어도 잘나오고 오늘 회의 열심히 달려서 figma 시안도 완성하여서 뿌듯한 공휴일을 보낸 것 같아 기분이 좋다.</p>
<p>내일부터 다시 또 피터지는 프로젝트 시간이 시작되니 컨디션 조절 잘하고 매일 회고도 잊지 않고 지치지 않고 롱런하고 싶다.</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>holymoly 프로젝트 회고</title>
    <url>/2022/10/20/Project/holymoly/holymoly%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="프로젝트를-마치며…"><a href="#프로젝트를-마치며…" class="headerlink" title="프로젝트를 마치며…"></a>프로젝트를 마치며…</h1><ul>
<li><p>기획을 할 때, 기술적으로 어떻게 풀어나갈지 기술기획을 꼼꼼히 하지 못한 것이 아쉬움</p>
</li>
<li><p>이 때, 기술기획이 제대로 안이루어져서 CBD 라이브러리를 사용하면서 앞으로 겪게될 문제를 개발 과정에 파악하게 되어서 난감하였다. ex) 지역 상태 관리 어려운 점…</p>
</li>
<li><p>노션으로 일정관리와 문서화를 템플릿을 적극 활용하여 일관성있게 해야겠다.</p>
</li>
<li><p>라우터가 App에 종속되어 있는 것이 아니라 render 함수처럼 따로 분리되도록 하고 싶었는데, 그러기 위해서구조를 대폭 수정해야하여 시간적 어려움이 있어 아쉬웠다.</p>
</li>
<li><p>매번 새로운 지식을 얻어감에 즐거움을 느꼈다. 공식문서 읽는 것은 아직 어렵지만, 예제를 따라해보고 이해한 후 공식문서 읽으면 잘 읽히는 것을 알게되었다.</p>
</li>
<li><p>이전 프로젝트 때 했던 실수를 어느정도 개선해나가며 진행할 수 있어서 좋았다. ex) this 바인딩</p>
</li>
<li><p>해결책을 생각해낼 때 과연 이게 진짜 해결책인지, 회피인지 한번 더 생각해보는 안목이 생겼다.</p>
</li>
<li><p>어렵고 막히는 부분이 있을 때 팀원에게 물어보면서 같이 해결해나갈 수 있어 든든하고 즐거웠다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>라우터 구현 (Custom Event)</title>
    <url>/2022/10/12/Project/holymoly/%EB%9D%BC%EC%9A%B0%ED%84%B0%20%EA%B5%AC%ED%98%84%20(Custom%20Event)/</url>
    <content><![CDATA[<h1 id="1-라우터-구현"><a href="#1-라우터-구현" class="headerlink" title="1. 라우터 구현"></a>1. 라우터 구현</h1><p>우선 컴포넌트마다 이벤트를 등록시켜주었다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">createEvent</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;.header-logo&#x27;</span>,</span><br><span class="line">  <span class="attr">handler</span>: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> path = e.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span> === path) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, path);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;home&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">detail</span>: path,</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<ul>
<li><p>라우터를 구현해주기 위해서 a태그의 href 속성값을 가져와서 path에 할당하고 window.history에 pushState 메서드를 사용하여 history 등록해주었다. history로 등록을 해줘야 브라우저 다음, 이전 버튼이 제대로 동작한다.</p>
</li>
<li><p>위 방식은 pjax 방식으로 클릭 이벤트를 캐치하고 preventDefault로 서버로 요청을 방지한다. 이후 href 속성의 path를 사용하여 ajax 요청을 하는 방식이다.</p>
</li>
<li><p>ajax 요청은 브라우저의 url을 변경하지 않아 history 관리가 불가하기 때문에 이 때, pushState 메서드를 사용하여 URL을 변경하고 URL을 history entry로 추가하지만 서버로 HTTP 요청을 보내지는 않는다.</p>
</li>
</ul>
<p>예제를 보면서 pjax 방식을 따라서 구현해봤는데, 우리 팀의 CBD Library 방식에는 맞지 않게 코드를 구현하였다.</p>
<h2 id="문제1-상태-관리-미흡"><a href="#문제1-상태-관리-미흡" class="headerlink" title="문제1. 상태 관리 미흡"></a>문제1. 상태 관리 미흡</h2><p>이벤트가 발생하여 컴포넌트가 대체되어 화면의 렌더링이 발생하게 되는데, 이를 상태로 관리하지 않고 custom 이벤트를 생성하여 dispatch하여 App 컴포넌트에서 custom 이벤트 리스너를 등록하고 또 이걸 보여주기 위해서 render 함수 있는 곳에서 custom 이벤트 리스너를 등록하는 복잡한 구조로 하였다. 그 결과 각 커스텀 이벤트 마다 render를 호출해주고 있으므로 CBD Library를 사용한 의미가 사라졌다.</p>
<ul>
<li>이를 해결하기 위해서 현재 내가 있는 페이지를 상태로 관리하는 것으로 코드를 개선하였다.</li>
</ul>
<h1 id="2-서버-오픈-시-고려해야할-점"><a href="#2-서버-오픈-시-고려해야할-점" class="headerlink" title="2. 서버 오픈 시 고려해야할 점"></a>2. 서버 오픈 시 고려해야할 점</h1><ul>
<li><p>서버 연결 시 server.js에 연결을 하는데 이 때는 node.js 환경이므로, window 객체가 존재 하지 않는다.</p>
</li>
<li><p>commonJs 방식으로 서버를 구현했다면 package.json 파일에 type&#x3D;”module”을 추가해줘야하지만 require 방식으로 구현했다면, type&#x3D;”module”을 빼줘야 한다.</p>
</li>
</ul>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>오늘 혼자 힘으로 라우터에 대해 공부하여 프로젝트에 적용해보며 라우터가 어떻게 동작하는지 알게되었다. 혼자 힘으로 해보니깐 CBD Library 가 어떤 구조로 작동하고 이 구조를 맞춰서 내가 라우터를 어떻게 구현하면 되는지 생각할 수 있어서 인상깊었다.</p>
<p>채련님과 로그인, 회원가입 구현을 위해 서버에 대해서 공부도 하였는데, 내일 좀 더 깊게 공부해봐야겠다. 아직 우리 구조에서 서버와 어떻게 통신을 해야하는지 제대로 이해가 되지 않는다.</p>
<p>지윤님이 만드신 카드 게임 알고리즘에서 카드 2장이 뒤집히기 전에 새로운 카드를 눌렀을 때, 3장의 카드가 뒤집히는 문제점을 같이 해결하였다.</p>
<p>내일은 채련님과 로그인, 회원가입 구현과 서버와의 통신을 같이 구현해보기로 하였다.</p>
<p>오늘도 새로운 것을 많이 배워서 뿌듯한 하루였다. ㅎㅎ</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>라우터 구현</title>
    <url>/2022/10/17/Project/holymoly/%EB%9D%BC%EC%9A%B0%ED%84%B0%20%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<h1 id="1-회원가입-로직-구현"><a href="#1-회원가입-로직-구현" class="headerlink" title="1. 회원가입 로직 구현"></a>1. 회원가입 로직 구현</h1><p>회원가입 페이지의 input값과 유효성 검사에 따라 에러메세지를 보여줘야 하므로 이를 상태로 관리해줘야한다.</p>
<p>상태 변경함수와 상태를 props로 전달해준다. 유효성 검사 로직을 true, false 값을 구현하는데 헷갈렸다.</p>
<h2 id="Lodash-구현-실패…"><a href="#Lodash-구현-실패…" class="headerlink" title="Lodash 구현 실패…"></a>Lodash 구현 실패…</h2><p>페어 프로그래밍을 할 때는 lodash 잘 썼는데, server랑 연동을 하니 왜 lodash 안써지냐 ?</p>
<p>내일 해결하자.</p>
<h1 id="2-라우터-구현"><a href="#2-라우터-구현" class="headerlink" title="2. 라우터 구현"></a>2. 라우터 구현</h1><p>라우터 구현을 며칠째 쓰는지 모르겠다…</p>
<p>라우터를 제대로 이해해야만 했다…</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isSigned</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/auth&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data.<span class="property">success</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/rank&quot;</span>, <span class="attr">component</span>: <span class="title class_">Rank</span>, <span class="attr">guard</span>: isSigned, <span class="attr">redirectTo</span>: <span class="title class_">Signin</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/signin&quot;</span>, <span class="attr">component</span>: <span class="title class_">Signin</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/signup&quot;</span>, <span class="attr">component</span>: <span class="title class_">Signup</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/matching&quot;</span>, <span class="attr">component</span>: <span class="title class_">MatchingCards</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Components</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">router</span>(<span class="params">path = <span class="variable language_">window</span>.location.pathname</span>) &#123;</span><br><span class="line">    <span class="comment">// header 에서 클릭이벤트로 href 를 받아서 path에 담는다.</span></span><br><span class="line">    <span class="keyword">const</span> route = routes.<span class="title function_">find</span>(<span class="function"><span class="params">route</span> =&gt;</span> route.<span class="property">path</span> === path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change url path</span></span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      !route.<span class="property">guard</span> || (<span class="keyword">await</span> route.<span class="title function_">guard</span>())</span><br><span class="line">        ? <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="title class_">Page</span>: route.<span class="property">component</span> &#125;)</span><br><span class="line">        : <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="title class_">Page</span>: route.<span class="property">redirectTo</span> &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>“pjax 방식으로 라우터를 구현하기 위해서 서버와 도움이 필요하다”라는 말이 이제는 이해가 된다. ajax 방식은 url이 변경되지 않아 seo에 문제가 있어서 이를 해결하기 위해서 pushState를 통해 history API를 구현해준다.</p>
</li>
<li><p>그리고 router 함수는 path를 받아서 해당 path의 컴포넌트를 가지는 route를 찾아서 현재 페이지로 렌더링해준다.</p>
</li>
<li><p>이 때, routes 배열안의 어떤 라우터는 접근 권한이 필요한 라우터가 있는데, 이들한테는 guard라는 프로퍼티가 존재한다. 그러므로 router 함수에서도 guard라는 프로퍼티가 있을 때, 또 guard 프로퍼티의 값이 true, false냐에 따라 컴포넌트를 다르게 보여줘야하는 로직을 짜야한다.</p>
</li>
</ul>
<p>이 개념이 CSR(Client Side Rendering)이다. 서버에서는 다음과 같이 코드를 구현해주었다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">auth</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> accessToken = req.<span class="property">headers</span>.<span class="property">authorization</span> || req.<span class="property">cookies</span>.<span class="property">accessToken</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(accessToken, process.<span class="property">env</span>.<span class="property">JWT_SECRET_KEY</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`😀 사용자 인증 성공`</span>, decoded);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;😱 사용자 인증 실패..&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(accessToken);</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/signin&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isSigned</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> accessToken = req.<span class="property">headers</span>.<span class="property">authorization</span> || req.<span class="property">cookies</span>.<span class="property">accessToken</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(accessToken, process.<span class="property">env</span>.<span class="property">JWT_SECRET_KEY</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`😀 사용자 인증 성공`</span>, decoded);</span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;😱 사용자 인증 실패..&quot;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">success</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// auth route</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/signin&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./public/index.html&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/auth&quot;</span>, isSigned);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;*&quot;</span>, auth, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// auth 미들웨어</span></span><br><span class="line">  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./public/index.html&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>서버에서는 모든 경로에서 get 요청이 들어오면 auth 함수의 내부의 로직을 기준으로 사용자가 JWT 토큰이 있는지 유무를 판단하여 결과를 반환한다. 이 결과에 따라 rootContainer를 응답으로 보내주고 클라이언트는 이를 받아서 조건에 맞게<strong>미리 구현해둔 router 함수</strong>로 화면에 렌더링을 해준다.</p>
</li>
<li><p>그리고 서버에서 또 다른 함수로 JWT 토큰 유무에 따라 성공, 실패 결과를 전달해줘야하므로 auth 와 별개인 isSignin() 함수를 만들어줬다.</p>
</li>
</ul>
<blockquote>
<p>우리는 이 부분에서 auth 라는 함수 하나로만 해결하려고 하다 보니 res.send로 오류를 보내면 &#x2F;rank URL로 직접 요청시 오류 페이지가 보이게 되고 redirect 를 해주자니 오류가 안보내져서 클라이언트에서 router 함수 로직을 구현할 수 없는 딜레마를 겪었다.</p>
</blockquote>
<p>그 결과 클라이언트의 isSigned 비동기 함수가 axios로 get 요청을 보내서 data(boolean)를 반환해준 값을 guard 프로퍼티에 등록해주었다.</p>
<p>이를 사용해 router 함수에서 로직을 구현해주었다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>오늘은 월요일이라서 그런지 머리도 잘 안돌아가고 주말에 푹 쉬어서 죄책감이 약간 들어서 자존감도 떨어지는 하루였다.</p>
<p>그래도 늘 이런 생각을 하면 달라지는 것은 없다. 이런 생각을 할 시간에 좀 더 연구하고 공부하는 게 나의 미래에 더 도움이 된다.</p>
<p>이제 미니 프로젝트 마감이 이번주 금요일로 다가왔으니 앞으로 며칠만 더 힘내서 열심히 공부하고 배운것을 꼼꼼하게 정리하도록 해야겠다.</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>라우터 파일 구분 시도</title>
    <url>/2022/10/18/Project/holymoly/%EB%9D%BC%EC%9A%B0%ED%84%B0%20%ED%8C%8C%EC%9D%BC%20%EA%B5%AC%EB%B6%84%20%EC%8B%9C%EB%8F%84/</url>
    <content><![CDATA[<h1 id="1-라우터-파일-구분을-해주자"><a href="#1-라우터-파일-구분을-해주자" class="headerlink" title="1. 라우터 파일 구분을 해주자."></a>1. 라우터 파일 구분을 해주자.</h1><h2 id="왜-라우터를-모듈로-빼서-관리를-해줘야-하는가"><a href="#왜-라우터를-모듈로-빼서-관리를-해줘야-하는가" class="headerlink" title="왜 라우터를 모듈로 빼서 관리를 해줘야 하는가?"></a>왜 라우터를 모듈로 빼서 관리를 해줘야 하는가?</h2><p>App 컴포넌트가 다른 컴포넌트 정보를 모아서 렌더에게 이렇게 그려달라는 정보를 담고 있는데, App 에서 path에 맞게 컴포넌트를 지정해주는 router 메서드가 같이 있어도 논리가 맞지 않는가?</p>
<p>라우터가 하는 일은 path를 인수로 받으면 history API를 설정해주고, path에 맞는 컴포넌트를 반환해주는 역할을 한다.</p>
<p><strong>이 역할을 하는 라우터를 App 컴포넌트의 프로퍼티 메서드로 종속 시키는 것이 맞는가?</strong></p>
<p>내 생각에는 데이터가 바뀔 때 화면 렌더링에 영향을 주는 데이터를 상태로 관리 해야하므로, path가 바뀔 때, 컴포넌트가 바뀌니 path든 component든 상태로 가져야 한다.</p>
<p><strong>즉, App도 컴포넌트이므로 그려지는데 필요한 정보를 담고 있기만 하면 된다.</strong></p>
<ul>
<li>라우터에서 렌더링을 호출하면 App의 domStr이 새로 그려지게되는데 이때, Page 또는 Path를 확인하여 컴포넌트를 그려줘야한다.</li>
<li>그런데 라우터함수가 렌더만 해주는데 상태를 변경해주지 않고 어떻게 그려주지?<br>⇒ 라우터 함수가 Page를 반환하고 그 페이지를 App의 domStr에서 받아서 그려주기로 해보자.<ul>
<li>위의 것이 될까? App에서 처음 호출될 때는 return 값으로 Page를 넘겨줄 수 있겠지</li>
<li>하지만 이벤트 발생하거나 서버에 요청으로 라우터 변경되었을 때, router가 호출되는데, 그 때는 반환만 해주고 렌더링을 해주고 있지 않아서 변경되지 않을 것이다.</li>
<li>그렇다고 router에 렌더링을 넣어준다고 하면 App의 domStr을 호출하여 새로 그려줄텐데… 무엇을 기준으로 그려주는 것인가? router에서 받은 path를 기준으로 그 path에 맞는 컴포넌트로 그려주는데 이것을 App에서 어떻게 알 수 있나?</li>
</ul>
</li>
</ul>
<p><strong>결론</strong></p>
<p>이를 해결하기 위해서는 기존의 App 컴포넌트에서 setState로 render를 시켜주는 구조를 바꾸고 App에서 render를 해주고 router에서도 render를 해주는 구조로 바꿔줘야한다.</p>
<h1 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h1><p>오늘은 라우터를 파일로 분리하려는 시도와 리팩터링을 하면서 공부를 했다.</p>
<p>내일은 GCP로 배포하는 법을 공부해서 배포를 해보려고 한다.</p>
<p>내일 배포와 발표준비를 마치면 이제 자바스크립트 수업도 모두 끝이난다. 2달 반 정도의 시간이 참 빨리도 지나간 것 같다.</p>
<p>역시 자바스크립트가 동료들과 페어로 하는 수업이 많아서 더 재밌게 느껴진 것 같다.</p>
<p>앞으로 다가올 리액트 수업 때도 열심히 듣기 위해 만반의 준비를 해야겠다.</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>라우터 함수와 pushState, 랭커 보여주기</title>
    <url>/2022/10/17/Project/holymoly/%EB%9D%BC%EC%9A%B0%ED%84%B0%20%ED%95%A8%EC%88%98%EC%99%80%20pushState,%20%EB%9E%AD%EC%BB%A4%20%EB%B3%B4%EC%97%AC%EC%A3%BC%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="1-router-함수와-pushState-메서드"><a href="#1-router-함수와-pushState-메서드" class="headerlink" title="1. router 함수와 pushState 메서드"></a>1. router 함수와 pushState 메서드</h1><p>router 함수가 route의 guard 프로퍼티를 통해 로그인한 사용자가 아니라면 &#x2F;rank 경로로 이동시 &#x2F;signin 경로로 이동하도록 구현을 해주었다.</p>
<p>이 때 발생한 문제가 화면 렌더링은 signin 컴포넌트로 변경되었지만 라우터는 이상하게 &#x2F; Home 컴포넌트가 그려지는 것이다.</p>
<p>문제가 어디서 발생하는지 찾아보니, 클릭 이벤트 발생할 때, router 함수가 호출되는데 이 때 상태로 관리하는 Page가 Home에서 변경되지 않는 문제였다.</p>
<p><strong>왜 이 경우에서만 변경되지 않는지에 대해서는 아직 파악하지 못했지만, 리팩터링 시간을 가져서 파악해보도록 해야겠다.</strong></p>
<h1 id="2-서버에-랭크-데이터를-보내고-랭커들을-랭크-페이지에-보여주자"><a href="#2-서버에-랭크-데이터를-보내고-랭커들을-랭크-페이지에-보여주자" class="headerlink" title="2. 서버에 랭크 데이터를 보내고 랭커들을 랭크 페이지에 보여주자"></a>2. 서버에 랭크 데이터를 보내고 랭커들을 랭크 페이지에 보여주자</h1><p>유저점수를 게시판에 보여주기 위해서 게임이 종료되었을 때, &#x2F;matching 경로로 post 요청을 보내서 record를 서버에 보내준다.</p>
<p>서버에서는 mongodb와 연결되어 있어 database에서 해당 유저의 이전 기록과 비교하여 더 빠른 기록으로 갱신해준다.</p>
<p>또한 rank 페이지를 누르거나 URL로 직접 요청할 때마다 데이터를 가져와서 보여줘야 하므로 router 함수 내부에서 &#x2F;ranker 경로로 get 요청을 보내서 데이터를 가져와야한다.</p>
<blockquote>
<p>isSignin 함수에서 &#x2F;auth 경로로 get 요청해서 guard 프로퍼티에 불리언 값을 저장한 것 처럼 &#x2F;rank 경로가 아닌 &#x2F;ranker 경로로 get 요청을 해야한다.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;*&quot;</span>, auth, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>만약 &#x2F;rank 경로로 get 요청을 보내면, 위 단계와 겹치지 때문에 다른 경로로 설정을 해줘야 한다.</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
        <category>holymoly</category>
      </categories>
  </entry>
  <entry>
    <title>inline 요소 배치, nth-child()</title>
    <url>/2022/08/04/Project/%EB%B0%B0%EB%AF%BC%20%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/inline%20%EC%9A%94%EC%86%8C%20%EB%B0%B0%EC%B9%98,%20nth-child()/</url>
    <content><![CDATA[<h1 id="오늘-공부한-것"><a href="#오늘-공부한-것" class="headerlink" title="오늘 공부한 것"></a>오늘 공부한 것</h1><h2 id="배달의-민족-프로젝트"><a href="#배달의-민족-프로젝트" class="headerlink" title="배달의 민족 프로젝트"></a>배달의 민족 프로젝트</h2><h3 id="inline-요소-layout-배치"><a href="#inline-요소-layout-배치" class="headerlink" title="inline 요소 layout 배치"></a>inline 요소 layout 배치</h3><hr>
<p><img src="/images/220804/layout.png" alt="layout"><br>위 사진처럼 우리집(button)이 좌측으로, cate(a), alert(button), my(a)가 우측에 배치되어 있는 레이아웃을 만들어 보자.</p>
<h4 id="마크업"><a href="#마크업" class="headerlink" title="마크업"></a>마크업</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;header__logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;logo__link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo__img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;배달의 민족&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;header__address-button&quot;</span>&gt;</span>우리집<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>cate<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;header__alert-button&quot;</span>&gt;</span>alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mypage&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>my<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;search-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>검색 폼<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>검색<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;search-form__input&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;찾아라! 맛있는 음식과 맛집&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;search-form__button-submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>button, a 태그 둘다 인라인 요소이므로 한줄을 전부 차지하는 block 요소와 다르게 컨텐츠의 크기만큼 width,heigth를 가진다.</li>
</ul>
<h4 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 헤더</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$mainColor</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">rem</span>(<span class="number">19px</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">  &amp; <span class="selector-class">.nav-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__address-<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> size(rem(<span class="number">120px</span>), rem(<span class="number">32px</span>));</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span> solid black;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="built_in">rem</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp; <span class="selector-class">.category</span>,</span><br><span class="line">  &amp;__alert-<span class="selector-tag">button</span>,</span><br><span class="line">  &amp; <span class="selector-class">.mypage</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> size(rem(<span class="number">32px</span>), rem(<span class="number">32px</span>));</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="built_in">rem</span>(<span class="number">20px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__alert-<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="built_in">rem</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="built_in">rem</span>(<span class="number">20px</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>button,a 태그들을 좌우배치하기 위해 이들을 div로 감싸고 부모요소에게 flex를 주었다.</li>
<li>button, a 태그 각각 width, heigth를 주었다.</li>
</ul>
<aside>
💡 width,heigth 주지 않으면 컨텐트 크기만큼 width를 가진다. 또한, flex의 기본속성이 stretch여서 부모요소 높이만큼 자식요소도 쭈욱 높이가 늘어나게 된다.
</aside>

<ul>
<li>a,button 태그들이 flexible 속성으로 변하게 되면서 각 content만큼 width를 갖는 inline-block 요소로 변한다.</li>
<li>flex 요소들이 직접 width를 가지거나, 컨텐츠 크기만큼 width를 가졌을 때, 결국 각자의 width를 가지고 있기 때문에 요소들에게 <strong>margin auto 속성</strong>을 적용하여 좌우 배치할 수 있다.</li>
</ul>
<hr>
<h3 id="자주-쓰는-nth-child"><a href="#자주-쓰는-nth-child" class="headerlink" title="자주 쓰는 :nth-child()"></a>자주 쓰는 :nth-child()</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span> <span class="attr">class</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>(주)우아한형제들<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>대표이사 김범준<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>사업자등록번호 120-87-65763<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>통신판매업 서울 송파-0515<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>호스팅서비스제공자 (주)우아한형제들<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;CS@woowahan.com&quot;</span>&gt;</span>CS@woowahan.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>서울특별시 송파구 위례성대로 2 장은빌딩<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span>전자금융분쟁처리 Tel <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:1600-0987&quot;</span>&gt;</span>1600-0987<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(유료),</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;080-849-0987&quot;</span>&gt;</span>080-849-0987<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(무료)&lt;/span</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Fax <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;fax:050-6050-0400&quot;</span>&gt;</span>050-6050-0400<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>위 마크업 처럼 address 안에 span 태그의 형제요소들이 많이 있을 때, 내가 원하는 순서의 span 태그에만 스타일링 주고 싶을 때 사용</li>
</ul>
<h4 id="3번째-포함-그-이후-요소"><a href="#3번째-포함-그-이후-요소" class="headerlink" title="3번째 포함 그 이후 요소"></a>3번째 포함 그 이후 요소</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(n + <span class="number">3</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3번째-부터-5번째-요소"><a href="#3번째-부터-5번째-요소" class="headerlink" title="3번째 부터 5번째 요소"></a>3번째 부터 5번째 요소</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(n + <span class="number">3</span>)<span class="selector-pseudo">:nth-child</span>(-n + <span class="number">5</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="짝수-및-홀수-요소"><a href="#짝수-및-홀수-요소" class="headerlink" title="짝수 및 홀수 요소"></a>짝수 및 홀수 요소</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="함수형-요소"><a href="#함수형-요소" class="headerlink" title="함수형 요소"></a>함수형 요소</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n + <span class="number">1</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1, 4, 7, 10 … 요소 선택</li>
</ul>
<hr>
<h3 id="after-before로-세로선-스타일링"><a href="#after-before로-세로선-스타일링" class="headerlink" title="::after,before로 세로선 스타일링"></a>::after,before로 세로선 스타일링</h3><p><img src="/images/220804/styling.png" alt="after"><br>각 a 태그 사이에 | 구분선 모양을 가상 요소 선택자를 사용하여 구현해보자.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n + <span class="number">2</span>)<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$gray-100</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>2번째 li 태그부터 끝까지 before 선택자로 선택하였다.</li>
<li>position : absolute 를 주고 배치를 맞춘 뒤 배경색을 채우고 width,height를 설정하여 선처럼 보이게 하였다.</li>
</ul>
<aside>
💡 이 때, 부모 요소에게 position : relative 속성을 줘야 부모를 기준으로 배치할 수 있다.

</aside>

<hr>
<h1 id="오늘-소감"><a href="#오늘-소감" class="headerlink" title="오늘 소감"></a>오늘 소감</h1><p>내일은 1달간 HTML&#x2F;CSS 수업에 대한 미니 프로젝트 발표가 있는 날이다. 수업동안 상대적으로 어려운 예제를 다루다가 일반적인 레이아웃을 다루니 쉽게 레이아웃은 쉽게 느껴졌다. 하지만, 여전히 제일 어려운 것은 마크업인 것 같다. 논리적인 순서에도 맞아야 하며 배치도 적절하게 되게끔 마크업을 설계하는 것이 매우 중요하다고 생각이 들었다.</p>
<p>중간중간 CSS 스타일링에 대해 막혔었던 부분도 TIL을 작성하며 정리하니 나중에 찾아보기도 편하고 기억에 오래 남을 것 같다.</p>
]]></content>
      <categories>
        <category>Project</category>
        <category>배달의민족</category>
      </categories>
      <tags>
        <tag>nth-child</tag>
      </tags>
  </entry>
  <entry>
    <title>배달의 민족 미니프로젝트 회고</title>
    <url>/2022/08/05/Project/%EB%B0%B0%EB%AF%BC%20%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9/%EB%B0%B0%EB%8B%AC%EC%9D%98%20%EB%AF%BC%EC%A1%B1%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%ED%9A%8C%EA%B3%A0/</url>
    <content><![CDATA[<h1 id="배달의-민족-미니-프로젝트-회고"><a href="#배달의-민족-미니-프로젝트-회고" class="headerlink" title="배달의 민족 미니 프로젝트 회고"></a>배달의 민족 미니 프로젝트 회고</h1><p>지난 금요일 커넥to에서 미니 프로젝트를 시작하였다.</p>
<p>HTML&#x2F;CSS 수업을 한달동안 배운 것을 응용하여 클론코딩을 하거나 자유주제로 웹 페이지를 만들고 발표하는 과제였다.</p>
<hr>
<h2 id="주제-선정"><a href="#주제-선정" class="headerlink" title="주제 선정"></a>주제 선정</h2><p>팀원들과 아이스브레이킹을 하면서 프로젝트 주제에 대해서 이야기 하였다.</p>
<p>각자 좋아하는 분야에 대해 자유주제를 정하기도 하였지만</p>
<p>우리가 그동안 배운것을 가장 잘 응용해볼 수 있는 주제를 정하기로 하였다.</p>
<p>그러던 중 앱 서비스만 있는 배달의 민족을 웹으로 구현해보면 어떨까라는 생각을 하였다.</p>
<p><b>배달의 민족을 선택한 이유</b></p>
<ul>
<li><p>간편주문이라는 슬로건에 맞지 않게 점점 복잡해지는 UI</p>
</li>
<li><p>코로나 완화로 배달앱 사용자 유저 급감</p>
</li>
<li><p>태블릿 버전 미지원으로인한 UX 저하 …</p>
</li>
</ul>
<p>위와 같은 문제를 개선하기 위해 배달의 민족 웹 서비스를 개발해보기로 결정하였다.</p>
<h3 id="발표-방향-선정"><a href="#발표-방향-선정" class="headerlink" title="발표 방향 선정"></a>발표 방향 선정</h3><p><img src="/images/220805/home.png" alt="quick mode"></p>
<p>웹 접근성을 고려하여 간편모드를 제공한다.</p>
<p>기존 배민에서 제공하는 앱 서비스를 이용하기 불편한 장애인, 저시력자 등을 고려했다.</p>
<p>이와 더불어 태블릿에서도 지원가능한 반응형 웹 사이트를 개발한다.</p>
<hr>
<h2 id="협업방식"><a href="#협업방식" class="headerlink" title="협업방식"></a>협업방식</h2><h3 id="1-CSS-프레임-워크-선정"><a href="#1-CSS-프레임-워크-선정" class="headerlink" title="1. CSS 프레임 워크 선정"></a>1. CSS 프레임 워크 선정</h3><p>기획단계에서 우리가 만들 페이지가 8페이지로 정해졌다. (일반모드 4페이지 + 간편모드 4페이지)</p>
<p>많은 페이지를 관리하기 위해 sass 프레임워크를 사용했다.</p>
<p><strong>Sass를 선택한 이유</strong></p>
<ol>
<li>@mixin</li>
</ol>
<p>@mixin을 사용하여 여러 페이지에서 자주 사용되는 스타일을 @iclude 하여 사용하기 편하게 했다.</p>
<ol start="2">
<li>BEM 표기법</li>
</ol>
<p>BEM 표기법을 사용하여 naming convention을 정하면 이후 nesting 문법을 사용하여 관련 클래스를 한눈에 보기 편하다.</p>
<ol start="3">
<li>스타일 컴포넌트화</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── css</span><br><span class="line">│   ├── index.css</span><br><span class="line">│   └── index.css.map</span><br><span class="line">├── fast_pages</span><br><span class="line">│   ├── main.html</span><br><span class="line">│   ├── menu.html</span><br><span class="line">│   ├── store.html</span><br><span class="line">│   └── storeList.html</span><br><span class="line">├── js</span><br><span class="line">│   ├── jquery-1.12.3.js</span><br><span class="line">│   └── scripts.js</span><br><span class="line">├── nomal_pages</span><br><span class="line">│   ├── main.html</span><br><span class="line">│   ├── menu.html</span><br><span class="line">│   ├── store.html</span><br><span class="line">│   └── storeList.html</span><br><span class="line">└── scss</span><br><span class="line">    ├── absrtacts</span><br><span class="line">    │   ├── _index.scss</span><br><span class="line">    │   ├── _media-query.scss</span><br><span class="line">    │   ├── _mixin.scss</span><br><span class="line">    │   └── _unit.scss</span><br><span class="line">    ├── base</span><br><span class="line">    │   ├── _default.scss</span><br><span class="line">    │   ├── _index.scss</span><br><span class="line">    │   ├── _nomalize.scss</span><br><span class="line">    │   └── _reset.scss</span><br><span class="line">    ├── components</span><br><span class="line">    │   ├── _index.scss</span><br><span class="line">    │   └── _navigation.scss</span><br><span class="line">    ├── index.scss</span><br><span class="line">    ├── layout</span><br><span class="line">    │   ├── _footer.scss</span><br><span class="line">    │   ├── _header.scss</span><br><span class="line">    │   └── _index.scss</span><br><span class="line">    ├── pages</span><br><span class="line">    │   ├── _fast-main.scss</span><br><span class="line">    │   ├── _fast-menu.scss</span><br><span class="line">    │   ├── _fast-store.scss</span><br><span class="line">    │   ├── _fast-storeList.scss</span><br><span class="line">    │   ├── _home.scss</span><br><span class="line">    │   ├── _index.scss</span><br><span class="line">    │   ├── _nomal-main.scss</span><br><span class="line">    │   ├── _nomal-menu.scss</span><br><span class="line">    │   ├── _nomal-store.scss</span><br><span class="line">    │   └── _normal-storeList.scss</span><br><span class="line">    └── themes</span><br><span class="line">        ├── _a11y.scss</span><br><span class="line">        ├── _color.scss</span><br><span class="line">        ├── _font.scss</span><br><span class="line">        ├── _index.scss</span><br><span class="line">        └── _spacing.scss</span><br></pre></td></tr></table></figure>

<p>각 페이지에 적용되는 스타일들만 따로 빼내어 사용할 수 있어 이후에 유지관리가 용이하다.</p>
<h3 id="2-HTML-구조-설계"><a href="#2-HTML-구조-설계" class="headerlink" title="2.HTML 구조 설계"></a>2.HTML 구조 설계</h3><p>웹 접근성을 고려하여 div태그를 최소화하고 시멘틱 태그를 사용하여 논리적인 구조로 마크업을 설계해야한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 헤더 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 메인 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">&quot;skip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 푸터 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-figma-디자인-시안-제작"><a href="#3-figma-디자인-시안-제작" class="headerlink" title="3. figma 디자인 시안 제작"></a>3. figma 디자인 시안 제작</h3><p><img src="/images/220805/figma.png" alt="figma"></p>
<p>우리가 만들 페이지를 figma를 사용하여 디자인 시안을 제작한다.</p>
<p>margin, padding, font, color 등 통일해야할 부분을 미리 정해놓고 작업한다.</p>
<h3 id="4-gitflow-전략"><a href="#4-gitflow-전략" class="headerlink" title="4. gitflow 전략"></a>4. gitflow 전략</h3><p>저번 8월 3일 TIL 작성에서 배웠던 gitflow 전략을 사용하여 버전관리와 협업을 진행하였다.</p>
<hr>
<h2 id="과정-중-문제점"><a href="#과정-중-문제점" class="headerlink" title="과정 중 문제점"></a>과정 중 문제점</h2><h3 id="1-크로스-브라우징"><a href="#1-크로스-브라우징" class="headerlink" title="1. 크로스 브라우징"></a>1. 크로스 브라우징</h3><p>safari, FF, Chrome 대표 브라우저에서 동일하게 동작하는지 확인하여야 한다.</p>
<p><strong>safari, FF에서 탭키 issue</strong></p>
<p>FF에서 탭키 포커스가 button 태그에 있을 경우 영역이 점선으로 표현되는 현상</p>
<p><img src="/images/220805/ff.png" alt="firefox"></p>
<p>위 설정을 체크해줘야한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>:-moz-focusring,</span><br><span class="line">[type=<span class="string">&quot;button&quot;</span>]:-moz-focusring,</span><br><span class="line">[type=<span class="string">&quot;reset&quot;</span>]:-moz-focusring,</span><br><span class="line">[type=<span class="string">&quot;submit&quot;</span>]:-moz-focusring &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dotted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 현상은 normalize.css에서 스타일을 지정해주었기 때문에 발생하였다.</p>
<p>safari에서 탭키가 input 요소이외에는 포커싱안되는 현상</p>
<p><img src="/images/220805/safari.png" alt="safari"></p>
<p>위 설정을 체크해줘야 한다.</p>
<h3 id="2-Lighthouse-성능"><a href="#2-Lighthouse-성능" class="headerlink" title="2. Lighthouse 성능"></a>2. Lighthouse 성능</h3><p>lighthouse 성능 테스트를 사용하여 성능을 측정해본 결과</p>
<p><img src="/images/220805/lighthouse.png" alt="lighthouse"></p>
<p>성능이 매우 낮게 나왔는데, 그 이유는 적절한 이미지 포맷을 사용하지 않았기 때문이다.</p>
<p>이미지 포맷을 webp 형식으로 변환한 후 사용할 경우 성능이 개선되었다.</p>
<p><img src="/images/220805/webp.png" alt="webp"></p>
<hr>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>프로젝트 발표 기획부터 디자인, 마크업 설계, sass 스타일링, git 협업 등으로 1주일이 순식간에 지나간 것 같다.</p>
<p>그만큼 힘들었지만 팀원들과 웃으면서 같이 원하는 목표를 이루기 위해 으쌰으쌰하니깐 동기부여도 되고 좋은 추억도 많이 쌓을 수 있었다.</p>
<p>열심히 노력은 했지만 그래도 아쉬운 점이 많이 남는다.</p>
<ul>
<li><p>이미지 포맷 issue에 대한 작업을 더 참여해보지 않은 것에 대한 아쉬움</p>
</li>
<li><p>화면에 필요한 디자인 요소들을 미리미리 준비하지 못했던 아쉬움</p>
</li>
<li><p>git을 배운대로 제대로 사용해보지 못한 아쉬움</p>
</li>
</ul>
<p>그리고 다른 팀의 발표를 보면서 느낀점은 확실히 한달전에 처음 발표 때와 비교해서 다들 많이 성장했다는 것을 느꼈다.</p>
<p>나도 그 때보다는 더 나아진 모습이라고 생각하지만, 발표를 잘하는 분들을 유심히 관찰하면서 그분들 처럼 능숙하게 발표를 할 수 있도록 더 노력해봐야겠다고 다짐하는 시간을 갖게 되었다.</p>
<p>또한, 데레사강사님의 마지막 말씀이 기억에 남는다.</p>
<blockquote>
<p>남은 5개월 과정이 짧지 않은 기간일 것이니, 과정을 중요시하며 느슨해지지 말고 동기들과 소통을 자주하여 커뮤니케이션 스킬을 향상 시키도록 하자.</p>
</blockquote>
]]></content>
      <categories>
        <category>Project</category>
        <category>배달의민족</category>
      </categories>
      <tags>
        <tag>클론코딩</tag>
      </tags>
  </entry>
  <entry>
    <title>AllWAIS [TRST] emotion 스타일링, 타입 덮어씌기</title>
    <url>/2023/01/02/React/AllWAIS/AllWAIS-TRST-emotion-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%83%80%EC%9E%85-%EB%8D%AE%EC%96%B4%EC%94%8C%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="Emotion-Styled-Component-Cascading-문제"><a href="#Emotion-Styled-Component-Cascading-문제" class="headerlink" title="Emotion Styled Component Cascading 문제"></a>Emotion Styled Component Cascading 문제</h1><p>Emotion에서 Styled Component 를 사용하면 해당 컴포넌트의 클래스 이름이 재정의된다.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StyledTabPanel</span> = styled.<span class="property">div</span>&lt;<span class="title class_">TabPanelProps</span>&lt;<span class="string">&quot;div&quot;</span>&gt;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 5px;</span></span><br><span class="line"><span class="string">  border: 2px solid hsl(219deg 1% 72%);</span></span><br><span class="line"><span class="string">  border-radius: 0 5px 5px;</span></span><br><span class="line"><span class="string">  background: hsl(220deg 43% 99%);</span></span><br><span class="line"><span class="string">  min-height: 10em;</span></span><br><span class="line"><span class="string">  min-width: 550px;</span></span><br><span class="line"><span class="string">  overflow: auto;</span></span><br><span class="line"><span class="string">  display: <span class="subst">$&#123;(props) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    props.dataIndex === +(props.id?.slice(-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">number</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">      ? <span class="string">&quot;block&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      : <span class="string">&quot;none&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TabPanel</span>(<span class="params">&#123; children, className, ...restProps &#125;: TabPanelProps&lt;<span class="string">&quot;div&quot;</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; selected, setSelected &#125; = <span class="title function_">useTabsContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledTabPanel</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">tabIndex</span>=<span class="string">&#123;0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dataIndex</span>=<span class="string">&#123;selected&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...restProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledTabPanel</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>styled component를 사용하여 TabPanel 컴포넌트를 생성하였다. 브라우저에서 해당 요소를 확인해보면 다음과 같이 알 수 없는 클래스로 나오는 것을 알 수 있다.</p>
<p><img src="/../../../images/TRST/emotionStyled/emotionStyled.png" alt="emotion styled component"></p>
<h1 id="TypeScript-오류-사용량-덮어씜"><a href="#TypeScript-오류-사용량-덮어씜" class="headerlink" title="TypeScript 오류 - 사용량 덮어씜"></a>TypeScript 오류 - 사용량 덮어씜</h1><p><img src="/../../../images/TRST/emotionStyled/tsduplicated.png" alt="ts덮어씜"></p>
<p>props를 생성하고 해당 props를 통해 styled Component에서 조건부 스타일을 주려고 한다.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Component</span>&lt;T <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">ElementType</span>&gt; = &#123;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">React</span>.<span class="property">ComponentPropsWithRef</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TabPanelProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">ElementType</span>&gt; = &#123;</span><br><span class="line">  dataIndex?: <span class="title class_">TabsContextValue</span>[<span class="string">&quot;selected&quot;</span>];</span><br><span class="line">&#125; &amp; <span class="title class_">Component</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledTabPanel</span> = styled.<span class="property">div</span>&lt;<span class="title class_">TabPanelProps</span>&lt;<span class="string">&quot;div&quot;</span>&gt;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 5px;</span></span><br><span class="line"><span class="string">  border: 2px solid hsl(219deg 1% 72%);</span></span><br><span class="line"><span class="string">  border-radius: 0 5px 5px;</span></span><br><span class="line"><span class="string">  background: hsl(220deg 43% 99%);</span></span><br><span class="line"><span class="string">  min-height: 10em;</span></span><br><span class="line"><span class="string">  min-width: 550px;</span></span><br><span class="line"><span class="string">  overflow: auto;</span></span><br><span class="line"><span class="string">  display: <span class="subst">$&#123;(props) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    props.dataIndex === +(props.id?.slice(-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">number</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">      ? <span class="string">&quot;block&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      : <span class="string">&quot;none&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TabPanel</span>(<span class="params">&#123; children, className, ...restProps &#125;: TabPanelProps&lt;<span class="string">&quot;div&quot;</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; selected, setSelected &#125; = <span class="title function_">useTabsContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledTabPanel</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">tabIndex</span>=<span class="string">&#123;0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dataIndex</span>=<span class="string">&#123;selected&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...restProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledTabPanel</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>해당 타입을 정의할 때, 필수가 아닌 선택 사항으로 정의해주어서 해결하였다.</li>
<li>styled component 타입 지정 시 해당 컴포넌트의 props라고 지정을 해줘야지만 props에서 찾을 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>AllWAIS</category>
      </categories>
  </entry>
  <entry>
    <title>allWAIs-Link 회고(22.11.16)</title>
    <url>/2022/11/16/React/AllWAIS/allWAIs-Link-%ED%9A%8C%EA%B3%A0-22-11-16/</url>
    <content><![CDATA[<h1 id="📌-미션"><a href="#📌-미션" class="headerlink" title="📌 미션"></a>📌 미션</h1><ul>
<li><input checked="" disabled="" type="checkbox"> Link 역할로써 span태그, img태그 확인</li>
<li><input checked="" disabled="" type="checkbox"> tabindex&#x3D;”0”를 포함</li>
<li><input checked="" disabled="" type="checkbox"> img태그는 alt 속성으로 접근 가능한 이름 정의</li>
</ul>
<h1 id="🐒-문제"><a href="#🐒-문제" class="headerlink" title="🐒 문제"></a>🐒 문제</h1><h2 id="🤿-컴포넌트-props-“as”를-img로-주면-img-태그로-렌더링-해주기"><a href="#🤿-컴포넌트-props-“as”를-img로-주면-img-태그로-렌더링-해주기" class="headerlink" title="🤿 컴포넌트 props “as”를 img로 주면, img 태그로 렌더링 해주기"></a>🤿 컴포넌트 props “as”를 img로 주면, img 태그로 렌더링 해주기</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; goToLink &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Link</span>(<span class="params">&#123; <span class="keyword">as</span> = ComponentName, href, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">StyledLink</span> = <span class="title function_">styled</span>(<span class="string">`<span class="subst">$&#123;<span class="keyword">as</span>&#125;</span>`</span>)<span class="string">`</span></span><br><span class="line"><span class="string">       ... styles</span></span><br><span class="line"><span class="string">     `</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StyledLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">tabIndex</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">role</span>=<span class="string">&quot;link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> goToLink(e, href)&#125;</span></span><br><span class="line"><span class="language-xml">        onKeyDown=&#123;(e) =&gt; goToLink(e, href)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">StyledLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Link</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">as</span>: <span class="string">&quot;span&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Link 컴포넌트 안에다가 styled-component를 생성하고 as props를 전달해주었다.</p>
</li>
<li><p>위와 같이 할 경우, as props에 img 태그가 들어오게 된다면 <red>컴포넌트 명명 규칙에 어긋난다고 나온다.</red></p>
<p><strong>이를 해결하기 위해 조건부 렌더링을 해주었다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; goToLink &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Link</span>(<span class="params">&#123; <span class="keyword">as</span> = ComponentName, href, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">StyledLink</span> = <span class="title function_">styled</span>(<span class="string">`<span class="subst">$&#123;<span class="keyword">as</span>&#125;</span>`</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    ... styles</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;as === &quot;img&quot; ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">tabIndex</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">role</span>=<span class="string">&quot;link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> goToLink(e, href)&#125;</span></span><br><span class="line"><span class="language-xml">          onKeyDown=&#123;(e) =&gt; goToLink(e, href)&#125;</span></span><br><span class="line"><span class="language-xml">          src=&quot;./gitprofile.jpeg&quot;</span></span><br><span class="line"><span class="language-xml">          alt=&quot;W3C Website&quot;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StyledLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">tabIndex</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">role</span>=<span class="string">&quot;link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> goToLink(e, href)&#125;</span></span><br><span class="line"><span class="language-xml">          onKeyDown=&#123;(e) =&gt; goToLink(e, href)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">StyledLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Link</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">as</span>: <span class="string">&quot;span&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="🐥-img가-업로드-되지-않는-문제"><a href="#🐥-img가-업로드-되지-않는-문제" class="headerlink" title="🐥 img가 업로드 되지 않는 문제"></a>🐥 img가 업로드 되지 않는 문제</h2><ul>
<li><input checked="" disabled="" type="checkbox"> img 업로드 문제 해결</li>
</ul>
<p>문제의 원인은 npm 명령어로 webpack server만 실행시켰는데, webpack <code>config.js</code> 파일에 <code>static</code> 속성값을 <code>[build]</code>로 주었기 때문에 정적 이미지 파일을 불러오기 위해서는 <code>build</code> 폴더에서 <code>assets</code>을 찾는다.</p>
<p>그러므로 <code>npm run build</code> 명령어로 build 폴더를 생성한 후 그 안에다가 img를 넣어주고 경로를 설정해주어 해결하였다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span></span><br><span class="line">  <span class="keyword">as</span>=<span class="string">&quot;img&quot;</span></span><br><span class="line">  alt=<span class="string">&quot;test이미지&quot;</span></span><br><span class="line">  src=<span class="string">&quot;./assets/img/gitprofile.jpeg&quot;</span></span><br><span class="line">  href=<span class="string">&quot;https://www.w3.org/WAI/ARIA/apg/example-index/link/link.html&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="🐥-aria-label-속성-있을-때-조건부로-css-추가-삭제"><a href="#🐥-aria-label-속성-있을-때-조건부로-css-추가-삭제" class="headerlink" title="🐥 aria-label 속성 있을 때, 조건부로 css 추가 (삭제)"></a>🐥 <code>aria-label</code> 속성 있을 때, 조건부로 css 추가 <red>(삭제)</red></h2><p>이 속성을 삭제한 이유는 span 태그를 사용하여 Link 컴포넌트를 구현하였을 때, <code>role=&quot;link&quot;</code>로 해주었기 때문에 <code>aria-label</code> 속성을 굳이 해주지 않아도 되므로 삭제하였다.</p>
</li>
</ul>
<h1 id="🏓-회고"><a href="#🏓-회고" class="headerlink" title="🏓 회고"></a>🏓 회고</h1><ul>
<li>styled-component를 사용하면서 어떻게 props를 받아서 App에서 렌더링 시켜야할지 헷갈렸었는데 직접 해보니 이해가 잘되었다.</li>
<li>수업 시간에 배웠던 조건부 렌더링을 실제로 사용하면서 익히니 더욱 이해가 잘되었다. 역시 무언가를 만들어보면서 배우는 것이 힘들지만 더 도움되는 것 같다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>AllWAIS</category>
      </categories>
  </entry>
  <entry>
    <title>⛱ useRef</title>
    <url>/2022/11/22/React/Hooks/%E2%9B%B1-useRef/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🐶-useRef"><a href="#🐶-useRef" class="headerlink" title="🐶 useRef()"></a>🐶 useRef()</h1><p>리액트에서 ref는 주로 DOM 노드 참조 목적으로 사용된다. 컴포넌트 렌더링에 영향을 주지 않는 값 참조 목적으로 사용된다.</p>
<p><code>useRef()</code>는 함수 컴포넌트 내부에서 특정 값을 지속적으로 참조할 때 사용한다. <code>useState()</code>와 달리 <code>useRef()</code>는 <strong>현재 값이 변경되어도 컴포넌트가 다시 렌더링되지 않아 애플리케이션 성능을 최적화 할 수 있다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useRef() 훅을 사용해 카운트 참조 생성</span></span><br><span class="line"><span class="keyword">const</span> countRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 카운트 참조의 현재 값이 변경되어도 컴포넌트는 다시 렌더링 되지 않음</span></span><br><span class="line">countRef.<span class="property">current</span> = countRef.<span class="property">current</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>클래스는 자신의 인스턴스 멤버를 사용해 렌더링 상관없이 특정 값을 기억할 수 있는데 반해, 함수는 다시 렌더링 되면 매번 함수 몸체가 초기화 되므로 특정 값을 기억할 때 useRef()를 사용하면 유용하다.</p>
</blockquote>
<h2 id="🐥-useRef-사용목적"><a href="#🐥-useRef-사용목적" class="headerlink" title="🐥 useRef() 사용목적"></a>🐥 useRef() 사용목적</h2><h3 id="1-DOM-요소-접근-및-조작"><a href="#1-DOM-요소-접근-및-조작" class="headerlink" title="1. DOM 요소 접근 및 조작"></a>1. DOM 요소 접근 및 조작</h3><p>리액트 render() 단계에서는 DOM이 그려지기 전 단계이므로 <red>DOM에 직접 접근할 수 없다.</red></p>
<p>하지만 useRef()를 사용하여 컴포넌트가 <strong>mount된 시점 이후 DOM 요소에 접근하여 조작</strong>할 수 있도록 도와준다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TextInputWithFocusButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// `current` points to the mounted text input element</span></span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>아직 DOM이 그려지기 전이라 DOM 요소에 접근하여 focus()를 활성화 시킬 수 없지만, useRef()를 사용하여 클래스 컴포넌트 생명주기를 고려하여 DOM 요소에 접근할 수 있도록 도와준다.</li>
</ul>
<h3 id="2-함수-컴포넌트-내부에서-특정-값을-기억"><a href="#2-함수-컴포넌트-내부에서-특정-값을-기억" class="headerlink" title="2. 함수 컴포넌트 내부에서 특정 값을 기억"></a>2. 함수 컴포넌트 내부에서 특정 값을 기억</h3><p>함수 컴포넌트 내부에서 특정 값을 기억하면서 값을 변경해도 컴포넌트 렌더링에 영향을 주지 않아야한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> randomcolor <span class="keyword">from</span> <span class="string">&quot;randomcolor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DoNotReRender</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> colorRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [stateValue, setStateValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [stateHex, setStateHex] = <span class="title function_">useState</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line">  <span class="keyword">const</span> [refHex, setRefHex] = <span class="title function_">useState</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setStateHex</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line">  &#125;, [stateValue]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setRefHex</span>(<span class="title function_">randomcolor</span>());</span><br><span class="line">  &#125;, [colorRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GridItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">background:</span> $&#123;<span class="attr">stateHex</span>&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>State<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChangeColorButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">aria-label</span>=<span class="string">&quot;state 컬러 변경&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setStateValue(stateValue + 1)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>컬러 변경 버튼을 누르면 컴포넌트가 다시 렌더링 됩니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GridItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GridItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">background:</span> $&#123;<span class="attr">refHex</span>&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          colorRef.current += 10;</span></span><br><span class="line"><span class="language-xml">          console.log(`colorRef.current = $&#123;colorRef.current&#125;`);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ref<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChangeColorButton</span> <span class="attr">aria-label</span>=<span class="string">&quot;ref 컬러 변경&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>컬러 변경 버튼을 누르면 컴포넌트가 다시 렌더링 될까요?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GridItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>useState()</code>의 <code>setStateValue()</code>메서드를 사용하여 값을 변경한 경우 재렌더링이 발생하지만, <code>useRef()</code>의 current 값을 갱신하면 재렌더링이 발생하지 않는다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>Hooks</category>
      </categories>
  </entry>
  <entry>
    <title>✈️ 리액트 Hooks</title>
    <url>/2022/11/21/React/Hooks/%E2%9C%88%EF%B8%8F-%EB%A6%AC%EC%95%A1%ED%8A%B8-Hooks/</url>
    <content><![CDATA[<h1 id="📌-Hooks"><a href="#📌-Hooks" class="headerlink" title="📌 Hooks"></a>📌 Hooks</h1><p>리액트 Hook은 클래스로 컴포넌트를 만들 때 발생하는 문제점을 해결하기 위해 등장하였다.</p>
<ul>
<li>리액트 Hook을 사용하면 <strong>함수 컴포넌트 중심으로 개발</strong>이 가능하다.</li>
<li>함수 컴포넌트에서도 상태, 로직을 추출하여 다른 컴포넌트에서 <red>재사용</red> 할 수 있다.</li>
</ul>
<span id="more"></span>

<p><strong>1. 래퍼지옥</strong></p>
<p>클래스 컴포넌트 만들 시 문제는 고차 컴포넌트를 사용하게 될 경우 래퍼 지옥(Hell)이 발생한다.</p>
<p><strong>2. 비대해진 컴포넌트</strong></p>
<p>래퍼 지옥을 만들지 않기 위해서는 하나의 컴포넌트에 담아서 사용해야하는데 이럴 경우 컴포넌트가 비대해지는 문제가 있다.</p>
<p>그래서 리액트 팀은 기존 개발 방식을 유지하면서 새로운 API를 추가하는 방식으로 리액트 Hook을 개발하였다.</p>
<p>함수 컴포넌트의 문제점이 내부에서 상태를 관리할 수 없다는 것이였는데 이를 Hook을 통해 해결하였고 API를 제공하여 훨씬 간결하게 클래스 컴포넌트처럼 사용할 수 있게 되었다.</p>
<h2 id="🥁-Hook-사용-규칙"><a href="#🥁-Hook-사용-규칙" class="headerlink" title="🥁 Hook 사용 규칙"></a>🥁 Hook 사용 규칙</h2><ol>
<li>리액트 함수 컴포넌트, 커스텀 Hook 함수 안에서만 사용할 수 있다.</li>
</ol>
<p><strong>일반 함수, 클래스 컴포넌트에서 Hook을 호출하면 안된다.</strong></p>
<ol start="2">
<li>Hook은 문(statement) 또는 중첩된 함수 안에서 사용할 수 없다.</li>
</ol>
<p>컴포넌트, 커스텀 Hook 함수 최상위에서만 사용 가능하다.</p>
]]></content>
      <categories>
        <category>React</category>
        <category>Hooks</category>
      </categories>
  </entry>
  <entry>
    <title>🏰 useCallback과 useMemo</title>
    <url>/2022/11/22/React/Hooks/%F0%9F%8F%B0-useCallback%EA%B3%BC-useMemo/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="📌-useCallback과-useMemo-사용-이유"><a href="#📌-useCallback과-useMemo-사용-이유" class="headerlink" title="📌 useCallback과 useMemo 사용 이유"></a>📌 useCallback과 useMemo 사용 이유</h1><p>함수 컴포넌트는 렌더링 될 때 마다 몸체가 다시 실행되므로 컨텍스트를 기억하기 위해 Hook을 사용한다. 그리고 상위 컴포넌트는 기억된 상태 또는 업데이트 함수를 <strong>하위 컴포넌트에게 전달한다.</strong></p>
<p>이 때 상위 컴포넌트가 다시 실행되면 <red>이벤트 핸들러 함수들도 새로 그려지므로 동일참조를 벗어난다.</red></p>
<!-- more -->

<h2 id="🐸-useCallback"><a href="#🐸-useCallback" class="headerlink" title="🐸 useCallback"></a>🐸 useCallback</h2><p><code>useCallback()</code>은 하위 컴포넌트에 전달되는 함수를 기억해두고 이를 이용하여 컴포넌트 업데이트 시 리렌더링이 발생할 때, <strong>기억된 함수를 사용해 불필요한 리렌더링을 줄여 성능을 높이기 위해 사용한다.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123; count: initialCount, step &#125;</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1</span></span><br><span class="line">	<span class="keyword">const</span> handleIncrement = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + step);</span><br><span class="line">		&#125;, [step]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2</span></span><br><span class="line">	<span class="keyword">const</span> handleDecrement = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">setCount</span>(count - step);</span><br><span class="line">		&#125;, [count, step]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Counter.Display</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">Counter.Display</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<ul>
<li>기억해야할 데이터 타입이 함수인 경우 사용한다.</li>
<li>useEffect()처럼 종속성 배열을 통해 조건에 따라 기억 여부를 재설정할 수 있다.</li>
<li>1번처럼 콜백함수로 전달해주는 경우는 reduce처럼 함수를 기억하고 있는다. <red>기억되어있는 정보를 가지고 값을 변경하는 것이다.</red></li>
<li>2번처럼 값을 전달해주면 newState로 받아들여져서 종속성 배열이 바뀌면 렌더링이 발생하게된다. <red>기억하지 않고 새로운 값을 전달해주고 그 값으로 렌더링해준다.</red></li>
</ul>
<h2 id="🐍-useMemo"><a href="#🐍-useMemo" class="headerlink" title="🐍 useMemo"></a>🐍 useMemo</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useCallback</span>(fn, deps) === <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> fn, deps);</span><br></pre></td></tr></table></figure>

<p>useMemo()는 JavaScript 데이터 타입을 기억해야 할 때 사용합니다. 만약 기억해야할 타입이 함수라면 useCallback을 사용한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123; count: initialCount, step &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useMemo(() =&gt; fn, deps)</span></span><br><span class="line">  <span class="keyword">const</span> handleIncrement = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + step),</span><br><span class="line">    [step]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useCallback(fn, deps)</span></span><br><span class="line">  <span class="keyword">const</span> handleDecrement = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount - step);</span><br><span class="line">  &#125;, [step]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// memoized Components</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">DecButton</span> = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span>,</span><br><span class="line">    [handleDecrement]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">IncButton</span> = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">Counter.Button</span>&gt;</span></span>,</span><br><span class="line">    [handleIncrement]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;DecButton&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter.Display</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">Counter.Display</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;IncButton&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>useMemo()는 해당 컴포넌트를 기억한다.</li>
<li>종속성 배열 <code>[count, onDecrement, onIncrement, restProps]</code>이 변경되면 useMemo가 반환하는 값을 기억하고 실행한다.</li>
<li><code>setCount()</code>를 기억하고 있어 동일참조를 하므로 count 값을 기억하고 있다.</li>
</ul>
<h1 id="🏓-소감"><a href="#🏓-소감" class="headerlink" title="🏓 소감"></a>🏓 소감</h1><p>값을 기억하는 목적으로 좋지만… 굳이 이것을 사용하려고 복잡하게 또 많은 시간을 할애할 필요가 있을까 ?</p>
<aside>

<p>📌 회고할 때, profiler의 성능을 조금이나마 개선해보려고 노력해봤다라는 것을 해본 것을 인터뷰때 어필해보자.</p>
</aside>
]]></content>
      <categories>
        <category>React</category>
        <category>Hooks</category>
      </categories>
  </entry>
  <entry>
    <title>🐒 useEffect</title>
    <url>/2022/11/21/React/Hooks/%F0%9F%90%92-useEffect/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="📌-useEffect"><a href="#📌-useEffect" class="headerlink" title="📌 useEffect"></a>📌 useEffect</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(effectCallback);</span><br></pre></td></tr></table></figure>

<p>함수 컴포넌트에서 발생 가능한 side-effect(부수효과)를 관리하기 위해 사용한다.</p>
<ul>
<li>비동기 통신 요청 및 응답</li>
<li>DOM 조작</li>
<li>구독&#x2F;취소 등</li>
</ul>
<p>리액트가 할 수 없는 작업을 할 때, <code>useEffect()</code>를 사용한다.</p>
<h2 id="🌈-React-Hook-실행-흐름"><a href="#🌈-React-Hook-실행-흐름" class="headerlink" title="🌈 React Hook 실행 흐름"></a>🌈 React Hook 실행 흐름</h2><p><img src="/../../../images/useEffect/useFetch.png" alt="Hook 실행 흐름"></p>
<p>리액트 Hook의 실행흐름은 위 사진과 같다.</p>
<p>함수 컴포넌트에서 클래스 컴포넌트의 생명주기를 구현하기 위해 <code>useEffect()</code>가 <code>componentDidMount()</code>, <code>componentDidUpdate()</code>, <code>componentWillUnmount()</code> 메서드가 발생되는 주기를 대체할 수 있어야한다.</p>
<blockquote>
<p>useEffect()가 이들을 100% 대체할 순 없지만 문제없을 정도로 흉내내어 사용하고 있다.</p>
</blockquote>
<h2 id="🐥-이펙트-조건-처리"><a href="#🐥-이펙트-조건-처리" class="headerlink" title="🐥 이펙트 조건 처리"></a>🐥 이펙트 조건 처리</h2><h3 id="1-componentDidMount-대체-방법"><a href="#1-componentDidMount-대체-방법" class="headerlink" title="1. componentDidMount() 대체 방법"></a>1. <code>componentDidMount()</code> 대체 방법</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// componentDidMount</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<ul>
<li>useEffect 2번째 인자로 빈 배열을 주게되면 컴포넌트가 처음 mount 되는 때에 한번만 호출된다.</li>
</ul>
<h3 id="2-componentDidUpdate-대체-방법"><a href="#2-componentDidUpdate-대체-방법" class="headerlink" title="2. componentDidUpdate() 대체 방법"></a>2. <code>componentDidUpdate()</code> 대체 방법</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(</span><br><span class="line">	<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// componentDidMount</span></span><br><span class="line">		<span class="comment">// componentDidUpdate</span></span><br><span class="line">	&#125;.</span><br><span class="line">	[...dependencies]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>useEffect 2번째 인자로 빈 배열 대신 관리할 상태가 추가되면 해당 상태가 변경될 때에만 이펙트 함수가 실행된다. 즉, mount될 때는 1번 실행되고, update 될 때 마다 실행된다.</li>
</ul>
<h3 id="3-componentWillUnmount-대체-방법"><a href="#3-componentWillUnmount-대체-방법" class="headerlink" title="3. componentWillUnmount() 대체 방법"></a>3. <code>componentWillUnmount()</code> 대체 방법</h3><p>이벤트 구독&#x2F;취소처럼 컴포넌트가 제거될 때 실행되어야 하는 함수의 경우 다음과 같이 사용한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Tester</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> clearId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">count</span>(), <span class="number">500</span>);</span><br><span class="line">    <span class="comment">// 정리 함수(cleanup)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(clearId);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>cleanUp</code> 함수는 메모리 누수 방지를 위해 UI에서 컴포넌트를 제거하기 직전에 수행된다.</li>
<li><strong>Effect 함수가 실행될 때마다 cleanUp 함수가 먼저 실행되어 정리한다.</strong></li>
</ul>
<p>이는 <code>componentWillUnmount()</code>처럼 동작하는 것 같지만, 리액트 팀은 클래스 컴포넌트 생명주기대로 로직을 구현했을 때, 대규모 프로젝트에서 버그를 많이 발견하였다.</p>
<p>그리하여 리액트 팀에서는 구독취소 후 다시 구독하는 과정을 통해 이를 구현하였다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [props.<span class="property">friend</span>.<span class="property">id</span>]); <span class="comment">// props.friend.id가 바뀔 때만 재구독합니다.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
        <category>Hooks</category>
      </categories>
  </entry>
  <entry>
    <title>🐍 setState</title>
    <url>/2022/11/10/React/Hooks/%F0%9F%90%8D-setState/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="📌-setState"><a href="#📌-setState" class="headerlink" title="📌 setState"></a>📌 setState</h1><p><code>setState()</code> 메서드는 컴포넌트의 state 객체에 대한 업데이트를 실행합니다. state가 변경되면, 컴포넌트는 리렌더링됩니다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setState</span>(updater[, callback])</span><br></pre></td></tr></table></figure>

<p>updater에 컴포넌트의 state 변경사항을 인자로 넘겨주고 React에게 해당 컴포넌트를 재렌더링해야한다고 요청을 보내는 메서드이다.</p>
<ul>
<li><code>setState()</code> 호출은 비동기적으로 이뤄진다.</li>
<li>성능 향상을 위해 <red>즉각적으로 재렌더링을 발생시키지 않는다.</red><ul>
<li>여러 변경 사항을 일괄적으로 갱신하거나 나중에 미룰 수 있다. 때문에 <code>setState()</code> 호출하자마자 <code>this.state</code>에 접근하는 것은 문제가 될 수 있다.</li>
<li>대신 <code>componentDidUpdate()</code> 또는 <code>setState(updater, callback)</code>처럼 2번째 인자로 콜백함수를 전달하는 방법을 사용한다.</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">  &#123; <span class="attr">message</span>: <span class="string">&quot;상태 변경&quot;</span> &#125;,</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callback: &quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">message</span>) <span class="comment">// &#x27;상태 변경&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">message</span>); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>아직 렌더링이 발생하지 않았기 때문에 <code>this.state.message</code>의 값이 갱신되지 않았다.</li>
</ul>
<h1 id="🎒-2022-11-12-추가"><a href="#🎒-2022-11-12-추가" class="headerlink" title="🎒 2022.11.12 추가"></a>🎒 2022.11.12 추가</h1><h2 id="setState-첫번째-인수로-콜백함수-올-때"><a href="#setState-첫번째-인수로-콜백함수-올-때" class="headerlink" title="setState() 첫번째 인수로 콜백함수 올 때"></a><code>setState()</code> 첫번째 인수로 콜백함수 올 때</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BinaryCalcurator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">buttonStates</span>: <span class="title class_">Array</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">numberOfButtons</span>).<span class="title function_">fill</span>(<span class="literal">false</span>),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleToggleButtonContent = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">&#123; buttonStates &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">buttonStates</span>: buttonStates.<span class="title function_">map</span>(<span class="function">(<span class="params">buttonState, idx</span>) =&gt;</span></span><br><span class="line">        idx === index ? !buttonState : buttonState</span><br><span class="line">      ),</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>콜백함수는 이전 상태를 받아서 상태 변경을 요청한다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>Hooks</category>
      </categories>
  </entry>
  <entry>
    <title>💭 useState</title>
    <url>/2022/11/21/React/Hooks/%F0%9F%92%AD-useState/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="📌-useState"><a href="#📌-useState" class="headerlink" title="📌 useState"></a>📌 useState</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [stateValue, stateUpdater] = <span class="title function_">useState</span>(initState);</span><br></pre></td></tr></table></figure>

<p>함수 컴포넌트에서 상태를 관리할 때 사용하는 API이다.</p>
<ul>
<li><code>stateUpdater</code>는 보통 <code>setStateValue</code> 이런식으로 set을 붙혀서 사용한다.</li>
</ul>
<h2 id="🐸-지연된-초기화"><a href="#🐸-지연된-초기화" class="headerlink" title="🐸 지연된 초기화"></a>🐸 지연된 초기화</h2><p><code>initState</code>값은 초기 렌더링 시에만 사용되는 값으로, 이후 렌더링 시에는 무시된다. 만약 초깃값을 계산하는데 많은 시간이 필요한 경우 콜백함수를 통해 지연된 초기화 처리가 가능하다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [stateValue, stateUpdater] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 계산에 적지 않은 시간이 소요될 경우</span></span><br><span class="line">  <span class="comment">// 약 790.62890625 ms</span></span><br><span class="line">  <span class="keyword">const</span> initialState = <span class="title function_">fibonacci</span>(<span class="number">39</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 계산 이후: 지연된 초기화의 처리 값을 반환</span></span><br><span class="line">  <span class="keyword">return</span> initialState;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 또는 localStorage에서 값을 읽어오는 경우</span></span><br><span class="line"><span class="keyword">const</span> [stateValue, setUpdater] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> persnalization = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;persnalization&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(persnalization);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="⛳️-객체-타입-상태-관리"><a href="#⛳️-객체-타입-상태-관리" class="headerlink" title="⛳️ 객체 타입 상태 관리"></a>⛳️ 객체 타입 상태 관리</h2><p><code>updateState</code> 함수는 <code>setState</code> 함수처럼 객체 상태를 관리하기 합성된 객체를 반환해야 한다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, updateState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">  <span class="attr">key1</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">key2</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateState</span>(&#123;</span><br><span class="line">  ...state,</span><br><span class="line">  <span class="attr">key2</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>updateState</code> 함수는 상태 병합이 아닌 대체를 하므로 변경되지 않는 객체 값을 유지하기 위해서 위와 같이 해야한다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>Hooks</category>
      </categories>
  </entry>
  <entry>
    <title>&lt;Suspense&gt; 컴포넌트는 무엇인가?</title>
    <url>/2023/02/02/React/Suspense-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/Suspense-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</url>
    <content><![CDATA[<h1 id="컴포넌트란"><a href="#컴포넌트란" class="headerlink" title=" 컴포넌트란?"></a><Suspense> 컴포넌트란?</h1><p>자식 요소가 로딩중이 완료될 때 까지 fallback에 제공된 컴포넌트를 보여준다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SomeComponent</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><ul>
<li>리액트는 처음 마운트 되기 전에 렌더링이 중단된다면, 어떤 상태도 보존하지 않는다. 컴포넌트가 로드되면 리액트는 중단된 트리를 처음부터 렌더링을 시도한다.</li>
<li><Suspense> 컴포넌트는 컴포넌트 내부에서 startTransition이나 useDeferredValue로 인한 업데이트가 아닌 경우라면 fallback이 표시된다.</li>
<li>컴포넌트가 다시 일시 중단되었기 때문에 이미 보여진 컨텐츠를 감출 필요가 있다면, layout effect를 비운다. 다시 컨텐츠를 보여줄 준비가 됐을 때, 리액트는 layout effect를 발생시킨다. 이는 컨텐츠가 숨겨진 동안 DOM layout을 측정하지 않도록 한다.</li>
</ul>
<h2 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h2><p>컨텐츠가 로딩되는 동안에 fallback을 보여준다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Albums</span> <span class="keyword">from</span> <span class="string">&quot;./Albums.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ArtistPage</span>(<span class="params">&#123; artist &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;artist.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Albums</span> <span class="attr">artistId</span>=<span class="string">&#123;artist.id&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Loading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>🌀 Loading...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="컨텐츠를-한번에-공개"><a href="#컨텐츠를-한번에-공개" class="headerlink" title="컨텐츠를 한번에 공개"></a>컨텐츠를 한번에 공개</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Biography</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Panel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Albums</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Panel</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;</span><br></pre></td></tr></table></figure>

<p><Suspense> 내부에 하나의 컴포넌트라도 일시중단 되더라도 <strong>모든 하위 컴포넌트가 대기했다가 한번에 공개된다.</strong></p>
<h3 id="가장-가까운-의-fallback을-보여준다"><a href="#가장-가까운-의-fallback을-보여준다" class="headerlink" title="가장 가까운 의 fallback을 보여준다."></a>가장 가까운 <Suspense>의 fallback을 보여준다.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Details</span> <span class="attr">artistId</span>=<span class="string">&#123;artist.id&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Details</span>(<span class="params">&#123; artistId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Biography</span> <span class="attr">artistId</span>=<span class="string">&#123;artistId&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Panel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Albums</span> <span class="attr">artistId</span>=<span class="string">&#123;artistId&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Panel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>때문에 직접적인 자식이 아니더라도 Biography와 Albums와 가장 가까운 부모 <Suspense> 경계를 공유하기 때문에 함께 표시된다.</p>
<h3 id="로드-될-때-중첩된-컨텐츠-표시한다"><a href="#로드-될-때-중첩된-컨텐츠-표시한다" class="headerlink" title="로드 될 때, 중첩된 컨텐츠 표시한다."></a>로드 될 때, 중첩된 컨텐츠 표시한다.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">BigSpinner</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Biography</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">AlbumsGlimmer</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Panel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Albums</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Panel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;</span><br></pre></td></tr></table></figure>

<p>처음에 Biography가 로딩이 완료 되지 않았을 때, BigSpinner가 fallback으로 보여지고, 이후 Biography는 로딩이 완료되었기 때문에 보여지고, 아래 Albums이 로딩이 완료되지 않았다면 AlbumsGlimmer를 보여주고 있다가 로딩이 완료되어 Albums를 보여준다.</p>
<p>핵심은 Biography가 Albums 로딩이 완료될 때까지 기다리지 않는 다는 것이다.</p>
<h3 id="이미-공개된-컨텐츠가-숨겨지는-것을-방지하기"><a href="#이미-공개된-컨텐츠가-숨겨지는-것을-방지하기" class="headerlink" title="이미 공개된 컨텐츠가 숨겨지는 것을 방지하기"></a>이미 공개된 컨텐츠가 숨겨지는 것을 방지하기</h3><p><a href="https://codesandbox.io/s/0lgig0?file=/App.js&utm_medium=sandpack">Code Example Link</a></p>
<ul>
<li><Suspense> 내부에 startTransition이 사용되었다면, <span style="color:red;">fallback이 보여지지 않는다.</span></li>
<li>때문에 fallback의 BigSpinner에 의해 이전에 보여진 컨텐츠가 숨겨지는 것을 방지할 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>useEffect로 이전 상태 기반하여 상태 업데이트 하기</title>
    <url>/2023/02/06/React/useEffect%EB%A1%9C-%EC%9D%B4%EC%A0%84-%EC%83%81%ED%83%9C-%EA%B8%B0%EB%B0%98%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%98%EA%B8%B0/useEffect%EB%A1%9C-%EC%9D%B4%EC%A0%84-%EC%83%81%ED%83%9C-%EA%B8%B0%EB%B0%98%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="useEffect란"><a href="#useEffect란" class="headerlink" title="useEffect란?"></a>useEffect란?</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(setup, dependencies?)</span><br></pre></td></tr></table></figure>

<p>외부 시스템과 컴포넌트를 동기화 하는데 사용하는 React Hook이다. <strong>즉, 외부 시스템과 동기화하는 작업이 아니라면 useEffect를 사용하지 않는 것이 좋다.</strong></p>
<h2 id="params"><a href="#params" class="headerlink" title="params"></a>params</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>Effect 로직 함수로, 선택적으로 cleanup 함수를 반환할 수 있다.</p>
<ul>
<li>컴포넌트가 처음 DOM에 추가 되었을 때, setup 함수가 실행된다.</li>
<li>의존성이 변경되어 리렌더링이 발생한 이후, <span style='color:red;'>리액트는 이전 값으로 cleanup 함수 먼저 실행하고 새로운 값으로 setup 함수를 실행한다.</span></li>
<li><strong>컴포넌트가 DOM에서 제거된 후, 리액트는 클린업 함수를 한 번 실행한다.</strong></li>
</ul>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies?"></a>dependencies?</h3><p>setup 함수 코드 내부와 관련된 리액트 값들의 리스트이다. 리액트 값들은 컴포넌트 내부에서 선언된 props, state, 변수, 함수들을 의미한다.</p>
<ul>
<li>리액트는 이전 값과 dependencies를 Object.is() 메서드로 비교한다.</li>
<li>만약 dependencies를 명확히 기재하지 않는다면, 컴포넌트 리렌더링이 발생할 때마다 Effect가 다시 실행된다.</li>
</ul>
<h2 id="이전-상태를-기반으로-useEffect로-상태-업데이트-하기"><a href="#이전-상태를-기반으로-useEffect로-상태-업데이트-하기" class="headerlink" title="이전 상태를 기반으로 useEffect로 상태 업데이트 하기"></a>이전 상태를 기반으로 useEffect로 상태 업데이트 하기</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slider.js - 의존성 있는 경우</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setIndex</span>(index + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">&#125;, [index]);</span><br></pre></td></tr></table></figure>

<p>위 코드는 slider 프로젝트를 제작하다가 나온 코드이다. setInterval을 Effect 로직에 사용하였는데, 의존성으로 indexrk 있어 index가 변경될 때마다 해당 Effect 로직이 cleanup되고 setup되고를 반복하게 된다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slieder.js - 의존성 빈 배열인 경우</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setIndex</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p>위와 같이 바꿀 경우 코드는 동일하게 동작하지만, 이전 상태를 기반으로 상태를 업데이트할 때에는 이전 값을 직접 넣어주기보단 updater 함수를 콜백함수로 전달해줌으로서 의존성 데이터를 줄일 수 있다.</p>
<p><strong>그 결과, 처음 컴포넌트가 렌더링되고 한번만 실행되기 때문에 불필요한 setup과 cleanup 과정을 줄일 수 있다.</strong></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>boj-10844 쉬운 계단 수(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-10844-%EC%89%AC%EC%9A%B4-%EA%B3%84%EB%8B%A8-%EC%88%98-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>45656이란 수를 보자.</p>
<p>이 수는 인접한 모든 자리의 차이가 1이다. 이런 수를 계단 수라고 한다.</p>
<p>N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구해보자. 0으로 시작하는 수는 계단수가 아니다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="variable constant_">DP</span>.<span class="property">length</span> !== input + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>.<span class="title function_">push</span>([...<span class="title class_">Array</span>(<span class="number">10</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= input; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i][j] = ((<span class="variable constant_">DP</span>[i - <span class="number">1</span>][j - <span class="number">1</span>] || <span class="number">0</span>) + (<span class="variable constant_">DP</span>[i - <span class="number">1</span>][j + <span class="number">1</span>] || <span class="number">0</span>)) % <span class="number">1000000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[input].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> (acc + cur) % <span class="number">1000000000</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DP[i][j]</code>의 값은 길이가 i인 수가 j(0~9)로 끝나는 모든 경우의 수이다.</li>
<li>DP 배열을 하드코딩으로 직접 만들어줬다. 왜나하면 초기값 같은 경우는 직접 만드는 편이 더 로직이 간편하기 때문이다. 이후 input의 길이보다 1 더 큰 길이로 DP 배열에 추가하였다.<ul>
<li>이렇게 하지 않으면 DP[input]의 값이 존재하지 않는 값이여서 값을 할당할 수가 없다.</li>
</ul>
</li>
<li>주어진 테케에서 길이가 1인경우, 길이가 2인 경우의 패턴을 파악하였다.<ul>
<li>예를 들어 <code>DP[2][1]</code>인 경우 길이가 2이고 1로 끝나는 경우의 수는 1 앞에 올 수 있는 수는 0,2이다. 이 값이 바로 <code>DP[1][0]</code>과 <code>DP[1][2]</code> 이다.</li>
</ul>
</li>
<li>저번 문제에서도 그렇고 왜 10억을 값을 저장할 때 한번, 총합을 구할 때 두번 나눠주는지 이해가 안된다.</li>
<li>주의할 점은 끝나는 수가 0인 경우는 이전 숫자로 1만 올 수 있고, 끝나는 숫자가 9인 경우는 이전 숫자로 8만 올 수 있는 것을 고려해준 것이 바로 <code>||</code> 논리 연산자 부분이다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11052 카드 구매하기(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-11052-%EC%B9%B4%EB%93%9C-%EA%B5%AC%EB%A7%A4%ED%95%98%EA%B8%B0-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>요즘 민규네 동네에서는 스타트링크에서 만든 PS카드를 모으는 것이 유행이다.</p>
<p>PS카드는 PS(Problem Solving)분야에서 유명한 사람들의 아이디와 얼굴이 적혀있는 카드이다. 각각의 카드에는 등급을 나타내는 색이 칠해져 있고, 다음과 같이 8가지가 있다.</p>
<ul>
<li><strong>전설카드</strong></li>
<li><strong>레드카드</strong></li>
<li><strong>오렌지카드</strong></li>
<li><strong>퍼플카드</strong></li>
<li><strong>블루카드</strong></li>
<li><strong>청록카드</strong></li>
<li><strong>그린카드</strong></li>
<li><strong>그레이카드</strong></li>
</ul>
<p>카드는 카드팩의 형태로만 구매할 수 있고, 카드팩의 종류는 카드 1개가 포함된 카드팩, 카드 2개가 포함된 카드팩, … 카드 N개가 포함된 카드팩과 같이 총 N가지가 존재한다.</p>
<p>민규는 카드의 개수가 적은 팩이더라도 가격이 비싸면 높은 등급의 카드가 많이 들어있을 것이라는 미신을 믿고 있다. 따라서, 민규는 돈을 최대한 많이 지불해서 카드 N개 구매하려고 한다. 카드가 i개 포함된 카드팩의 가격은 Pi원이다.</p>
<p>예를 들어, 카드팩이 총 4가지 종류가 있고, P1 &#x3D; 1, P2 &#x3D; 5, P3 &#x3D; 6, P4 &#x3D; 7인 경우에 민규가 카드 4개를 갖기 위해 지불해야 하는 금액의 최댓값은 10원이다. 2개 들어있는 카드팩을 2번 사면 된다.</p>
<p>P1 &#x3D; 5, P2 &#x3D; 2, P3 &#x3D; 8, P4 &#x3D; 10인 경우에는 카드가 1개 들어있는 카드팩을 4번 사면 20원이고, 이 경우가 민규가 지불해야 하는 금액의 최댓값이다.</p>
<p>마지막으로, P1 &#x3D; 3, P2 &#x3D; 5, P3 &#x3D; 15, P4 &#x3D; 16인 경우에는 3개 들어있는 카드팩과 1개 들어있는 카드팩을 구매해 18원을 지불하는 것이 최댓값이다.</p>
<p>카드 팩의 가격이 주어졌을 때, N개의 카드를 구매하기 위해 민규가 지불해야 하는 금액의 최댓값을 구하는 프로그램을 작성하시오. N개보다 많은 개수의 카드를 산 다음, 나머지 카드를 버려서 N개를 만드는 것은 불가능하다. 즉, 구매한 카드팩에 포함되어 있는 카드 개수의 합은 N과 같아야 한다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 민규가 구매하려고 하는 카드의 개수 N이 주어진다. (1 ≤ N ≤ 1,000)</p>
<p>둘째 줄에는 Pi가 P1부터 PN까지 순서대로 주어진다. (1 ≤ Pi ≤ 10,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 민규가 카드 N개를 갖기 위해 지불해야 하는 금액의 최댓값을 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 5 6 7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">10 9 8 7 6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">50</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">1 1 2 3 5 8 13 21 34 55</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-4"><a href="#예제-입력-4" class="headerlink" title="예제 입력 4"></a>예제 입력 4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">5 10 11 12 13 30 35 40 45 47</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-4"><a href="#예제-출력-4" class="headerlink" title="예제 출력 4"></a>예제 출력 4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">50</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-5"><a href="#예제-입력-5" class="headerlink" title="예제 입력 5"></a>예제 입력 5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">5 2 8 10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-5"><a href="#예제-출력-5" class="headerlink" title="예제 출력 5"></a>예제 출력 5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-6"><a href="#예제-입력-6" class="headerlink" title="예제 입력 6"></a>예제 입력 6</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">3 5 15 16</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-6"><a href="#예제-출력-6" class="headerlink" title="예제 출력 6"></a>예제 출력 6</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="regexp">/\s/</span>);</span><br><span class="line"><span class="keyword">const</span> N = +input.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">const</span> prices = input.<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(N + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[i - j] + prices[j - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[N]);</span><br></pre></td></tr></table></figure>

<p>처음에는 반복문 1회만으로 가능할 것이라 생각하여 단일 반복문으로 패턴을 파악하였는데 테케만 통과하고 틀렸다고 나왔다.</p>
<p>그래서 다른 사람 해설을 보고 이해하였다.</p>
<p>ex) N &#x3D; 4</p>
<ol>
<li>i &#x3D; 1, DP[4]와 prices[4-1-1]+DP[1] 중 최대값 할당</li>
<li>i &#x3D; 2, DP[4]와 prices[4-2-1]+DP[2] 중 최대값 할당</li>
<li>i &#x3D; 3, DP[4]와 prices[4-3-1]+DP[3] 중 최대값 할당</li>
</ol>
<p>위 경우의 수를 반복해야하므로 이중 for문이 필요하다는 것을 알게되었다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11053 가장 긴 증가하는 부분수열(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-11053-%EA%B0%80%EC%9E%A5-%EA%B8%B4-%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84%EC%88%98%EC%97%B4-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.</p>
<p>예를 들어, 수열 A &#x3D; {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A &#x3D; {<strong>10</strong>, <strong>20</strong>, 10, <strong>30</strong>, 20, <strong>50</strong>} 이고, 길이는 4이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.</p>
<p>둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">10 20 10 30 20 50</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, a] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = a.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A[j] &lt; A[i]) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>처음 모두 자신의 길이를 자신을 포함하므로 1로 설정해준다.</li>
<li>만약 i 번째 수가 i보다 작은 번째의 수보다 크다면 DP[i]는 이전 DP값에 1을 더해준 것과 기존 DP[i]값 중 큰 값을 저장해둔다.</li>
<li>ex) <code>A = [10,20,10,30,20,50]</code>이고 DP[1]을 계산하면, <code>A[0] &lt; A[1]</code> 이므로 <code>DP[1] = DP[0] + 1</code>이다.<ul>
<li>왜냐하면 DP는 자신의 길이를 나타내는 것인데 이전 수보다 크다는 것은 자기 자신을 수열로 포함시킬 수 있다는 뜻이므로 +1을 해주는 것이다. 또한, 자신 보다 작은 수의 DP가 여러개 일 수도 있으므로 반복문을 돌면서 이들 중 최댓값만 저장해주면 된다.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11054 가장 긴 바이토닉 부분 수열(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-11054-%EA%B0%80%EC%9E%A5-%EA%B8%B4-%EB%B0%94%EC%9D%B4%ED%86%A0%EB%8B%89-%EB%B6%80%EB%B6%84-%EC%88%98%EC%97%B4-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수열 S가 어떤 수 Sk를 기준으로 S1 &lt; S2 &lt; … Sk-1 &lt; Sk &gt; Sk+1 &gt; … SN-1 &gt; SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.</p>
<p>예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만, {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.</p>
<p>수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">1 5 2 1 4 3 4 5 2 1</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LBS</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> N = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> DP_inc = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> DP_dec = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (A[j] &lt; A[i]) &#123;</span><br><span class="line">        DP_inc[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(DP_inc[i], DP_inc[j] + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (A[j] &lt; A[i]) &#123;</span><br><span class="line">        DP_dec[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(DP_dec[i], DP_dec[j] + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DP</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>.<span class="title function_">push</span>(DP_inc[i] + DP_dec[i] - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">LBS</span>(A));</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><ol>
<li>수열의 시작 부분부터 해당 index의 증가하는 부분수열 길이를 구한다.</li>
<li>수열의 마지막 부분부터 해당 index의 감소하는 부분수열의 길이를 구한다.</li>
<li>증가하는 부분 수열 길이와 감소하는 부분 수열의 길이를 더하여 가장 큰 값의 길이를 구하면 된다.</li>
</ol>
<p>단, 이 때 기본값으로 세팅한 길이 1이 2번 더해진 것이므로 1을 빼줘야한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 나의 오답</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LBS</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> N = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (A[j] &lt; A[i]) &#123;</span><br><span class="line">        <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[j] + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = i + <span class="number">1</span>; k &lt; N; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (A[k] &gt;= A[k - <span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> elem - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">LBS</span>(A));</span><br></pre></td></tr></table></figure>

<p>처음에는 감소하는 부분 수열을 구할 때, 역순으로 시작하지 않고 증가하는 부분 수열 구할 때 새로운 반복문으로 해당 index부터 시작하는 감소하는 부분 수열을 구하였는데 이는 DP라는 배열 하나를 가지고 반복문을 돌렸기 때문에 제대로 동작하지 않고 저장값이 꼬여버릴 수 있다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11057 오르막 수(JavaScript)</title>
    <url>/2023/02/14/Algorithm/boj/DP/boj-11057-%EC%98%A4%EB%A5%B4%EB%A7%89-%EC%88%98-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>오르막 수는 수의 자리가 오름차순을 이루는 수를 말한다. 이때, 인접한 수가 같아도 오름차순으로 친다.</p>
<p>예를 들어, 2234와 3678, 11119는 오르막 수이지만, 2232, 3676, 91111은 오르막 수가 아니다.</p>
<p>수의 길이 N이 주어졌을 때, 오르막 수의 개수를 구하는 프로그램을 작성하시오. 수는 0으로 시작할 수 있다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N (1 ≤ N ≤ 1,000)이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 길이가 N인 오르막 수의 개수를 10,007로 나눈 나머지를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">220</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> length = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Sum</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: length + <span class="number">1</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">2</span>) <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> <span class="number">10</span> - i);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = j; k &lt;= <span class="number">9</span>; k++) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i][j] += <span class="variable constant_">DP</span>[i - <span class="number">1</span>][k] % <span class="number">10007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Sum</span>(<span class="variable constant_">DP</span>[length]) % <span class="number">10007</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>길이가 i이고, j로 시작하는 수로 오름차순을 만들 수 있는 경우의 수를 DP 배열에 저장하였다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 점화식</span></span><br><span class="line"><span class="variable constant_">DP</span>[i][j] = <span class="variable constant_">DP</span>[i-<span class="number">1</span>]의 j~<span class="number">9</span>까지의 합</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11055 가장 큰 증가 부분 수열(JavaScript)</title>
    <url>/2023/02/18/Algorithm/boj/DP/boj-11055-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%A6%9D%EA%B0%80-%EB%B6%80%EB%B6%84-%EC%88%98%EC%97%B4-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수열 A가 주어졌을 때, 그 수열의 증가 부분 수열 중에서 합이 가장 큰 것을 구하는 프로그램을 작성하시오.</p>
<p>예를 들어, 수열 A &#x3D; {1, 100, 2, 50, 60, 3, 5, 6, 7, 8} 인 경우에 합이 가장 큰 증가 부분 수열은 A &#x3D; {1, 100, 2, 50, 60, 3, 5, 6, 7, 8} 이고, 합은 113이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.</p>
<p>둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 수열 A의 합이 가장 큰 증가 부분 수열의 합을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">1 100 2 50 60 3 5 6 7 8</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">113</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">maxIncreasingSubArray</span>(<span class="params">A</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = A.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DP</span> = [...A];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (A[i] &gt; A[j] &amp;&amp; <span class="variable constant_">DP</span>[i] &lt; <span class="variable constant_">DP</span>[j] + A[i]) &#123;</span><br><span class="line">        <span class="variable constant_">DP</span>[i] = <span class="variable constant_">DP</span>[j] + A[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxIncreasingSubArray</span>(A));</span><br></pre></td></tr></table></figure>

<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ol>
<li><p>DP는 해당 인덱스까지 가장 긴 부분수열의 합을 나타낸다. 이를 계산하기 편하게 하기 위해 DP에 A 수열의 값을 spread 문법으로 복사해준다.</p>
</li>
<li><p>어짜피 DP[0]은 1로 확정이므로 i(인덱스)가 1부터 반복문을 순회한다.<br>이는 DP에 값을 저장하기 위한 반복문이다.</p>
</li>
<li><p>i 이전까지 수열 값과 A[i]값을 비교하여 A[i]가 A[j]보다 크고 DP[i] 값이 DP[j]+A[i] 보다 작으면 증가하는 부분 수열에 포함될 수 있다.</p>
</li>
</ol>
<p>그렇기 때문에 해당 DP[i]값을 새로운 값으로 갱신해준다.</p>
<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = [<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br></pre></td></tr></table></figure>

<h3 id="1-i-1-amp-amp-j-0-일-때"><a href="#1-i-1-amp-amp-j-0-일-때" class="headerlink" title="1. i = 1 &amp;&amp; j = 0 일 때"></a>1. <code>i = 1 &amp;&amp; j = 0</code> 일 때</h3><ul>
<li>A[1] &#x3D; 100, A[0] &#x3D; 1이므로 A[i] &gt; A[j] 조건 만족한다</li>
<li>DP[1] &lt; DP[0] + A[1] 만족하므로 DP[1] &#x3D; DP[0] + A[1]로 갱신</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DP</span> = [<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br></pre></td></tr></table></figure>

<h3 id="2-i-x3D-2-이고"><a href="#2-i-x3D-2-이고" class="headerlink" title="2. i &#x3D; 2 이고"></a>2. i &#x3D; 2 이고</h3><h4 id="2-1-j-x3D-0-일-때"><a href="#2-1-j-x3D-0-일-때" class="headerlink" title="2.1. j &#x3D; 0 일 때"></a>2.1. j &#x3D; 0 일 때</h4><ul>
<li>A[2]&#x3D;2, A[0] &#x3D; 1 이므로 A[i] &gt; A[j] 조건 만족한다.</li>
<li>DP[2] &lt; DP[0] + A[2] 만족하므로 DP[2] &#x3D; DP[0] + A[2]로 갱신</li>
</ul>
<h4 id="2-2-j-x3D-1-일-때"><a href="#2-2-j-x3D-1-일-때" class="headerlink" title="2.2. j &#x3D; 1 일 때,"></a>2.2. j &#x3D; 1 일 때,</h4><ul>
<li>A[2]&#x3D;2, A[1] &#x3D; 100 이므로 A[i] &gt; A[j] 조건 만족하지 못한다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DP</span> = [<span class="number">1</span>, <span class="number">101</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br></pre></td></tr></table></figure>

<p>즉, 0번째부터 해당 인덱스까지 수열의 두 수를 비교하고 DP에 저장된 값도 비교하여 둘다 만족하면 DP 값을 갱신하는 것이다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-1149 RGB 거리(JavaScript)</title>
    <url>/2023/02/16/Algorithm/boj/DP/boj-1149-RGB-%EA%B1%B0%EB%A6%AC-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.</p>
<p>집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.</p>
<ul>
<li>1번 집의 색은 2번 집의 색과 같지 않아야 한다.</li>
<li>N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.</li>
<li>i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.</li>
</ul>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">26 40 83</span><br><span class="line">49 60 57</span><br><span class="line">13 89 99</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">96</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 100 100</span><br><span class="line">100 1 100</span><br><span class="line">100 100 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 100 100</span><br><span class="line">100 100 100</span><br><span class="line">1 100 100</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">102</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-4"><a href="#예제-입력-4" class="headerlink" title="예제 입력 4"></a>예제 입력 4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">30 19 5</span><br><span class="line">64 77 64</span><br><span class="line">15 19 97</span><br><span class="line">4 71 57</span><br><span class="line">90 86 84</span><br><span class="line">93 32 91</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-4"><a href="#예제-출력-4" class="headerlink" title="예제 출력 4"></a>예제 출력 4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">208</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-5"><a href="#예제-입력-5" class="headerlink" title="예제 입력 5"></a>예제 입력 5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">71 39 44</span><br><span class="line">32 83 55</span><br><span class="line">51 37 63</span><br><span class="line">89 29 100</span><br><span class="line">83 58 11</span><br><span class="line">65 13 15</span><br><span class="line">47 25 29</span><br><span class="line">60 66 19</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-5"><a href="#예제-출력-5" class="headerlink" title="예제 출력 5"></a>예제 출력 5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">253</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, ...arr] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> input = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">houseCosts</span>) =&gt;</span> houseCosts.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n, rgb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line">  <span class="variable constant_">DP</span>[<span class="number">1</span>] = rgb[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i][<span class="number">0</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable constant_">DP</span>[i - <span class="number">1</span>][<span class="number">1</span>], <span class="variable constant_">DP</span>[i - <span class="number">1</span>][<span class="number">2</span>]) + rgb[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="variable constant_">DP</span>[i][<span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable constant_">DP</span>[i - <span class="number">1</span>][<span class="number">0</span>], <span class="variable constant_">DP</span>[i - <span class="number">1</span>][<span class="number">2</span>]) + rgb[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="variable constant_">DP</span>[i][<span class="number">2</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable constant_">DP</span>[i - <span class="number">1</span>][<span class="number">1</span>], <span class="variable constant_">DP</span>[i - <span class="number">1</span>][<span class="number">0</span>]) + rgb[i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="variable constant_">DP</span>[n]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">solution</span>(+N, input);</span><br></pre></td></tr></table></figure>

<ul>
<li>처음에는 1번째 집이 R,G,B를 선택하는 경우의 수를 구하고 이를 이 중 가장 작은 것을 가지고 다음 집을 구한다고 생각했다. 생각은 했는데 이를 코드로 어떻게 짜야할지 생각을 못해서 경우의수를 일일히 적어보고 패턴을 찾아보려고 했다.</li>
<li>하지만 못찾아서 다른 사람의 해설을 참고하였다. 문제가 복잡해보이지만 단순하게 생각하면 인접한 집끼리는 같은 색상을 가질 수 없다는 것이 전부이다.</li>
</ul>
<p>우선, DP 배열을 만들고 해당 DP[i][0]은 i번째 집을 Red로 색칠하는 비용을 저장한다.</p>
<ul>
<li>DP[1] &#x3D; input[0] 이 성립한다.</li>
<li>이후 i &#x3D; 2 부터 반복문을 진행한다.<ol>
<li>DP[2]가 R로 색칠될 경우의 비용을 저장한다. ⇒ DP[2]가 R 이기 위해서는 DP[1]에서 G, B로 색칠되어야만 가능하다. 즉 DP[1]에서 G, B를 칠하는 비용 중 최소값을 구하고 이에 input의 2번째 집에 해당하는 비용 중 R을 색칠하는 비용을 더해주면 DP[2][0] 즉, 2번째 집을 R로 칠할 때 최소 비용을 구할 수 있다.</li>
<li>DP[2][1]은 이전 집에서 R, B 중 최소값에다가 input의 2번째 집에 해당하는 비용 중 G을 색칠하는 비용을 더해주면 DP[2][1]의 최솟값을 구할 수 있다.</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11722 가장 긴 감소하는 부분 수열(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-11722-%EA%B0%80%EC%9E%A5-%EA%B8%B4-%EA%B0%90%EC%86%8C%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84-%EC%88%98%EC%97%B4-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수열 A가 주어졌을 때, 가장 긴 감소하는 부분 수열을 구하는 프로그램을 작성하시오.</p>
<p>예를 들어, 수열 A &#x3D; {10, 30, 10, 20, 20, 10} 인 경우에 가장 긴 감소하는 부분 수열은 A &#x3D; {10, 30, 10, 20, 20, 10} 이고, 길이는 3이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.</p>
<p>둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 수열 A의 가장 긴 감소하는 부분 수열의 길이를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">10 30 10 20 20 10</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LDS</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> N = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (A[j] &gt; A[i]) &#123;</span><br><span class="line">        <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[j] + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">LDS</span>(A));</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><p>지난 번에 가장 긴 증가하는 부분수열과 조건문만 수정하면 되는 문제였다.</p>
<p>DP는 A 수열의 index에서 감소하는 부분 수열의 길이를 저장한다.</p>
<p>DP의 해당 index와 이전 index까지의 수열 요소와 비교하여 이전 index가 더 작다면, DP값을 갱신해주는 문제이다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-11726 2xn 타일링(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-11726-2xn-%ED%83%80%EC%9D%BC%EB%A7%81-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>2×n 크기의 직사각형을 1×2, 2×1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<p>아래 그림은 2×5 크기의 직사각형을 채운 한 가지 방법의 예이다.</p>
<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11726/1.png" alt="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11726/1.png"></p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [];</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= input; i++) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>[i] = (<span class="variable constant_">DP</span>[i - <span class="number">1</span>] + <span class="variable constant_">DP</span>[i - <span class="number">2</span>]) % <span class="number">10007</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[input]);</span><br></pre></td></tr></table></figure>

<p>패턴을 찾아보려고 노력했지만 결국 못찾고 다른 사람 코드를 보았다.. DP는 작은 문제에서 나온 결과물을 가지고 큰 문제를 해결하는 문제이다. 즉, 작은 문제의 결과물을 큰 문제에 결과물에 대입할 수 있는 안목이 필요하다.</p>
<p>위 문제는 2x1 타일을 가장 왼쪽에 세로로 배치했을 때, 2x1 타일을 가장 왼쪽에 가로로 2줄 배치했을 때 경우의 수로 나뉜다.</p>
<p>n &#x3D; 1인 경우는 1가지이고, n &#x3D; 2인 경우 2가지를 그림으로 그려본다.</p>
<p><img src="/../../../../images/boj/11726/Frame%201.png" alt="Frame 1.png"></p>
<ul>
<li>즉, 왼쪽에 세로로 2x1을 배치했을 때 경우의 수는 n-1 경우의 수와 같고, 왼쪽에 가로로 2줄 배치했을 때경우의 수는 n-2의 경우의 수와 같다.</li>
<li>따라서 DP[n] &#x3D; DP[n-1] + DP[n-2]가 성립한다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-1309 동물원(JavaScript)</title>
    <url>/2023/02/16/Algorithm/boj/DP/boj-1309-%EB%8F%99%EB%AC%BC%EC%9B%90-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>어떤 동물원에 가로로 두칸 세로로 N칸인 아래와 같은 우리가 있다.</p>
<p><img src="https://www.acmicpc.net/upload/201004/dnfl.JPG" alt="https://www.acmicpc.net/upload/201004/dnfl.JPG"></p>
<p>이 동물원에는 사자들이 살고 있는데 사자들을 우리에 가둘 때, 가로로도 세로로도 붙어 있게 배치할 수는 없다. 이 동물원 조련사는 사자들의 배치 문제 때문에 골머리를 앓고 있다.</p>
<p>동물원 조련사의 머리가 아프지 않도록 우리가 2*N 배열에 사자를 배치하는 경우의 수가 몇 가지인지를 알아내는 프로그램을 작성해 주도록 하자. 사자를 한 마리도 배치하지 않는 경우도 하나의 경우의 수로 친다고 가정한다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 우리의 크기 N(1≤N≤100,000)이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 사자를 배치하는 경우의 수를 9901로 나눈 나머지를 출력하여라.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">41</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/92aaf16f-55a1-4e76-8e90-9178ef81c778/Group_2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45/20230215/us-west-2/s3/aws4_request&X-Amz-Date=20230215T153007Z&X-Amz-Expires=86400&X-Amz-Signature=a13b494f79663385377ccb5f19c9dfeeb3546d93ae8759b7801c12087576d3da&X-Amz-SignedHeaders=host&response-content-disposition=filename=%22Group%25202.png%22&x-id=GetObject" alt="해설사진"></p>
<p>N &#x3D; 3 까지의 경우의 수를 적고나서 점화식을 생각해보았다. 처음에는 <code>DP[i] = 2*DP[i-1] + (2**(i-1) - 1)</code> 이라고 생각했는데 오답이였다.</p>
<p>다시 점화식을 세웠다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DP</span>[i] = <span class="number">2</span> * <span class="variable constant_">DP</span>[i - <span class="number">1</span>] + <span class="variable constant_">DP</span>[i - <span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= input; i++) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>[i] = (<span class="number">2</span> * <span class="variable constant_">DP</span>[i - <span class="number">1</span>] + <span class="variable constant_">DP</span>[i - <span class="number">2</span>]) % <span class="number">9901</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[input]);</span><br></pre></td></tr></table></figure>

<p>위 처럼 직접 경우의 수를 다 계산할 수 있었지만, DP를 2차원 배열로 설정하고 첫번째 칸에 공백이 오는경우, 좌측에 사자 채우는 경우, 우측에 사자 채우는 경우를 나눠서 구해볼 수 도 있을 것 같다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-13398 연속합2(JavaScript)</title>
    <url>/2023/02/22/Algorithm/boj/DP/boj-13398-%EC%97%B0%EC%86%8D%ED%95%A92-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다. 또, 수열에서 수를 하나 제거할 수 있다. (제거하지 않아도 된다)</p>
<p>예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 수를 제거하지 않았을 때의 정답은 12+21인 33이 정답이 된다.</p>
<p>만약, -35를 제거한다면, 수열은 10, -4, 3, 1, 5, 6, 12, 21, -1이 되고, 여기서 정답은 10-4+3+1+5+6+12+21인 54가 된다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 답을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10 -4 3 1 5 6 -35 12 21 -1</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">54</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [A[<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DPWithRemoval</span> = [A[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; A.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i - <span class="number">1</span>] + A[i], A[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; A.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="title class_">DPWithRemoval</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i - <span class="number">1</span>], A[i] + <span class="title class_">DPWithRemoval</span>[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DPMax</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DPWithRemovalMax</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="title class_">DPWithRemoval</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">DPMax</span>, <span class="title class_">DPWithRemovalMax</span>));</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><p>수열 요소 중 한가지를 제거하거나 제거하지 않을 수도 있다. 각각의 경우의 수를 고려해주면 너무 많으니 각 수열의 요소를 제거한 DP 배열을 새로 만들어둔다.</p>
<p>DPWithRemoval은 나 자신을 제거하는 경우 또는 이전 값에서 제거된 경우 2가지 경우의 수가 있다.</p>
<ol>
<li>나 자신이 제거된 경우라면, 이전 값이 제거되지 않은 DP 배열의 이전값을 그대로 가져온다.</li>
<li>이전 값에서 제거된 경우라면, 이전 값에서 제거된 값을 저장한 DPWithRemoval 배열에서 이전값을 가져와 나 자신을 더한다.</li>
</ol>
<p>DPWithRemoval[i]는 1,2번의 경우 중 최댓값만 저장하면 된다.</p>
<p>이렇게 하면 수열의 각 숫자마다 제거되었는지 아닌지 경우를 따져서 최댓값만 구할 수 있게된다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-14002 가장 긴 증가하는 부분수열 4(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-14002-%EA%B0%80%EC%9E%A5-%EA%B8%B4-%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84%EC%88%98%EC%97%B4-4-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.</p>
<p>예를 들어, 수열 A &#x3D; {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A &#x3D; {<strong>10</strong>, <strong>20</strong>, 10, <strong>30</strong>, 20, <strong>50</strong>} 이고, 길이는 4이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.</p>
<p>둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.</p>
<p>둘째 줄에는 가장 긴 증가하는 부분 수열을 출력한다. 그러한 수열이 여러가지인 경우 아무거나 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">10 20 10 30 20 50</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">10 20 30 50</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 나의 오답</span></span><br><span class="line"><span class="keyword">const</span> [N, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A[j] &lt; A[i]) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LIS</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> LIS_Array = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="variable constant_">DP</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> elem === i + <span class="number">1</span>);</span><br><span class="line">  LIS_Array.<span class="title function_">push</span>(A[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">LIS</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(LIS_Array.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>기존 LIS를 구하는 로직에서 DP에 해당하는 LIS뿐만 아니라 그 때의 배열까지 생성해주도록 하였다.</li>
<li>처음 배열 길이만큼 반복문을 순회하면서 DP값에서 Index를 찾는다. 해당 index의 A 수열의 값을 넣어준다.</li>
<li>왜 틀렸는지 이유를 모르겠어서 해설을 보게되었다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N &#125;, <span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A[j] &lt; A[i]) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">LIS</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>);</span><br><span class="line"><span class="keyword">let</span> LIS_Array = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">DP</span>[i] === <span class="variable constant_">LIS</span>) &#123;</span><br><span class="line">    LIS_Array = [A[i], ...LIS_Array];</span><br><span class="line">    <span class="variable constant_">LIS</span>--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(LIS_Array.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(LIS_Array.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>이전 내 코드는 findIndex 메서드로 제일 앞에서 부터 해당 인덱스를 찾아주도록 하였다. 하지만 이런 경우 반례가 생긴다. 왜냐하면 내가 처음에 DP의 초기값을 모두 1로 설정해두었기 때문에 LIS_Array의 배열의 데이터가 이상하게 들어올 수 있다</li>
</ul>
<h3 id="반례"><a href="#반례" class="headerlink" title="반례"></a>반례</h3><p>N &#x3D; 14, A &#x3D; [10, 12, 1, 3, 5, 6, 7, 10, 12, 2, 4, 7, 10, 12]</p>
<ul>
<li>findIndex로 앞에서부터 찾았을 경우: LIS_Array &#x3D; [10, 12, 5, 6, 7, 10, 12]</li>
<li>반복문 역순으로 찾았을 경우: LIS_Array &#x3D; [1, 3, 5, 6, 7, 10, 12]</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-1463 1로 만들기(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-1463-1%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.</p>
<ol>
<li>X가 3으로 나누어 떨어지면, 3으로 나눈다.</li>
<li>X가 2로 나누어 떨어지면, 2로 나눈다.</li>
<li>1을 뺀다.</li>
</ol>
<p>정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [];</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= input; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> availables = [<span class="variable constant_">DP</span>[i - <span class="number">1</span>]];</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    availables.<span class="title function_">push</span>(<span class="variable constant_">DP</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(i / <span class="number">2</span>)]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    availables.<span class="title function_">push</span>(<span class="variable constant_">DP</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(i / <span class="number">3</span>)]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable constant_">DP</span>[i] = <span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">min</span>(...availables);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[input]);</span><br></pre></td></tr></table></figure>

<p>DP는 작은 문제부터 해결하여 이를 저장하여 큰 문제를 해결하는 프로그래밍 방식이다.</p>
<ol>
<li>자연수 2부터 N까지 수가 주어진 3가지 연산으로 1을 만들 수 있는 최소한의 연산 횟수를 담은 배열 DP를 생성한다.</li>
<li>예를 들어 숫자 2는 1을 만들 수 있는 연산횟수가 1회이므로 DP[2] &#x3D; 1 이다. 그렇다면 DP[6]는 어떻게 알 수 있는가? 바로 숫자 6을 3가지 연산을 수행한 결과값(5,2,3)을 DP 배열에서 찾고 1을 더해주면 된다. DP[6] &#x3D; 1 + (DP[2], DP[3], DP[5] 중 최솟값)</li>
</ol>
<p>나는 중간에 2로 나눴을 때와 3으로 나눴을 때를 else if로 하는 바람에 2로 나눠지면 3으로는 못나누도록 코드를 짜서 계속 틀렸다고 나왔었다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-15988 1,2,3 더하기 3(JavaScript)</title>
    <url>/2023/02/17/Algorithm/boj/DP/boj-15988-1-2-3-%EB%8D%94%ED%95%98%EA%B8%B0-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다.</p>
<ul>
<li>1+1+1+1</li>
<li>1+1+2</li>
<li>1+2+1</li>
<li>2+1+1</li>
<li>2+2</li>
<li>1+3</li>
<li>3+1</li>
</ul>
<p>정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 1,000,000보다 작거나 같다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">44</span><br><span class="line">274</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"><span class="keyword">const</span> N = input.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">forEach</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i] = (<span class="variable constant_">DP</span>[i - <span class="number">3</span>] + <span class="variable constant_">DP</span>[i - <span class="number">2</span>] + <span class="variable constant_">DP</span>[i - <span class="number">1</span>]) % <span class="number">1000000009</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[num]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1을 1,2,3으로 만들 수 있는 경우의 수, 2를 1,2,3으로 만들 수 있는 경우의 수, 3을 1,2,3으로 만들 수 있는 경우의 수는 직접 구할 수 있어서 구하였다.</li>
<li>4부터는 맨 마지막에 1,2,3이 오는 경우의 수를 나누어서 생각하였다.<ul>
<li>맨 마지막에 1이 오는 경우 ⇒ 1+1+1+1, 1+2+1, 2+1+1, 3+1 ⇒ DP[4-1]</li>
<li>맨 마지막에 2가 오는 경우 ⇒ 1+1+2, 2+2 ⇒ DP[4-2]</li>
<li>맨 마지막에 3이 오는 경우 ⇒ 1+3 ⇒ DP[4-3]</li>
</ul>
</li>
</ul>
<p>하지만 위와 같은 방법으로 하게되면 n이 1,000,000이 주어졌을 때, 반복문은 n-3회 진행하므로 시간초과가 난다. <strong>심지어 테스트 케이스 수가 T개 주어지는 만큼 n-3회 반복해야 하므로 매우 오래걸릴 수도 있게된다.</strong></p>
<p>즉, input 값 중에서 가장 큰 값으로 반복문 한번만 순회한 다음, 완성된 DP 배열에서 해당 값을 찾는 식으로 방법을 바꿨다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"><span class="keyword">const</span> N = input.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">4</span>) <span class="keyword">return</span> arr[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i] = (<span class="variable constant_">DP</span>[i - <span class="number">3</span>] + <span class="variable constant_">DP</span>[i - <span class="number">2</span>] + <span class="variable constant_">DP</span>[i - <span class="number">1</span>]) % <span class="number">1000000009</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>];</span><br><span class="line"><span class="title function_">solution</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...input), <span class="variable constant_">DP</span>);</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">forEach</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[num]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-15990 1,2,3 더하기 5(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-15990-1-2-3-%EB%8D%94%ED%95%98%EA%B8%B0-5-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 3가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다. 단, 같은 수를 두 번 이상 연속해서 사용하면 안 된다.</p>
<ul>
<li>1+2+1</li>
<li>1+3</li>
<li>3+1</li>
</ul>
<p>정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 100,000보다 작거나 같다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">9</span><br><span class="line">27</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 시간 초과</span></span><br><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> T = +input.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">const</span> nums = input.<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"><span class="keyword">const</span> N = <span class="title class_">Math</span>.<span class="title function_">max</span>(...nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DP[n][k] 는 n을 만들 때 끝의 자리수가 k로 끝나는 경우의 수를 나타낸다. (k = 1,2,3)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable constant_">DP</span>[i][j] = (<span class="variable constant_">DP</span>[i - j][<span class="number">2</span>] + <span class="variable constant_">DP</span>[i - j][<span class="number">3</span>]) % <span class="number">1000000009</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (j === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable constant_">DP</span>[i][j] = (<span class="variable constant_">DP</span>[i - j][<span class="number">1</span>] + <span class="variable constant_">DP</span>[i - j][<span class="number">3</span>]) % <span class="number">1000000009</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (j === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="variable constant_">DP</span>[i][j] = (<span class="variable constant_">DP</span>[i - j][<span class="number">1</span>] + <span class="variable constant_">DP</span>[i - j][<span class="number">2</span>]) % <span class="number">1000000009</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[num].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> (acc + cur) % <span class="number">1000000009</span>, <span class="number">0</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> T = +input.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">const</span> nums = input.<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"><span class="keyword">const</span> N = <span class="title class_">Math</span>.<span class="title function_">max</span>(...nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DP[n][k] 는 n을 만들 때 끝의 자리수가 k로 끝나는 경우의 수를 나타낸다. (k = 1,2,3)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 2+1</span></span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// 1+2</span></span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= N; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt;= <span class="number">3</span>; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j === k) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="variable constant_">DP</span>[i][j] += <span class="variable constant_">DP</span>[i - j][k] % <span class="number">1000000009</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[num].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> (acc + cur) % <span class="number">1000000009</span>, <span class="number">0</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>DP[n][k]는 n 을 만들 때, 끝의 자리수가 k로 끝나는 경우의 수를 나타낸다. (k &#x3D; 1,2,3)</li>
<li>j가 1이면 k는 1이 아니여야만 가능하다. 왜냐하면 연속해서 올 수 없기 때문이다.</li>
<li>DP 저장을 해줄 때에도 1000000009을 나눠주고 합한 것도 나눠줘야하는 이유를 모르겠다.</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-1699 제곱수의 합(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-1699-%EC%A0%9C%EA%B3%B1%EC%88%98%EC%9D%98-%ED%95%A9-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>어떤 자연수 N은 그보다 작거나 같은 제곱수들의 합으로 나타낼 수 있다. 예를 들어 11&#x3D;32+12+12(3개 항)이다. 이런 표현방법은 여러 가지가 될 수 있는데, 11의 경우 11&#x3D;22+22+12+12+12(5개 항)도 가능하다. 이 경우, 수학자 숌크라테스는 “11은 3개 항의 제곱수 합으로 표현할 수 있다.”라고 말한다. 또한 11은 그보다 적은 항의 제곱수 합으로 표현할 수 없으므로, 11을 그 합으로써 표현할 수 있는 제곱수 항의 최소 개수는 3이다.</p>
<p>주어진 자연수 N을 이렇게 제곱수들의 합으로 표현할 때에 그 항의 최소개수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 100,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>주어진 자연수를 제곱수의 합으로 나타낼 때에 그 제곱수 항의 최소 개수를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-4"><a href="#예제-입력-4" class="headerlink" title="예제 입력 4"></a>예제 입력 4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-4"><a href="#예제-출력-4" class="headerlink" title="예제 출력 4"></a>예제 출력 4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-5"><a href="#예제-입력-5" class="headerlink" title="예제 입력 5"></a>예제 입력 5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-5"><a href="#예제-출력-5" class="headerlink" title="예제 출력 5"></a>예제 출력 5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: input + <span class="number">1</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= input; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(i); j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> sqrt = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (sqrt === <span class="built_in">parseInt</span>(sqrt)) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[i - j ** <span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[input]);</span><br></pre></td></tr></table></figure>

<ul>
<li>처음에는 단순히 초기값을 가지고 다음값을 구하는 식으로만 했었는데, 이렇게 할 경우 최소항을 비교하여 저장하면서 진행할 수 없다고 판단하여 2중 for문을 사용하였다.</li>
<li>그 결과, 각 DP 마다 해당 index의 제곱근을 빼준 숫자의 DP에 +1 해준 것과 현재 DP를 비교했다.</li>
</ul>
<p>ex) input &#x3D; 18이라면, DP[18] &#x3D; 18인 상태로 시작한다.</p>
<ol>
<li>j &#x3D; 1 인 경우, DP[17] + 1 &#x3D; 3이므로, DP[18] &#x3D; 3를 저장한다.</li>
<li>j &#x3D; 2 인 경우, DP[14] + 1 &#x3D; 4이므로, 이전 값을 그대로 둔다.</li>
<li>j &#x3D; 3 인 경우, DP[9] + 1 &#x3D; 2 이므로, DP[18] &#x3D; 2를 저장한다.</li>
<li>j &#x3D; 4 인 경우, DP[2] + 1 &#x3D; 3 이므로 이전 값을 그대로 둔다.</li>
</ol>
<p>j는 제곱근 이전 까지만 순회를 하므로 순회를 종료하고 DP값을 출력한다.</p>
<p>따라서, DP[18] &#x3D; 2 로 (9+9) 이렇게 답을 구할 수 있다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-17404 RGB 거리2(JavaScript)</title>
    <url>/2023/03/02/Algorithm/boj/DP/boj-17404-RGB-%EA%B1%B0%EB%A6%AC2-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.</p>
<p>집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.</p>
<p>1번 집의 색은 2번, N번 집의 색과 같지 않아야 한다.<br>N번 집의 색은 N-1번, 1번 집의 색과 같지 않아야 한다.<br>i(2 ≤ i ≤ N-1)번 집의 색은 i-1, i+1번 집의 색과 같지 않아야 한다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">26 40 83</span><br><span class="line">49 60 57</span><br><span class="line">13 89 99</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">110</span><br></pre></td></tr></table></figure>

<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 100 100</span><br><span class="line">100 1 100</span><br><span class="line">100 100 1</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 100 100</span><br><span class="line">100 100 100</span><br><span class="line">1 100 100</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">201</span><br></pre></td></tr></table></figure>

<h3 id="예제-입력-4"><a href="#예제-입력-4" class="headerlink" title="예제 입력 4"></a>예제 입력 4</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">30 19 5</span><br><span class="line">64 77 64</span><br><span class="line">15 19 97</span><br><span class="line">4 71 57</span><br><span class="line">90 86 84</span><br><span class="line">93 32 91</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-4"><a href="#예제-출력-4" class="headerlink" title="예제 출력 4"></a>예제 출력 4</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">208</span><br></pre></td></tr></table></figure>

<h3 id="예제-입력-5"><a href="#예제-입력-5" class="headerlink" title="예제 입력 5"></a>예제 입력 5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">71 39 44</span><br><span class="line">32 83 55</span><br><span class="line">51 37 63</span><br><span class="line">89 29 100</span><br><span class="line">83 58 11</span><br><span class="line">65 13 15</span><br><span class="line">47 25 29</span><br><span class="line">60 66 19</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-5"><a href="#예제-출력-5" class="headerlink" title="예제 출력 5"></a>예제 출력 5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">253</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, ...input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> n = +N;</span><br><span class="line"><span class="keyword">const</span> costs = input.<span class="title function_">map</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> elem.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX</span> = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">let</span> answer = <span class="variable constant_">MAX</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === j) dp[<span class="number">0</span>][j] = costs[<span class="number">0</span>][j];</span><br><span class="line">    <span class="keyword">else</span> dp[<span class="number">0</span>][j] = <span class="variable constant_">MAX</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    dp[j][<span class="number">0</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[j - <span class="number">1</span>][<span class="number">1</span>], dp[j - <span class="number">1</span>][<span class="number">2</span>]) + costs[j][<span class="number">0</span>];</span><br><span class="line">    dp[j][<span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[j - <span class="number">1</span>][<span class="number">0</span>], dp[j - <span class="number">1</span>][<span class="number">2</span>]) + costs[j][<span class="number">1</span>];</span><br><span class="line">    dp[j][<span class="number">2</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[j - <span class="number">1</span>][<span class="number">0</span>], dp[j - <span class="number">1</span>][<span class="number">1</span>]) + costs[j][<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === j) <span class="keyword">continue</span>;</span><br><span class="line">    answer = <span class="title class_">Math</span>.<span class="title function_">min</span>(answer, dp[n - <span class="number">1</span>][j]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><p>RGB 거리 문제와는 다르게 첫번째 선택한 색상을 마지막에서도 선택하면 안되므로 첫번째 선택한 색상을 기억해두도록 접근하자.</p>
<p>예를 들어 첫번째 색상을 R로 선택했다고 하면 나머지 G,B 색상은 선택하지 못하도록 최대값으로 설정해준다.</p>
<p>이후에 다음 집에서는 R을 제외한 나머지 2가지 색상 중 작은 값을 선택하고 해당 집의 색상 비용을 더해줘서 DP 배열을 완성 시켜나간다.</p>
<p>그리하여 DP 배열이 완성되고 나면 DP 배열의 최종 인덱스에 위치한 배열 중 가장 작은 값을 answer 변수에 저장해둔다.</p>
<p>이렇게 첫번째 집을 R로 설정한 경우, G로 설정한 경우, B로 설정한 경우 총 3번을 진행하고 나서 최종적으로 answer 값을 출력해주면 된다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-1912 연속합(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-1912-%EC%97%B0%EC%86%8D%ED%95%A9-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.</p>
<p>예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 답을 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10 -4 3 1 5 6 -35 12 21 -1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">33</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">2 1 -4 3 4 -4 6 5 -5 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-1 -2 -3 -4 -5</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 나의 오답</span></span><br><span class="line"><span class="keyword">const</span> [n, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n &#125;, <span class="function">() =&gt;</span> A[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i], <span class="variable constant_">DP</span>[i - <span class="number">1</span>] + A[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>처음엔 연속되었다고 하여서 2연속만 생각했었다. 하지만 2번째 예제에서는 연속된 숫자가 3, 4, -4, 6, 5 이렇게 구하여 총합이 14이다.</li>
<li>0번째부터 i번째 까지 합을 저장하여 이전값과 비교하여 최댓값을 저장해준다.</li>
<li>즉, 0<del>1, 0</del>2, 0<del>3, … 0</del>9번째의 합중 최대값만 DP[0]에 저장해준다. 이렇게 0번째부터 9번째 DP를 구하였다.</li>
<li>그리고 첫번째가 음수의 경우는 DP를 초기값으로 모두 설정해주었다.</li>
<li>하지만 시간 초과가 떴다.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [n, input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> A = input.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n &#125;, <span class="function">() =&gt;</span> A[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[i - <span class="number">1</span>] + A[i], A[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>DP는 초기 값으로 설정해준다.</li>
</ul>
<ol>
<li>DP[0] &#x3D; A[0]</li>
<li>DP[1]은 DP[0] + A[1] 과 A[1] 중에 최대값을 저장한다. 왜냐하면 A[1] 이전까지의 연속된 숫자들의 합이 양수라면 A[1] 보다 크지만 음수인 경우는 A[1]부터 시작하는 것이 크기 때문이다.</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-1932 정수 삼각형(JavaScript)</title>
    <url>/2023/02/13/Algorithm/boj/DP/boj-1932-%EC%A0%95%EC%88%98-%EC%82%BC%EA%B0%81%ED%98%95-JavaScript/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    7</span><br><span class="line">   3 8</span><br><span class="line">  8 1 0</span><br><span class="line"> 2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure>

<p>위 그림은 크기가 5인 정수 삼각형의 한 모습이다.</p>
<p>맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.</p>
<p>삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">예제 입력 1</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line"></span><br><span class="line">예제 출력 1</span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>처음에는 탑 다운 방식으로 7을 선택하고 3과 8을 더한 수는 DP[2][0], DP[2][1]에 저장하는 방법으로 진행해보려고 하였다.</p>
<p>그런데 횟수가 많아지고 DP[3][1]에서 DP[2][0]과 DP[2][1] 중 큰 값을 구해서 더해야하는데 만약 3이 아니라 10이라면 1과 10을 제외한 2~9를 반복문을 돌면서 그 중에 최댓값인 것과 더해서 DP 값을 구해야 하기에 이는 너무 복잡하여 다르게 생각해보려고 노력했지만 한 문제에 너무 많은 시간을 쏟는 것 같아 다른 사람의 해설을 참고하였다.</p>
<p>위에서 부터 순서대로 7-3-8-7-5를 선택하여 총합 30이라는 숫자를 출력하였는데, 이는 반대로 생각해볼 수 있다.</p>
<p>맨 아래에서부터 시작하여 4, 5, 2, 6, 5의 바로 위의 숫자에는 4개의 숫자가 있다. 즉, 5번째 줄의 숫자를 2개씩 짝지어서 비교하여 큰 값을 바로 위에 숫자와 더하여 누적하면서 위로 올라가다보면 최종적으로 맨 위에는 최댓값이 남게되는 방식이다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> n = +input.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">const</span> triangle = input.<span class="title function_">map</span>(<span class="function">(<span class="params">floor</span>) =&gt;</span> floor.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">solution</span> = (<span class="params">n, triangle</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>] + <span class="title class_">Math</span>.<span class="title function_">max</span>(...triangle[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    triangle[i].<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, idx, self</span>) =&gt;</span> &#123;</span><br><span class="line">      self[idx] = v + <span class="title class_">Math</span>.<span class="title function_">max</span>(triangle[i + <span class="number">1</span>][idx], triangle[i + <span class="number">1</span>][idx + <span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">solution</span>(n, triangle));</span><br></pre></td></tr></table></figure>

<ul>
<li>DP 배열을 만들지 않고 triangle 배열을 그대로 바꾸어 반환하였다.</li>
</ul>
<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul>
<li><a href="https://tesseractjh.tistory.com/114">한걸음씩 블로그 </a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-2133 타일 채우기(JavaScript)</title>
    <url>/2023/02/22/Algorithm/boj/DP/boj-2133-%ED%83%80%EC%9D%BC-%EC%B1%84%EC%9A%B0%EA%B8%B0-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>3×N 크기의 벽을 2×1, 1×2 크기의 타일로 채우는 경우의 수를 구해보자.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N(1 ≤ N ≤ 30)이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 경우의 수를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> N = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fillTile</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DP</span> = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> k = i - <span class="number">2</span>;</span><br><span class="line">    <span class="variable constant_">DP</span>[i] = <span class="variable constant_">DP</span>[i - <span class="number">2</span>] * <span class="variable constant_">DP</span>[<span class="number">2</span>] + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="variable constant_">DP</span>[i] += <span class="variable constant_">DP</span>[k - <span class="number">2</span>] * <span class="number">2</span>;</span><br><span class="line">      k -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">DP</span>[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fillTile</span>(N));</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><p>우선 n이 홀수인 경우는 경우의 수가 0이다.</p>
<p>그다음에 n이 4인 경우는 직접 그려보았다.</p>
<p>그랬더니 기존 유형을 벗어나는 특이한 모양 2개가 추가되는 것을 알 수 있었다.</p>
<p>DP[4] &#x3D; DP[2] * 2 + 2 를 알 수 있었다.</p>
<p><img src="/../../../../images/boj/2133/n4.png" alt="n=4"></p>
<p>이러한 모양은 n이 6인 경우에도 나타났다.</p>
<p><img src="/../../../../images/boj/2133/n6.png" alt="n=6"></p>
<p>이를 토대로 점화식을 세워보았다.</p>
<p>DP[i] &#x3D; DP[i-2] * DP[2] + DP[i-4] * 2 + DP[i-6] * 2 + … DP[2] * 2 + 2</p>
<ol>
<li>DP[i-2]에다가 DP[2]의 반복되는 패턴의 경우의 수를 곱해준다.</li>
<li>이후에는 특이한 케이스 2개씩 늘어나는 것만 고려해준다. 예를 들어 DP[2] * 2는 DP[i-2]에서의 특이 케이스 경우의 수를 의미한다.</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-2156 포도주 시식(JavaScript)</title>
    <url>/2023/02/13/Algorithm/boj/DP/boj-2156-%ED%8F%AC%EB%8F%84%EC%A3%BC-%EC%8B%9C%EC%8B%9D-JavaScript/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.</p>
<p>포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.<br>연속으로 놓여 있는 3잔을 모두 마실 수는 없다.<br>효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오.</p>
<p>예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 포도주 잔의 개수 n이 주어진다. (1 ≤ n ≤ 10,000) 둘째 줄부터 n+1번째 줄까지 포도주 잔에 들어있는 포도주의 양이 순서대로 주어진다. 포도주의 양은 1,000 이하의 음이 아닌 정수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 최대로 마실 수 있는 포도주의 양을 출력한다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">예제 입력 1</span><br><span class="line">6</span><br><span class="line">6</span><br><span class="line">10</span><br><span class="line">13</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">예제 출력 1</span><br><span class="line">33</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"><span class="keyword">const</span> n = input.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">1</span>] = input[<span class="number">0</span>];</span><br><span class="line"><span class="variable constant_">DP</span>[<span class="number">2</span>] = input[<span class="number">0</span>] + input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(</span><br><span class="line">    <span class="variable constant_">DP</span>[i - <span class="number">1</span>],</span><br><span class="line">    <span class="variable constant_">DP</span>[i - <span class="number">2</span>] + input[i - <span class="number">1</span>],</span><br><span class="line">    <span class="variable constant_">DP</span>[i - <span class="number">3</span>] + input[i - <span class="number">1</span>] + input[i - <span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[n]);</span><br></pre></td></tr></table></figure>

<ul>
<li>DP는 N이 0에서 부터 n까지로 마실 수 있는 최대 포도주 양을 담은 배열이다.</li>
<li>만약 포도주가 1개라고 하면 1잔으로 마실 수 있는 포도주 최대 양을 DP[1]이라고 할 수 있고 그 값은 가장 첫번째 배열의 요소이다. (왜냐하면? 해당 배열에는 한개의 요소밖에 없으니깐)</li>
<li>만약 포도주가 2개일 때, 2잔으로 마실 수 있는 포도주 최대 양은 DP[2]이고, 그 값은 가장 첫번째 배열과 두번째 배열의 요소의 합이다.</li>
</ul>
<p>하지만 여기서 DP[3]부터는 고려해줘야하는 부분이 생겨난다.</p>
<p>1번잔, 2번잔, 3번잔이 있을 때, DP[3]으로 올 수 있는 경우의 수는 다음과 같다.</p>
<ol>
<li>1번과 2번을 마시는 경우 &#x3D;&gt; DP[2]와 같은 의미이다.</li>
<li>1번과 3번을 마시는 경우 &#x3D;&gt; DP[1]+input[2]</li>
<li>2번과 3번을 마시는 경우 &#x3D;&gt; 1번을 제외 하는 것이니 DP[0]+input[1]+input[2]</li>
</ol>
<p>위를 토대로 점화식을 세울 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DP</span>[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(</span><br><span class="line">  <span class="variable constant_">DP</span>[i - <span class="number">1</span>],</span><br><span class="line">  <span class="variable constant_">DP</span>[i - <span class="number">2</span>] + input[i - <span class="number">1</span>],</span><br><span class="line">  <span class="variable constant_">DP</span>[i - <span class="number">3</span>] + input[i - <span class="number">1</span>] + input[i - <span class="number">2</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-2193 이친수(JavaScript)</title>
    <url>/2023/02/21/Algorithm/boj/DP/boj-2193-%EC%9D%B4%EC%B9%9C%EC%88%98-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>0과 1로만 이루어진 수를 이진수라 한다. 이러한 이진수 중 특별한 성질을 갖는 것들이 있는데, 이들을 이친수(pinary number)라 한다. 이친수는 다음의 성질을 만족한다.</p>
<ol>
<li>이친수는 0으로 시작하지 않는다.</li>
<li>이친수에서는 1이 두 번 연속으로 나타나지 않는다. 즉, 11을 부분 문자열로 갖지 않는다.</li>
</ol>
<p>예를 들면 1, 10, 100, 101, 1000, 1001 등이 이친수가 된다. 하지만 0010101이나 101101은 각각 1, 2번 규칙에 위배되므로 이친수가 아니다.</p>
<p>N(1 ≤ N ≤ 90)이 주어졌을 때, N자리 이친수의 개수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 N자리 이친수의 개수를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = +<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = [<span class="title class_">BigInt</span>(<span class="number">0</span>), <span class="title class_">BigInt</span>(<span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= input; i++) &#123;</span><br><span class="line">  <span class="variable constant_">DP</span>[i] = <span class="variable constant_">DP</span>[i - <span class="number">2</span>] + <span class="variable constant_">DP</span>[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[input] + <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>처음에는 길이가 i인 수가 0,1로 끝나는 수를 나타내기 위해 DP[i][0], DP[i][1]로 배열을 구성하였는데, 점화식을 알아내고 나니 <code>DP[i] = DP[i-2] + DP[i-1]</code>로 계산하기 위해 DP을 1차원 배열로 바꿨다.</li>
<li>N이 90까지 가능하므로 이 경우 수가 매우 커져 number의 범위가 넘어가는 경우가 있을 수 있기 때문에 BigInt()로 값을 계산해줘야 한다.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-2225 합분해(JavaScript)</title>
    <url>/2023/02/17/Algorithm/boj/DP/boj-2225-%ED%95%A9%EB%B6%84%ED%95%B4-JavaScript/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 프로그램을 작성하시오.</p>
<p>덧셈의 순서가 바뀐 경우는 다른 경우로 센다(1+2와 2+1은 서로 다른 경우). 또한 한 개의 수를 여러 번 쓸 수도 있다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 두 정수 N(1 ≤ N ≤ 200), K(1 ≤ K ≤ 200)가 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 답을 1,000,000,000으로 나눈 나머지를 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">21</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">84</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [N, K] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: N + <span class="number">1</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">1</span>) <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: K + <span class="number">1</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(K + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[i][j] = (<span class="variable constant_">DP</span>[i - <span class="number">1</span>][j] + <span class="variable constant_">DP</span>[i][j - <span class="number">1</span>]) % <span class="number">1000000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DP</span>[N][K - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li>✏️ N &#x3D; 1인 경우 K &#x3D; 1,2,3 …200 경우의 수를 생각해보았다.<ul>
<li>❗️ 1개의 수로 1을 만들 수 있는 경우의 수는 1가지이다.</li>
<li>2개의 수로 1을 만들 수 있는 경우의 수는 0+1, 1+0으로 2가지이다.</li>
<li>3개의 수로 1을 만들 수 있는 경우의 수는 0+0+1, 0+1+0, 1+0+0으로 3가지이다…</li>
</ul>
</li>
<li>N &#x3D; 2인 경우 K &#x3D; 1,2,3 …200 경우의 수를 생각해보았다.<ul>
<li>❗️ 1개의 수로 2를 만들 수 있는 경우의 수는 1가지이다.</li>
<li>2개의 수로 2를 만들 수 있는 경우의 수는 1+1, 2+0, 0+2로 3가지이다.</li>
<li>3개의 수로 2를 만들 수 있는 경우의 수는 1+1+0, 1+0+1, 0+1+1, 2+0+0, 0+2+0, 0+0+2로 6가지이다…</li>
</ul>
</li>
</ul>
<p>❗️의 조건을 가지고 DP[N][k] 2차원 배열에서, DP[N][1] &#x3D; 1인 것을 알 수 있다.</p>
<p>✏️의 조건을 가지고 DP[1][k] &#x3D; K 인 것을 알 수 있다.</p>
<p><img src="/../../../../images/boj/2225/Frame.png" alt="Frame.png"></p>
<p>위와 같은 점화식을 발견하였고 그에 알맞은 식을 만들었다.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-9465 스티커(JavaScript)</title>
    <url>/2023/02/14/Algorithm/boj/DP/boj-9465-%EC%8A%A4%ED%8B%B0%EC%BB%A4-JavaScript/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>상근이의 여동생 상냥이는 문방구에서 스티커 2n개를 구매했다. 스티커는 그림 (a)와 같이 2행 n열로 배치되어 있다. 상냥이는 스티커를 이용해 책상을 꾸미려고 한다.</p>
<p>상냥이가 구매한 스티커의 품질은 매우 좋지 않다. 스티커 한 장을 떼면, 그 스티커와 변을 공유하는 스티커는 모두 찢어져서 사용할 수 없게 된다. 즉, 뗀 스티커의 왼쪽, 오른쪽, 위, 아래에 있는 스티커는 사용할 수 없게 된다.</p>
<p><img src="https://www.acmicpc.net/upload/images/sticker.png" alt="https://www.acmicpc.net/upload/images/sticker.png"></p>
<p>모든 스티커를 붙일 수 없게된 상냥이는 각 스티커에 점수를 매기고, 점수의 합이 최대가 되게 스티커를 떼어내려고 한다. 먼저, 그림 (b)와 같이 각 스티커에 점수를 매겼다. 상냥이가 뗄 수 있는 스티커의 점수의 최댓값을 구하는 프로그램을 작성하시오. 즉, 2n개의 스티커 중에서 점수의 합이 최대가 되면서 서로 변을 공유 하지 않는 스티커 집합을 구해야 한다.</p>
<p>위의 그림의 경우에 점수가 50, 50, 100, 60인 스티커를 고르면, 점수는 260이 되고 이 것이 최대 점수이다. 가장 높은 점수를 가지는 두 스티커 (100과 70)은 변을 공유하기 때문에, 동시에 뗄 수 없다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫째 줄에는 n (1 ≤ n ≤ 100,000)이 주어진다. 다음 두 줄에는 n개의 정수가 주어지며, 각 정수는 그 위치에 해당하는 스티커의 점수이다. 연속하는 두 정수 사이에는 빈 칸이 하나 있다. 점수는 0보다 크거나 같고, 100보다 작거나 같은 정수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스 마다, 2n개의 스티커 중에서 두 변을 공유하지 않는 스티커 점수의 최댓값을 출력한다.</p>
<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">50 10 100 20 40</span><br><span class="line">30 50 70 10 60</span><br><span class="line">7</span><br><span class="line">10 30 10 50 100 20 40</span><br><span class="line">20 40 30 50 60 20 80</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">260</span><br><span class="line">290</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> T = +input.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sticker</span>(<span class="params">n, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable constant_">DP</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="variable constant_">DP</span>[<span class="number">0</span>][<span class="number">1</span>] = arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">  <span class="variable constant_">DP</span>[<span class="number">1</span>][<span class="number">1</span>] = arr[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="variable constant_">DP</span>[<span class="number">0</span>][i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[<span class="number">1</span>][i - <span class="number">1</span>], <span class="variable constant_">DP</span>[<span class="number">1</span>][i - <span class="number">2</span>]) + +arr[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">    <span class="variable constant_">DP</span>[<span class="number">1</span>][i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable constant_">DP</span>[<span class="number">0</span>][i - <span class="number">1</span>], <span class="variable constant_">DP</span>[<span class="number">0</span>][i - <span class="number">2</span>]) + +arr[<span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable constant_">DP</span>.<span class="title function_">flat</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> answer = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> k = input.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  arr.<span class="title function_">push</span>(input.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line">  arr.<span class="title function_">push</span>(input.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line">  answer.<span class="title function_">push</span>(<span class="title function_">sticker</span>(k, arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer.<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><p>DP 배열은 2차원 배열이고 2n 스티커이기 때문에, DP는 2행으로 구성된다.</p>
<ol>
<li>DP[0][1]은 2n 스티커에서 0번째 행의 1열의 스티커 점수를 나타낸다.</li>
<li>DP[1][1]은 2n 스티커에서 1번째 행의 1열 스티커 점수를 나타낸다.</li>
</ol>
<p><img src="/../../../../images/boj/9465/Group%204.png" alt="예시 이미지"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-2309 일곱 난쟁이(JavaScript)</title>
    <url>/2023/02/23/Algorithm/boj/bruteforce/boj-2309-%EC%9D%BC%EA%B3%B1-%EB%82%9C%EC%9F%81%EC%9D%B4-JavaScript/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다. 일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다.</p>
<p>아홉 명의 난쟁이는 모두 자신이 “백설 공주와 일곱 난쟁이”의 주인공이라고 주장했다. 뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도 일곱 난쟁이의 키의 합이 100이 됨을 기억해 냈다.</p>
<p>아홉 난쟁이의 키가 주어졌을 때, 백설공주를 도와 일곱 난쟁이를 찾는 프로그램을 작성하시오.</p>
<h1 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h1><p>아홉 개의 줄에 걸쳐 난쟁이들의 키가 주어진다. 주어지는 키는 100을 넘지 않는 자연수이며, 아홉 난쟁이의 키는 모두 다르며, 가능한 정답이 여러 가지인 경우에는 아무거나 출력한다.</p>
<h1 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h1><p>일곱 난쟁이의 키를 오름차순으로 출력한다. 일곱 난쟁이를 찾을 수 없는 경우는 없다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line">7</span><br><span class="line">23</span><br><span class="line">19</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">25</span><br><span class="line">8</span><br><span class="line">13</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">13</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">23</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSevenSmalls</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [...arr];</span><br><span class="line">  <span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line">  <span class="keyword">let</span> diff = sum - <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] + arr[j] === diff) &#123;</span><br><span class="line">        answer.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">        answer.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> answer.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSevenSmalls</span>(input));</span><br></pre></td></tr></table></figure>

<h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><p>난쟁이 키의 합이 100이므로 9명의 키 합을 구한 뒤 2중 for문을 돌면서 나머지 2명의 키의 합이 차이와 같을 때, 2명을 제거한 배열을 반환하였다.<br>function getMaxCandies(board) {<br>  const dx &#x3D; [0, 1, 0, -1];<br>  const dy &#x3D; [1, 0, -1, 0];<br>  let maxCandies &#x3D; 1;</p>
<p>  for (let i &#x3D; 0; i &lt; n; i++) {<br>    for (let j &#x3D; 0; j &lt; n; j++) {<br>      for (let k &#x3D; 0; k &lt; 4; k++) {<br>        const nx &#x3D; i + dx[k];<br>        const ny &#x3D; j + dy[k];</p>
<pre><code>    if (nx &lt; 0 || ny &lt; 0 || nx &gt;= n || ny &gt;= n) &#123;
      continue;
    &#125;

    const temp = board[i][j];
    board[i][j] = board[nx][ny];
    board[nx][ny] = temp;

    for (let l = 0; l &lt; n; l++) &#123;
      let rowCandies = 1;
      let colCandies = 1;

      for (let m = 1; m &lt; n; m++) &#123;
        if (board[l][m] === board[l][m - 1]) &#123;
          rowCandies++;
        &#125; else &#123;
          maxCandies = Math.max(maxCandies, rowCandies);
          rowCandies = 1;
        &#125;

        if (board[m][l] === board[m - 1][l]) &#123;
          colCandies++;
        &#125; else &#123;
          maxCandies = Math.max(maxCandies, colCandies);
          colCandies = 1;
        &#125;
      &#125;

      maxCandies = Math.max(maxCandies, rowCandies, colCandies);
    &#125;

    const temp2 = board[i][j];
    board[i][j] = board[nx][ny];
    board[nx][ny] = temp2;
  &#125;
&#125;
</code></pre>
<p>  }</p>
<p>  return maxCandies;<br>}</p>
<p>console.log(getMaxCandies(board));</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>bruteforce</category>
      </categories>
      <tags>
        <tag>bruteforce</tag>
      </tags>
  </entry>
  <entry>
    <title>boj-3085 사탕 게임(JavaScript)</title>
    <url>/2023/02/23/Algorithm/boj/bruteforce/boj-3085-%EC%82%AC%ED%83%95-%EA%B2%8C%EC%9E%84-JavaScript/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>상근이는 어렸을 적에 “봄보니 (Bomboni)” 게임을 즐겨했다.</p>
<p>가장 처음에 N×N크기에 사탕을 채워 놓는다. 사탕의 색은 모두 같지 않을 수도 있다. 상근이는 사탕의 색이 다른 인접한 두 칸을 고른다. 그 다음 고른 칸에 들어있는 사탕을 서로 교환한다. 이제, 모두 같은 색으로 이루어져 있는 가장 긴 연속 부분(행 또는 열)을 고른 다음 그 사탕을 모두 먹는다.</p>
<p>사탕이 채워진 상태가 주어졌을 때, 상근이가 먹을 수 있는 사탕의 최대 개수를 구하는 프로그램을 작성하시오.</p>
<h1 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h1><p>첫째 줄에 보드의 크기 N이 주어진다. (3 ≤ N ≤ 50)</p>
<p>다음 N개 줄에는 보드에 채워져 있는 사탕의 색상이 주어진다. 빨간색은 C, 파란색은 P, 초록색은 Z, 노란색은 Y로 주어진다.</p>
<p>사탕의 색이 다른 인접한 두 칸이 존재하는 입력만 주어진다.</p>
<h1 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h1><p>첫째 줄에 상근이가 먹을 수 있는 사탕의 최대 개수를 출력한다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">CCP</span><br><span class="line">CCP</span><br><span class="line">PPC</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">PPPP</span><br><span class="line">CYZY</span><br><span class="line">CCPY</span><br><span class="line">PPCC</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">YCPZY</span><br><span class="line">CYZZP</span><br><span class="line">CCPPP</span><br><span class="line">YCYZC</span><br><span class="line">CPPZZ</span><br></pre></td></tr></table></figure>

<h2 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [n, ...input] = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;/dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> N = +n;</span><br><span class="line"><span class="keyword">let</span> candy = input.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (max == N) <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max == N) <span class="keyword">break</span>;</span><br><span class="line">    <span class="title function_">candySwap</span>(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">candySwap</span>(<span class="params">i, j</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dir = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  ];</span><br><span class="line">  dir.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [x, y] = v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      i + x &gt; -<span class="number">1</span> &amp;&amp;</span><br><span class="line">      j + y &gt; -<span class="number">1</span> &amp;&amp;</span><br><span class="line">      i + x &lt; N &amp;&amp;</span><br><span class="line">      j + y &lt; N &amp;&amp;</span><br><span class="line">      candy[i + x][j + y] != candy[i][j]</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = candy[i][j];</span><br><span class="line">      candy[i][j] = candy[i + x][j + y];</span><br><span class="line">      candy[i + x][j + y] = temp;</span><br><span class="line">      <span class="title function_">checkRow</span>();</span><br><span class="line">      <span class="title function_">checkColumn</span>();</span><br><span class="line">      candy[i + x][j + y] = candy[i][j];</span><br><span class="line">      candy[i][j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkRow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> checkArr = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">      checkArr[j] = candy[i][j - <span class="number">1</span>] == candy[i][j] ? checkArr[j - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...checkArr, max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkColumn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> checkArr = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">      checkArr[j] = candy[j - <span class="number">1</span>][i] == candy[j][i] ? checkArr[j - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...checkArr, max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>boj</category>
        <category>bruteforce</category>
      </categories>
      <tags>
        <tag>bruteforce</tag>
      </tags>
  </entry>
  <entry>
    <title>Emotion Styled Components에서 props 지정하기</title>
    <url>/2023/03/20/Daily/Emotion-Styled-Components%EC%97%90%EC%84%9C-props-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;@emotion/styled&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; (props.isClicked ? <span class="string">&quot;green&quot;</span> : <span class="string">&quot;white&quot;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Btn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StyledButton</span> <span class="attr">isClicked</span>&gt;</span>선택하기<span class="tag">&lt;/<span class="name">StyledButton</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>위와 같이 사용하게 되면 StyledButton 에 커스텀 props를 타입 선언을 해주지 않았기 때문에 에러를 발생한다.</li>
</ul>
<p>이를 해결하기 위해 커스텀 props 타입을 단언해주면된다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;@emotion/styled&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span>&lt;&#123; <span class="attr">isClicked</span>: boolean &#125;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; (props.isClicked ? <span class="string">&quot;green&quot;</span> : <span class="string">&quot;white&quot;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Btn</span>(<span class="params">&#123; isClicked &#125;: &#123; isClicked: boolean &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledButton</span> <span class="attr">isClicked</span>=<span class="string">&#123;isClicked&#125;</span>&gt;</span>선택하기<span class="tag">&lt;/<span class="name">StyledButton</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>emotion</tag>
        <tag>styled components</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>image sprite 실전 사용기</title>
    <url>/2023/03/20/Daily/image-sprite-%EC%8B%A4%EC%A0%84-%EC%82%AC%EC%9A%A9%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="image-sprite-실전-사용기"><a href="#image-sprite-실전-사용기" class="headerlink" title="image sprite 실전 사용기"></a>image sprite 실전 사용기</h1><p>기존 프로젝트에서는 돋보기 아이콘을 불러올 때, png 파일을 통해서 각각 한개씩 불러왔다.</p>
<p>이렇게 되면 돋보기 이미지는 상태에 따라 default, focus, disabled 총 3가지 상태를 가진 이미지가 있기 때문에 이미지를 3번 불러와야한다.</p>
<p>하지만 이미지 스프라이트를 사용하면, image sprite를 사용하여 3가지 상태의 이미지를 svg 파일 한 곳에 넣어두고 이를 배경이미지로 불러와서 원하는 위치의 이미지에 position을 주어 보여주도록 하였다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">46px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;img_navSprites.png&quot;</span>) <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>이미지를 배경으로 불러온 뒤 left, top 속성으로 배치한다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img_trans.png&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>src 속성을 비워두게 되면 img 태그에 테두리가 생기게 되는데, 이는 제거하려해도 제거할 수가 없다. (border, outline, padding, margin 여러 방법을 써봐도 안됐다.)</li>
</ul>
<p>그래서 src 속성을 비워두지 않기 위해 투명한 이미지 경로를 넣어준 것이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.next</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;img_navSprites.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 또는 img 태그 대신 i 태그 사용하기</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>오늘 프로젝트를 진행하면서 icon을 불러오는 용도로 사용했기 때문에 img 태그 대신 i 태그를 사용하여 불러오니 src 속성없이도 불러올 수 있어서 편리하였다.</p>
</blockquote>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>image sprite</tag>
      </tags>
  </entry>
  <entry>
    <title>리액트에서 이미지 넣는 방법</title>
    <url>/2023/03/20/React/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%84%A3%EB%8A%94-%EB%B0%A9%EB%B2%95/</url>
    <content><![CDATA[<h1 id="리액트에서-이미지-넣기"><a href="#리액트에서-이미지-넣기" class="headerlink" title="리액트에서 이미지 넣기"></a>리액트에서 이미지 넣기</h1><h2 id="1-import-구문-사용하기"><a href="#1-import-구문-사용하기" class="headerlink" title="1. import 구문 사용하기"></a>1. import 구문 사용하기</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Logo</span> <span class="keyword">from</span> <span class="string">&quot;./assets/img/Logo.png&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>컴포넌트에서 import 구문을 사용하여 이미지를 불러올 수 있다.</p>
<p>이렇게 불러온 이미지는 img 태그의 src 속성에 할당한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;Logo&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>단, import는 React가 처리하지 않는다는 것을 명심해야한다. 이는 Webpack이나 vite같은 번들러들에 의해 처리된다.</p>
</blockquote>
<h2 id="2-public-폴더에-이미지-불러오기"><a href="#2-public-폴더에-이미지-불러오기" class="headerlink" title="2. public 폴더에 이미지 불러오기"></a>2. public 폴더에 이미지 불러오기</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public</span><br><span class="line">|__images</span><br><span class="line">    |__logo.png</span><br></pre></td></tr></table></figure>

<p>다음과 같이 public 폴더에 images를 담아두고 public 폴더를 절대경로로 이미지를 불러올 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>public으로 이미지를 불러오게 되면 브라우저에서 <a href="http://localhost:3000/images/logo.png">http://localhost:3000/images/logo.png</a> 경로로 해당 파일을 오픈할 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>리액트 접근성 높이는 모달 구현하기</title>
    <url>/2023/03/21/React/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%A0%91%EA%B7%BC%EC%84%B1-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%AA%A8%EB%8B%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="createPortal-사용하여-접근성-높인-모달-구현하기"><a href="#createPortal-사용하여-접근성-높인-모달-구현하기" class="headerlink" title="createPortal 사용하여 접근성 높인 모달 구현하기"></a>createPortal 사용하여 접근성 높인 모달 구현하기</h1><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Modal.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Modal</span>(<span class="params">&#123; onClick &#125;: &#123; onClick: () =&gt; <span class="built_in">void</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleModalClose</span> = (<span class="params">e: KeyboardEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Escape&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">onClick</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`position: fixed; top: -<span class="subst">$&#123;<span class="variable language_">window</span>.scrollY&#125;</span>px`</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> scrollY = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">top</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`position: &quot;&quot;; top: &quot;&quot;;`</span>;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="built_in">parseInt</span>(scrollY || <span class="string">&quot;0&quot;</span>) * -<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handleModalClose);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handleModalClose);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createPortal</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-modal</span>=<span class="string">&quot;true&quot;</span> <span class="attr">className</span>=<span class="string">&quot;Dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;Dialog__header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React 포털로 연 다이얼로그(with 모달)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Dialog__body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>여기가 React 앱 밖의 세상인가요?!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">className</span>=<span class="string">&quot;Dialog__footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;closeButton&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">aria-label</span>=<span class="string">&quot;모달 다이얼로그 닫기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">title</span>=<span class="string">&quot;모달 다이얼로그 닫기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">svg</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">width</span>=<span class="string">&quot;24&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">height</span>=<span class="string">&quot;24&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Dialog__dim&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;modal&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Modal</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>createPortal로 root 태그가 아닌 새로운 id가 modal인 태그에 modal을 생성하였다.</li>
<li>Esc 키를 눌러 모달을 끌 수 있게 하였다.</li>
<li>모달이 열려있을 때, 모달 뒤의 배경이 스크롤되지 않도록 하였다.</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&quot;./Modal&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ModalBtn</span> <span class="keyword">from</span> <span class="string">&quot;./ModalBtn&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [modalOpen, setModalOpen] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleModalOpen</span> = (<span class="params"></span>) =&gt; <span class="title function_">setModalOpen</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleModalClose</span> = (<span class="params"></span>) =&gt; <span class="title function_">setModalOpen</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ModalBtn</span> <span class="attr">onClick</span>=<span class="string">&#123;handleModalOpen&#125;</span> <span class="attr">modalOpen</span>=<span class="string">&#123;modalOpen&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;modalOpen &amp;&amp; <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">onClick</span>=<span class="string">&#123;handleModalClose&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>ModalBtn을 클릭하여 모달을 열 수 있게한다.</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ModalBtn.tsx</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ModalBtn</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  onClick,</span></span><br><span class="line"><span class="params">  modalOpen,</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  onClick: () =&gt; <span class="built_in">void</span>;</span></span><br><span class="line"><span class="params">  modalOpen: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;openDialogButton&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-haspopup</span>=<span class="string">&quot;dialog&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-label</span>=<span class="string">&quot;모달 다이얼로그 열기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;모달 다이얼로그 열기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">tabIndex</span>=<span class="string">&#123;modalOpen</span> ? <span class="attr">-1</span> <span class="attr">:</span> <span class="attr">0</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">svg</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&quot;24&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&quot;24&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M14 4h-13v18h20v-11h1v12h-22v-20h14v1zm10 5h-1v-6.293l-11.646 11.647-.708-.708 11.647-11.646h-6.293v-1h8v8z&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ModalBtn</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>ModalBtn에 모달 상태를 전달하여 모달이 열려있다면 모달 배경에 포커스가 가지 않도록 하였다.</li>
</ul>
<blockquote>
<p>배경 요소에 모든 focus 요소에 tabIndex 속성을 설정해줘야하는 번거로움이 있다.</p>
</blockquote>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>모달</tag>
        <tag>createPortal</tag>
      </tags>
  </entry>
  <entry>
    <title>Recoil에 들어가기 전...</title>
    <url>/2023/03/23/Daily/Recoil%EC%97%90-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84/</url>
    <content><![CDATA[<h1 id="상태란"><a href="#상태란" class="headerlink" title="상태란?"></a>상태란?</h1><p>상태(state)는 애플리케이션의 작동 방식을 설명하는 모든 데이터를 말한다. 상태 관리는 시간의 흐름에 따라 상태가 변경되는 방식이다.</p>
<p>상태 관리를 위해서는 다음 기능이 필요하다.</p>
<ul>
<li>초기값(initial Value)을 저장할 수 있어야 한다.</li>
<li>현재 값(Current Value)을 읽을 수 있어야 한다.</li>
<li>값을 업데이트 할 수 있어야 한다.</li>
</ul>
<h2 id="React-상태관리의-한계"><a href="#React-상태관리의-한계" class="headerlink" title="React 상태관리의 한계"></a>React 상태관리의 한계</h2><ol>
<li><p>컴포넌트 상태는 연관된 상위 컴포넌트까지 끌어올려야 공유가 가능하고 이 과정에서 Props Drilling 이슈가 발생하고 불필요한 리렌더링 발생한다. <span style="color:red">(성능저하)</span></p>
</li>
<li><p>Context로 Props Drilling 이슈 해결할 수 있지만, <strong>Context는 단일 값만 저장할 수 있고 여러 값들의 집합을 담기가 어렵다.</strong></p>
</li>
<li><p>React의 Context, Props 만으로는 최상단에서 최하단 까지의 state 코드 분리가 어렵다.</p>
</li>
</ol>
<h2 id="Recoil-장점"><a href="#Recoil-장점" class="headerlink" title="Recoil 장점"></a>Recoil 장점</h2><h3 id="유연한-상태-공유"><a href="#유연한-상태-공유" class="headerlink" title="유연한 상태 공유"></a>유연한 상태 공유</h3><p>Redux처럼 복잡한 과정이 없다. 간단한 get&#x2F;set 인터페이스를 사용해 상태 공유가 쉽다.</p>
<h3 id="파생된-상태"><a href="#파생된-상태" class="headerlink" title="파생된 상태"></a>파생된 상태</h3><p>데이터는 간단하고 또 안전하게 상태나 다른 파생된 데이터로부터 파생될 수 있다. 또한, 상태에 접근하는 방법과 동일하게 파생된 상태에 접근 가능하다.</p>
<p>파생된 상태는 동기, 비동기 처리가 가능하다.</p>
<h3 id="광범위한-앱-상태-관찰"><a href="#광범위한-앱-상태-관찰" class="headerlink" title="광범위한 앱 상태 관찰"></a>광범위한 앱 상태 관찰</h3><p>Recoil 상태의 전체 또는 일부의 상태를 읽거나 상태가 변경된 것을 감지할 수 있다. 앱의 상태를 유지할 수도 있고 다시 수화(Hydration)하는 기능을 제공한다.</p>
<h3 id="비교적-낮은-러닝-커브"><a href="#비교적-낮은-러닝-커브" class="headerlink" title="비교적 낮은 러닝 커브"></a>비교적 낮은 러닝 커브</h3><p>Recoil은 React API와 유사하여 Redux에 비해 쉽고 Recoil은 기본적으로 비동기 처리 기능을 가진다.</p>
<h2 id="Recoil-핵심-개념"><a href="#Recoil-핵심-개념" class="headerlink" title="Recoil 핵심 개념"></a>Recoil 핵심 개념</h2><h3 id="1-atoms"><a href="#1-atoms" class="headerlink" title="1. atoms"></a>1. atoms</h3><ul>
<li>atoms은 공유 상태</li>
<li>컴포넌트가 구독할 수 있는 상태 단위</li>
</ul>
<p>atom은 상태단위이며 구독과 업데이트가 가능하다. atom이 업데이트되면 구독중인 컴포넌트는 새 값을 반영해 다시 렌더링된다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> authUserState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;authUserState&quot;</span>,</span><br><span class="line">  <span class="attr">defualt</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>atom은 고유한 key를 가져야 한다.</li>
<li>default 속성으로 초깃값 설정한다.</li>
</ul>
<p>컴포넌트에서 atom을 읽거나 쓰려면 useRecoilState 훅을 사용한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SignIn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [authUser] = <span class="title function_">useRecoilState</span>(authUserState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    !authUser ? <span class="language-xml"><span class="tag">&lt;<span class="name">SignInForm</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">Browse</span> /&gt;</span></span>;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>뿐만 아니라 상태 업데이트를 위한 업데이트 함수만 추출할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SignInButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [, setAuthUser] = <span class="title function_">useRecoilState</span>(authUserState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSignIn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">setAuthUser</span>(&#123; name, email &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSignIn&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      로그인</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-selectors"><a href="#2-selectors" class="headerlink" title="2. selectors"></a>2. selectors</h3><p>selector는 atom이나 다른 selector를 입력받아 파생된 상태를 생성하는 순수함수이다. <strong>상위의 atom, selector가 업데이트되면 하위의 selector도 다시 실행된다.</strong> 컴포넌트는 atom과 마찬가지로 selector가 변경되면 다시 렌더링된다.</p>
<p>최소한의 상태만 atom에 저장하고 selector로 파생된 상태를 효과적으로 계산하여 불필요한 상태 보존을 방지한다.</p>
<p>selector는 어떤 컴포넌트가 필요로하는지, 어떤 상태에 의존하는지 추적하므로 함수적인 접근 방식을 매우 효율적으로 만든다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> authUserNameState = <span class="title function_">selector</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;authUserNameState&quot;</span>,</span><br><span class="line">  <span class="attr">get</span>:(&#123; get &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> authUser = <span class="title function_">get</span>(authUserState);</span><br><span class="line">    <span class="keyword">return</span> authUser.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>get 메서드 내부의 <code>get</code>함수는 atom 또는 다른 selector를 전달받을 수 있다. </li>
<li>전달받게 되면 자동적으로 종속 관계가 생성되며 참조했던 다른 atom, selector가 업데이트 되면 다시 실행된다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Recoil</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 배포 후 이미지가 안 불러와진 경우</title>
    <url>/2023/03/25/Daily/Vite-%EB%B0%B0%ED%8F%AC-%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B0%80-%EC%95%88-%EB%B6%88%EB%9F%AC%EC%99%80%EC%A7%84-%EA%B2%BD%EC%9A%B0/</url>
    <content><![CDATA[<p>이번에 프로젝트를 진행하다가 아이콘을 사용하기 위해 svg 파일을 css <code>background:url()</code>로 불러와서 사용한 적이 있다.</p>
<p>그런데 로컬환경에서는 제대로 불러와지던 svg 파일들이 build를 하고 난 후, 확인해보니 불러와지지 않는 것을 확인하였다.</p>
<p>그래서 찾아보니 Vite에서는 다음 asset을 가져오기 위해 2가지 방법을 사용한다고 한다.</p>
<h1 id="Vite에서-assets-가져오기"><a href="#Vite에서-assets-가져오기" class="headerlink" title="Vite에서 assets 가져오기"></a>Vite에서 assets 가져오기</h1><h2 id="1-URL을-통해-가져오기"><a href="#1-URL을-통해-가져오기" class="headerlink" title="1. URL을 통해 가져오기"></a>1. URL을 통해 가져오기</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imgUrl <span class="keyword">from</span> <span class="string">&quot;./img.png&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;hero-img&quot;</span>).<span class="property">src</span> = imgUrl;</span><br></pre></td></tr></table></figure>

<ul>
<li>Webpack의 file-loader와 비슷한데, 차이점이 있다면 Vite는 절대경로와 상대 경로 둘 다 사용가능하다.</li>
<li>일반적인 이미지, 미디어, 폰트 파일 타입은 자동으로 asset 목록에 포함된다.</li>
</ul>
<h2 id="2-public-디렉터리에서-가져오기"><a href="#2-public-디렉터리에서-가져오기" class="headerlink" title="2. public 디렉터리에서 가져오기"></a>2. public 디렉터리에서 가져오기</h2><ul>
<li>robots.txt 같이 소스 코드에서 참조하지 않는 asset</li>
<li>해싱 없이 항상 같은 이름을 갖는 asset</li>
<li>URL을 얻기 위해 굳이 import 할 필요가 없는 asset</li>
</ul>
<p>위 3가지의 경우에는 public 디렉터리에 asset을 위치시킨다. 이곳에 위치한 asset은 개발 시 <code>/</code> 경로에, 배포시에는 <code>dist</code> 디렉터리에 위치한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.arrowDown</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/assets/img/Arrow.svg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>public</code> 디렉터리에 있는 asset을 가져올 경우에는 항상 루트 기준으로 하는 절대경로에서 가져와야한다. <code>(public/Arrow.svg</code> asset은 소스 코드에서는 <code>/Arrow.svg</code>으로 접근 가능하다.)</li>
<li><code>public</code> 디렉터리에 있는 asset은 JavaScript로 가져올 수 없다.</li>
</ul>
<h3 id="가급적-import를-사용하자"><a href="#가급적-import를-사용하자" class="headerlink" title="가급적 import를 사용하자."></a>가급적 import를 사용하자.</h3><p>React Router를 사용하여 중첩 라우팅을 구현하였다.</p>
<p><code>/mypage/history</code> 라우팅에서 Header 컴포넌트를 불러왔다.</p>
<p>Header 컴포넌트에는 public 폴더에서 불러온 logo가 있다.</p>
<p>하지만 이 때의 경로는 <code>/img/logo.svg</code> 였기 때문에 <code>/mypage/history</code> 라우팅에서는 해당 경로의 파일을 찾을 수 없다.</p>
<p>해당 경로의 파일을 찾기 위해서는 <code>/mypage/history/img/logo.svg</code> 로 경로를 바꿔줘야 한다.</p>
<p>즉, public 폴더에서 이미지를 가져올 경우, 라우팅이 바뀔 때마다 경로를 생각해줘야한다.</p>
<p><strong>그러므로 import 구문을 사용하여 src 폴더 안에 이미지를 가져오도록 하자.</strong></p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>sticky 잘 사용하기</title>
    <url>/2023/03/27/Daily/sticky-%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="sticky-잘-알고-사용하기"><a href="#sticky-잘-알고-사용하기" class="headerlink" title="sticky 잘 알고 사용하기"></a>sticky 잘 알고 사용하기</h1><p><code>position:sticky</code>는 <code>position:static</code> 처럼 일반적인 흐름을 따르지만, 일정 스크롤을 내렸을 때 해당 임계점에 도달하였을 때, <code>position:fixed</code> 처럼 구현하기 위한 속성이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky; <span class="comment">/* 사파리 브라우저 지원 */</span></span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>sticky 속성을 설정하면 top, bottom, right, left 속성 중 하나는 반드시 설정해줘야한다.</li>
</ul>
<blockquote>
<p>또한 sticky가 기준으로 하는 임계점은 <code>overflow:auto</code>, <code>overflow:scroll</code> 속성을 가진 가장 가까운 조상 컨테이너 박스이다.</p>
</blockquote>
<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span>&gt;</span>.static<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;sticky&quot;</span>&gt;</span>.sticky<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span>.fixed<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span>&gt;</span>.static<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;sticky&quot;</span>&gt;</span>.sticky<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scroll</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.static</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">background</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>위 코드에서 sticky가 fixed로 고정되는 임계기준점은 scroll 클래스를 가진 div 박스이다.</li>
<li>scroll 클래스가 있는 박스는 스크롤이 할 수 있을 만큼 길이가 길어서 스크롤 하여 해당 임계점에 도달하는 순간 fixed로 변하게 된다.</li>
</ul>
<blockquote>
<p>처음에 헷갈린 점은 <code>overflow:auto</code> 속성을 parent 클래스를 가진 박스로 옮겼는데 아무런 일도 일어나지 않아서 당황했다. 그 이유는 parent 클래스를 가진 박스 내부가 스크롤이 되었을 때 해당 박스를 기준으로 고정되는 것인데, parent 클래스를 가진 박스는 스크롤이 될만한 높이를 가지고 있지 않아서 아무런 일도 발생하지 않았던 것이다.</p>
</blockquote>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>sticky</tag>
      </tags>
  </entry>
  <entry>
    <title>확장성 있는 컴포넌트 만들기 with TypeScript</title>
    <url>/2023/03/29/React/%ED%99%95%EC%9E%A5%EC%84%B1-%EC%9E%88%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-TypeScript/</url>
    <content><![CDATA[<h1 id="확장성-있는-Text-컴포넌트"><a href="#확장성-있는-Text-컴포넌트" class="headerlink" title="확장성 있는 Text 컴포넌트"></a>확장성 있는 Text 컴포넌트</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Text</span> typography=<span class="string">&quot;h1&quot;</span>&gt;나는 머릿말 <span class="number">1</span>이야&lt;/<span class="title class_">Text</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">typography</span>=<span class="string">&quot;content&quot;</span>&gt;</span>나는 콘텐츠야<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>위와 같은 컴포넌트를 만들기 위한 작업을 시작해보자.</p>
<p>컴포넌트 재사용을 높이기 위해서는 누구나 이해하기 쉽게 작성하는 것이 좋다. 그러기 위해서는 선언형 코드인 HTML 방식을 따르는 것이 이득이다.</p>
<h2 id="HTML-처럼-만든-컴포넌트"><a href="#HTML-처럼-만든-컴포넌트" class="headerlink" title="HTML 처럼 만든 컴포넌트"></a>HTML 처럼 만든 컴포넌트</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = <span class="title class_">HTMLAttributes</span>&lt;<span class="string">&quot;span&quot;</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Text</span> = (<span class="params">props: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>이런식으로만 사용해도 HTML Element를 똑같이 따라할 수 있다.</p>
<p>하지만 HTML 속성은 <span style="color:red">ref, key 같은 리액트 속성들을 없다.</span></p>
<p>이 때 사용하는 것이 forwardRef 함수로 ref 값은 전달해준다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Text</span> = <span class="title function_">forwardRef</span>(<span class="keyword">function</span> <span class="title function_">Text</span>(<span class="params"></span></span><br><span class="line"><span class="params">  props: ComponentPropsWithoutRef&lt;<span class="string">&quot;span&quot;</span>&gt;,</span></span><br><span class="line"><span class="params">  ref: Ref&lt;HTMLSpanElement&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ComponentPropsWithoutRef&lt;&quot;span&quot;&gt;</code>은 ref만 제외한 나머지 리액트 프로퍼티를 모두 포함한다.</li>
</ul>
<h2 id="커스텀-프로퍼티-추가하기"><a href="#커스텀-프로퍼티-추가하기" class="headerlink" title="커스텀 프로퍼티 추가하기"></a>커스텀 프로퍼티 추가하기</h2><p>지금까지의 컴포넌트는 그저 span element와 동일하다. 다른 커스텀 프로퍼티도 받을 수 있도록 타입스크립트의 &amp; (intersection)을 사용하여 타입을 확장해보자.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span> = &#123;</span><br><span class="line">  typography?: <span class="built_in">string</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">ComponentPropsWithoutRef</span>&lt;<span class="string">&quot;span&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Text</span> = <span class="title function_">forwardRef</span>(<span class="keyword">function</span> <span class="title function_">Text</span>(<span class="params"></span></span><br><span class="line"><span class="params">  &#123; typography, ...props &#125;: Props,</span></span><br><span class="line"><span class="params">  ref: Ref&lt;HTMLSpanElement&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>하지만, <code>ComponentPropsWithoutRef&lt;&quot;span&quot;&gt;</code>가 이미 갖고 있는 프로퍼티와 커스텀 프로퍼티가 동일한 경우 대응하기 어렵다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span> = &#123;</span><br><span class="line">  customId?: <span class="built_in">number</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">ComponentPropsWithoutRef</span>&lt;<span class="string">&quot;span&quot;</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>예를 들어 위와 같은 커스텀 프로퍼티는 <code>ComponentPropsWithoutRef&lt;&quot;span&quot;&gt;</code>와 동일한 프로퍼티가 없기 때문에 제대로 타입이 추론된다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span> = &#123;</span><br><span class="line">  id?: <span class="built_in">number</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">ComponentPropsWithoutRef</span>&lt;<span class="string">&quot;span&quot;</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>하지만 id 프로퍼티는 <code>ComponentPropsWithoutRef&lt;&quot;span&quot;&gt;</code>가 소유하고 있어 동일한 프로퍼티 2개가 생기게 되므로 타입스크립트가 제대로 추론하지 못하고 <code>undefined</code>로 추론된다.</p>
<p>이를 해결하기 위해서는 <strong>Omit 타입을 사용하여 오버라이딩하려는 프로퍼티를 먼저 제거한 후 병합해야지만 문제가 없다.</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Combine</span>&lt;T, K&gt; = T &amp; <span class="title class_">Omit</span>&lt;K, keyof T&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Combine 유틸타입은 2개의 타입을 받은 후 K타입에서 T 타입이 가진 프로퍼티와 중복되는 프로퍼티를 제거한 후 &amp; (intersection)으로 병합한다.</li>
</ul>
<blockquote>
<p>이런식으로 타입을 병합하려면 상당히 귀찮기 때문에 유틸 타입을 하나 만들어둔다.</p>
</blockquote>
<h2 id="원하는-요소로-렌더링-하기"><a href="#원하는-요소로-렌더링-하기" class="headerlink" title="원하는 요소로 렌더링 하기"></a>원하는 요소로 렌더링 하기</h2><p>지금까지는 span 요소로만 작동하기 때문에 확장성을 위해 <code>ComponentPropsWithoutRef&lt;&quot;span&quot;&gt;</code> 에서 span 위치에 변수를 할당하도록 구현한다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Text 컴포넌트의 커스텀 프로퍼티 선언</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextBaseProps</span>&lt;T&gt; = &#123;</span><br><span class="line">  typography?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">as</span>?: T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Props&lt;T&gt;는 ComponentPropsWithoutRef&lt;T&gt;에 이 값을 그대로 넘겨준다.</span></span><br><span class="line"><span class="comment">// 그리고 커스텀 프로퍼티 내부의 as에도 T 타입을 바인딩해준다.</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span>&lt;T&gt; = <span class="title class_">Combine</span>&lt;<span class="title class_">TextBaseProps</span>&lt;T&gt;, <span class="title class_">ComponentPropsWithoutRef</span>&lt;T&gt;&gt;;</span><br></pre></td></tr></table></figure>

<p>하지만, 이는 오류를 발생시킨다. <code>ComponentPropsWithoutRef</code>가 받을 수 있는 제네릭 타입이 <code>ElementType</code>으로 정해져 있기 때문이다.</p>
<p>그래서 <code>type T</code>는 <code>ElementType</code>을 상속한 타입이여야 한다고 명시해야한다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TextBaseProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>&gt; = &#123;</span><br><span class="line">  typography?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">as</span>?: T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>&gt; = <span class="title class_">Combine</span>&lt;</span><br><span class="line">  <span class="title class_">TextBaseProps</span>&lt;T&gt;,</span><br><span class="line">  <span class="title class_">ComponentPropsWithoutRef</span>&lt;T&gt;</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Text</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>&gt;(<span class="attr">props</span>: <span class="title class_">TextProps</span>&lt;T&gt;) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>이제 모든 <code>type T</code>가 동일하다는 것을 보장할 수 있다.</p>
<ol>
<li><code>Text&lt;T&gt;</code>의 타입 변수 T</li>
<li><code>TextProps&lt;T&gt;</code>의 타입 변수 T</li>
<li><code>TextBaseProps&lt;T&gt;</code>의 타입 변수 T</li>
<li>as 프로퍼티에 바인딩 된 타입 변수 T</li>
<li><code>ComponentPropsWithoutRef&lt;T&gt;</code>의 타입 변수 T</li>
</ol>
<p><strong>즉, 이 중 한곳이라도 T에 대해서 명확하게 알 수 있다면 나머지 부분에서도 자연스럽게 추론이 가능하다.</strong></p>
<h2 id="as-프로퍼티로-타이핑-추상화-하기"><a href="#as-프로퍼티로-타이핑-추상화-하기" class="headerlink" title="as 프로퍼티로 타이핑 추상화 하기"></a>as 프로퍼티로 타이핑 추상화 하기</h2><p><code>as</code>라는 프로퍼티는 Text 컴포넌트 뿐만 아니라 다양한 컴포넌트에서도 사용될 수 있기에 이 부분을 최대한 추상화 해둘 필요가 있다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 텍스트 컴포넌트의 프로퍼티</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextBaseProps</span> = &#123;</span><br><span class="line">  typography?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T 타입을 추론할 수 있는 as 프로퍼티를 자동으로 포함하고</span></span><br><span class="line"><span class="comment">// T 타입으로 HTML 엘리먼트 속성까지 타이핑 해주는 OverridableProps!</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>&gt; = <span class="title class_">OverridableProps</span>&lt;T, <span class="title class_">TextBaseProps</span>&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>OverridableProps</code> 타입은 특정 컴포넌트가 <code>as</code> 프로퍼티를 사용하여 HTML 요소 이름을 받고 내부적으로 해당 요소의 속성 타입을 찾아 바인딩해주는 함수이다.</li>
</ul>
<blockquote>
<p>이렇게 필요한 부분을 추상화해두면 필자가 아닌 다른 개발자는 <code>ComponentPropsWithoutRef</code>을 사용해야한다던가 <code>Combine</code> 타입을 사용할 때 타입 변수 <code>T</code>를 <code>ElementType</code>으로 제한해야한다던가 하는 귀찮은 부분을 생각하지 않고도 <code>as</code> 프로퍼티를 쉽고 빠르게 추가할 수 있을 것이다.</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 전체 코드</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Combine</span>&lt;T, K&gt; = T &amp; <span class="title class_">Omit</span>&lt;K, keyof T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">CombineElementProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>, K = <span class="built_in">unknown</span>&gt; = <span class="title class_">Combine</span>&lt;</span><br><span class="line">  K,</span><br><span class="line">  <span class="title class_">ComponentPropsWithoutRef</span>&lt;T&gt;</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OverridableProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>, K = <span class="built_in">unknown</span>&gt; = &#123;</span><br><span class="line">  <span class="keyword">as</span>?: T;</span><br><span class="line">&#125; &amp; <span class="title class_">CombineElementProps</span>&lt;T, K&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextBaseProps</span> = &#123;</span><br><span class="line">  typography?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TextProps</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span>&gt; = <span class="title class_">OverridableProps</span>&lt;T, <span class="title class_">TextBaseProps</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Text</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ElementType</span> = <span class="string">&quot;span&quot;</span>&gt;(</span><br><span class="line">  &#123; typography = <span class="string">&quot;content&quot;</span>, <span class="keyword">as</span>, ...props &#125;: <span class="title class_">TextProps</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">ref</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">as</span> ?? <span class="string">&quot;span&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Component</span> = target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      // <span class="attr">대충</span> <span class="attr">타이포그래피</span> <span class="attr">클래스</span> <span class="attr">렌더하는</span> <span class="attr">로직</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">forwardRef</span>(<span class="title class_">Text</span>) <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="title class_">Text</span>;</span><br></pre></td></tr></table></figure>

<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://evan-moon.github.io/2020/11/28/making-your-components-extensible-with-typescript/">Evans Library Blog - “타입스크립트와 함께 컴포넌트 단계별로 추상화하기”</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>onClick 이벤트 전파</title>
    <url>/2023/04/01/Daily/onClick-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%ED%8C%8C/</url>
    <content><![CDATA[<h1 id="onClick-이벤트-전파"><a href="#onClick-이벤트-전파" class="headerlink" title="onClick 이벤트 전파"></a>onClick 이벤트 전파</h1><p>React에서 onClick 이벤트 핸들러를 등록하여 클릭 이벤트가 발생하면 <strong>이벤트가 발생한 요소 뿐만 아니라 부모 요소까지 이벤트가 전파된다.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&quot;container clicked.&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&quot;parent clicked.&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;child&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            console.log(&quot;child clicked.&quot;);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          버튼</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">child clicked</span><br><span class="line">parent clicked</span><br><span class="line">container clicked</span><br></pre></td></tr></table></figure>

<ul>
<li>child를 클릭하면 console 창에 다음과 같이 출력된다.</li>
<li>이벤트가 발생한 요소부터 이벤트 핸들러가 호출되고 부모 방향으로 이벤트가 전파된다.</li>
</ul>
<p>간혹 부모 요소에서 이벤트가 발생하기를 원하지 않을 경우 이러한 이벤트 전파를 막아야한다.</p>
<p>그 방법으로는 <code>event.stopPropagation()</code>이다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&quot;container clicked.&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&quot;parent clicked.&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;child&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            e.stopPropagation();</span></span><br><span class="line"><span class="language-xml">            console.log(&quot;child clicked.&quot;);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          버튼</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">child clicked.</span><br></pre></td></tr></table></figure>

<ul>
<li>이벤트 전파가 발생하지 않고 이벤트가 발생한 요소만 이벤트 핸들러가 호출된다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>이벤트 전파</tag>
        <tag>stopPropagation</tag>
      </tags>
  </entry>
  <entry>
    <title>useEffect 초기 렌더링 방지하기</title>
    <url>/2023/04/04/Daily/useEffect-%EC%B4%88%EA%B8%B0-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="useEffect-초기-렌더링-스킵하기"><a href="#useEffect-초기-렌더링-스킵하기" class="headerlink" title="useEffect 초기 렌더링 스킵하기"></a>useEffect 초기 렌더링 스킵하기</h1><p>종속성 배열에 요소에 의존하여 어떤 로직을 실행하고 싶을 때, useEffect를 사용한다.</p>
<p>그런데 useEffect는 무조건 처음에 렌더링 되기 전에 실행된다.</p>
<p>이번 프로젝트에서 Nickname 페이지에서 Nickname을 수정하고 Mypage로 이동하여 Modal을 띄워야하는 경우가 있었다.</p>
<p>처음에는 Mypage에서 useEffect로 종속성 배열에 user를 넣어서 user가 변경되었음을 감지하고 effect 함수가 실행되기를 바랬지만, 이는 두가지 문제점이 있었다.</p>
<h3 id="문제점1-effect는-처음에-한번-무조건-실행된다"><a href="#문제점1-effect는-처음에-한번-무조건-실행된다" class="headerlink" title="문제점1. effect는 처음에 한번 무조건 실행된다."></a>문제점1. effect는 처음에 한번 무조건 실행된다.</h3><p>Nickname이 변경되었을 때만 Modal을 띄워야 하는데, Mypage가 렌더링 될 때마다 모달이 뜨는 문제가 발생하였다.</p>
<p>이를 해결하기 위해서는 effect 함수의 초기 렌더링때는 스킵해줘야한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useDidUpdateEffect</span>(<span class="params">fn, inputs</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> didMountRef = <span class="title function_">useRef</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (didMountRef.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line">    didMountRef.<span class="property">current</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;, inputs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useRef를 사용하여 초기 렌더링 때 effect 함수가 실행되는 것을 스킵할 수 있다.</p>
<h3 id="문제점2-user-상태를-종속성배열로-넣어도-변화를-감지하지-못한다"><a href="#문제점2-user-상태를-종속성배열로-넣어도-변화를-감지하지-못한다" class="headerlink" title="문제점2. user 상태를 종속성배열로 넣어도 변화를 감지하지 못한다."></a>문제점2. user 상태를 종속성배열로 넣어도 변화를 감지하지 못한다.</h3><p>Mypage 안의 useEffect는 결국 Mypage 컴포넌트가 불러와져서 렌더링 되기 이전에 실행되는 코드이다.</p>
<p>그러므로 Mypage가 렌더링 되기 이전에 Nickname 페이지에서 상태를 변경한 것을 감지할 수 없다는 것이다.</p>
<p>이를 망각한 체 useEffect에서 어떻게하면 전역 상태의 변경을 감지할 수 있을지에 대해 오랜 시간 고민하며 시간을 허비했다…</p>
<p>이를 해결하기 위해서는 <strong>전역 상태로 nickname 수정이 완료되었다는 상태(NicknameModal)을 갖도록 하여 간단하게 해결할 수 있었다.</strong></p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>useEffect</tag>
      </tags>
  </entry>
  <entry>
    <title>마크다운 파일 리액트에서 불러오기</title>
    <url>/2023/04/05/Daily/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%ED%8C%8C%EC%9D%BC-%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="Markdown-파일-React에서-불러오기"><a href="#Markdown-파일-React에서-불러오기" class="headerlink" title="Markdown 파일 React에서 불러오기"></a>Markdown 파일 React에서 불러오기</h1><p>이번 프로젝트에서 .md 파일로 저장된 데이터를 React 화면에 렌더링해야하는 작업이 필요했다.</p>
<p>그래서 찾아본 결과 마크다운 파일을 리액트에서 불러오기 편하도록 <code>react-markdown</code> 라이브러리를 찾았다.</p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-markdown</span><br></pre></td></tr></table></figure>

<h2 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactMarkdown</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-markdown/lib/react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Markdown</span> <span class="keyword">from</span> <span class="string">&quot;./assets/markdown.md&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [markdown, setMarkdown] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="title class_">Markdown</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">setMarkdown</span>(data));</span><br><span class="line">  &#125;, [markdown]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ReactMarkdown</span> <span class="attr">children</span>=<span class="string">&#123;markdown&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>마크다운 파일을 import 해온 뒤 useEffect를 사용하여 컴포넌트가 마운트 될 때, 지정된 경로로 마크다운 파일을 로드한다.</li>
</ul>
<h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/../../images/Daily/markdown/markdown.png" alt="마크다운 업로드 사진"></p>
<ul>
<li>마크다운 형식에 맞춰서 HTML형식으로 변환까지 잘 되었다.</li>
</ul>
<h3 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h3><h4 id="1-import-type-오류"><a href="#1-import-type-오류" class="headerlink" title="1. import type 오류"></a>1. import type 오류</h4><p>나는 vite를 사용하여 프로젝트를 시작하였다.</p>
<p>이 때, 마크다운 파일을 리액트에서 import 해오면 vite에서는 md 파일을 경로에서 가져온다는 것을 기본적으로 포함하고 있지 않기 때문에 경로에 빨간 밑줄(error)이 생긴다.</p>
<p>이를 해결하기 위해서는 TypeScript에게 md 파일을 경로에서 가져온다는 타입을 선언해줘야한다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;*.md&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-vite-md파일-형식-오류"><a href="#2-vite-md파일-형식-오류" class="headerlink" title="2. vite md파일 형식 오류"></a>2. vite md파일 형식 오류</h4><p><img src="/../../images/Daily/markdown/markdown_error.png" alt="markdown 오류"></p>
<p>vite 에서는 md 파일을 다룰 적절한 플러그인을 설치하거나 만약 이것이 asset이라면, <code>vite.config.ts</code>안에서 <code>**/*.md</code>를 assetsInclude에 할당하라고 알려주고 있다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],</span><br><span class="line">  <span class="attr">assetsInclude</span>: [<span class="string">&quot;**/*.md&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>나는 <code>**/*.md</code>를 assetsInclude에 할당하라는 것이 어떤 파일에서 해야하는지 몰라서 <code>tsconfig.json</code>에 넣어서 해결하는데 시간이 걸렸다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>React에서 TypeScript 올바르게 사용하기</title>
    <url>/2023/04/06/React/React%EC%97%90%EC%84%9C-TypeScript-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="React에서-TypeScript-올바르게-사용하기"><a href="#React에서-TypeScript-올바르게-사용하기" class="headerlink" title="React에서 TypeScript 올바르게 사용하기"></a>React에서 TypeScript 올바르게 사용하기</h1><p>Select 컴포넌트를 만든다고 가정해보자.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Select</span> = (<span class="params">&#123; label, value, options, onChange &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;options.map((option) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;option.value&#125;</span>&gt;</span>&#123;option.label&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="1-무지성으로-타입-정의"><a href="#1-무지성으로-타입-정의" class="headerlink" title="1. 무지성으로 타입 정의"></a>1. 무지성으로 타입 정의</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Select</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  label,</span></span><br><span class="line"><span class="params">  value,</span></span><br><span class="line"><span class="params">  options,</span></span><br><span class="line"><span class="params">  onChange,</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  label: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">  value: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">  options: &#123; label: <span class="built_in">string</span>; value: <span class="built_in">string</span> &#125;[];</span></span><br><span class="line"><span class="params">  onChange: (event: React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; <span class="built_in">void</span>;</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;options.map((option) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;option.value&#125;</span>&gt;</span>&#123;option.label&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-type-interface로-타입-정의"><a href="#2-type-interface로-타입-정의" class="headerlink" title="2. type, interface로 타입 정의"></a>2. type, interface로 타입 정의</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Option</span> = &#123; <span class="attr">label</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Options</span> = <span class="title class_">Option</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SelectProps</span> = &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Options</span>;</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">event: React.ChangeEvent&lt;HTMLSelectElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Select</span> = (<span class="params">&#123; label, value, options, onChange &#125;: SelectProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;options.map((option) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;option.value&#125;</span>&gt;</span>&#123;option.label&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-타입-파일-분리하기"><a href="#3-타입-파일-분리하기" class="headerlink" title="3. 타입 파일 분리하기"></a>3. 타입 파일 분리하기</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Select.d.ts</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Option</span> = &#123; <span class="attr">label</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Options</span> = <span class="title class_">Option</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SelectProps</span> = &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Options</span>;</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">event: React.ChangeEvent&lt;HTMLSelectElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Select.tsx</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Select</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">SelectProps</span>&gt; = (&#123;</span><br><span class="line">  label,</span><br><span class="line">  value,</span><br><span class="line">  options,</span><br><span class="line">  onChange,</span><br><span class="line">&#125;): <span class="variable constant_">JSX</span>.<span class="property">Element</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;options.map((option) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;option.value&#125;</span>&gt;</span>&#123;option.label&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>정답은 없지만 팀 내부에서 하나를 결정하고 통일할 필요는 있다.</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>select</tag>
      </tags>
  </entry>
  <entry>
    <title>React 카카오 로그인 연동하기</title>
    <url>/2023/04/06/Daily/React-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="React로-카카오-로그인-연동하기"><a href="#React로-카카오-로그인-연동하기" class="headerlink" title="React로 카카오 로그인 연동하기"></a>React로 카카오 로그인 연동하기</h1><p>이번 프로젝트에서 카카오 로그인 기능을 구현하였다. <code>배우는 곳은 무조건 공식문서가 짱이지 !</code></p>
<p>하고 공식문서에 들어가봤다.</p>
<h2 id="인증과-인가"><a href="#인증과-인가" class="headerlink" title="인증과 인가"></a>인증과 인가</h2><p><img src="/../../images/Daily/kakao/auth.png" alt="인증과인가"></p>
<blockquote>
<p>오… OAuth 2.0 기반으로 인증과 인가를 간편, 안전하게 처리할 수 있다는 장점이 있군?!</p>
</blockquote>
<h2 id="토큰"><a href="#토큰" class="headerlink" title="토큰"></a>토큰</h2><p>토큰이라는 사용자의 카카오 로그인 인증 및 인가 정보를 담은 권한 증명을 제공한다. Access Token, Refresh Token 두 종류를 발급해준다.</p>
<p><img src="/../../images/Daily/kakao/token.png" alt="token"></p>
<h2 id="로그인-과정-이해하기"><a href="#로그인-과정-이해하기" class="headerlink" title="로그인 과정 이해하기"></a>로그인 과정 이해하기</h2><p><img src="/../../images/Daily/kakao/login_process.png" alt="로그인 과정"></p>
<h3 id="1단계-카카오-로그인"><a href="#1단계-카카오-로그인" class="headerlink" title="1단계. 카카오 로그인"></a>1단계. 카카오 로그인</h3><ol>
<li><p>클라이언트에서 백엔드서버로 로그인 요청을 보낸다.</p>
</li>
<li><p>백엔드 서버에서 인가 코드를 카카오에게 요청한다.</p>
</li>
<li><p>카카오는 인증과 동의 요청을 클라이언트에게 보낸다.</p>
</li>
<li><p>클라이언트가 동의 항목 체크하고 로그인한다.</p>
</li>
<li><p>앱에 등록된 Redirect URI로부터 인가 코드를 받고 이를 가지고 토큰을 요청한다.</p>
</li>
<li><p>카카오가 토큰을 발급해준다.</p>
</li>
<li><p>카카오 로그인이 완료된다 !</p>
</li>
</ol>
<h3 id="2단계-회원-확인-및-가입"><a href="#2단계-회원-확인-및-가입" class="headerlink" title="2단계. 회원 확인 및 가입"></a>2단계. 회원 확인 및 가입</h3><ol>
<li><p>클라이언트가 발급받은 토큰으로 카카오 API 서버로 요청을 보내 사용자 정보를 가져온다.</p>
</li>
<li><p>카카오 API 서버는 요청의 토큰을 검증하여 처리한다.</p>
</li>
<li><p>백엔드 서버는 제공받은 사용자 정보로 서비스 회원인지 확인하고 신규 사용자인 경우 회원가입 시킨다.</p>
</li>
</ol>
<h3 id="3단계-서비스-로그인"><a href="#3단계-서비스-로그인" class="headerlink" title="3단계. 서비스 로그인"></a>3단계. 서비스 로그인</h3><ol>
<li>백엔드에서 세션을 발급해주고 클라이언트에서 로그인 완료 처리해준다.</li>
</ol>
<h2 id="필수-설정-항목"><a href="#필수-설정-항목" class="headerlink" title="필수 설정 항목"></a>필수 설정 항목</h2><h3 id="1-플랫폼-등록"><a href="#1-플랫폼-등록" class="headerlink" title="1. 플랫폼 등록"></a>1. 플랫폼 등록</h3><p>나의 서비스를 연결해줄 플랫폼을 등록한다.</p>
<p>플랫폼 등록에 가보면 Android, ios, Web을 선택할 수 있고 생성하면 API Key를 발급해준다.</p>
<ul>
<li>사이트 도메인을 설정해줘야한다.</li>
<li>http:&#x2F;&#x2F;, https:&#x2F;&#x2F;, file:&#x2F;&#x2F; 형식의 도메인을 등록할 수 있으며, http와 https 도메인은 둘 중 한 가지만 등록해도 사용할 수 있습니다.</li>
<li>최대 10개의 도메인을 등록할 수 있습니다.</li>
</ul>
<h3 id="2-카카오-로그인-활성화"><a href="#2-카카오-로그인-활성화" class="headerlink" title="2. 카카오 로그인 활성화"></a>2. 카카오 로그인 활성화</h3><p>카카오 로그인에 가서 활성화 버튼을 ON으로 바꿔줘야한다.</p>
<h3 id="3-Redirect-URI-등록"><a href="#3-Redirect-URI-등록" class="headerlink" title="3. Redirect URI 등록"></a>3. Redirect URI 등록</h3><p>인가 코드를 요청받은 URI를 등록해준다.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/oauth/callback/kakao</span><br></pre></td></tr></table></figure>

<p>해당 Redirect URI로 요청을 보낼 때 필수 파라미터들이 있다.</p>
<ul>
<li>cliend_id : 내 애플리케이션의 REST API 앱 키</li>
<li>redirect_uri : Redirect URI</li>
<li>response_type : <code>code</code> 고정값</li>
</ul>
<h3 id="4-동의-항목"><a href="#4-동의-항목" class="headerlink" title="4. 동의 항목"></a>4. 동의 항목</h3><p>어떤 동의항목을 받을 것인지 설정해준다. 필수만 체크해주자 편의상</p>
<h3 id="5-구현-방법-선택"><a href="#5-구현-방법-선택" class="headerlink" title="5. 구현 방법 선택"></a>5. 구현 방법 선택</h3><ul>
<li>REST API</li>
<li>JavaScript</li>
<li>Android</li>
<li>IOS</li>
<li>Flutter</li>
</ul>
<p>로 구현할 수 있는데, REST API로 하자.</p>
<h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><h2 id="1-카카오-로그인-요청을-보낼-버튼을-하나-만들자"><a href="#1-카카오-로그인-요청을-보낼-버튼을-하나-만들자" class="headerlink" title="1. 카카오 로그인 요청을 보낼 버튼을 하나 만들자"></a>1. 카카오 로그인 요청을 보낼 버튼을 하나 만들자</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api_key.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REST_API_KEY</span> = <span class="string">`alksdjfoasidnfaofj`</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REDIRECT_URI</span> = <span class="string">&quot;http://localhost:3000/auth/callback/kakao&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REST_API_KEY</span>, <span class="variable constant_">REDIRECT_URI</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./api_key.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">KAKAO_AUTH_URL</span> = <span class="string">`https://kauth.kakao.com/oauth/authorize?client_id=<span class="subst">$&#123;REST_API_KEY&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;REDIRECT_URI&#125;</span>&amp;response_type=code`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="variable constant_">KAKAO_AUTH_URL</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>카카오 로그인<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /oauth/authorize?client_id=$&#123;REST_API_KEY&#125;&amp;redirect_uri=$&#123;REDIRECT_URI&#125;&amp;response_type=code HTTP/1.1</span><br><span class="line">Host: kauth.kakao.com</span><br></pre></td></tr></table></figure>

<ul>
<li>카카오 로그인 인가 코드받기 부분에 가면 Host와 GET 요청 URI가 나와있다.</li>
<li>이렇게 하여 로그인 버튼을 누르면 URL이 이동하여 카카오 로그인과 회원인증을 처리한다.</li>
</ul>
<h2 id="2-카카오-로그인-동안-수행-내용을-컴포넌트에-작성하자"><a href="#2-카카오-로그인-동안-수행-내용을-컴포넌트에-작성하자" class="headerlink" title="2. 카카오 로그인 동안 수행 내용을 컴포넌트에 작성하자"></a>2. 카카오 로그인 동안 수행 내용을 컴포넌트에 작성하자</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">KakaoLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">KAKAO_CODE</span> = location.<span class="property">search</span>.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getKakaoToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`https://kauth.kakao.com/oauth/token`</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">`grant_type=authorization_code&amp;client_id=<span class="subst">$&#123;REST_API_KEY&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;REDIRECT_URI&#125;</span>&amp;code=<span class="subst">$&#123;AUTHORIZE_CODE&#125;</span>`</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">access_token</span>) &#123;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;kakao_token&quot;</span>, data.<span class="property">access_token</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">navigate</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!location.<span class="property">search</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">getKakaoToken</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /oauth/token HTTP/1.1</span><br><span class="line">Host: kauth.kakao.com</span><br><span class="line">Content-type: application/x-www-form-urlencoded;charset=utf-8</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Request --&gt;</span><br><span class="line">curl -v -X POST &quot;https://kauth.kakao.com/oauth/token&quot; \</span><br><span class="line"> -H &quot;Content-Type: application/x-www-form-urlencoded&quot; \</span><br><span class="line"> -d &quot;grant_type=authorization_code&quot; \</span><br><span class="line"> -d &quot;client_id=$&#123;REST_API_KEY&#125;&quot; \</span><br><span class="line"> --data-urlencode &quot;redirect_uri=$&#123;REDIRECT_URI&#125;&quot; \</span><br><span class="line"> -d &quot;code=$&#123;AUTHORIZE_CODE&#125;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>토큰을 얻기 위해서는 POST 요청을 위 URL로 요청을 보내라고 알려주고 있다.</li>
<li>Request에서 나온대로 fetch 함수에 적어주면 된다.</li>
</ul>
<blockquote>
<p>-d로 나와있는 부분이 body부분에 넣어주면된다. “”로 구분된 것들은 <code>&amp;</code>기호로 구분해준다.</p>
</blockquote>
<ul>
<li>인가 코드를 사용하기 위해서 Redirect URI에서 <code>localhost:3000/auth/callback/kakao?code=</code> 뒷부분을 사용하기 위해 split 코드를 사용하였다.</li>
</ul>
<blockquote>
<p>URLSearchParams를 사용하여도 가능하다.</p>
</blockquote>
<h1 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h1><p><img src="/../../images/Daily/kakao/result.png" alt="결과"></p>
<p>이렇게 코드를 짜면 localStorage에 토큰까지 저장되며 로그인이 성공한 것을 알 수 있다.</p>
<p>이제는 토큰을 가지고 로그인 했다고 처리를 해주면 된다.</p>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>이번에 OAuth2.0 기반의 카카오 로그인을 연동해보았는데 처음 해봐서 신기하기도 하고 토큰을 받고 이후에 어떻게 로그인 유지와 로그아웃 처리를 해줘야하는지도 고민할 수 있는 시간이 있어서 배운 점이 많았다.</p>
<p>앞으로 OAuth 연동에 대해 두려움이 줄어든 것 같다.</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>카카오로그인</tag>
      </tags>
  </entry>
  <entry>
    <title>여러 input값 상태 관리 하기</title>
    <url>/2023/04/06/Daily/%EC%97%AC%EB%9F%AC-input%EA%B0%92-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="여러-input-값-상태-관리하기"><a href="#여러-input-값-상태-관리하기" class="headerlink" title="여러 input 값 상태 관리하기"></a>여러 input 값 상태 관리하기</h1><p>이번 프로젝트를 하다가 한 페이지에 3가지 케이스의 멀티 input을 가지는 화면이 렌더링되는 부분이 있었다.</p>
<p>가령 코드 구조는 다음과 같다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Backtest.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChangeEvent</span>, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRecoilState &#125; <span class="keyword">from</span> <span class="string">&quot;recoil&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; backtestState &#125; <span class="keyword">from</span> <span class="string">&quot;../atom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BacktestInputs</span> <span class="keyword">from</span> <span class="string">&quot;../components/BacktestInputs/BacktestInputs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Backtest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [backtest, setBacktest] = <span class="title function_">useRecoilState</span>(backtestState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [backtestInputs, setBacktestInputs] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">invest</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">dol</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params">e: ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, name &#125; = e.<span class="property">target</span>;</span><br><span class="line">    <span class="title function_">setBacktestInputs</span>(&#123; ...backtestInputs, [name]: value &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onSave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setBacktest</span>(backtestInputs);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onReset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setBacktestInputs</span>(&#123; <span class="attr">invest</span>: <span class="string">&quot;&quot;</span>, <span class="attr">port</span>: <span class="string">&quot;&quot;</span>, <span class="attr">dol</span>: <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onSave&#125;</span>&gt;</span>저장<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">BacktestInputs</span> <span class="attr">value</span>=<span class="string">&#123;backtestInputs&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onReset&#125;</span>&gt;</span>input 값 리셋<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>전역상태<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>invest: &#123;backtest[&quot;invest&quot;]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>port: &#123;backtest[&quot;port&quot;]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>dol: &#123;backtest[&quot;dol&quot;]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Backtest</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BacktestInputs.tsx</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;@emotion/styled&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChangeEvent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: &#123; <span class="attr">invest</span>: string, <span class="attr">port</span>: string, <span class="attr">dol</span>: string &#125;;</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">e: ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BacktestInputs</span>(<span class="params">&#123; value, onChange &#125;: Props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; invest, port, dol &#125; = value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Backtest<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputWrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;invest&quot;</span>&gt;</span>Investment: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;invest&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;invest&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&quot;invest&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">InputWrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputWrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;port&quot;</span>&gt;</span>Port: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;port&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;port&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&quot;port&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">InputWrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputWrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;dol&quot;</span>&gt;</span>Dual: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;dol&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;dol&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&quot;dol&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">InputWrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BacktestInputs</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InputWrap</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>

<p>나는 고민을 하였다. Backtest 페이지에서 Input을 감싸고 있는 컴포넌트가 3종류가 있고, 3종류의 컴포넌트 내부에는 다수의 input 값을 가지고 있을 때, 어떻게 input을 관리하면 좋을지 고민했다.</p>
<p>그렇게 하다가 생각해낸 방법이 각 컴포넌트의 input 값의 name을 가지는 객체로 input들의 상태를 관리하기로 했다.</p>
<h3 id="전역상태와-input-상태"><a href="#전역상태와-input-상태" class="headerlink" title="전역상태와 input 상태"></a>전역상태와 input 상태</h3><p>나는 전역상태를 직접 onChange 이벤트가 일어날 때 마다 바꿔주는 코드를 작성했었다. 전역상태는 최소한으로 조작을 해야지만 에러가 덜 발생하기 때문에 최종적으로 저장 버튼을 클릭했을 때만 전역상태에 저장하기로 했다.</p>
<p>그래서 input 상태를 객체로 가지고 저장 버튼을 클릭했을 때, 전역 상태 update 함수에게 input 상태를 파라미터로 전달하도록 구현하였다.</p>
<h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>처음에는 그 많은 input을 직접 전달해줘야하나 … 걱정을 했었다. 하지만 객체로 input을 관리하고, input 마다 name 속성을 사용하여 onChange 이벤트로 controlled input을 다룰 수 있다는 것을 알게되어서 앞으로 다중 input 상태관리는 이러한 방법으로 접근하면 된다는 것을 알게되었다.</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>React 무한 스크롤 라이브러리 사용하기</title>
    <url>/2023/04/17/React/React-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="리액트-무한-스크롤-라이브러리-사용해보기"><a href="#리액트-무한-스크롤-라이브러리-사용해보기" class="headerlink" title="리액트 무한 스크롤 라이브러리 사용해보기"></a>리액트 무한 스크롤 라이브러리 사용해보기</h1><p><a href="https://www.npmjs.com/package/react-infinite-scroller">react-infinite-scroller</a></p>
<p>위 라이브러리를 사용하여 리액트에서 무한 스크롤을 사용해보자.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react-infinite-scroller</span><br><span class="line"></span><br><span class="line"><span class="comment"># typeScript를 사용한다면 추가</span></span><br><span class="line">npm i --save-dev @types/react-infinite-scroller</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">InfiniteScroll</span> <span class="keyword">from</span> <span class="string">&quot;react-infinite-scroller&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState&lt;&#123; <span class="attr">label</span>: <span class="built_in">string</span> &#125;[]&gt;([]);</span><br><span class="line">  <span class="comment">//   const [loading, setLoading] = useState(false);</span></span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleLoadMore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;more load!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   if (loading) &#123;</span></span><br><span class="line">  <span class="comment">//     return &lt;div&gt;Loading ...&lt;/div&gt;;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Error: &#123;error&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="title class_">Markdown</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">setMarkdown</span>(data));</span><br><span class="line">  &#125;, [markdown]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// setLoading(true);</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">setData</span>(customAssetList);</span><br><span class="line">      <span class="comment">//   setLoading(false);</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">setError</span>(error);</span><br><span class="line">      <span class="comment">//   setLoading(false);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InfiniteScroll</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">사용자에</span> <span class="attr">의해</span> <span class="attr">더</span> <span class="attr">많은</span> <span class="attr">아이템이</span> <span class="attr">요청될</span> <span class="attr">때</span> <span class="attr">실행하는</span> <span class="attr">콜백함수</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loadMore</span>=<span class="string">&#123;handleLoadMore&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">이벤트</span> <span class="attr">리스너를</span> <span class="attr">component의</span> <span class="attr">부모요소에</span> <span class="attr">추가</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">useWindow</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">해당</span> <span class="attr">아이템을</span> <span class="attr">감싸는</span> <span class="attr">태그</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">element</span>=<span class="string">&quot;article&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">loading</span> <span class="attr">중일</span> <span class="attr">때</span> <span class="attr">보여줄</span> <span class="attr">요소</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loader</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &lt;<span class="attr">div</span> <span class="attr">className</span>=<span class="string">&quot;loader&quot;</span> <span class="attr">key</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Loading ...</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;data.map((da, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>종목: &#123;index + 1&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;da.label&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">InfiniteScroll</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>data를 state로 관리해주고 useEffect 훅을 사용하여 처음 화면이 렌더링 될 때, loading 상태를 변경시키고 data를 업데이트한다.</li>
<li>InfiniteScroll 컴포넌트는 내부적으로 loading 상태일 때를 관리하고 있어 <strong>개발자가 따로 loading state를 가질 필요가 없다.</strong></li>
</ul>
<h2 id="검색-기능-활성화-시키기"><a href="#검색-기능-활성화-시키기" class="headerlink" title="검색 기능 활성화 시키기"></a>검색 기능 활성화 시키기</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&quot;lodash/debounce&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState&lt;&#123; <span class="attr">label</span>: <span class="built_in">string</span> &#125;[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [searchValue, setSearchValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [filteredData, setFilteredData] = useState&lt;&#123; <span class="attr">label</span>: <span class="built_in">string</span> &#125;[]&gt;([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleSearchValue = <span class="title function_">debounce</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setSearchValue</span>(value);</span><br><span class="line">    <span class="keyword">const</span> filtered = data.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">label</span>.<span class="title function_">includes</span>(value));</span><br><span class="line">    <span class="title function_">setFilteredData</span>(filtered);</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e: ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = e.<span class="property">currentTarget</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">handleSearchValue</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InfiniteScroll</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loadMore</span>=<span class="string">&#123;handleLoadMore&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">useWindow</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">element</span>=<span class="string">&quot;article&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loader</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &lt;<span class="attr">div</span> <span class="attr">className</span>=<span class="string">&quot;loader&quot;</span> <span class="attr">key</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Loading ...</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;searchValue !== &quot;&quot;</span></span><br><span class="line"><span class="language-xml">          ? filteredData.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>종목: &#123;index + 1&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;item.label&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))</span></span><br><span class="line"><span class="language-xml">          : data.map((da, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>종목: &#123;index + 1&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;da.label&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">InfiniteScroll</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>handleChange를 onChange 이벤트 핸들러로 등록하여 change 이벤트가 발생할 때 마다 검색값으로 필터된 데이터를 보여준다.</li>
<li>onChange 이벤트가 너무 많이 발생하면 1만개의 데이터가 자주 렌더링 되므로 성능에 문제가 있을 수 있어 debounce를 사용하여 이벤트가 끝난 후 0.3초 후에 이벤트를 캐치하도록 구현</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>infinite Scroll</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;오늘부터 CSS 마스터 20일차&gt; :not</title>
    <url>/2023/04/18/CSS/%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-CSS-%EB%A7%88%EC%8A%A4%ED%84%B0-20%EC%9D%BC%EC%B0%A8-:not/</url>
    <content><![CDATA[<h1 id="not-셀렉터"><a href="#not-셀렉터" class="headerlink" title=":not 셀렉터"></a>:not 셀렉터</h1><p><img src="/../../images/CSS/not/not.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">15rem</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid__child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>이렇게 생긴 그리드 아이템에 마우스 올린 요소만 hover 효과를 주고 나머지 요소는 공통적으로 다른 효과를 주고 싶을 때, :not, :hover 셀렉터가 유용하다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid__child</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/CSS/not/not1.png"></p>
<ul>
<li>이렇게 마우스가 올라간 요소만 제외하고 opacity가 변경되는 것을 볼 수 있다.</li>
</ul>
<p>하지만 한가지 문제점은 grid의 gap이 있을 경우 item에 마우스가 올라갔을 때 뿐만 아니라 <strong>gap에 마우스가 올라갔을 때에도 해당 css가 적용된다.</strong></p>
<p>이를 해결하기 위해서 부모 요소에는 <code>pointer-events: none</code>을 주고 자식 요소에는 <code>pointer-events: auto</code>를 줘서 해결할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">15rem</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid__child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span>/<span class="number">0.5</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid__child</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h2><p><code>pointer-events: none</code> 속성은 hover이벤트 뿐만 아니라 다른 모든 이벤트도 무시한다. 그래서 scroll이 되어야하는 경우에 스크롤이 되지 않는 문제가 발생할 수 있다.</p>
<p>이를 해결하기 위해서는 해당 부모요소를 감싸는 container 박스를 생성하는 것이다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;grid__child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">15rem</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid__child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span>/<span class="number">0.5</span>; // 가로 세로 비율</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid__child</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>grid 요소를 감싸는 container 요소에 scroll을 가능하게 <code>overflow:auto</code> 속성을 주면 스크롤도 작동하고 gap 부분에서 hover 이벤트도 방지할 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>not셀렉터</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Omit&lt;T,K&gt; 알아보기</title>
    <url>/2023/04/18/TypeScript/TypeScript-Omit-T-K-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="Omit-lt-T-K-gt-타입"><a href="#Omit-lt-T-K-gt-타입" class="headerlink" title="Omit&lt;T,K&gt; 타입"></a>Omit&lt;T,K&gt; 타입</h1><p><img src="/../../images/typescript/omit/Omit.webp"></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">interfact <span class="title class_">Todo</span> &#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">description</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">completed</span>:<span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">MyOmit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;description&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> &#123;</span><br><span class="line">    <span class="attr">completed</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>TypeScript Omit타입은 해당 객체 타입에서 Key 타입을 제외할 때 사용한다.</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>omit</tag>
      </tags>
  </entry>
  <entry>
    <title>React 코드 컨벤션 지키고 사수한테 칭찬받기</title>
    <url>/2023/04/20/React/React-%EC%BD%94%EB%93%9C-%EC%BB%A8%EB%B2%A4%EC%85%98-%EC%A7%80%ED%82%A4%EA%B3%A0-%EC%82%AC%EC%88%98%ED%95%9C%ED%85%8C-%EC%B9%AD%EC%B0%AC%EB%B0%9B%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="1-ESLint와-Prettier-사용하기"><a href="#1-ESLint와-Prettier-사용하기" class="headerlink" title="1. ESLint와 Prettier 사용하기"></a>1. ESLint와 Prettier 사용하기</h1><ul>
<li><a href="https://eslint.org/">ESLint</a></li>
<li><a href="https://prettier.io/docs/en/install.html">Prettier</a></li>
</ul>
<p>import&#x2F;order 까지 설정해두면 복잡한 import 구문의 가독성을 조금이나마 개선할 수 있다.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;import/order&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;newlines-between&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;builtin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;internal&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;parent&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;sibling&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;type&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alphabetize&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;caseInsensitive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pathGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react*&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="string">&quot;before&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-네이밍-컨벤션"><a href="#2-네이밍-컨벤션" class="headerlink" title="2. 네이밍 컨벤션"></a>2. 네이밍 컨벤션</h1><h3 id="컴포넌트-interface-type에는-PascalCase를-써라"><a href="#컴포넌트-interface-type에는-PascalCase를-써라" class="headerlink" title="컴포넌트, interface, type에는 PascalCase를 써라"></a>컴포넌트, interface, type에는 PascalCase를 써라</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BannersEditForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Typescript interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TodoItem</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Typescript type alias</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoList</span> = <span class="title class_">TodoItem</span>[];</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-데이터-변수-배열-객체-함수-등-은-camelCase를-써라"><a href="#JavaScript-데이터-변수-배열-객체-함수-등-은-camelCase를-써라" class="headerlink" title="JavaScript 데이터(변수, 배열, 객체, 함수 등)은 camelCase를 써라"></a>JavaScript 데이터(변수, 배열, 객체, 함수 등)은 camelCase를 써라</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getLastDigit</span> = (<span class="params"></span>) =&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userTypes = [ ... ]</span><br></pre></td></tr></table></figure>

<p>또한, 폴더와 컴포넌트가 아닌 파일 이름은 <code>camelCase</code>를 사용하고 컴포넌트 파일에는 <code>PascalCase</code>를 써라</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/utils/form.ts</span><br><span class="line">src/hooks/useForm.ts</span><br><span class="line">src/components/banners/edit/Form.tsx</span><br></pre></td></tr></table></figure>

<h1 id="3-TypeScript-통-barrels-을-사용해라"><a href="#3-TypeScript-통-barrels-을-사용해라" class="headerlink" title="3. TypeScript 통(barrels)을 사용해라"></a>3. TypeScript 통(barrels)을 사용해라</h1><p>barrels는 여러 export를 하나의 파일에서 다루는 방법이다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// barrel file example</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./DropDown&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./TextBox&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./CheckBox&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./DateTimePicker&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./Slider&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">DropDown</span>,</span><br><span class="line">  <span class="title class_">TextBox</span>,</span><br><span class="line">  <span class="title class_">CheckBox</span>,</span><br><span class="line">  <span class="title class_">DateTimePicker</span>,</span><br><span class="line">  <span class="title class_">Slider</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./src/controls&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>이렇게 하면 import를 여러 파일에서 하지 않고 하나의 파일에서 할 수 있어 간편하다.</li>
<li>이렇듯 타입스크립트도 barrels를 사용하여 관리하면 클린 코드에 좋을 것이다.</li>
</ul>
<h1 id="4-기본-내보내기-default-export-를-피하라"><a href="#4-기본-내보내기-default-export-를-피하라" class="headerlink" title="4. 기본 내보내기 (default export)를 피하라"></a>4. 기본 내보내기 (default export)를 피하라</h1><p>기본 내보내기는 내보낼 항목과 어떤 이름도 연결하지 않는다.</p>
<p>즉, 개발자가 내보내려는 이름대로 가져오는 것이 클린 코드에 보다 적합하다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MyComponent</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MyComponent</span> = ...;</span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">MyComponentType</span> = ...;</span><br></pre></td></tr></table></figure>

<h1 id="5-컴포넌트-구조-통일하기"><a href="#5-컴포넌트-구조-통일하기" class="headerlink" title="5. 컴포넌트 구조 통일하기"></a>5. 컴포넌트 구조 통일하기</h1><p>모든 컴포넌트의 구조를 다음과 같이 통일해라</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Imports - Prefer destructuring imports to minimize writen code</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PropsWithChildren</span>, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ComponentProps</span> = &#123;</span><br><span class="line">  <span class="attr">someProperty</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Styles - with @mui use styled API or sx prop of the component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Wrapper</span> = <span class="title function_">styled</span>(<span class="string">&quot;div&quot;</span>)(<span class="function">(<span class="params">&#123; theme &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">color</span>: theme.<span class="property">palette</span>.<span class="property">white</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Additional variables</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SOME_CONSTANT</span> = <span class="string">&quot;something&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Component</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">&#123; someProperty &#125;: PropsWithChildren&lt;ComponentProps&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// 5.1 Definitions</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; something &#125; = <span class="title function_">useSomething</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.2 Functions</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleToggleState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setState</span>(!state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.3 Effects</span></span><br><span class="line">  <span class="comment">// ❌</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ✅</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.5 Additional destructures</span></span><br><span class="line">  <span class="keyword">const</span> &#123; property &#125; = something;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Separate elements if not closed on the same line to make the code clearer */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* ❌ */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque</span></span><br><span class="line"><span class="language-xml">          arcu. Et harum quidem rerum facilis est et expedita distinctio.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque</span></span><br><span class="line"><span class="language-xml">          arcu. Et harum quidem rerum facilis est et expedita distinctio.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* ✅ */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span></span><br><span class="line"><span class="language-xml">            Pellentesque arcu. Et harum quidem rerum facilis est et expedita</span></span><br><span class="line"><span class="language-xml">            distinctio.</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque arcu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span></span><br><span class="line"><span class="language-xml">            Pellentesque arcu. Et harum quidem rerum facilis est et expedita</span></span><br><span class="line"><span class="language-xml">            distinctio.</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Exports</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Component</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> &#123; <span class="title class_">ComponentProps</span> &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="6-PropsWithChildren-을-사용해라"><a href="#6-PropsWithChildren-을-사용해라" class="headerlink" title="6. PropsWithChildren 을 사용해라"></a>6. <code>PropsWithChildren</code> 을 사용해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PropsWithChildren</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">ComponentProps</span> = &#123;</span><br><span class="line">  <span class="attr">someProperty</span>: string,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  someProperty,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">&#125;: PropsWithChildren&lt;ComponentProps&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>props로 children을 내려주고 children 타입을 설정해주는 작업이 반복적으로 발생할 때 번거로움을 해소하고자 <code>PropsWithChildren</code>을 사용할 수 있다.</li>
</ul>
<blockquote>
<p>PropsWithChildren의 children 타입은 optional 하다. 그러므로 꼭 children이 들어가야하는 컴포넌트에서 보다 엄격하게 타입을 지정해주기 위해서는 <code>children:ReactNode</code>로 타입을 지정해주는 방법이 있다.</p>
</blockquote>
<h1 id="7-JSX에서-함수가-한줄-이상이라면-분리하라"><a href="#7-JSX에서-함수가-한줄-이상이라면-분리하라" class="headerlink" title="7. JSX에서 함수가 한줄 이상이라면 분리하라"></a>7. JSX에서 함수가 한줄 이상이라면 분리하라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line">&lt;button</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setState</span>(!state);</span><br><span class="line">    <span class="title function_">resetForm</span>();</span><br><span class="line">    <span class="title function_">reloadData</span>();</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setState(!state)&#125; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setState</span>(!state);</span><br><span class="line">  <span class="title function_">resetForm</span>();</span><br><span class="line">  <span class="title function_">reloadData</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;handleButtonClick&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h1 id="8-Key-props로-index를-사용을-피해라"><a href="#8-Key-props로-index를-사용을-피해라" class="headerlink" title="8. Key props로 index를 사용을 피해라"></a>8. Key props로 index를 사용을 피해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = [<span class="string">&quot;item1&quot;</span>, <span class="string">&quot;item2&quot;</span>, <span class="string">&quot;item3&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((value, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;111&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;item1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;222&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;item2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;333&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;item3&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>공시군서에 따르면 배열 내에서만 고유한 값을 전달해주면 된다고 나와있으니 map 고차함수를 사용하여 index를 key prop로 전달해도 될 것 같다.</p>
<p>하지만 이렇게 할 경우, React에서는 props가 변경되면 컴포넌트를 재렌더링하는데, 배열에서 리스트를 추가, 삭제하면 index가 변경되므로 변경되지 않은 다른 리스트들도 불필요한 재렌더링이 발생하게 된다.</p>
<p>그러므로 <strong>key prop에는 item의 id, react uid 라이브러리로 고유한 key를 지정해줘야한다.</strong></p>
<h1 id="9-fragments를-써라"><a href="#9-fragments를-써라" class="headerlink" title="9. fragments를 써라"></a>9. fragments를 써라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ActionButtons</span> = (<span class="params">&#123; text1, text2 &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text1&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text2&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; text1, text2 &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text1&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text2&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>불필요한 div 태그 대신 Fragment를 사용하자</p>
<h1 id="10-구조분해할당-사용하라"><a href="#10-구조분해할당-사용하라" class="headerlink" title="10. 구조분해할당 사용하라"></a>10. 구조분해할당 사용하라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; text &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; text &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="11-관심사를-분리해라"><a href="#11-관심사를-분리해라" class="headerlink" title="11. 관심사를 분리해라"></a>11. 관심사를 분리해라</h1><p>presentation 컴포넌트에서 business 로직을 분리하는 것은 컴포넌트 코드의 가독성을 높힐 수 있다.</p>
<p>대부분의 page, screen, container 컴포넌트에 다수의 hook과 useEffect를 사용하려고 할 때 business 로직을 분리하는 것을 시도할 수 있다.</p>
<h3 id="custom-hook"><a href="#custom-hook" class="headerlink" title="custom hook"></a>custom hook</h3><p>관심사(책임)을 분리하기 위해서 useEffect나 다수의 useState를 컴포넌트에 직접 넣는 대신 Custom hook을 사용해라</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ScreenDimensions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setWindowSize</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">    <span class="title function_">handleResize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen width: &#123;windowSize.width&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen height: &#123;windowSize.height&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useWindowSize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setWindowSize</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">    <span class="title function_">handleResize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> windowSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ScreenDimensions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> windowSize = <span class="title function_">useWindowSize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen width: &#123;windowSize.width&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current screen height: &#123;windowSize.height&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="12-거대-컴포넌트를-피해라"><a href="#12-거대-컴포넌트를-피해라" class="headerlink" title="12. 거대 컴포넌트를 피해라"></a>12. 거대 컴포넌트를 피해라</h1><p>거대 컴포넌트가 가능하더라도, 컴포넌트를 작은 단위로 분리해라.</p>
<p>주로 조건부 렌더링을 할 때 사용할 수 있다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeSection</span> = (<span class="params">&#123; isEditable, value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isEditable) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Edit this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Clear content<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Read this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">EditableSection</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Edit this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Clear content<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DetailSection</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Read this content<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeSection</span> = (<span class="params">&#123; isEditable, value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> isEditable ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">EditableSection</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">DetailSection</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="13-가능하다면-state를-그룹화해라"><a href="#13-가능하다면-state를-그룹화해라" class="headerlink" title="13. 가능하다면 state를 그룹화해라"></a>13. 가능하다면 state를 그룹화해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> [username, setUsername] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [password, setPassword] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="14-boolean-shorthand를-사용해라"><a href="#14-boolean-shorthand를-사용해라" class="headerlink" title="14. boolean shorthand를 사용해라"></a>14. boolean shorthand를 사용해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line">&lt;<span class="title class_">Form</span> hasPadding=&#123;<span class="literal">true</span>&#125; withError=&#123;<span class="literal">true</span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">hasPadding</span> <span class="attr">withError</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="15-curly-braces를-피해라"><a href="#15-curly-braces를-피해라" class="headerlink" title="15. curly braces를 피해라"></a>15. curly braces를 피해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line">&lt;<span class="title class_">Title</span> variant=&#123;<span class="string">&quot;h1&quot;</span>&#125; value=&#123;<span class="string">&quot;Home page&quot;</span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Title</span> <span class="attr">variant</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Home page&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="16-inline-스타일을-피해라"><a href="#16-inline-스타일을-피해라" class="headerlink" title="16. inline 스타일을 피해라"></a>16. inline 스타일을 피해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Title</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontWeight:</span> <span class="attr">600</span>, <span class="attr">fontSize:</span> &quot;<span class="attr">24px</span>&quot; &#125;&#125; &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useStyles</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">header</span>: &#123; <span class="attr">fontWeight</span>: props.<span class="property">isBold</span> ? <span class="number">700</span> : <span class="number">400</span>, <span class="attr">fontSize</span>: <span class="string">&quot;24px&quot;</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    [props]</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Title</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> styles = <span class="title function_">useStyles</span>(props);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;styles.header&#125;</span> &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="17-조건부-렌더링은-삼항-연산자-사용해라"><a href="#17-조건부-렌더링은-삼항-연산자-사용해라" class="headerlink" title="17. 조건부 렌더링은 삼항 연산자 사용해라"></a>17. 조건부 렌더링은 삼항 연산자 사용해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; role &#125; = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">if</span> (role === <span class="variable constant_">ADMIN</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">return</span> role === <span class="variable constant_">ADMIN</span> ? <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="18-타입-별칭을-사용해라"><a href="#18-타입-별칭을-사용해라" class="headerlink" title="18. 타입 별칭을 사용해라"></a>18. 타입 별칭을 사용해라</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TodoId</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">UserId</span> = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">TodoId</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">userId</span>: <span class="title class_">UserId</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TodoList</span> = <span class="title class_">Todo</span>[];</span><br></pre></td></tr></table></figure>

<h1 id="19-써드-파티-라이브러리를-직접-사용하는-것을-피해라"><a href="#19-써드-파티-라이브러리를-직접-사용하는-것을-피해라" class="headerlink" title="19. 써드 파티 라이브러리를 직접 사용하는 것을 피해라"></a>19. 써드 파티 라이브러리를 직접 사용하는 것을 피해라</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/lib/store.ts</span></span><br><span class="line"><span class="keyword">export</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/lib/query.ts</span></span><br><span class="line"><span class="keyword">export</span> &#123; useQuery, useMutation, useQueryClient &#125; <span class="keyword">from</span> <span class="string">&quot;react-query&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="20-직접-구현-대신-추상화에-의존해라"><a href="#20-직접-구현-대신-추상화에-의존해라" class="headerlink" title="20. 직접 구현 대신 추상화에 의존해라"></a>20. 직접 구현 대신 추상화에 의존해라</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌ directly using momemt</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateProduct</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> payload = &#123;</span><br><span class="line">    ...product,</span><br><span class="line">    <span class="comment">// ❌ we are bound to the moment interface implementation</span></span><br><span class="line">    <span class="attr">updatedAt</span>: <span class="title function_">moment</span>().<span class="title function_">toDate</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/product/<span class="subst">$&#123;product.id&#125;</span>`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ creating the abstraction, a.k.a. helper function which wraps the functionality</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// utils/createDate.ts</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDate = (): <span class="function"><span class="params">Date</span> =&gt;</span> <span class="title function_">moment</span>().<span class="title function_">toDate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// updateProduct.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createDate &#125; <span class="keyword">from</span> <span class="string">&quot;./utils/createDate&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateProduct</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> payload = &#123;</span><br><span class="line">    ...product,</span><br><span class="line">    <span class="comment">// ✅ using the abstracted helper function</span></span><br><span class="line">    <span class="attr">updatedAt</span>: <span class="title function_">createDate</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/product/<span class="subst">$&#123;product.id&#125;</span>`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>moment를 사용하여 직접 구현하기 보다 createDate 함수사용하여 추상화하면 간결하다.</li>
</ul>
<h1 id="21-선언적-프로그래밍을-해라"><a href="#21-선언적-프로그래밍을-해라" class="headerlink" title="21. 선언적 프로그래밍을 해라"></a>21. 선언적 프로그래밍을 해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌ imperative: dealing with internals of array iteration</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ declarative: we don&#x27;t deal with internals of iteration</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, v</span>) =&gt;</span> acc + v, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h1 id="22-변수-이름을-이쁘게-지어라"><a href="#22-변수-이름을-이쁘게-지어라" class="headerlink" title="22. 변수 이름을 이쁘게 지어라"></a>22. 변수 이름을 이쁘게 지어라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌ Avoid single letter names</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="string">&quot;Max&quot;</span>;</span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Max&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ Avoid abbreviations</span></span><br><span class="line"><span class="keyword">const</span> sof = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> startOfWeek = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ Avoid meaningless names</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> appInit = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h1 id="23-함수-인자를-3개-이상-넘기지-말아라"><a href="#23-함수-인자를-3개-이상-넘기지-말아라" class="headerlink" title="23. 함수 인자를 3개 이상 넘기지 말아라"></a>23. 함수 인자를 3개 이상 넘기지 말아라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">firstName, lastName, height, weight, gender</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">&#123; firstName, lastName, height, weight, gender &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName, height, weight, gender &#125; = person;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="24-template-literal-사용해라"><a href="#24-template-literal-사용해라" class="headerlink" title="24. template literal 사용해라"></a>24. template literal 사용해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> userName = user.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + user.<span class="property">lastName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> userDetails = <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<h1 id="25-간단한-함수에서-암묵적-return-사용해라"><a href="#25-간단한-함수에서-암묵적-return-사용해라" class="headerlink" title="25. 간단한 함수에서 암묵적 return 사용해라"></a>25. 간단한 함수에서 암묵적 return 사용해라</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure>

<h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p><a href="https://levelup.gitconnected.com/react-code-conventions-and-best-practices-433e23ed69aa">React Code Conventions and best practices - Medium</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>코딩테스트를 위한 파이썬 기본문법</title>
    <url>/2023/05/06/Python/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/</url>
    <content><![CDATA[<h1 id="리스트-컴프리핸션"><a href="#리스트-컴프리핸션" class="headerlink" title="리스트 컴프리핸션"></a>리스트 컴프리핸션</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="number">4</span></span><br><span class="line">m = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">array = [[<span class="number">0</span>] \* m <span class="keyword">for</span> \_ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">array[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure>

<h2 id="2차원-배열-참조값-복사-오류"><a href="#2차원-배열-참조값-복사-오류" class="headerlink" title="2차원 배열 참조값 복사 오류"></a>2차원 배열 참조값 복사 오류</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n1 = <span class="number">4</span></span><br><span class="line">m1 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 참조값이 복사되어 원하는 부분 이외의 요소도 변경됨</span></span><br><span class="line"></span><br><span class="line">array1 = [[<span class="number">0</span>]*m]*n</span><br><span class="line">array1[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(array1)</span><br></pre></td></tr></table></figure>

<h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">dict</span>()</span><br><span class="line">data[<span class="string">&#x27;apple&#x27;</span>] = <span class="string">&#x27;사과&#x27;</span></span><br><span class="line">data[<span class="string">&#x27;banana&#x27;</span>] = <span class="string">&#x27;바나나&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;apple&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;apple&#x27;</span>]+<span class="string">&#x27;가 존재합니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key_list = <span class="built_in">list</span>(data.keys())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key_list)</span><br></pre></td></tr></table></figure>

<h1 id="set-자료형"><a href="#set-자료형" class="headerlink" title="set 자료형"></a>set 자료형</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c = <span class="number">3.11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(c))</span><br><span class="line"></span><br><span class="line">sett = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(sett)</span><br><span class="line"><span class="built_in">print</span>(sett)</span><br></pre></td></tr></table></figure>

<h1 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">x,y,z = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.stdin.readline() 빠른 입력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">data1 = sys.stdin.readline().rstrip();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br></pre></td></tr></table></figure>

<h1 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f = <span class="number">1</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f,g)</span><br><span class="line"><span class="built_in">print</span>(f, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(g, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">answer = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;정답은 <span class="subst">&#123;answer&#125;</span>입니다.&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">10</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X는 10이상입니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X는 0 이상입니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x &lt;= <span class="number">100</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X는 0보다 크거나 같고 100보다 작거나 같습니다.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;cool&#x27;</span> <span class="keyword">if</span> x&gt;<span class="number">10</span> <span class="keyword">else</span> <span class="string">&#x27;fail&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">12</span>: rest = <span class="string">&#x27;cooler&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rest)</span><br></pre></td></tr></table></figure>

<h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">result += i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">rss = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">rss += k</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rss)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;u&#125;</span> X <span class="subst">&#123;o&#125;</span> = <span class="subst">&#123;u\*o&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">gf = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">global</span> gf</span><br><span class="line">gf += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> \_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gf)</span><br></pre></td></tr></table></figure>

<h1 id="람다표현식"><a href="#람다표현식" class="headerlink" title="람다표현식"></a>람다표현식</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> a,b: a+b)(<span class="number">33</span>,<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">people = [(<span class="string">&#x27;홍길동&#x27;</span>,<span class="number">10</span>),(<span class="string">&#x27;이순신&#x27;</span>, <span class="number">5</span>),(<span class="string">&#x27;아무개&#x27;</span>,<span class="number">70</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(people,key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">list_result = <span class="built_in">map</span>(<span class="keyword">lambda</span> a,b:a+b, list1, list2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(list_result))</span><br></pre></td></tr></table></figure>

<h1 id="내장함수"><a href="#내장함수" class="headerlink" title="내장함수"></a>내장함수</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">minvalue = <span class="built_in">min</span>(<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(minvalue)</span><br><span class="line"></span><br><span class="line">evalvalue = <span class="built_in">eval</span>(<span class="string">&#x27;3\*5-2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(evalvalue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations_with_replacement</span><br><span class="line"></span><br><span class="line">dataaa = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(permutations(dataaa,<span class="number">3</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combinations(dataaa,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2개를 뽑는 모든 순열 (중복포함)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(product(dataaa,repeat=<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2개를 뽑는 모든 조합 (중복포함)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combinations_with_replacement(dataaa,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 객체의 갯수 구하기</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">counter = Counter([<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter[<span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(counter[<span class="string">&#x27;green&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(counter))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 최대 공약수, 최소 공배수</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="keyword">return</span> a\*b // math.gcd(a,b);</span><br><span class="line"></span><br><span class="line">v = <span class="number">21</span></span><br><span class="line">j = <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.gcd(v,j))</span><br><span class="line"><span class="built_in">print</span>(lcm(v,j))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>그리디 알고리즘 with Python</title>
    <url>/2023/05/09/Python/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-with-Python/</url>
    <content><![CDATA[<h1 id="greedy-알고리즘"><a href="#greedy-알고리즘" class="headerlink" title="greedy 알고리즘"></a>greedy 알고리즘</h1><p>탐욕적으로 현재 상황에서 가장 최적의 문제풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토한다.</p>
<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>1이 될 때 까지, N을 K로 나누거나 N에 1을 빼거나 행동의 최소 횟수 구하기</p>
<h3 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h3><p>N(1 &lt;&#x3D; N &lt;&#x3D; 100,000) K(2 &lt;&#x3D; K &lt;&#x3D; 100,000)</p>
<h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><p>K가 2이상이므로 1을 빼는 것보다 <strong>최대한 많이 나누는 것이 연산횟수를 최소화할 수 있다.</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">N,K = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 시간복잡도 O(N)</span></span><br><span class="line"><span class="keyword">while</span> N != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> (N % K == <span class="number">0</span>):</span><br><span class="line">        N /= K</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    N -= <span class="number">1</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 시간복잡도 O(log N)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    target = (N // K) \* K</span><br><span class="line">    count += (N - target)</span><br><span class="line">    N = target</span><br><span class="line">    <span class="keyword">if</span> N &lt; K:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    N //= K</span><br><span class="line"></span><br><span class="line">count += (N - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>완전탐색(Brute Forcing)</title>
    <url>/2023/05/11/Python/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89-Brute-Forcing/</url>
    <content><![CDATA[<h1 id="완전탐색-Brute-Forcing"><a href="#완전탐색-Brute-Forcing" class="headerlink" title="완전탐색(Brute Forcing)"></a>완전탐색(Brute Forcing)</h1><h3 id="가능한-모든-경우의-수를-검사하는-방법"><a href="#가능한-모든-경우의-수를-검사하는-방법" class="headerlink" title="가능한 모든 경우의 수를 검사하는 방법"></a>가능한 모든 경우의 수를 검사하는 방법</h3><h2 id="문제-1"><a href="#문제-1" class="headerlink" title="문제 1"></a>문제 1</h2><h3 id="시간에서-‘3’이-포함된-횟수-구하는-문제"><a href="#시간에서-‘3’이-포함된-횟수-구하는-문제" class="headerlink" title="시간에서 ‘3’이 포함된 횟수 구하는 문제"></a>시간에서 ‘3’이 포함된 횟수 구하는 문제</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">h = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;3&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(i)+<span class="built_in">str</span>(j)+<span class="built_in">str</span>(k):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>

<h2 id="문제-2"><a href="#문제-2" class="headerlink" title="문제 2"></a>문제 2</h2><h3 id="체스-말이-움직일-수-있는-경우의-수-구하라"><a href="#체스-말이-움직일-수-있는-경우의-수-구하라" class="headerlink" title="체스 말이 움직일 수 있는 경우의 수 구하라"></a>체스 말이 움직일 수 있는 경우의 수 구하라</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">col,row = <span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">n = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ASCII 코드 구하는 코드 ord(str), ord(&#x27;a&#x27;) = 97</span></span><br><span class="line">array = [[i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">steps = [(-<span class="number">2</span>,-<span class="number">1</span>),(-<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">2</span>,-<span class="number">1</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">2</span>,<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> steps:</span><br><span class="line">    y = <span class="built_in">int</span>(row) + step[<span class="number">0</span>]</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">ord</span>(col)) - <span class="built_in">int</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) + <span class="number">1</span> + step[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">1</span> <span class="keyword">or</span> y &lt; <span class="number">1</span> <span class="keyword">or</span> x &gt; <span class="number">8</span> <span class="keyword">or</span> y &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 말이 움직이는 벡터 방향</span></span><br><span class="line">dx = [<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">dy = [<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># x,y로 방향이 2개로 정해져있으니 튜플 사용 가능</span></span><br><span class="line">steps = [(-<span class="number">2</span>,-<span class="number">1</span>),(-<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">1</span>,-<span class="number">2</span>),(<span class="number">2</span>,-<span class="number">1</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">2</span>,<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<ul>
<li>ASCII 코드를 사용하여 ‘a’ 문자열을 숫자로 변환</li>
</ul>
<h2 id="문제-3"><a href="#문제-3" class="headerlink" title="문제 3"></a>문제 3</h2><h3 id="문자는-정렬하고-숫자는-더하여-반환하라"><a href="#문자는-정렬하고-숫자는-더하여-반환하라" class="headerlink" title="문자는 정렬하고 숫자는 더하여 반환하라"></a>문자는 정렬하고 숫자는 더하여 반환하라</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>()</span><br><span class="line">result = []</span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha():</span><br><span class="line">        result.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value += <span class="built_in">int</span>(i)</span><br><span class="line"></span><br><span class="line">result.sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value != <span class="number">0</span>:</span><br><span class="line">    result.append(<span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(result))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>isalpha()</code> 내장함수를 사용하여 <code>i</code>가 문자열인지 확인</li>
<li><code>join()</code> 내장함수를 사용하여 list를 문자열로 합침</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>아이콘에 가려져서 클릭되지 않는 문제 해결하기</title>
    <url>/2023/05/23/Daily/%EC%95%84%EC%9D%B4%EC%BD%98%EC%97%90-%EA%B0%80%EB%A0%A4%EC%A0%B8%EC%84%9C-%ED%81%B4%EB%A6%AD%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<p>개발을 하다보면 디자이너나 클라이언트의 요구사항을 만족시키기 위해 기본 input 태그나 select 태그 등을 커스텀 해야하는 경우가 많다.</p>
<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>커스텀 select 태그를 만들어서 아이콘도 img 태그를 사용하여 추가해주었다.</p>
<p>하지만, select 태그 내부의 icon을 클릭하게 되면 <code>select 태그가 열리지 않는 불편함이 있다.</code></p>
<h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><p>아이콘에 <code>pointer-events:none;</code> 속성을 추가한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.custom-select</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  select &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.select-icon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>이렇게 하면 아이콘을 클릭해도 select 태그가 클릭된 것처럼 제대로 동작한다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>그리드로 푸터 레이아웃 문제 해결</title>
    <url>/2023/05/30/Daily/%EA%B7%B8%EB%A6%AC%EB%93%9C%EB%A1%9C-%ED%91%B8%ED%84%B0-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/</url>
    <content><![CDATA[<h1 id="그리드로-footer-만들기"><a href="#그리드로-footer-만들기" class="headerlink" title="그리드로 footer 만들기"></a>그리드로 footer 만들기</h1><p><img src="/../../images/Daily/grid/grid-footer.png" alt="grid 푸터 예시"></p>
<p>우리는 푸터를 만들 때, 위와 같이 푸터를 하단에 고정하기 위해 고민한다.</p>
<p>나도 에이블 프로젝트를 할 때, 고민을 많이 했었고, position을 썼었던 걸로 기억하는데 깔끔하게 처리하지 못했었다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    SIMPLIFY YOUR CSS WITH THESE 3 GRID LAYOUT SOLUTIONS Lorem ipsum dolor, sit</span><br><span class="line">    amet consectetur adipisicing elit. Enim fugiat fuga illum doloribus</span><br><span class="line">    perferendis asperiores ab voluptatem laudantium, dignissimos nulla. Nemo</span><br><span class="line">    minus aliquid nesciunt quos temporibus ratione dicta quas doloremque.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Contents<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nesciunt soluta</span><br><span class="line">      hic, odit ad quisquam iste? Magnam, animi ut, tempore libero a aliquam</span><br><span class="line">      vitae quos alias possimus fugiat officia, temporibus illo!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>위와 같은 HTML 구조를 가지는 예시를 들어보자.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main-layout</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>header, main, footer 를 감싸는 컨테이너의 <code>min-height</code>를 <code>100vh</code>로 화면에 꽉차게 설정</li>
<li>grid 속성을 주어 빈 공간이 없게 만든다.</li>
<li>grid의 rows 속성의 너비를 지정한다.<ul>
<li>auto로 설정하면 해당 태그가 가지고 있는 높이만큼만 설정하게된다.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>간단하게 Reset CSS 적용하기</title>
    <url>/2023/06/01/Daily/%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-Reset-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="간단하게-Reset-CSS-적용하기"><a href="#간단하게-Reset-CSS-적용하기" class="headerlink" title="간단하게 Reset CSS 적용하기"></a>간단하게 Reset CSS 적용하기</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">::before</span>,</span><br><span class="line">*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>-scheme: dark light;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line">picture,</span><br><span class="line">svg,</span><br><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>메모리와 포인터</title>
    <url>/2023/07/15/Python/DataStructure/%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%ED%8F%AC%EC%9D%B8%ED%84%B0/</url>
    <content><![CDATA[<h1 id="1-메모리와-주소"><a href="#1-메모리와-주소" class="headerlink" title="1. 메모리와 주소"></a>1. 메모리와 주소</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 정수는 4byte</span></span><br><span class="line"><span class="type">int</span> i;</span><br></pre></td></tr></table></figure>

<p>C++에서 변수를 만들면 변수에 메모리 주소를 할당(예약)한다.</p>
<p>이 때, 변수 i의 메모리 주소는 변수가 사용하는 메모리 주소 첫번째를 가리킨다.</p>
<ul>
<li>&amp;(ampersand,앰퍼샌드) 연산자로 메모리 주소를 얻을 수 있다.</li>
</ul>
<h1 id="2-포인터"><a href="#2-포인터" class="headerlink" title="2. 포인터"></a>2. 포인터</h1><ul>
<li>자바, 파이썬, 자바스크립트는 개발자가 직접 변수에 메모리를 할당하거나 해제할 수 없고 GC를 통해 이를 수행한다.</li>
<li>C, C++ 하위레벨 언어는 GC가 없는 대신, 개발자가 직접 필요한 메모리를 예약 및 해제할 수 있다.</li>
</ul>
<p>포인터란, 변수의 메모리 주소를 담는 타입이다.</p>
<ul>
<li>메모리 동적할당</li>
<li>데이터 복사하지 않고 매개변수로 사용</li>
<li>클래스 및 구조체 연결</li>
</ul>
<p>ex) 연결리스트의 노드</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">string s = <span class="string">&quot;kundol&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> * a = &amp; i;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	string * b = &amp;s;</span><br><span class="line">	cout &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>&amp; i : 변수의 메모리 주소</li>
<li>“타입 * 형태” 로 포인터를 정의한다.</li>
</ul>
<h3 id="포인터의-크기"><a href="#포인터의-크기" class="headerlink" title="포인터의 크기"></a>포인터의 크기</h3><ul>
<li>OS가 32bit라면 4byte, 64bit라면 8byte로 고정</li>
<li>어떤 타입(string,int, char 등) 상관없이 무조건 위 수치대로 고정</li>
<li>포인터는 메모리 주소를 담는 것이지 변수 자체를 담는 것이 아니다.<ul>
<li>집 주소(포인터)의 크기와 집(메모리)의 크기는 상관이 없다!</li>
</ul>
</li>
</ul>
<p><strong>ex) 1byte 짜리 char 타입의 변수의 포인터 크기는 1byte가 아니다.</strong></p>
<h1 id="3-역참조연산자"><a href="#3-역참조연산자" class="headerlink" title="3. 역참조연산자"></a>3. 역참조연산자</h1><ul>
<li>(에스터리스크) 기호를 포인터와 사용하여 역참조로 해당 메모리 주소의 할당된 값을 참조할 수 있다.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	  string a = <span class="string">&quot;abcda&quot;</span>;</span><br><span class="line">	  string * b = &amp;a;</span><br><span class="line">	  cout &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	  cout &lt;&lt; *b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	0x6ffdf0</span></span><br><span class="line"><span class="comment">	abcda</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>a 라는 변수(메모리)에 ‘abcda’ 라는 string 값이 할당</li>
<li>string * b 로 포인터를 정의하여 a 변수의 메모리를 할당</li>
<li>*b 로 포인터를 역참조하여 포인터의 메모리 주소에 할당된 값을 출력</li>
</ol>
<h1 id="4-array-to-pointer-decay"><a href="#4-array-to-pointer-decay" class="headerlink" title="4. array to pointer decay"></a>4. array to pointer decay</h1><p>배열을 변수에 할당하여 해당 변수(주소값)을 T * 라는 포인터에 할당하게 되면, T[N] 이라는 배열의 크기 정보 N이 없어지고 첫번째 요소의 주소가 바인딩되는 현상</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	  <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">	  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	  <span class="type">int</span> * c = a;</span><br><span class="line">	  cout &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	  cout &lt;&lt; &amp;a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	  cout &lt;&lt; c + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	  cout &lt;&lt; &amp;a[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>vector(동적배열)은 안되고 array(정적배열)만 가능</li>
<li>int * c 포인터에 a array를 할당<ol>
<li>array to pointer decay 현상 발생</li>
</ol>
</li>
<li>c 를 출력하면 array의 첫번째 요소의 메모리 주소가 출력 <code>(c == &amp;a[0])</code></li>
<li>포인터 c에 1을 더하면 array의 두번째 요소를 의미한다.</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
      </categories>
  </entry>
  <entry>
    <title>배열 - 정적배열과 동적배열</title>
    <url>/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%95%EC%A0%81%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4/</url>
    <content><![CDATA[<h1 id="정적배열-Array"><a href="#정적배열-Array" class="headerlink" title="정적배열 - Array"></a>정적배열 - Array</h1><ul>
<li>연속된 메모리 공간에 위치한 같은 타입의 요소들의 모음</li>
<li>한번 정해진 크기는 변경불가<ul>
<li>가득찬 공간에 원소 추가하려면 더 큰 배열 생성 후 기존 배열의 원소를 복사한 후 새 원소 추가</li>
</ul>
</li>
<li>숫자 인덱스를 기반으로 랜덤 접근이 가능하고 중복을 허용한다.</li>
<li>vector와 달리 메서드가 없다.</li>
</ul>
<h2 id="C-선언타입"><a href="#C-선언타입" class="headerlink" title="C++ 선언타입"></a>C++ 선언타입</h2><h3 id="C스타일"><a href="#C스타일" class="headerlink" title="C스타일"></a>C스타일</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 할당</span></span><br><span class="line"><span class="type">int</span> b[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>배열의 크기를 정하여 선언 가능</li>
<li>크기를 정하지 않고 선언하면서 중괄호 요소들을 할당할 수 있다.</li>
</ul>
<h3 id="std스타일"><a href="#std스타일" class="headerlink" title="std스타일"></a>std스타일</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 10&gt; a;</span><br></pre></td></tr></table></figure>

<h1 id="동적배열"><a href="#동적배열" class="headerlink" title="동적배열"></a>동적배열</h1><ul>
<li>정적 배열의 특징을 가지면서 가변적인 특징이 더해짐</li>
<li>참조: O(1)</li>
<li>탐색: O(n)</li>
<li>맨끝에서 삽입 &#x2F; 삭제: O(1)</li>
<li>맨 끝 제외 삽입 &#x2F; 삭제: O(n)</li>
</ul>
<p>ex) 파이썬의 리스트</p>
<h2 id="C-선언방식"><a href="#C-선언방식" class="headerlink" title="C++ 선언방식"></a>C++ 선언방식</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;타입&gt; 변수명;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 크기 미리 정하거나 해당 크기의 어떤 값으로 초기화 가능</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> a : v) cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">100 100 100 100 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>배열</tag>
      </tags>
  </entry>
  <entry>
    <title>배열 - 0과 1로 구성된 배열 정렬</title>
    <url>/2023/07/14/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-0%EA%B3%BC-1%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%EB%B0%B0%EC%97%B4-%EC%A0%95%EB%A0%AC/</url>
    <content><![CDATA[<h1 id="0과-1로-구성된-배열-정렬"><a href="#0과-1로-구성된-배열-정렬" class="headerlink" title="0과 1로 구성된 배열 정렬"></a>0과 1로 구성된 배열 정렬</h1><p>0과 1로 이루어진 배열이 있다. 배열 자체를 오름차순으로 정렬하라.</p>
<ul>
<li>입력: [1, 0, 1, 1, 1, 1, 1, 0, 0, 0], 출력: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]</li>
<li>입력: [1, 1], 출력: [1, 1]</li>
</ul>
<h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-sort-사용"><a href="#1-sort-사용" class="headerlink" title="1. sort() 사용"></a>1. sort() 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    arr.sort()</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>

<ul>
<li>sort() 메서드는 원본 배열을 오름차순으로 변경한다.</li>
</ul>
<h3 id="2-sorted-사용"><a href="#2-sorted-사용" class="headerlink" title="2. sorted() 사용"></a>2. sorted() 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    answer = <span class="built_in">sorted</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure>

<h3 id="3-count-사용"><a href="#3-count-사용" class="headerlink" title="3. count() 사용"></a>3. count() 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    arr[:] = [<span class="number">0</span>] * arr.count(<span class="number">0</span>) + [<span class="number">1</span>] * arr.count(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>

<ul>
<li><code>arr[:]</code>을 사용하여 원본에 영향을 미치지 않고 복사할 수 있다.</li>
</ul>
<h3 id="4-포인터-2개-사용"><a href="#4-포인터-2개-사용" class="headerlink" title="4. 포인터 2개 사용"></a>4. 포인터 2개 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_increased_arr</span>(<span class="params">arr</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> arr[left] == <span class="number">0</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> arr[right] == <span class="number">1</span> <span class="keyword">and</span> right &gt;= <span class="number">0</span>:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; right:</span><br><span class="line">            arr[left], arr[right] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">            left, right = left + <span class="number">1</span>, right + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>배열</tag>
      </tags>
  </entry>
  <entry>
    <title>배열 - 제시된 합을 가진 부분 배열 찾기</title>
    <url>/2023/07/15/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%EC%A0%9C%EC%8B%9C%EB%90%9C-%ED%95%A9%EC%9D%84-%EA%B0%80%EC%A7%84-%EB%B6%80%EB%B6%84-%EB%B0%B0%EC%97%B4-%EC%B0%BE%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="제시된-합을-가진-부분-배열-찾기"><a href="#제시된-합을-가진-부분-배열-찾기" class="headerlink" title="제시된 합을 가진 부분 배열 찾기"></a>제시된 합을 가진 부분 배열 찾기</h1><p>정렬되지 않은 양의 정수로 이루어진 배열 A가 있다. 연속된 원소를 더한 값이 제시된 값 S와 같은 부분 배열을 찾아라. (인덱스 기준은 1이다.)</p>
<ul>
<li>입력: arr &#x3D; [1, 2, 3, 7, 5], s &#x3D; 12, 출력: [2, 4]<ul>
<li>인덱스 2부터 4까지의 합: 2 + 3 + 7 &#x3D; 12</li>
</ul>
</li>
<li>입력: arr &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s &#x3D; 15, 출력: [1, 5]</li>
</ul>
<h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-이중-반복문-사용"><a href="#1-이중-반복문-사용" class="headerlink" title="1. 이중 반복문 사용"></a>1. 이중 반복문 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">arr,s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="built_in">sum</span> = s</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="built_in">sum</span> -= arr[j]</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sum</span> == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> [i+<span class="number">1</span>,j+<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="2-1-O-n-시간복잡도로-풀기"><a href="#2-1-O-n-시간복잡도로-풀기" class="headerlink" title="2-1. O(n) 시간복잡도로 풀기"></a>2-1. O(n) 시간복잡도로 풀기</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">arr,s</span>):</span><br><span class="line">    <span class="built_in">sum</span> = s</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    position = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">sum</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> position == <span class="built_in">len</span>(arr) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">sum</span> -= arr[position]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> &lt; <span class="number">0</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            position = index</span><br><span class="line">            <span class="built_in">sum</span> = s</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        position += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> [index+<span class="number">1</span>,position]</span><br></pre></td></tr></table></figure>

<ul>
<li>sum에 s를 할당하여 position 위치의 요소를 하나씩 빼면서 sum 값이 0 보다 작은지 체크</li>
<li>0 보다 작다면 연속되는 부분합이 아니므로 리셋시켜주고 시작 index도 우측으로 이동시킨다.</li>
<li>만약 시작 index가 배열의 끝까지 도달했는데도 sum이 0이 되지 않으면 연속되는 부분합을 만들 수 없다.</li>
</ul>
<h3 id="2-2-O-n-시간복잡도로-풀기"><a href="#2-2-O-n-시간복잡도로-풀기" class="headerlink" title="2-2. O(n) 시간복잡도로 풀기"></a>2-2. O(n) 시간복잡도로 풀기</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">arr,s</span>):</span><br><span class="line">    left,<span class="built_in">sum</span> = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="built_in">sum</span> += arr[right]</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right <span class="keyword">and</span> <span class="built_in">sum</span> &gt; s):</span><br><span class="line">            <span class="built_in">sum</span> -= arr[left]</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> == s:</span><br><span class="line">            <span class="keyword">return</span> [left+<span class="number">1</span>,right+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>배열의 첫번째 요소부터 하나씩 sum에 더해준다.</li>
<li>sum이 s보다 작거나 같으면 계속 배열의 요소를 더해준다.</li>
<li><code>sum &gt; s</code>를 만족하면, sum에 left 위치의 요소를 빼주면서 sum이 s보다 작거나 같으면 중단</li>
<li>이 때, <code>sum == s</code>를 만족하면 <code>[left+1, right+1]</code>을 반환한다.</li>
<li><code>left == right</code> 일 때, <code>sum == s</code>를 만족하지 않으면 연속되는 부분합이 없다.</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>배열</tag>
      </tags>
  </entry>
  <entry>
    <title>배열 - 회문(Pelindromes) 찾기</title>
    <url>/2023/07/14/Python/DataStructure/Array/%EB%B0%B0%EC%97%B4-%ED%9A%8C%EB%AC%B8-Pelindromes-%EC%B0%BE%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="회문-Palindrome-찾기"><a href="#회문-Palindrome-찾기" class="headerlink" title="회문(Palindrome) 찾기"></a>회문(Palindrome) 찾기</h1><p>주어진 문자열이 회문이면 True, 아니면 False를 반환하라.</p>
<ul>
<li>입력: madam, 출력: True</li>
<li>입력: tomato, 출력: False</li>
</ul>
<h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-reversed-join-리스트-컴프리헨션-사용"><a href="#1-reversed-join-리스트-컴프리헨션-사용" class="headerlink" title="1. reversed(), join(), 리스트 컴프리헨션 사용"></a>1. reversed(), join(), 리스트 컴프리헨션 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPelindrome</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    reverse_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">reversed</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>])))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span> == reverse_str</span><br></pre></td></tr></table></figure>

<h3 id="2-슬라이싱-사용"><a href="#2-슬라이싱-사용" class="headerlink" title="2. 슬라이싱 사용"></a>2. 슬라이싱 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;racecar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> word == word[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>슬라이싱은 <code>[startIndex:endIndex:interval]</code>로 사용하는데, <code>startIndex</code>, <code>endIndex</code> 없이 <code>interval만</code> 사용하여 역순을 표현했다.</li>
</ul>
<h3 id="3-포인터-2개-사용"><a href="#3-포인터-2개-사용" class="headerlink" title="3. 포인터 2개 사용"></a>3. 포인터 2개 사용</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">word</span>):</span><br><span class="line">    left,right = <span class="number">0</span>, <span class="built_in">len</span>(word) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">if</span> (word[left] != word[right]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        left, right = left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>배열</tag>
      </tags>
  </entry>
  <entry>
    <title>연결리스트 - 개념 및 설명</title>
    <url>/2023/07/15/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/</url>
    <content><![CDATA[<h1 id="연결리스트"><a href="#연결리스트" class="headerlink" title="연결리스트"></a>연결리스트</h1><p>노드로 감싸진 요소를 인접한 메모리 위치가 아닌 독립적으로 저장한다.</p>
<p>각 노드는 next 또는 next,prev 라는 포인터로 서로 연결된 선형적인 자료구조</p>
<ul>
<li>참조: O(n)</li>
<li>탐색: O(n)</li>
<li>삽입 &#x2F; 삭제: O(1)</li>
</ul>
<p>연결리스트에 접근하기 위해서는 첫 노드를 가리키는 <strong>head</strong>가 반드시 있어야 한다.</p>
<blockquote>
<p>노드란, data와 next로 이루어진 구조체이다. 값을 담고 있는 data, 노드와 노드를 잇는 next라는 포인터로 이루어져 있다.</p>
</blockquote>
<h2 id="싱글연결리스트"><a href="#싱글연결리스트" class="headerlink" title="싱글연결리스트"></a>싱글연결리스트</h2><p><img src="/../../../../images/LinkedList/theory/single.png" alt="스크린샷 2023-07-15 오후 12.17.18.png"></p>
<p>next 포인터만 존재하여 한 방향으로만 데이터가 연결된다.</p>
<h2 id="원형연결리스트"><a href="#원형연결리스트" class="headerlink" title="원형연결리스트"></a>원형연결리스트</h2><p>마지막 노드와 첫번째 노드가 연결되어 원을 형성한다.</p>
<p>싱글연결리스트 또는 이중연결리스트로 이루어진 2가지 타입의 원형 리스트가 있다.</p>
<h3 id="싱글연결리스트로-구성된-원형연결리스트"><a href="#싱글연결리스트로-구성된-원형연결리스트" class="headerlink" title="싱글연결리스트로 구성된 원형연결리스트"></a>싱글연결리스트로 구성된 원형연결리스트</h3><p><img src="/../../../../images/LinkedList/theory/circleSingle.png" alt="스크린샷 2023-07-15 오후 12.18.41.png"></p>
<h3 id="이중연결리스트로-구성된-원형연결리스트"><a href="#이중연결리스트로-구성된-원형연결리스트" class="headerlink" title="이중연결리스트로 구성된 원형연결리스트"></a>이중연결리스트로 구성된 원형연결리스트</h3><p><img src="/../../../../images/LinkedList/theory/circleDouble.png" alt="스크린샷 2023-07-15 오후 12.18.50.png"></p>
<h2 id="랜덤접근과-순차적-접근"><a href="#랜덤접근과-순차적-접근" class="headerlink" title="랜덤접근과 순차적 접근"></a>랜덤접근과 순차적 접근</h2><p><img src="/../../../../images/LinkedList/theory/access.png" alt="스크린샷 2023-07-15 오후 12.21.39.png"></p>
<h3 id="랜덤접근-random-access-직접접근"><a href="#랜덤접근-random-access-직접접근" class="headerlink" title="랜덤접근(random access, 직접접근)"></a>랜덤접근(random access, 직접접근)</h3><ul>
<li>동일한 시간에 배열과 같은 순차적인 데이터가 있을 때, 임의의 인덱스에 해당하는 데이터에 접근할 수 있는 기능</li>
<li>vector, array는 랜덤 접근 가능하여 n번째 요소에 접근 시 O(1)</li>
</ul>
<h3 id="순차적-접근-squential-access"><a href="#순차적-접근-squential-access" class="headerlink" title="순차적 접근(squential access)"></a>순차적 접근(squential access)</h3><ul>
<li>데이터를 저장된 순서대로 검색하며 순차적으로 접근</li>
<li>연결리스트, 스택, 큐는 순차적 접근만 가능하여 n번째 요소 접근 시 O(n)</li>
</ul>
<h2 id="📌-배열과-연결리스트-비교"><a href="#📌-배열과-연결리스트-비교" class="headerlink" title="📌 배열과 연결리스트 비교"></a>📌 배열과 연결리스트 비교</h2><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><ul>
<li>배열은 indexing으로 원소에 접근은 쉽다. O(1)</li>
<li>하지만 맨 끝을 제외한 위치에서 원소를 추가 &#x2F; 삭제 하는 것은 연속한 메모리 공간을 확보하고 원소를 이동시켜야하므로 시간이 오래 걸린다. O(n)</li>
</ul>
<h3 id="연결리스트-1"><a href="#연결리스트-1" class="headerlink" title="연결리스트"></a>연결리스트</h3><ul>
<li>연결리스트는 이전 노드들을 순차적으로 접근해야 하므로 접근은 오래 걸린다. O(n)</li>
<li>하지만 삽입 &#x2F; 삭제는 노드를 생성하고 next, prev 포인터로 이전, 다음 노드만 연결해주면 되므로 시간 복잡도가 적다. O(1)</li>
<li>자료의 양이 정해져 있지 않아서 추가 및 삭제하는 일이 많은 경우 연결리스트가 적합하다.</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>연결리스트</tag>
      </tags>
  </entry>
  <entry>
    <title>연결리스트 - 클래스 구현</title>
    <url>/2023/07/16/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<h1 id="연결리스트-클래스"><a href="#연결리스트-클래스" class="headerlink" title="연결리스트 클래스"></a>연결리스트 클래스</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#파일 이름: sllist.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linked_list</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty List&quot;</span></span><br><span class="line">        node = self.head</span><br><span class="line">        string = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">            string += <span class="built_in">str</span>(node.data) + <span class="string">&quot; → &quot;</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> string + <span class="built_in">str</span>(node.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.data == data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">appendleft</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = self.head</span><br><span class="line">            self.head = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.head</span><br><span class="line">            <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">                prev = prev.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">popleft</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.head</span><br><span class="line">        self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">if</span> self.head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> node.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                prev = node</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, i, data</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= <span class="number">0</span>:</span><br><span class="line">            self.appendleft(data)</span><br><span class="line">        <span class="keyword">elif</span> i &gt;= self.length:</span><br><span class="line">            self.append(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = self.head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>):</span><br><span class="line">                prev = prev.<span class="built_in">next</span></span><br><span class="line">            node = Node(data)</span><br><span class="line">            node.<span class="built_in">next</span> = prev.<span class="built_in">next</span></span><br><span class="line">            prev.<span class="built_in">next</span> = node</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.head.data == data:</span><br><span class="line">            self.popleft()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        prev = self.head</span><br><span class="line">        <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> prev.<span class="built_in">next</span>.data == data:</span><br><span class="line">                prev.<span class="built_in">next</span> = prev.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">                self.length -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            prev = prev.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.length &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        ahead = self.head.<span class="built_in">next</span></span><br><span class="line">        prev = self.head</span><br><span class="line">        prev.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> ahead:</span><br><span class="line">            self.head = ahead</span><br><span class="line">            ahead = ahead.<span class="built_in">next</span></span><br><span class="line">            self.head.<span class="built_in">next</span> = prev</span><br><span class="line">            prev = self.head</span><br></pre></td></tr></table></figure>

<h2 id="연결리스트-테스트"><a href="#연결리스트-테스트" class="headerlink" title="연결리스트 테스트"></a>연결리스트 테스트</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(msg, end = <span class="string">&quot;&gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    data = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(data) <span class="keyword">if</span> data.isdigit() <span class="keyword">else</span> data</span><br><span class="line"></span><br><span class="line">my_list = LinkedList()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="string">실행할 명령어를 선택하세요.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[0] 연결 리스트의 상태 출력</span></span><br><span class="line"><span class="string">[1] 처음에 노드 추가   [2] 끝에 노드 추가      [3] 노드 검색</span></span><br><span class="line"><span class="string">[4] 첫 노드 꺼내기     [5] 마지막 노드 꺼내기  [6] 특정 위치에 노드 삽입</span></span><br><span class="line"><span class="string">[7] 노드 삭제         [8] 연결 리스트 뒤집기</span></span><br><span class="line"><span class="string">[9] 끝내기</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(menu, end=<span class="string">&quot; &gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    command = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> command == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">1</span>:</span><br><span class="line">        my_list.appendLeft(get_data(<span class="string">&quot;추가할 값(정수, 문자)을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">2</span>:</span><br><span class="line">        my_list.append(get_data(<span class="string">&quot;추가할 값(정수, 문자)을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">3</span>:</span><br><span class="line">        data = get_data(<span class="string">&quot;검색할 값을 입력하세요.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">in</span> my_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 있습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 없습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list.popLeft())</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(my_list.pop())</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">6</span>:</span><br><span class="line">        index = get_data(<span class="string">&quot;값을 추가할 인덱스를 입력하세요.&quot;</span>)</span><br><span class="line">        my_list.insert(index, get_data(<span class="string">&quot;추가할 값을 입력하세요.&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">7</span>:</span><br><span class="line">        data = get_data(<span class="string">&quot;삭제할 값을 입력하세요.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> my_list.remove(data):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(을)를 정상적으로 삭제했습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>(이)가 리스트에 없습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">8</span>:</span><br><span class="line">        my_list.reverse()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;리스트를 뒤집었습니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>연결리스트</tag>
      </tags>
  </entry>
  <entry>
    <title>연결리스트 - 주어진 리스트가 순환이 있는지 확인하는 문제</title>
    <url>/2023/07/17/Python/DataStructure/LinkedList/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%88%9C%ED%99%98%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/</url>
    <content><![CDATA[<h3 id="1-연결리스트-길이로-풀기"><a href="#1-연결리스트-길이로-풀기" class="headerlink" title="1. 연결리스트 길이로 풀기"></a>1. 연결리스트 길이로 풀기</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">    node = Linked_list.head</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Linked_list)):</span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> node <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<ul>
<li>연결리스트의 길이를 구하여 연결리스트의 마지막 노드의 next 를 확인한다.<ul>
<li>만약 마지막 노드의 next가 있다면, 순환연결리스트</li>
<li>그렇지 않으면 연결리스트이다.</li>
</ul>
</li>
</ul>
<h3 id="2-집합을-사용하여-풀기"><a href="#2-집합을-사용하여-풀기" class="headerlink" title="2. 집합을 사용하여 풀기"></a>2. 집합을 사용하여 풀기</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">	s = <span class="built_in">set</span>()</span><br><span class="line">	node = Linked_list.head</span><br><span class="line">	<span class="keyword">while</span> node:</span><br><span class="line">		<span class="keyword">if</span> node <span class="keyword">in</span> s:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">		s.add(node)</span><br><span class="line">		node = node.<span class="built_in">next</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>노드의 값이 중복되지 않는다면</strong>, 지나간 노드를 집합(set)에 저장한다.</li>
<li>노드가 이동할 때 마다 집합에 있는 노드인지 확인한다.<ul>
<li>집합에 지나간 노드가 있으면 True</li>
<li>그렇지 않으면 False</li>
</ul>
</li>
</ul>
<h3 id="3-중복된-값이-있을-경우-두개의-포인트를-사용하여-풀기"><a href="#3-중복된-값이-있을-경우-두개의-포인트를-사용하여-풀기" class="headerlink" title="3. 중복된 값이 있을 경우, 두개의 포인트를 사용하여 풀기"></a>3. 중복된 값이 있을 경우, 두개의 포인트를 사용하여 풀기</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isCircleLinkedlist</span>(<span class="params">Linked_list</span>):</span><br><span class="line">    node1 = node2 = Linked_list.head</span><br><span class="line">    <span class="keyword">while</span> node1 <span class="keyword">and</span> node1.<span class="built_in">next</span>:</span><br><span class="line">        node1 = node1.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        node2 = node2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node1 == node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<ul>
<li>node1은 두칸씩 이동한다.</li>
<li>node2는 한칸씩 이동한다.</li>
<li>만약 순환이 있다면 언젠가는 두 노드가 만난다.</li>
<li>순환이 없다면 node1 또는 node1.next가 None에 도달한다.</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>연결리스트</tag>
      </tags>
  </entry>
  <entry>
    <title>==, is는 같지 않다. (Python)</title>
    <url>/2023/07/17/Python/is%EB%8A%94-%EA%B0%99%EC%A7%80-%EC%95%8A%EB%8B%A4-Python/</url>
    <content><![CDATA[<h1 id="x3D-x3D-is는-같지-않다"><a href="#x3D-x3D-is는-같지-않다" class="headerlink" title="&#x3D;&#x3D;, is는 같지 않다."></a>&#x3D;&#x3D;, is는 같지 않다.</h1><ul>
<li><code>==</code> 는 값을 비교한다.</li>
<li><code>is</code> 는 메모리 주소를 비교한다.</li>
</ul>
<p>파이썬에서 변수는 객체에 붙은 이름표라고 생각하자.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h1 id="예외-케이스"><a href="#예외-케이스" class="headerlink" title="예외 케이스"></a>예외 케이스</h1><h2 id="1-정수형값"><a href="#1-정수형값" class="headerlink" title="1. 정수형값"></a>1. 정수형값</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Python은 메모리 최적화를 위해 -5 ~ 256 까지는 캐싱하는 싱글턴 오브젝트이다.</li>
</ul>
<h3 id="각-자료형-is-x3D-x3D-비교"><a href="#각-자료형-is-x3D-x3D-비교" class="headerlink" title="각 자료형 is, &#x3D;&#x3D; 비교"></a>각 자료형 is, &#x3D;&#x3D; 비교</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#정수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==integer==&#x27;</span>)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#부동소수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==float==&#x27;</span>)</span><br><span class="line">a = <span class="number">3.15982489254324342</span></span><br><span class="line">b = <span class="number">3.15982489254324342</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#복소수</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==complex==&#x27;</span>)</span><br><span class="line">a = <span class="number">1</span>+<span class="number">4j</span></span><br><span class="line">b = <span class="number">1</span>+<span class="number">4j</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#문자열</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==string==&#x27;</span>)</span><br><span class="line">a = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#부울</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==bool==&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#리스트</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==list==&#x27;</span>)</span><br><span class="line">a = []</span><br><span class="line">b = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#튜플</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==tuple==&#x27;</span>)</span><br><span class="line">a = ()</span><br><span class="line">b = ()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#딕셔너리</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==dictionary==&#x27;</span>)</span><br><span class="line">a = &#123;&#125;</span><br><span class="line">b = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>

<h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>주로 <code>==</code>을 사용하지 메모리를 직접 비교하는 <code>is</code>는 자주 사용되지 않고 헷갈리므로 <code>==</code>를 사용하자.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>스택 - 파이썬으로 스택(stack) 구현하기</title>
    <url>/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/%EC%8A%A4%ED%83%9D-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%83%9D-stack-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="파이썬으로-Stack-스택-구현하기"><a href="#파이썬으로-Stack-스택-구현하기" class="headerlink" title="파이썬으로 Stack(스택) 구현하기"></a>파이썬으로 Stack(스택) 구현하기</h1><p><img src="/../../../../../images/stack.png" alt="stack"></p>
<ul>
<li>스택은 서류나 책 위에 다른 서류나 책을 쌓아 올리는 형태이다.</li>
<li>자료를 꺼낼 때에는 맨 위부터 꺼내야한다. 후입선출(Last In First Out, LIFO)</li>
</ul>
<p><img src="/../../../../../images/stack2.png" alt="stack2"></p>
<ul>
<li>90도 눕혀서 보게 되면 연결리스트와 비슷한 구조를 지닌다.</li>
<li>연결리스트의 <code>head</code>를 스택에서는 <code>top</code>이라고 부른다.</li>
</ul>
<h2 id="Stack-메서드"><a href="#Stack-메서드" class="headerlink" title="Stack 메서드"></a>Stack 메서드</h2><ul>
<li><code>push(data)</code>: data를 넣는 작업, 연결리스트의 <code>appendLeft와</code> 같다.</li>
<li><code>pop()</code>: 자료를 꺼내는 작업, 연결리스트의 <code>popLeft와</code> 같다.</li>
<li><code>peek()</code>: 마지막에 넣은 자료 확인, pop과 비슷하지만 값을 제거하지는 않는다.</li>
<li><code>is_empty()</code>: 빈 스택인지 확인</li>
</ul>
<h2 id="Stack-클래스-만들기"><a href="#Stack-클래스-만들기" class="headerlink" title="Stack 클래스 만들기"></a>Stack 클래스 만들기</h2><ul>
<li>단일 연결리스트를 활용하여 Stack 클래스에서는 top 속성을 넣고 length 속성은 뺀다.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">    self.data = data</span><br><span class="line">    self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.top = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,data</span>):</span><br><span class="line">    node = Node(data)</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      self.top = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node.<span class="built_in">next</span> = self.top</span><br><span class="line">      self.top = node</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    node = self.top</span><br><span class="line">    self.top = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.top == <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> self.top.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.top == <span class="literal">None</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>스택 - 연습문제</title>
    <url>/2023/07/18/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/%EC%8A%A4%ED%83%9D-%EC%97%B0%EC%8A%B5-%EB%AC%B8%EC%A0%9C/</url>
    <content><![CDATA[<h1 id="문제-1-괄호-짝-검사"><a href="#문제-1-괄호-짝-검사" class="headerlink" title="문제 1. 괄호 짝 검사"></a>문제 1. 괄호 짝 검사</h1><p>괄호의 짝이 바르면 True, 바르지 않으면 False를 반환하는 함수를 작성하라.</p>
<p>예를 들어 <code>((a*(b+c))-d) / e</code>는 괄호의 짝이 올바르지만, <code>(((a*(b+c))-d) / e</code> 는 괄호의 짝이 맞지 않는다.</p>
<p>괄호는 소괄호(())만 사용한다.</p>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(x)</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack.pop():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br></pre></td></tr></table></figure>

<ul>
<li>여는 괄호가 나오면 stack에 <code>Push</code></li>
<li>닫는 괄호가 나오면 stack을 <code>pop</code><ul>
<li>이 때, stack에서 아무것도 <code>pop</code>되지 않는다면, 제대로 된 괄호가 구성되지 않은 것이다.</li>
</ul>
</li>
</ul>
<h1 id="문제-2-소-중-대괄호-짝-검사"><a href="#문제-2-소-중-대괄호-짝-검사" class="headerlink" title="문제 2. 소,중,대괄호 짝 검사"></a>문제 2. 소,중,대괄호 짝 검사</h1><p>소괄호, 중괄호, 대괄호 짝이 맞는지 검사</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;[&#123;a * (b + c)&#125; - d] / e&quot;</span> <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;[&#123;a * (b + c)] - d] / e&quot;</span> <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h2 id="풀이-1"><a href="#풀이-1" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    brackets = &#123;<span class="string">&quot;)&quot;</span>:<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&#125;&quot;</span>:<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;]&quot;</span>:<span class="string">&quot;[&quot;</span>&#125;</span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> brackets.values():</span><br><span class="line">            stack.push(x)</span><br><span class="line">        <span class="keyword">elif</span> x <span class="keyword">in</span> brackets:</span><br><span class="line">            popped = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> popped <span class="keyword">or</span> brackets[x] != popped:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br></pre></td></tr></table></figure>

<ul>
<li>brackets을 관리하는 딕셔너리를 만든다.</li>
<li>여는 괄호면 stack에 push한다.</li>
<li>닫는 괄호면, 해당 닫는 괄호와 짝을 이루는 여는 괄호가 stack.pop()한 요소와 같은지 비교<ul>
<li>만약 다르거나 pop한 요소가 None이라면 False</li>
</ul>
</li>
</ul>
<h1 id="문제-3-짝지어-제거하기"><a href="#문제-3-짝지어-제거하기" class="headerlink" title="문제 3. 짝지어 제거하기"></a>문제 3. 짝지어 제거하기</h1><p>같은 알파벳 2개가 붙어 있는 짝을 찾습니다.</p>
<p>그 다음 그 둘을 제거한 뒤 앞뒤로 문자열을 이어 붙입니다.</p>
<p>이 과정을 반복하여 문자열이 모두 제거된다면 1을 반환하고 그렇지 않으면 0을 반환합니다.</p>
<h2 id="풀이-2"><a href="#풀이-2" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">and</span> ch == stack[-<span class="number">1</span>]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(ch)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>stack 클래스 대신 배열을 사용했다.</li>
<li>stack의 <code>push()</code>: <code>append()</code></li>
<li>stack의 <code>pop()</code>: <code>pop()</code></li>
<li>stack의 <code>peek()</code>: [-1]로 인덱싱</li>
<li><code>is_empty()</code>: 빈 리스트 논리값은 False 임을 이용</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>스택 - 후위 표기법</title>
    <url>/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%95/</url>
    <content><![CDATA[<h1 id="후위표기법-1"><a href="#후위표기법-1" class="headerlink" title="후위표기법 1"></a>후위표기법 1</h1><p>연산자를 피연산자 뒤에 쓰는 연산기법</p>
<p>예를 들어, <code>3+5x2</code> 를 중위 표기법이라 하고,</p>
<p><code>352x+</code>를 후위 표기법이라고 한다.</p>
<h2 id="계산-방법"><a href="#계산-방법" class="headerlink" title="계산 방법"></a>계산 방법</h2><p><code>3+5x2</code>를 후위 표기법으로 적으면, <code>352x+</code>이다.</p>
<p><code>352x+</code>를 계산하기 위해서 다음과정을 따른다.</p>
<ol>
<li>피연산자(숫자)는 스택에 담는다. <code>[3,5,2]</code></li>
<li>연산자를 만나면, 스택에서 피연산자 2개를 꺼내 계산한다.</li>
<li>결과값을 다시 스택에 넣는다. <code>[3,10]</code></li>
<li>다음 연산자는 <code>+</code>이므로 <code>3+10</code>을 계산한다.</li>
</ol>
<ul>
<li>컴퓨터 입장에서는 후위 표기법이 연산의 우선순위가 명확하다는 장점이 있다.</li>
</ul>
<h2 id="중위-표기법을-후위-표기법으로-변환"><a href="#중위-표기법을-후위-표기법으로-변환" class="headerlink" title="중위 표기법을 후위 표기법으로 변환"></a>중위 표기법을 후위 표기법으로 변환</h2><p><code>3+5x2</code>를 후위 표기법으로 바꾸는 과정을 알아보자.</p>
<ol>
<li>피연산자 3을 결과값에 추가</li>
<li><ul>
<li>연산자 스택에 push</li>
</ul>
</li>
<li>피연산자 5 결과값에 추가</li>
<li>x 연산자와 스택의 마지막 값인 + 우선순위 비교</li>
<li>x 연산자가 우선순위 높으므로 스택에 push</li>
<li>피연산자 2 결과값에 추가</li>
<li>스택이 빌 때까지 pop하여 결과값에 추가</li>
</ol>
<p><code>3x5+2</code>를 후위 표기법으로 바꿔보자.</p>
<ol>
<li>피연산자 3을 결과값에 추가</li>
<li>x 연산자 스택에 push</li>
<li>피연산자 5 결과값에 추가</li>
<li><ul>
<li>연산자와 스택의 마지막 값인 x 우선순위 비교</li>
</ul>
</li>
<li>스택의 마지막 값인 x 연산자가 높으니 pop하여 결과값에 추가</li>
<li><ul>
<li>연산자는 스택에 push</li>
</ul>
</li>
<li>피연산자 2을 결과값에 추가</li>
<li>스택이 빌 때까지 pop하여 결과값에 추가</li>
</ol>
<h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><h3 id="Stack-클래스를-이용한-풀이"><a href="#Stack-클래스를-이용한-풀이" class="headerlink" title="Stack 클래스를 이용한 풀이"></a>Stack 클래스를 이용한 풀이</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    s = Stack()</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> priority.keys():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.top == <span class="literal">None</span>:</span><br><span class="line">                s.push(x)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> priority[s.top.data] &lt; priority[x]:</span><br><span class="line">                    s_pop = s.pop()</span><br><span class="line">                    result += s_pop</span><br><span class="line">                s.push(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty():</span><br><span class="line">        s_pop = s.pop()</span><br><span class="line">        result += s_pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>아래는 if 문으 조금 줄여보았다.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    s = Stack()</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> priority.keys():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s.is_empty() <span class="keyword">and</span> priority[s.top.data] &lt; priority[x]:</span><br><span class="line">                s_pop = s.pop()</span><br><span class="line">                result += s_pop</span><br><span class="line">            s.push(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty():</span><br><span class="line">        s_pop = s.pop()</span><br><span class="line">        result += s_pop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>스택 - 후위 표기법2</title>
    <url>/2023/07/19/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%952/%EC%8A%A4%ED%83%9D-%ED%9B%84%EC%9C%84-%ED%91%9C%EA%B8%B0%EB%B2%952/</url>
    <content><![CDATA[<h1 id="후위-표기법-2"><a href="#후위-표기법-2" class="headerlink" title="후위 표기법 2"></a>후위 표기법 2</h1><p>소괄호를 포함한 후위 표기법 바꾸기</p>
<p>소괄호<code>()</code>는 <code>*</code>보다 우선순위가 높다.</p>
<p>후위 표기법은 우선순위가 높은 것을 먼저 출력하므로, 열린 소괄호가 나오면 스택에 넣는다.</p>
<p>이후 닫힌 소괄호가 나오면 스택에 열린 소괄호 나올 때 까지 pop하여 연산자를 결과값에 추가한다.</p>
<ul>
<li>괄호는 변수에 추가하면 안되므로 스택에서 pop하여 제거한다.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    priority = &#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> x.isnumeric():</span><br><span class="line">            result += x</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            s.append(x)</span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> s[-<span class="number">1</span>] != <span class="string">&quot;(&quot;</span>:</span><br><span class="line">                result += s.pop()</span><br><span class="line">            s.pop()</span><br><span class="line">        <span class="keyword">elif</span> x <span class="keyword">in</span> priority:</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">and</span> s[-<span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> priority[s[-<span class="number">1</span>]] &lt; priority[x]:</span><br><span class="line">                result += s.pop()</span><br><span class="line">            s.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> s:</span><br><span class="line">        result += s.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<ul>
<li>코딩테스트를 본다고 생각하고 리스트를 활용하여 위 문제를 풀어보았다.</li>
<li><code>isnumeric()</code> 함수는 문자열이 숫자인지 판단하는 메서드이다.</li>
<li>stack의 top을 의미하는 s[-1] 슬라이싱을 활용하였다.</li>
<li>빈 리스트는 논리값이 False라는 점을 활용하여 while 반복문을 실행했다.</li>
</ul>
<h2 id="후위-표기법-계산하기"><a href="#후위-표기법-계산하기" class="headerlink" title="후위 표기법 계산하기"></a>후위 표기법 계산하기</h2><ol>
<li>문자열을 순회하면서 해당 문자가 숫자면 정수형으로 변환하여 스택에 push</li>
<li>연산자이면 스택에서 두 수를 pop하여 계산</li>
<li>스택은 후입선출이므로, 처음 pop한 수를 n2, 두번째 pop한 수를 n1으로 두고 <code>(n1 연산자 n2)</code>로 계산한다.</li>
<li>계산결과를 스택에 push</li>
<li>스택에 마지막에 저장된 값이 결과값이다.</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eval_postfix</span>(<span class="params">expression</span>):</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> exp <span class="keyword">in</span> expression:</span><br><span class="line">        <span class="keyword">if</span> exp.isnumeric():</span><br><span class="line">            s.append(<span class="built_in">int</span>(exp))</span><br><span class="line">        <span class="keyword">elif</span> exp != <span class="string">&quot; &quot;</span>:</span><br><span class="line">            n2 = s.pop()</span><br><span class="line">            n1 = s.pop()</span><br><span class="line">            <span class="keyword">if</span> exp == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                res = n1 + n2</span><br><span class="line">            <span class="keyword">elif</span> exp == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                res = n1 - n2</span><br><span class="line">            <span class="keyword">elif</span> exp == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                res = n1 * n2</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = n1 / n2</span><br><span class="line">            s.append(res)</span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>스택 - 자신보다 큰 원소 찾기</title>
    <url>/2023/07/21/Python/DataStructure/Stack/%EC%8A%A4%ED%83%9D-%EC%9E%90%EC%8B%A0%EB%B3%B4%EB%8B%A4-%ED%81%B0-%EC%9B%90%EC%86%8C-%EC%B0%BE%EA%B8%B0/%EC%8A%A4%ED%83%9D-%EC%9E%90%EC%8B%A0%EB%B3%B4%EB%8B%A4-%ED%81%B0-%EC%9B%90%EC%86%8C-%EC%B0%BE%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>참조: <a href="https://www.geeksforgeeks.org/next-greater-element/">https://www.geeksforgeeks.org/next-greater-element/</a></p>
<p>음이 아닌 정수 배열이 주어졌을 때, 각 원소의 오른쪽에 있는 원소 중에서 현재 원소보다 큰 값을 출력하되, 가장 근접한 원소를 출력하라. 현재 원소보다 큰 값이 없으면 -1을 출력하라.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">예시 1</span><br><span class="line"></span><br><span class="line">입력: [4, 5, 2, 25]</span><br><span class="line">출력:</span><br><span class="line">4 --&gt; 5</span><br><span class="line">5 --&gt; 25</span><br><span class="line">2 --&gt; 25</span><br><span class="line">25 --&gt; -1</span><br><span class="line">예시 2</span><br><span class="line"></span><br><span class="line">입력: [13, 7, 6, 12]</span><br><span class="line">출력:</span><br><span class="line">13 --&gt; -1</span><br><span class="line">7 --&gt; 12</span><br><span class="line">6 --&gt; 12</span><br><span class="line">12 --&gt; -1</span><br></pre></td></tr></table></figure>

<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><h3 id="이중반복문"><a href="#이중반복문" class="headerlink" title="이중반복문"></a>이중반복문</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">int_arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(int_arr)):</span><br><span class="line">        <span class="built_in">int</span> = int_arr[i]</span><br><span class="line">        result = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(int_arr)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span> &lt; int_arr[j]:</span><br><span class="line">                result = int_arr[j]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>&#125;</span> --&gt; <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="스택"><a href="#스택" class="headerlink" title="스택"></a>스택</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>*by_stack(int_arr):</span><br><span class="line">    n = <span class="built_in">len</span>(int_arr)</span><br><span class="line">    s = []</span><br><span class="line">    res = [-<span class="number">1</span> <span class="keyword">for</span> * <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(int_arr))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> s:</span><br><span class="line">            <span class="keyword">if</span> s[-<span class="number">1</span>] &gt; int_arr[i]:</span><br><span class="line">                res[i] = s[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s.pop()</span><br><span class="line">        s.append(int_arr[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;int_arr[i]&#125;</span> --&gt; <span class="subst">&#123;res[i]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>현재 원소와 오른쪽 원소를 비교하므로, 오른쪽에서 왼쪽으로 이동하면서 비교하면 수월하다.</li>
<li>문제에서 요구하는 것은 현재 원소의 오른쪽 값 중 가장 가까운 값이므로, 오른쪽 부터 왼쪽으로 가면서 원소를 저장했다면 꺼낼 때는 <code>역순으로 꺼내서 비교한다.</code></li>
</ul>
<ol>
<li>stack을 빈 상태로 초기화</li>
<li>res 배열을 -1로 배열 길이 만큼 초기화</li>
<li>역순으로 순회를 하면서 stack이 비어있으면, 원소를 추가한다.</li>
<li>만약 stack에 값이 있다면, 스택의 값들과 현재 원소를 비교한다.</li>
<li>스택의 값이 크다면 해당 원소의 index에 위치하는 res 배열에 스택의 값을 할당하고 해당 원소를 stack 저장</li>
<li>다음 순회</li>
<li>만약 스택의 값이 작다면 stack에 마지막 값을 <code>pop</code>한다.</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 내부 경계(border) 적용하기</title>
    <url>/2023/07/22/CSS/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/CSS-%EB%82%B4%EB%B6%80-%EA%B2%BD%EA%B3%84-border-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="내부-경계-border-효과-주기"><a href="#내부-경계-border-효과-주기" class="headerlink" title="내부 경계(border) 효과 주기"></a>내부 경계(border) 효과 주기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><img src="/../../../images/inner_border.png" alt="문제사진"></p>
<p>CSS로 작업을 하다가 경계가 검정색 바탕 부분과 border에 약간의 단차가 생기는 문제가 있었다.</p>
<p>마크업 구조는 다음과 같다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>나의 자산 목표 금액 계산기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>목표 금액 계산기란?<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>h2 태그에 배경색이 검정색이다.</li>
<li>h2 태그와 형제태그인 div 태그에 보더를 주었더니 단차가 생겼다.</li>
</ul>
<h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> gray inset;</span><br></pre></td></tr></table></figure>

<ul>
<li>box-shadow 효과를 inset으로 주어서 보더 처럼 보이도록 구현했다.</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>큐 - 개념 및 설명</title>
    <url>/2023/07/23/Python/DataStructure/Queue/%ED%81%90-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/</url>
    <content><![CDATA[<h1 id="Queue-큐-란"><a href="#Queue-큐-란" class="headerlink" title="Queue(큐)란?"></a>Queue(큐)란?</h1><p>큐는 대기행렬(줄)이다.</p>
<p>우리가 무언가를 사거나 장소에 들어갈 때 줄을 선 순서를 생각하면 된다.</p>
<p>많은 양의 자료를 프린터로 출력한다 했을 때, 프린터 상태창을 보면 출력할 자료가 순서대로 들어가있고 <strong>들어간 순서대로 출력되는 것을 알 수 있다.</strong></p>
<p><img src="/../../../../images/queue.png" alt="queue"></p>
<p>스택이 한쪽입구가 막힌 상자에 자료를 차곡차곡 쌓는 것이라면, 큐는 입구와 출구가 따로 있는 통로로서 한쪽에서 밀어 넣으면 반대쪽에서 나오는 것이다.</p>
<ul>
<li>큐에서는 <code>head</code> 대신 <code>front</code>, <code>tail</code> 대신 <code>rear(or back)</code> 이라 한다.</li>
<li><code>enqueue</code>: 가장 마지막에 자료를 넣는 것으로 위 그림에서 연결리스트의 <code>append()</code>와 같다.</li>
<li><code>dequeue</code>: 가장 먼저 들어간 자료를 꺼내는 것으로 연결리스트의 <code>popLeft()</code>와 같다.</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>큐</tag>
      </tags>
  </entry>
  <entry>
    <title>큐 - 클래스로 구현하기</title>
    <url>/2023/07/24/Python/DataStructure/Queue/%ED%81%90-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="Queue-클래스로-구현하기"><a href="#Queue-클래스로-구현하기" class="headerlink" title="Queue 클래스로 구현하기"></a>Queue 클래스로 구현하기</h1><p><img src="/../../../../images/en,dequeue.png" alt="enqueue와 dequeue"></p>
<ul>
<li>Queue는 입구가 <code>rear</code>이고 출구가 <code>front</code>이다.</li>
<li>입구쪽에서 데이터를 추가하는 것을 <code>enqueue</code>라고 한다.</li>
<li>출구쪽에서 데이터를 제거하는 것을 <code>dequeue</code>라고 한다.</li>
</ul>
<h3 id="노드-삽입할-때"><a href="#노드-삽입할-때" class="headerlink" title="노드 삽입할 때,"></a>노드 삽입할 때,</h3><ul>
<li>빈 Queue이면 front, rear가 모두 첫 노드를 가리킨다.</li>
<li>빈 Queue가 아니면, rear의 next가 새 노드를 가리키고 rear를 새 노드로 옮긴다.</li>
</ul>
<h3 id="노드-꺼낼-때"><a href="#노드-꺼낼-때" class="headerlink" title="노드 꺼낼 때,"></a>노드 꺼낼 때,</h3><ul>
<li>빈 Queue가 되면, front, rear는 모두 None을 가리킨다.</li>
<li>Queue에 노드가 남아있으면 front를 front의 next로 옮긴다.</li>
</ul>
<h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.front = <span class="literal">None</span></span><br><span class="line">        self.rear = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.front == <span class="literal">None</span>:</span><br><span class="line">            self.front = node</span><br><span class="line">            self.rear = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.rear.<span class="built_in">next</span> = node</span><br><span class="line">            self.rear = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self,data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.front == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.front</span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            self.front = <span class="literal">None</span></span><br><span class="line">            self.rear = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.front = self.front.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> node.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.front == <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>DataStructure</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>큐</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript - 객체의 key 값에 유니온 타입 선언하기</title>
    <url>/2023/07/25/TypeScript/TypeScript-%EA%B0%9D%EC%B2%B4%EC%9D%98-key-%EA%B0%92%EC%97%90-%EC%9C%A0%EB%8B%88%EC%98%A8-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="객체의-key-값에-유니온-타입-선언하기"><a href="#객체의-key-값에-유니온-타입-선언하기" class="headerlink" title="객체의 key 값에 유니온 타입 선언하기"></a>객체의 key 값에 유니온 타입 선언하기</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfoType = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: userInfoType]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/key_union.png" alt="유니온 타입 에러"></p>
<ul>
<li>“인덱스 시그니처 매개변수는 리터럴 타입이나 제네릭 타입이 될 수 없다.”는 에러가 발생했다.</li>
<li>매핑된 객체를 대신 사용하라고 알려준다.</li>
</ul>
<h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfoType = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userType = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> userInfoType]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: userType = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;홍길동&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&quot;서울&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>타입스크립트</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - input 포커스 시 placeholder 사라지게 하기</title>
    <url>/2023/07/26/CSS/CSS-input-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%EC%8B%9C-placeholder-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<p>input에 입력값을 입력하기 전까지 placeholder는 사라지지 않는다.</p>
<p>이는 input 창이 포커싱되어있는지 헷갈리게 할 수 있어 UX를 떨어뜨릴 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-webkit-input-placeholder,</span><br><span class="line">textarea:focus::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="comment">/* WebKit browsers */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>:-moz-placeholder,</span><br><span class="line">textarea:focus:-moz-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-moz-placeholder,</span><br><span class="line">textarea:focus::-moz-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>:-ms-input-placeholder,</span><br><span class="line">textarea:focus:-ms-input-placeholder &#123;</span><br><span class="line">  <span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>크로스 브라우징을 고려하여 CSS를 추가해주었다.</li>
<li>포커스가 되었을 때, placeholder 색상을 투명하게 설정하도록 해준다.</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Recharts 커스터마이징 도전기 1</title>
    <url>/2023/07/27/Daily/Recharts-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%8F%84%EC%A0%84%EA%B8%B0-1/</url>
    <content><![CDATA[<p>서비스가 주식 관련 서비스이다 보니 차트를 사용할 일이 잦다.</p>
<p>차트를 직접 구현하자니 너무 공수가 많이 들 것 같아 Recharts 라이브러리를 자주 사용하고 있다.</p>
<p>하지만 공식문서에서 모든게 나와있지 않아서 ChatGPT의 도움도 많이 받고 있다. 그래도 꽤 쓸만한 라이브러리이다.</p>
<p>오늘은 Recharts 라이브러리로 legend에 hover했을 때, hover된 데이터만 highlight 되도록 구현해볼 것이다.</p>
<p><img src="/../../images/chart1.png" alt="chart"></p>
<p>우선 기본적인 Line 차트를 렌더링한다.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">XAxis</span>,</span><br><span class="line">  <span class="title class_">YAxis</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page A&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">4000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">2400</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2400</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page B&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">1398</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2210</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page C&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">9800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2290</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page D&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2780</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">3908</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page E&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">1890</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">4800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2181</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page F&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">2390</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">3800</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2500</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Page G&quot;</span>,</span><br><span class="line">    <span class="attr">uv</span>: <span class="number">3490</span>,</span><br><span class="line">    <span class="attr">pv</span>: <span class="number">4300</span>,</span><br><span class="line">    <span class="attr">amt</span>: <span class="number">2100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MultiLineCharts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = <span class="title function_">useState</span>(&#123; <span class="attr">uv</span>: <span class="number">1</span>, <span class="attr">pv</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dataKey &#125; = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mappedObj = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params">o</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dataKey &#125; = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mappedObj = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&#123;300&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LineChart</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height</span>=<span class="string">&#123;300&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">data</span>=<span class="string">&#123;data&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">margin</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">top:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">right:</span> <span class="attr">30</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">bottom:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">XAxis</span> <span class="attr">dataKey</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">YAxis</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;monotone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&quot;pv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity.pv&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&quot;#8884d8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;&#123;</span> <span class="attr">r:</span> <span class="attr">8</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;monotone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&quot;uv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity.uv&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&quot;#82ca9d&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MultiLineCharts</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Line</code> 그래프의 <code>opacity</code>를 <code>useState로</code> 관리한다.</li>
<li><code>Legend에</code> <code>onMouseEnter</code>, <code>onMouseLeave</code> 이벤트를 할당한다.</li>
<li>여기서 유저가 이벤트를 발생시킨 요소만 <code>opacity</code>를 두고 나머지 데이터들의 <code>opacity</code>를 줄여주기 위해 <code>opacity</code> 객체를 재구성했다.</li>
<li><code>Object.entries()</code>와 <code>reduce()</code>를 사용하여 편리하게 객체를 재구성할 수 있다.</li>
</ul>
<h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/../../images/chart_hover1.png" alt="hover chart"></p>
<ul>
<li>보라색 Legend Hover 시</li>
</ul>
<p><img src="/../../images/chart_hover2.png" alt="hover_chart2"></p>
<ul>
<li>연두색 Legend Hover 시</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Recharts</tag>
      </tags>
  </entry>
  <entry>
    <title>Recharts - Legend 커스터마이징</title>
    <url>/2023/07/29/Daily/Recharts-Legend-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/</url>
    <content><![CDATA[<p>저번 포스팅 때, Legend에 hover했을 때, 해당 데이터만 highlight 되도록 구현을 했다.</p>
<p>이번에는 Legend를 커스터마이징하여 색상도 바꿔보도록 하려고한다.</p>
<h3 id="1-CustomLegend-컴포넌트"><a href="#1-CustomLegend-컴포넌트" class="headerlink" title="1. CustomLegend 컴포넌트"></a>1. CustomLegend 컴포넌트</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>예시를 위해 타입은 any로 설정하였다.</li>
<li>Legend의 각 li에 mouse 이벤트를 할당하였다.</li>
<li>마우스 이벤트는 호버된 데이터를 제외한 데이터들의 opacity를 줄여서 해당 데이터만 highlight 되도록 한다.</li>
</ul>
<h3 id="2-CustomLegend의-props"><a href="#2-CustomLegend의-props" class="headerlink" title="2. CustomLegend의 props"></a>2. CustomLegend의 props</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">    key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">    prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>그런데, 해당 데이터에 호버를 해도 모든 데이터의 opacity가 줄어드는 문제가 발생했다.</p>
<p>그 이유는 Legend에서의 props와 customLegend의 props가 달라서 mouse 이벤트가 잘못 동작했기 때문이다.</p>
<ul>
<li>이전 mouse 이벤트에서는 props안에 dataKey 속성으로 호버된 데이터 값을 가져올 수 있었다.</li>
<li>하지만 customLegend에서는 props에 너무나도 많은 속성이 있었고 이 중 나는 target속성의 innerHTML 속성으로 호버된 데이터의 dataKey를 확인하는 로직을 구성하였다.</li>
</ul>
<h3 id="3-전체-코드"><a href="#3-전체-코드" class="headerlink" title="3. 전체 코드"></a>3. 전체 코드</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">Line</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">  <span class="title class_">ResponsiveContainer</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;recharts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&quot;styles/colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; payload, onMouseEnter, onMouseLeave &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((entry: any, index: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseEnter</span>=<span class="string">&#123;onMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onMouseLeave</span>=<span class="string">&#123;onMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">listStyle:</span> &quot;<span class="attr">none</span>&quot;, <span class="attr">color:</span> <span class="attr">colors.GRAPH</span>[`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`] &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;entry.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NewPortChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [opacity, setOpacity] = useState&lt;<span class="built_in">any</span>&gt;(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseEnter</span> = (<span class="params">o: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> dataKey = o.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span></span><br><span class="line">      key === dataKey ? [key, <span class="number">1</span>] : [key, <span class="number">0.2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseLeave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(opacity).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">mappedObj</span>: <span class="built_in">any</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = curr;</span><br><span class="line">      prev = &#123; ...prev, [key]: value &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mappedOpacity = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data[<span class="number">0</span>]).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">      prev = &#123; ...prev, [curr]: <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    <span class="title function_">setOpacity</span>(mappedOpacity);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResponsiveContainer</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LineChart</span> <span class="attr">width</span>=<span class="string">&#123;857&#125;</span> <span class="attr">height</span>=<span class="string">&#123;440&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Legend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">align</span>=<span class="string">&quot;right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">verticalAlign</span>=<span class="string">&quot;middle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">content</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;<span class="attr">CustomLegend</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseEnter</span>=<span class="string">&#123;handleMouseEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;Object.keys(data[0]).map((key, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Line</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;linear&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dataKey</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeOpacity</span>=<span class="string">&#123;opacity[key]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">strokeLinecap</span>=<span class="string">&quot;round&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">stroke</span>=<span class="string">&#123;colors.GRAPH[</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeDot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">dot</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LineChart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResponsiveContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NewPortChart</span>;</span><br></pre></td></tr></table></figure>

<h4 id="기본-CustomLegend"><a href="#기본-CustomLegend" class="headerlink" title="기본 CustomLegend"></a>기본 CustomLegend</h4><p><img src="/../../images/customLegend1.png" alt="기본 customlegend"></p>
<h4 id="Hover된-데이터만-highlight"><a href="#Hover된-데이터만-highlight" class="headerlink" title="Hover된 데이터만 highlight"></a>Hover된 데이터만 highlight</h4><p><img src="/../../images/customLegend2.png" alt="hover1"><br><img src="/../../images/customLegend3.png" alt="hover2"><br><img src="/../../images/customLegend4.png" alt="hover3"></p>
<h3 id="추가로…"><a href="#추가로…" class="headerlink" title="추가로…"></a>추가로…</h3><p>색상만 바꿀 것이였다면 왜 CustomLegend까지 쓰면서 복잡하게 시도를 했을까 궁금증이 들 수도 있다.</p>
<p>디자이너 요구사항이 Legend와 해당 Line 데이터 끝 부분을 선으로 연결해달라는 요청이 있었기 때문에 CustomLegend를 사용해보았다.</p>
<p>아직 해당 부분은 좀 더 고민이 필요하기 때문에 추후에 포스팅하도록 하겠다.</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Recharts</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript의 var, let, const 키워드에 대해 설명하라</title>
    <url>/2023/07/31/CS/JavaScript%EC%9D%98-var-let-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC/</url>
    <content><![CDATA[<h1 id="var-키워드"><a href="#var-키워드" class="headerlink" title="var 키워드"></a>var 키워드</h1><ul>
<li>함수레벨 스코프</li>
<li>생략 가능</li>
<li>변수 재선언, 재할당 가능</li>
<li>변수 호이스팅: 선언 이전에 참조할 수 있다.</li>
<li>전역 변수로 선언 시 전역 객체의 프로퍼티로 등록</li>
</ul>
<h1 id="let-키워드"><a href="#let-키워드" class="headerlink" title="let 키워드"></a>let 키워드</h1><ul>
<li>블록레벨 스코프</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let foo = 123; // 전역 변수</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let foo = 456; // 지역 변수</span><br><span class="line">  let bar = 456; // 지역 변수</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(foo); // 123</span><br><span class="line">console.log(bar); // ReferenceError: bar is not defined</span><br></pre></td></tr></table></figure>

<ul>
<li>재선언 불가</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">456</span>; <span class="comment">// 중복 선언 허용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">456</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;bar&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<h2 id="let-키워드의-호이스팅"><a href="#let-키워드의-호이스팅" class="headerlink" title="let 키워드의 호이스팅"></a>let 키워드의 호이스팅</h2><p><img src="/../../images/var%20hoisting.png"></p>
<p><code>var</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 동시에 일어난다.</p>
<p><img src="/../../images/let%20hoisting.png"></p>
<p>하지만 <code>let</code>, <code>const</code> 키워드로 선언된 변수는 선언단계와 초기화 단계가 분리되어 진행된다.</p>
<h1 id="const-키워드"><a href="#const-키워드" class="headerlink" title="const 키워드"></a>const 키워드</h1><ul>
<li>재할당, 재선언 불가</li>
<li>상수를 주로 사용</li>
<li>변수 자체를 재할당할 순 없지만 객체의 프로퍼티는 변경 가능하다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lee&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 변수는 재할당이 금지된다.</span></span><br><span class="line"><span class="comment">// user = &#123;&#125;; // TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 내용은 변경할 수 있다.</span></span><br><span class="line">user.<span class="property">name</span> = <span class="string">&quot;Kim&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user); <span class="comment">// &#123; name: &#x27;Kim&#x27; &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript의 변수란?</title>
    <url>/2023/07/30/CS/JavaScript%EC%9D%98-%EB%B3%80%EC%88%98%EB%9E%80?/</url>
    <content><![CDATA[<p>컴퓨터는 연산을 담당하는 CPU, 저장을 담당하는 메모리로 각각 역할이 나뉘어져있다.</p>
<p>연산결과를 재사용하기 위해서는 메모리에 저장하고 <strong>메모리 주소</strong>를 통해 연산결과가 저장된 메모리 공간에 접근이 가능하다.</p>
<blockquote>
<p>메모리 주소에 직접 접근하는 것은 위험하다. 가령 운영체제가 사용하고 있는 값을 변경하면 시스템을 멈추게 하는 치명적인 오류가 발생할 수 있기 때문에 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.</p>
</blockquote>
<p><span style="font-size:18px">변수란, 하나의 값을 저장하기 위해 확보한 메모리 공간 또는 메모리 공간을 식별하기 위해 붙힌 이름이다.</span></p>
<ul>
<li>변수는 인터프리터나 컴파일러를 통해 값이 저장된 메모리 주소로 치환되어 실행된다.</li>
<li>자바스크립트 엔진은 변수 이름과 매핑된 메모리 주소를 통해 메모리 공간에 접근하여 저장된 값을 반환한다.</li>
</ul>
<h2 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h2><p>변수는 선언단계에서 변수 이름을 등록하여 자바스크립트 엔진에게 변수의 존재를 알린다.</p>
<p>또한 초기화 단계에서 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(score); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> score;</span><br></pre></td></tr></table></figure>

<p><span style="font-size:18px">모든 선언문은 런타임 이전에 먼저 실행된다.</span></p>
<h2 id="변수-할당"><a href="#변수-할당" class="headerlink" title="변수 할당"></a>변수 할당</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">score = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>변수 할당단계는 변수에 값을 저장하는 것을 말한다.</p>
<ul>
<li>선언과 할당이 한줄에 있어도 선언과 할당이 실행되는 시점이 다르다.</li>
<li><strong>값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임때 실행된다.</strong></li>
</ul>
<blockquote>
<p>변수에 값을 할당할 때, undefined가 있던 메모리 공간을 지우고 값을 저장하는 것이 아닌, 새로운 메모리 공간을 확보한 뒤 그곳에 새로운 값을 저장하고 해당 변수의 메모리 주소를 연결한다.</p>
</blockquote>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>변수</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 날짜 쉽게 다루기</title>
    <url>/2023/08/01/Daily/JavaScript-%EB%82%A0%EC%A7%9C-%EC%89%BD%EA%B2%8C-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</url>
    <content><![CDATA[<p>자바스크립트에서 날짜는 Date 객체로 다루곤 한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Tue Aug 01 2023 22:32:45 GMT+0900 (Korean Standard Time)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>1970년 1월 1일 UTC(국제표준시) 자정으로부터 지난 시간을 밀리초로 나타낸다.</li>
</ul>
<p>Date 객체도 다양한 메서드를 제공하는데, 개발자가 이를 다루기에 직관적이지 못하여 다루기가 까다롭다.</p>
<p>매번 chatGPT한테 물어볼 수도 없고 ..ㅎㅎ</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = today.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">const</span> day = today.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="keyword">const</span> month = today.<span class="title function_">getMonth</span>();</span><br><span class="line"><span class="keyword">const</span> hours = today.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = today.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> ms = today.<span class="title function_">getMilliseconds</span>();</span><br><span class="line"><span class="keyword">const</span> sec = today.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(today); <span class="comment">// Tue Aug 01 2023 22:32:45 GMT+0900 (Korean Standard Time)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(day); <span class="comment">// 2 (0~6) 일 ~ 토</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(month); <span class="comment">// 7 (0~11)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hours); <span class="comment">// 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minutes); <span class="comment">// 32</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ms); <span class="comment">// 122</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sec); <span class="comment">// 45</span></span><br></pre></td></tr></table></figure>

<ul>
<li>day를 숫자로 표현해주고 있으니 직관적이지 못하다. 우리나라는 월요일부터 시작으로 세는 사람이 많은데 일요일부터 시작하니…</li>
<li>month도 왜 0부터 시작하는 것인지.. ㅋㅋ</li>
</ul>
<p>그래서 날짜를 좀 더 쉽게 다루기 위해 다양한 날짜 라이브러리가 나왔다.</p>
<p>오늘은 그 중 <code>date-fns</code> 라이브러리를 알아볼 것이다.</p>
<h1 id="date-fns"><a href="#date-fns" class="headerlink" title="date-fns"></a>date-fns</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install date-fns --save</span><br></pre></td></tr></table></figure>

<p>설치는 다음 명령어로 설치하면 된다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format, compareAsc &#125; <span class="keyword">from</span> <span class="string">&quot;date-fns&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">format</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">11</span>), <span class="string">&quot;MM/dd/yyyy&quot;</span>);</span><br><span class="line"><span class="comment">//=&gt; &#x27;02/11/2014&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dates = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1995</span>, <span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1987</span>, <span class="number">1</span>, <span class="number">11</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1989</span>, <span class="number">6</span>, <span class="number">10</span>),</span><br><span class="line">];</span><br><span class="line">dates.<span class="title function_">sort</span>(compareAsc);</span><br><span class="line"><span class="comment">//=&gt; [</span></span><br><span class="line"><span class="comment">//   Wed Feb 11 1987 00:00:00,</span></span><br><span class="line"><span class="comment">//   Mon Jul 10 1989 00:00:00,</span></span><br><span class="line"><span class="comment">//   Sun Jul 02 1995 00:00:00</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>format 메서드를 사용하여 날짜를 원하는 형식으로 바꿀 수 있다.</li>
</ul>
<p>그 외에도 날짜를 서로 비교하여 우선순위를 매기거나 날짜를 더하고 뺄 수 있는 등 다양한 메서드를 사용하여 자유자재로 날짜를 다룰 수 있다.</p>
<p>예시로 날짜를 빼주는 메서드인 sub메서드만 알아보자.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Subtract the following duration from 15 June 2017 15:29:20</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sub</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">29</span>, <span class="number">20</span>), &#123;</span><br><span class="line">  <span class="attr">years</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">months</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">weeks</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">days</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">hours</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">minutes</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">seconds</span>: <span class="number">30</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//=&gt; Mon Sep 1 2014 10:19:50</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2017년에서 2년을 뺀다.</li>
<li>6월에서 9개월을 뺀다.</li>
<li>15일에서 1주일(7일)을 뺀다</li>
<li>나머지 8일에서 7일을 뺀다.</li>
<li>15시간에서 5시간을 뺀다.</li>
<li>29분에서 9분을 뺀다.</li>
<li>20초에서 30초를 뺀다.</li>
</ul>
<p>결과값은 2014년 9월 1일 월요일 10시 19분 50초가 나온다.</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>date-fns</tag>
      </tags>
  </entry>
  <entry>
    <title>원하는 요소를 제외한 영역 클릭 시 함수 실행하기</title>
    <url>/2023/08/02/Daily/%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%A0%9C%EC%99%B8%ED%95%9C-%EC%98%81%EC%97%AD-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<p>흔히 웹을 사용하면서 select 태그를 클릭해서 options 들이 나타났을 때, select 태그 내부의 option을 클릭하면 해당 option이 선택되고, option 외부를 클릭했을 때, 나타났던 option들이 사라지도록 구현된 웹을 많이 경험했을 것이다.</p>
<p>나도 그래프를 CustomLegend의 요소를 클릭했을 때, 클릭한 Legend의 Line 그래프를 highlight 시켜주고, CustomLegend 내부의 요소 이외의 영역을 클릭했을 때, 클릭한 요소를 해제하도록 구현해보았다.</p>
<h3 id="1-선택된-그래프의-x축-값을-상태로-관리한다"><a href="#1-선택된-그래프의-x축-값을-상태로-관리한다" class="headerlink" title="1. 선택된 그래프의 x축 값을 상태로 관리한다."></a>1. 선택된 그래프의 x축 값을 상태로 관리한다.</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [clickedGraph, setClickedGraph] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-CustomLegend에-이벤트-위임을-해준다"><a href="#2-CustomLegend에-이벤트-위임을-해준다" class="headerlink" title="2. CustomLegend에 이벤트 위임을 해준다."></a>2. CustomLegend에 이벤트 위임을 해준다.</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomLegend</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;CUSTOM_LEGEND&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;payload.map((elem) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elem.name&#125;</span>&gt;</span>&#123;elem.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>CustomLegend의 ul 태그에 id를 부여한다.</li>
<li>li 요소를 클릭 이벤트를 이벤트 위임을 통해 이벤트 발생을 캐치할 수 있다.</li>
</ul>
<h3 id="3-이벤트-핸들러-생성"><a href="#3-이벤트-핸들러-생성" class="headerlink" title="3. 이벤트 핸들러 생성"></a>3. 이벤트 핸들러 생성</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickGraph</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = e.<span class="property">target</span>.<span class="property">innerHTML</span>;</span><br><span class="line">  <span class="title function_">setClickedGraph</span>(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickOutside</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> parentElem = e.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!targetElem.<span class="title function_">closest</span>(<span class="string">&quot;#CUSTOM_LEGEND&quot;</span>)) &#123;</span><br><span class="line">    <span class="title function_">setClickedGraph</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>클릭이벤트가 발생한 요소의 가장 가까운 요소 중 id가 <code>CUSTOM_LEGEND</code>인 요소가 없으면 clickedGraph의 값을 빈 값으로 초기화 시킨다.</li>
</ul>
<h3 id="4-브라우저에-이벤트-등록"><a href="#4-브라우저에-이벤트-등록" class="headerlink" title="4. 브라우저에 이벤트 등록"></a>4. 브라우저에 이벤트 등록</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClickOutside);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClickOutside);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>내가 지정한 영역은 ul 태그 안이고 내가 지정하지 않은 외부의 영역을 모두 다루기 위해서는 브라우저에 이벤트를 등록해줘야한다.</li>
<li>useEffect는 함수형 컴포넌트에서 리액트 컴포넌트의 라이프사이클에 원하는 함수를 실행할 수 있도록 도와주는 훅이다.<ul>
<li>return으로 함수를 반환하면 해당 함수는 컴포넌트가 소멸할 때, 실행된다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>렌더링 되기 이전에 브라우저에 이벤트를 등록해주고 해당 컴포넌트가 소멸할 때, 이벤트를 제거해줘야 컴포넌트가 렌더링 될 때마다 이벤트가 중복으로 등록되지 않아 성능상 문제를 해결할 수 있다.</p>
</blockquote>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>이벤트 위임</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML이란?</title>
    <url>/2023/08/03/Daily/HTML%EC%9D%B4%EB%9E%80/</url>
    <content><![CDATA[<h1 id="HTML5-역사"><a href="#HTML5-역사" class="headerlink" title="HTML5 역사"></a>HTML5 역사</h1><ul>
<li><p>W3C가 XHTML 2.0을 만들고 있었는데 하위 호환상 문제가 있어서 개발을 접었다</p>
</li>
<li><p>이후 2004년 브라우저 3대장(애플,모질라,오페라 sw)이 공동으로 설립한 WHATWG(Web Hypertext Application Technology Working Group)가 W3C와 별개로 Web Application 1.0과 Web Forms 2.0 만들어 냈다.</p>
</li>
<li><p>그리하여 WHATWG의 표준안을 대부분 수용하여 HTML5가 탄생하게 되었다.</p>
</li>
<li><p>초기의 웹은 단순히 하이퍼텍스트 문서(HTML)를 웹 브라우저에 나타내는 수준으로, 웹표준 기술이 지원하지 못하는 부분을 비표준적인 태그들과 Active X, Flash, Flex, SilverLight 등의 써드파티(Third Party) 플러그인이 대신하였다.</p>
</li>
<li><p>이로 인해 여러 웹브라우저별로 화면이 다르게 보이거나 특정 웹브라우저에서만 동작하는 웹 애플리케이션이 만들어지는 등 각종 호환성 문제가 발생하였습니다. 그 결과 개발자에게는 개발의 어려움을, 사용자에게는 웹 브라우저 선택 제한과 각종 플러그인의 설치라는 불편함을 안겨주었다.</p>
</li>
<li><p>이러한 문제점과 기능적인 한계를 안고 있던 기존 HTML은 HTML5에서 새롭게 추가된 요소와 다양한 API들을 통해 한 단계 발전된 웹 구현과 접근성 및 호환성 극대화를 목표로 삼게 되었다.</p>
</li>
</ul>
<h2 id="XHTML과-HTML-차이점"><a href="#XHTML과-HTML-차이점" class="headerlink" title="XHTML과 HTML 차이점"></a>XHTML과 HTML 차이점</h2><p>둘다 표준이지만 문법이 다르다. XHTML이 조금 더 엄격한 특징을 가진다.</p>
<p>XHTML은 XML로 재구성된 문법이다.</p>
<table>
<thead>
<tr>
<th>HTML</th>
<th>XHTML</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>DOCTYPE 반드시 명시</td>
</tr>
<tr>
<td></td>
<td><code>&lt;html&gt;</code> 태그의 xmlns 속성 반드시 명시</td>
</tr>
<tr>
<td><code>&lt;img&gt;</code></td>
<td><code>&lt;img /&gt;</code></td>
</tr>
<tr>
<td>대소문자 구분 x</td>
<td>태그는 반드시 소문자 사용</td>
</tr>
<tr>
<td></td>
<td>반드시 하나의 root 요소를 포함해야 한다.</td>
</tr>
<tr>
<td></td>
<td>속성 이름도 반드시 소문자 사용</td>
</tr>
<tr>
<td></td>
<td>속성값 반드시 따옴표로 감싼다</td>
</tr>
<tr>
<td>속성값 생략 가능 <code>&lt;input checked&gt;</code></td>
<td>속성값 생략 불가 <code>&lt;input checked = “check” /&gt;</code></td>
</tr>
<tr>
<td></td>
<td><code>&lt;img&gt;</code> 태그에 alt 반드시 명시</td>
</tr>
<tr>
<td></td>
<td>텍스트는 반드시 태그로 감싸야한다.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>웹 폰트 적용하기</title>
    <url>/2023/08/04/Daily/%EC%9B%B9-%ED%8F%B0%ED%8A%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="1-import-방식으-CSS-최상단에-복붙"><a href="#1-import-방식으-CSS-최상단에-복붙" class="headerlink" title="1. @import 방식으 CSS 최상단에 복붙"></a>1. @import 방식으 CSS 최상단에 복붙</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.4/dist/web/static/pretendard.css&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="2-font-family-설정"><a href="#2-font-family-설정" class="headerlink" title="2. font-family 설정"></a>2. font-family 설정</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto,</span><br><span class="line">    <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Apple SD Gothic Neo&quot;</span>, <span class="string">&quot;Noto Sans KR&quot;</span>, <span class="string">&quot;Malgun Gothic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>font-family는 하나로 정해두고 굵기는 원하는 부분에서 font-weight로 조절한다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title>텍스트 말줄임표 처리</title>
    <url>/2023/08/05/Daily/%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%90%EC%A4%84%EC%9E%84%ED%91%9C-%EC%B2%98%EB%A6%AC/</url>
    <content><![CDATA[<h2 id="한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우"><a href="#한줄이-길어서-말줄임표-…-처리-해주고-싶을-경우" class="headerlink" title="한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우"></a>한줄이 길어서 말줄임표 (…) 처리 해주고 싶을 경우</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>

<h2 id="멀티라인인-경우"><a href="#멀티라인인-경우" class="headerlink" title="멀티라인인 경우"></a>멀티라인인 경우</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Webkit 기반 브라우저 (Chrome, Safari 등)에서 적용 가능하다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>hr 태그 사용하지 않고 가로선 스타일링 하기</title>
    <url>/2023/08/06/Daily/hr-%ED%83%9C%EA%B7%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EA%B0%80%EB%A1%9C%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h1><p>hr 태그는 콘텐츠 내용에서 주제가 바뀔 때, 사용하는 수평 가로선이다.</p>
<p>HTML 문서에서 주로 내용을 구분하거나 주제의 변화를 정의한다.</p>
<h2 id="HTML5에서-변경된-사항"><a href="#HTML5에서-변경된-사항" class="headerlink" title="HTML5에서 변경된 사항"></a>HTML5에서 변경된 사항</h2><ul>
<li>HTML5 이전에서는 단순히 가로선을 나타냈지만, HTML5에서는 주제의 흐름 변경을 나타내도록 변경되었다.</li>
<li>시각적인 의미보다는 의미적 용어(semantic term)로 사용된다.</li>
</ul>
<blockquote>
<p>또한, HTML5에서는 hr 요소의 layout을 더 이상 지원하지 않으며 CSS를 대신 사용하도록 변경되었다.</p>
</blockquote>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span> <span class="built_in">linear-gradient</span>(to right, <span class="number">#aaa</span>, <span class="number">#fff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>news라는 클래스의 가상 선택자로 css 스타일링 해줄 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>flex vs inline-flex</title>
    <url>/2023/08/07/Daily/flex-vs-inline-flex/</url>
    <content><![CDATA[<h1 id="flex-vs-inline-flex"><a href="#flex-vs-inline-flex" class="headerlink" title="flex vs inline-flex"></a>flex vs inline-flex</h1><ul>
<li>flex로 지정된 flex container는 block 요소 성향</li>
<li>inline-flex로 지정된 inline-flex container는 inline 요소 성향</li>
</ul>
<p><img src="/../../images/inline_flex.png" alt="inline-flex"></p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>inline-flex</tag>
      </tags>
  </entry>
  <entry>
    <title>컨테이닝 블록 구분하기</title>
    <url>/2023/08/08/Daily/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%8B%9D-%EB%B8%94%EB%A1%9D-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="컨테이닝-블록"><a href="#컨테이닝-블록" class="headerlink" title="컨테이닝 블록"></a>컨테이닝 블록</h1><ul>
<li>요쇼의 크기, 위치를 결정하는 요인이다.</li>
<li><code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code> 속성값과 절대적 위치(<code>absolute</code>, <code>fixed</code>)로 설정된 요소의 offset 속성값은 자신의 컨테이닝 블록으로부터 계산된다.</li>
<li>대부분의 경우 요소의 컨테이닝 블록이 가장 가까운 블록 레벨 조상의 컨텐츠 영역이지만 <span style="color:red">예외가 있다.</span></li>
</ul>
<h2 id="컨테이닝-블록-식별"><a href="#컨테이닝-블록-식별" class="headerlink" title="컨테이닝 블록 식별"></a>컨테이닝 블록 식별</h2><p>position의 속성에 따라 완전히 달라진다.</p>
<h3 id="1-position-속성이-static-relative-sticky-인-경우"><a href="#1-position-속성이-static-relative-sticky-인-경우" class="headerlink" title="1. position 속성이 static, relative, sticky 인 경우"></a>1. position 속성이 static, relative, sticky 인 경우</h3><ul>
<li>컨테이닝 블록은 가장 가까운 조상 블록 컨테이너 또는 서식 맥락을 형성하는 조상 요소(<code>flex</code>,<code>table</code>,<code>grid</code>)의 컨텐츠 영역 경계를 따라 형성된다.</li>
</ul>
<h3 id="2-position-속성이-absolute-인-경우"><a href="#2-position-속성이-absolute-인-경우" class="headerlink" title="2. position 속성이 absolute 인 경우"></a>2. position 속성이 absolute 인 경우</h3><ul>
<li>컨테이닝 블록은 속성값이 <code>static</code>이 아닌 가장 가까운 조상의 내부 여백 영역</li>
<li>그래서 주로 조상 영역에 <code>relative</code>를 추가하여 조상을 기준으로 position을 조절한다.</li>
</ul>
<h3 id="3-position-속성이-fixed-인-경우"><a href="#3-position-속성이-fixed-인-경우" class="headerlink" title="3. position 속성이 fixed 인 경우"></a>3. position 속성이 fixed 인 경우</h3><ul>
<li>컨테이닝 블록은 <code>viewport</code>, 페이지 영역이다.</li>
</ul>
<h3 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h3><p>position 속성이 absolute, fixed 인 경우, 다음 조건을 만족하는 가장 가까운 조상 내부 영역이 컨테이닝 블록이 될 수 있다.</p>
<ol>
<li><p>transform이나 perspective 속성이 none이 아닐 때, transform 속성을 none으로 바꾸면 viewport 기준으로 바뀐다.</p>
</li>
<li><p>will-change 속성이 transform이나 perspective 일 때, will-change는 요소의 예상되는 변화의 힌트를 브라우저에게 제공한다.</p>
</li>
<li><p>filter 속성이 none이 아닐 때</p>
</li>
<li><p>contain 속성이 paint 일 때</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-absolute&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../images/containingBlock1.png" alt="컨테이닝 블록 예시"></p>
<ul>
<li>container 클래스에 아무런 값을 주지 않고 있어 p-absolute 값이 static이 아닌 조상 영역을 기준으로 위치하는데, static이 아닌 조상 요소가 없어서 최상위 브라우저를 기준으로 위치해있다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective:0; */</span></span><br><span class="line">  <span class="comment">/*   transform: rotate(0deg); */</span></span><br><span class="line">  <span class="comment">/*   perspective: 10px; */</span></span><br><span class="line">  <span class="comment">/*   will-change: perspective; */</span></span><br><span class="line">  <span class="comment">/*   will-change: transform; */</span></span><br><span class="line">  <span class="comment">/*   filter:opacity(); */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p-absolute</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/containingBlcok2.png" alt="컨테이닝 블록 예시2"></p>
<ul>
<li>앞서 설명한 예외를 추가하면 position:relative를 추가한 것과 똑같이 동작하게 된다.</li>
<li>해당 속성을 가진 요소를 기준으로 위치를 조절한다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>컨테이닝블록</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid Layout 알아보기</title>
    <url>/2023/08/09/Daily/Grid-Layout-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/</url>
    <content><![CDATA[<p>푸터를 만들 때, Grid를 사용하여 설계를 해보자.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item grid-item3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">2</span>/<span class="number">2</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/grid.png" alt="Grid 레이아웃"></p>
<ul>
<li>전체적인 레이아웃은 grid를 사용하고 내부의 세부적인 레이아웃은 flex를 사용한다.</li>
<li>grid 내부의 크기를 grid-area로 지정할 수 있다.</li>
<li>grid-area: 열,행</li>
<li>grid는 <code>margin-collapse</code> 일어나지 않는다.</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Grid</tag>
      </tags>
  </entry>
</search>
